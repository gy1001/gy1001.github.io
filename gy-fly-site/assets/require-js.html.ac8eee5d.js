import{r as o,o as p,c as i,a as n,b as e,F as r,e as t,d as s}from"./app.5054972b.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const c={},u=t('<h1 id="require-js" tabindex="-1"><a class="header-anchor" href="#require-js" aria-hidden="true">#</a> Require.js</h1><h2 id="home-\u4E3B\u9875" tabindex="-1"><a class="header-anchor" href="#home-\u4E3B\u9875" aria-hidden="true">#</a> Home \u4E3B\u9875</h2><p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments, like Rhino and Node. Using a modular script loader like RequireJS will improve the speed and quality of your code.</p><p>RequireJS \u662F\u4E00\u4E2A JavaScript \u6587\u4EF6\u548C\u6A21\u5757\u52A0\u8F7D\u5668\u3002\u5B83\u9488\u5BF9\u6D4F\u89C8\u5668\u5185\u4F7F\u7528\u8FDB\u884C\u4E86\u4F18\u5316\uFF0C\u4F46\u53EF\u4EE5\u5728\u5176\u4ED6 JavaScript \u73AF\u5883\u4E2D\u4F7F\u7528\uFF0C\u4F8B\u5982 Rhino \u548C Node\u3002\u4F7F\u7528\u50CF RequireJS \u8FD9\u6837\u7684\u6A21\u5757\u5316\u811A\u672C\u52A0\u8F7D\u5668\u5C06\u63D0\u9AD8\u4EE3\u7801\u7684\u901F\u5EA6\u548C\u8D28\u91CF\u3002</p><p>\u517C\u5BB9\u6027\u4E5F\u975E\u5E38\u597D</p><p>IE 6+ .......... \u517C\u5BB9 \u2714</p><p>Firefox 2+ ..... \u517C\u5BB9 \u2714</p><p>Safari 3.2+ .... \u517C\u5BB9 \u2714</p><p>Chrome 3+ ...... \u517C\u5BB9 \u2714</p><p>Opera 10+ .. ....\u517C\u5BB9 \u2714</p><h2 id="start-\u5F00\u59CB" tabindex="-1"><a class="header-anchor" href="#start-\u5F00\u59CB" aria-hidden="true">#</a> Start \u5F00\u59CB</h2><h3 id="\u83B7\u53D6-requirejs" tabindex="-1"><a class="header-anchor" href="#\u83B7\u53D6-requirejs" aria-hidden="true">#</a> \u83B7\u53D6 REQUIREJS</h3><p>Go to the download page and get the file.</p>',13),d=s("\u53BB"),m={href:"https://requirejs.org/docs/download.html",target:"_blank",rel:"noopener noreferrer"},h=s("\u4E0B\u8F7D\u9875\u9762"),k=s("\u83B7\u5F97\u6587\u4EF6"),b=t(`<h3 id="\u6DFB\u52A0-requirejs" tabindex="-1"><a class="header-anchor" href="#\u6DFB\u52A0-requirejs" aria-hidden="true">#</a> \u6DFB\u52A0 REQUIREJS</h3><p>This setup assumes you keep all your JavaScript files in a &quot;scripts&quot; directory in your project. For example, if you have a project that has a project.html page, with some scripts, the directory layout might look like so:</p><p>\u6B64\u8BBE\u7F6E\u5047\u5B9A\u60A8\u5C06\u6240\u6709 JavaScript \u6587\u4EF6\u90FD\u4FDD\u7559\u5728\u9879\u76EE\u7684&quot;scripts&quot;\u76EE\u5F55\u4E2D\u3002\u4F8B\u5982\uFF0C\u5982\u679C\u60A8\u6709\u4E00\u4E2A\u5305\u542B project.html \u9875\u9762\u7684\u9879\u76EE\uFF0C\u5176\u4E2D\u5305\u542B\u4E00\u4E9B\u811A\u672C\uFF0C\u5219\u76EE\u5F55\u5E03\u5C40\u53EF\u80FD\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>project-directory/
  project.html
  scripts/
    main.js
    require.js
  helper/
   util.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>To take full advantage of the optimization tool, it is suggested that you keep all inline script out of the HTML, and only reference require.js with a requirejs call like so to load your script:</p><p>\u4E3A\u4E86\u5145\u5206\u5229\u7528\u4F18\u5316\u5DE5\u5177\uFF0C\u5EFA\u8BAE\u60A8\u5C06\u6240\u6709\u5185\u8054\u811A\u672C\u90FD\u4FDD\u7559\u5728 HTML \u4E4B\u5916\uFF0C\u5E76\u4E14\u4EC5\u901A\u8FC7 requirejs \u8C03\u7528\u5F15\u7528 require.js \u5373\u53EF\u52A0\u8F7D\u811A\u672C\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My Sample Project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- data-main attribute tells require.js to load
             scripts/main.js after require.js loads. --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Sample Project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>You could also place the script tag end of the <code>&lt;body&gt;</code> section if you do not want the loading of the require.js script to block rendering. For browsers that support it, you could also add an async attribute to the script tag.</p><p>\u5982\u679C\u60A8\u4E0D\u60F3\u52A0\u8F7D require.js \u811A\u672C\u6765\u963B\u6B62\u6E32\u67D3\uFF0C\u4E5F\u53EF\u4EE5\u5C06 script \u6807\u7B7E\u653E\u5728<code>&lt;body&gt;</code>\u90E8\u5206\u7684\u672B\u5C3E\u3002\u5BF9\u4E8E\u652F\u6301\u5B83\u7684\u6D4F\u89C8\u5668\uFF0C\u60A8\u8FD8\u53EF\u4EE5\u5728 script \u6807\u7B7E\u4E2D\u6DFB\u52A0 async \u5C5E\u6027\u3002</p><p>Inside of main.js, you can use requirejs() to load any other scripts you need to run. This ensures a single entry point, since the data-main script you specify is loaded asynchronously.</p><p>\u5728 main.js \u5185\u90E8\uFF0C\u60A8\u53EF\u4EE5\u4F7F\u7528 requirejs()\u6765\u52A0\u8F7D\u9700\u8981\u8FD0\u884C\u7684\u5176\u4ED6\u811A\u672C\u3002\u8FD9\u786E\u4FDD\u4E86\u4E00\u4E2A\u5165\u53E3\u70B9\uFF0C\u56E0\u4E3A\u60A8\u6307\u5B9A\u7684\u6570\u636E\u4E3B\u811A\u672C\u662F\u5F02\u6B65\u52A0\u8F7D\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;helper/util&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">util</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//This function is called when scripts/helper/util.js is loaded.</span>
	<span class="token comment">//If util.js calls define(), then this function is not fired until</span>
	<span class="token comment">//util&#39;s dependencies have loaded, and the util argument will hold</span>
	<span class="token comment">//the module value for &quot;helper/util&quot;.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8FD9\u5C06\u52A0\u8F7D helper/util.js \u811A\u672C\u3002\u8981\u5145\u5206\u5229\u7528 RequireJS\uFF0C\u8BF7\u53C2\u9605 API \u6587\u6863\uFF0C\u4EE5\u4E86\u89E3\u6709\u5173\u5B9A\u4E49\u548C\u4F7F\u7528\u6A21\u5757\u7684\u66F4\u591A\u4FE1\u606F\u3002</p><h3 id="\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u4F18\u5316" aria-hidden="true">#</a> \u4F18\u5316</h3><p>Once you are finished doing development and want to deploy your code for your end users, you can use the optimizer to combine the JavaScript files together and minify it. In the example above, it can combine main.js and helper/util.js into one file and minify the result.</p><p>\u4E00\u65E6\u5B8C\u6210\u5F00\u53D1\u5E76\u5E0C\u671B\u4E3A\u6700\u7EC8\u7528\u6237\u90E8\u7F72\u4EE3\u7801\uFF0C\u5C31\u53EF\u4EE5\u4F7F\u7528\u4F18\u5316\u5668\u5C06 JavaScript \u6587\u4EF6\u7EC4\u5408\u5728\u4E00\u8D77\u5E76\u8FDB\u884C\u6700\u5C0F\u5316\u3002\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C\u5B83\u53EF\u4EE5\u5C06 main.js \u548C helper/util.js \u5408\u5E76\u5230\u4E00\u4E2A\u6587\u4EF6\u4E2D\u5E76\u6700\u5C0F\u5316\u7ED3\u679C\u3002</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528" aria-hidden="true">#</a> \u4F7F\u7528</h3><h4 id="\u52A0\u8F7D-javascript-\u6587\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u52A0\u8F7D-javascript-\u6587\u4EF6" aria-hidden="true">#</a> \u52A0\u8F7D JavaScript \u6587\u4EF6</h4><p>RequireJS takes a different approach to script loading than traditional <code>&lt;script&gt;</code> tags. While it can also run fast and optimize well, the primary goal is to encourage modular code. As part of that, it encourages using module IDs instead of URLs for script tags.</p><p>\u4E0E\u4F20\u7EDF\u7684<code>&lt;script&gt;</code>\u6807\u8BB0\u76F8\u6BD4\uFF0CRequireJS \u91C7\u7528\u4E86\u4E0D\u540C\u7684\u65B9\u6CD5\u6765\u52A0\u8F7D\u811A\u672C\u3002\u5C3D\u7BA1\u5B83\u8FD8\u53EF\u4EE5\u5FEB\u901F\u8FD0\u884C\u5E76\u4F18\u5316\u5F97\u5F88\u597D\uFF0C\u4F46\u4E3B\u8981\u76EE\u6807\u662F\u9F13\u52B1\u4F7F\u7528\u6A21\u5757\u5316\u4EE3\u7801\u3002\u4F5C\u4E3A\u5176\u4E00\u90E8\u5206\uFF0C\u5B83\u9F13\u52B1\u4F7F\u7528\u6A21\u5757 ID \u4EE3\u66FF\u811A\u672C\u6807\u8BB0\u7684 URL\u3002</p><p>RequireJS loads all code relative to a baseUrl.The baseUrl is normally set to the same directory as the script used in a data-main attribute for the top level script to load for a page.The data-main attribute is a special attribute that require.js will check to start script loading.This example will end up with a baseUrl of scripts:</p><p>RequireJS \u52A0\u8F7D\u76F8\u5BF9\u4E8E baseUrl \u7684\u6240\u6709\u4EE3\u7801\u3002\u901A\u5E38\uFF0C\u5C06 baseUrl \u8BBE\u7F6E\u4E3A\u4E0E data-main \u5C5E\u6027\u4E2D\u4F7F\u7528\u7684\u811A\u672C\u76F8\u540C\u7684\u76EE\u5F55\uFF0C\u4EE5\u4F7F\u9876\u7EA7\u811A\u672C\u52A0\u8F7D\u9875\u9762\u3002\u8BE5\u6570\u636E\u4E3B\u8981\u5C5E\u6027\u662F\u4E00\u4E2A\u7279\u6B8A\u7684\u5C5E\u6027\uFF0Crequire.js \u5C06\u68C0\u67E5\u542F\u52A8\u811A\u672C\u52A0\u8F7D\u3002\u672C\u793A\u4F8B\u5C06\u4EE5\u811A\u672C\u7684 baseUrl \u7ED3\u5C3E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>This sets the baseUrl to the <span class="token string">&quot;scripts&quot;</span> directory<span class="token punctuation">,</span> and
    loads a script that will have a module <span class="token constant">ID</span> <span class="token keyword">of</span> <span class="token string">&#39;main&#39;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script data<span class="token operator">-</span>main<span class="token operator">=</span><span class="token string">&quot;scripts/main.js&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;scripts/require.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Or, baseUrl can be set manually via the RequireJS config.If there is no explicit config and data-main is not used, then the default baseUrl is the directory that contains the HTML page running RequireJS.</p><p>\u6216\u8005\uFF0C\u53EF\u4EE5\u901A\u8FC7 RequireJS config \u624B\u52A8\u8BBE\u7F6E baseUrl\u3002\u5982\u679C\u6CA1\u6709\u663E\u5F0F\u914D\u7F6E\u5E76\u4E14\u672A\u4F7F\u7528 data-main\uFF0C\u5219\u9ED8\u8BA4\u7684 baseUrl \u662F\u5305\u542B\u8FD0\u884C RequireJS \u7684 HTML \u9875\u9762\u7684\u76EE\u5F55\u3002</p><p>RequireJS also assumes by default that all dependencies are scripts, so it does not expect to see a trailing &quot;.js&quot; suffix on module IDs.RequireJS will automatically add it when translating the module ID to a path.With the paths config, you can set up locations of a group of scripts. All of these capabilities allow you to use smaller strings for scripts as compared to traditional <code>&lt;script&gt;</code> tags.</p><p>\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0CRequireJS \u8FD8\u5047\u5B9A\u6240\u6709\u4F9D\u8D56\u9879\u90FD\u662F\u811A\u672C\uFF0C\u56E0\u6B64\u5B83\u4E0D\u5E0C\u671B\u5728\u6A21\u5757 ID \u4E0A\u770B\u5230\u5C3E\u968F\u7684&quot;.js&quot;\u540E\u7F00\u3002\u5728\u5C06\u6A21\u5757 ID \u8F6C\u6362\u4E3A\u8DEF\u5F84\u65F6\uFF0CRequireJS \u5C06\u81EA\u52A8\u6DFB\u52A0\u5B83\u3002\u4F7F\u7528 path config\uFF0C\u60A8\u53EF\u4EE5\u8BBE\u7F6E\u4E00\u7EC4\u811A\u672C\u7684\u4F4D\u7F6E\u3002\u4E0E\u4F20\u7EDF\u7684 <code>&lt;script&gt;</code> \u6807\u8BB0\u76F8\u6BD4\uFF0C\u6240\u6709\u8FD9\u4E9B\u51FD\u6570\u90FD\u5141\u8BB8\u60A8\u4E3A\u811A\u672C\u4F7F\u7528\u8F83\u5C0F\u7684\u5B57\u7B26\u4E32\u3002</p><p>There may be times when you do want to reference a script directly and not conform to the &quot;baseUrl + paths&quot; rules for finding it.If a module ID has one of the following characteristics, the ID will not be passed through the &quot;baseUrl + paths&quot; configuration, and just be treated like a regular URL that is relative to the document:</p><p>\u6709\u65F6\u60A8\u786E\u5B9E\u5E0C\u671B\u76F4\u63A5\u5F15\u7528\u811A\u672C\uFF0C\u800C\u53C8\u4E0D\u9075\u5FAA&quot;baseUrl +\u8DEF\u5F84&quot;\u89C4\u5219\u6765\u67E5\u627E\u811A\u672C\u3002\u5982\u679C\u6A21\u5757 ID \u5177\u6709\u4EE5\u4E0B\u7279\u5F81\u4E4B\u4E00\uFF0C\u5219\u8BE5 ID \u5C06\u4E0D\u4F1A\u901A\u8FC7&quot;baseUrl +\u8DEF\u5F84&quot;\u914D\u7F6E\u4F20\u9012\uFF0C\u800C\u53EA\u4F1A\u88AB\u89C6\u4E3A\u4E0E\u6587\u6863\u76F8\u5173\u7684\u5E38\u89C4 URL\uFF1A</p><ul><li>Ends in &quot;.js&quot;.</li><li>Starts with a &quot;/&quot;.</li><li>Contains an URL protocol, like &quot;http:&quot; or &quot;https:&quot;.</li></ul><ul><li>\u4EE5&quot;.js&quot;\u7ED3\u5C3E\u3002</li><li>\u4EE5&quot;/&quot;\u5F00\u5934\u3002</li><li>\u5305\u542B URL \u534F\u8BAE\uFF0C\u4F8B\u5982&quot;http\uFF1A&quot;\u6216&quot;https\uFF1A&quot;</li></ul><p>In general though, it is best to use the baseUrl and &quot;paths&quot; config to set paths for module IDs. By doing so, it gives you more flexibility in renaming and configuring the paths to different locations for optimization builds.</p><p>\u901A\u5E38\uFF0C\u6700\u597D\u4F7F\u7528 baseUrl \u548C&quot;paths&quot;\u914D\u7F6E\u6765\u8BBE\u7F6E\u6A21\u5757 ID \u7684\u8DEF\u5F84\u3002\u8FD9\u6837\uFF0C\u60A8\u53EF\u4EE5\u5728\u91CD\u547D\u540D\u548C\u914D\u7F6E\u6307\u5411\u4E0D\u540C\u4F4D\u7F6E\u7684\u8DEF\u5F84\u4EE5\u8FDB\u884C\u4F18\u5316\u6784\u5EFA\u65F6\u66F4\u52A0\u7075\u6D3B\u3002</p><p>Similarly, to avoid a bunch of configuration, it is best to avoid deep folder hierarchies for scripts, and instead either keep all the scripts in baseUrl, or if you want to separate your library/vendor-supplied code from your app code, use a directory layout like this:</p><p>\u540C\u6837\uFF0C\u4E3A\u907F\u514D\u8FDB\u884C\u5927\u91CF\u914D\u7F6E\uFF0C\u6700\u597D\u907F\u514D\u5BF9\u811A\u672C\u4F7F\u7528\u8F83\u6DF1\u7684\u6587\u4EF6\u5939\u5C42\u6B21\u7ED3\u6784\uFF0C\u800C\u662F\u5C06\u6240\u6709\u811A\u672C\u90FD\u4FDD\u7559\u5728 baseUrl \u4E2D\uFF0C\u6216\u8005\u5982\u679C\u8981\u4ECE\u5E94\u7528\u7A0B\u5E8F\u4EE3\u7801\u4E2D\u5206\u79BB\u5E93/\u4F9B\u5E94\u5546\u63D0\u4F9B\u7684\u4EE3\u7801\uFF0C\u8BF7\u4F7F\u7528\u76EE\u5F55\u5E03\u5C40\u5982\u4E0B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>www/
	index.html
	js/
		app/
			sub.js
		lib/
			jquery.js
			canvas.js
		app.js
		require.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>in index.htm \u5728 inde.html \u4E2D</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/app.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>and in app.js: \u5728 app.js \u4E2D</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//By default load any module IDs from js/lib</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;js/lib&#39;</span><span class="token punctuation">,</span>
	<span class="token comment">//except, if the module ID starts with &quot;app&quot;,</span>
	<span class="token comment">//load it from the js/app directory. paths</span>
	<span class="token comment">//config is relative to the baseUrl, and</span>
	<span class="token comment">//never includes a &quot;.js&quot; extension since</span>
	<span class="token comment">//the paths config could be for a directory.</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&#39;../app&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Start the main app logic.</span>
<span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;canvas&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;app/sub&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> canvas<span class="token punctuation">,</span> sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//jQuery, canvas and the app/sub module are all</span>
	<span class="token comment">//loaded and can be used here now.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Notice as part of that example, vendor libraries like jQuery did not have their version numbers in their file names. It is recommended to store that version info in a separate text file if you want to track it, or if you use a tool like volo, it will stamp the package.json with the version information but keep the file on disk as &quot;jquery.js&quot;. This allows you to have the very minimal configuration instead of having to put an entry in the &quot;paths&quot; config for each library. For instance, configure &quot;jquery&quot; to be &quot;jquery-1.7.2&quot;.</p><p>\u8BF7\u6CE8\u610F\uFF0C\u4F5C\u4E3A\u8BE5\u793A\u4F8B\u7684\u4E00\u90E8\u5206\uFF0C\u50CF jQuery \u8FD9\u6837\u7684\u4F9B\u5E94\u5546\u5E93\u5728\u6587\u4EF6\u540D\u4E2D\u6CA1\u6709\u5176\u7248\u672C\u53F7\u3002\u5982\u679C\u8981\u8DDF\u8E2A\u7248\u672C\u4FE1\u606F\uFF0C\u5EFA\u8BAE\u5C06\u5176\u5B58\u50A8\u5728\u5355\u72EC\u7684\u6587\u672C\u6587\u4EF6\u4E2D\uFF0C\u6216\u8005\u5982\u679C\u4F7F\u7528\u8BF8\u5982 volo \u4E4B\u7C7B\u7684\u5DE5\u5177\uFF0C\u5B83\u5C06\u5728 package.json \u4E2D\u6807\u8BB0\u7248\u672C\u4FE1\u606F\uFF0C\u4F46\u5C06\u6587\u4EF6\u4FDD\u7559\u5728\u78C1\u76D8\u4E0A\u4E3A&quot;jquery&quot;\u3002 js&quot;\u3002\u8FD9\u4F7F\u60A8\u53EF\u4EE5\u8FDB\u884C\u975E\u5E38\u5C0F\u7684\u914D\u7F6E\uFF0C\u800C\u4E0D\u5FC5\u5728\u6BCF\u4E2A\u5E93\u7684&quot;\u8DEF\u5F84&quot;\u914D\u7F6E\u4E2D\u653E\u7F6E\u4E00\u4E2A\u6761\u76EE\u3002\u4F8B\u5982\uFF0C\u5C06&quot;jquery&quot;\u914D\u7F6E\u4E3A&quot;jquery-1.7.2&quot;\u3002</p><p>Ideally the scripts you load will be modules that are defined by calling define().However, you may need to use some traditional/legacy &quot;browser globals&quot; scripts that do not express their dependencies via define().For those, you can use the shim config. To properly express their dependencies.</p><p>\u7406\u60F3\u60C5\u51B5\u4E0B\uFF0C\u60A8\u52A0\u8F7D\u7684\u811A\u672C\u5C06\u662F\u901A\u8FC7\u8C03\u7528 define\uFF08\uFF09\u5B9A\u4E49\u7684\u6A21\u5757\u3002\u4F46\u662F\uFF0C\u60A8\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u67D0\u4E9B\u4F20\u7EDF/\u65E7\u7248\u7684&quot;\u6D4F\u89C8\u5668\u5168\u5C40\u53D8\u91CF&quot;\u811A\u672C\uFF0C\u8FD9\u4E9B\u811A\u672C\u65E0\u6CD5\u901A\u8FC7 define\uFF08\uFF09\u8868\u8FBE\u5B83\u4EEC\u7684\u4F9D\u8D56\u6027\u3002\u5BF9\u4E8E\u90A3\u4E9B\uFF0C\u60A8\u53EF\u4EE5\u4F7F\u7528 shim config\u3002\u6B63\u786E\u8868\u8FBE\u5176\u4F9D\u8D56\u6027\u3002</p><p>If you do not express the dependencies, you will likely get loading errors since RequireJS loads scripts asynchronously and out of order for speed.</p><p>\u5982\u679C\u4E0D\u8868\u8FBE\u4F9D\u8D56\u5173\u7CFB\uFF0C\u5219\u7531\u4E8E RequireJS \u5F02\u6B65\u52A0\u8F7D\u811A\u672C\u4E14\u901F\u5EA6\u4E0D\u4F73\uFF0C\u53EF\u80FD\u4F1A\u5BFC\u81F4\u52A0\u8F7D\u9519\u8BEF\u3002</p><h3 id="data-main-entry-point" tabindex="-1"><a class="header-anchor" href="#data-main-entry-point" aria-hidden="true">#</a> data-main Entry Point</h3><p>The data-main attribute is a special attribute that require.js will check to start script loading:</p><p>data-main \u5C5E\u6027\u662F require.js \u5C06\u68C0\u67E5\u4EE5\u5F00\u59CB\u52A0\u8F7D\u811A\u672C\u7684\u7279\u6B8A\u5C5E\u6027\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!--when require.js loads it will inject another script tag
    (with async attribute) for scripts/main.js--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>You will typically use a data-main script to set configuration options and then load the first application module. Note: the script tag require.js generates for your data-main module includes the async attribute. This means that you cannot assume that the load and execution of your data-main script will finish prior to other scripts referenced later in the same page.</p><p>\u901A\u5E38\uFF0C\u60A8\u5C06\u4F7F\u7528\u6570\u636E\u4E3B\u811A\u672C\u6765\u8BBE\u7F6E\u914D\u7F6E\u9009\u9879\uFF0C\u7136\u540E\u52A0\u8F7D\u7B2C\u4E00\u4E2A\u5E94\u7528\u7A0B\u5E8F\u6A21\u5757\u3002\u6CE8\u610F\uFF1A\u4E3A\u60A8\u7684\u6570\u636E\u4E3B\u6A21\u5757\u751F\u6210\u7684\u811A\u672C\u6807\u7B7E require.js \u5305\u542B async \u5C5E\u6027\u3002\u8FD9\u610F\u5473\u7740\u60A8\u4E0D\u80FD\u5047\u5B9A\u6570\u636E\u4E3B\u811A\u672C\u7684\u52A0\u8F7D\u548C\u6267\u884C\u5C06\u5728\u540C\u4E00\u9875\u9762\u7A0D\u540E\u5F15\u7528\u7684\u5176\u4ED6\u811A\u672C\u4E4B\u524D\u5B8C\u6210\u3002</p><p>For example, this arrangement will fail randomly when the require.config path for the &#39;foo&#39; module has not been set prior to it being require()&#39;d later:</p><p>\u4F8B\u5982\uFF0C\u5F53\u5728\u7A0D\u540E\u9700\u8981 require\uFF08\uFF09\u4E4B\u524D\u672A\u8BBE\u7F6E&#39;foo&#39;\u6A21\u5757\u7684 require.config \u8DEF\u5F84\u65F6\uFF0C\u6B64\u5B89\u6392\u5C06\u968F\u673A\u5931\u8D25\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/other.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// contents of main.js:</span>
require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;libs/foo-1.1.3&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// contents of other.js:</span>

<span class="token comment">// This code might be called before the require.config() in main.js</span>
<span class="token comment">// has executed. When that happens, require.js will attempt to</span>
<span class="token comment">// load &#39;scripts/foo.js&#39; instead of &#39;scripts/libs/foo-1.1.3.js&#39;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>If you want to do require() calls in the HTML page, then it is best to not use data-main. data-main is only intended for use when the page just has one main entry point, the data-main script. For pages that want to do inline require() calls, it is best to nest those inside a require() call for the configuration:</p><p>\u5982\u679C\u8981 require()\u5728 HTML \u9875\u9762\u4E2D\u8FDB\u884C\u8C03\u7528\uFF0C\u5219\u6700\u597D\u4E0D\u8981\u4F7F\u7528 data-main\u3002data-main \u4EC5\u5728\u9875\u9762\u53EA\u6709\u4E00\u4E2A\u4E3B\u8981\u5165\u53E3\u70B9 data-main \u811A\u672C\u65F6\u4F7F\u7528\u3002\u5BF9\u4E8E\u8981\u8FDB\u884C\u5185\u8054 require()\u8C03\u7528\u7684\u9875\u9762\uFF0C\u6700\u597D\u5C06\u5176\u5D4C\u5957 require()\u5728\u914D\u7F6E\u8C03\u7528\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;scripts/require.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;scripts/config&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Configuration loaded now, safe to do other require calls</span>
    <span class="token comment">// that depend on that config.</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="define-a-module" tabindex="-1"><a class="header-anchor" href="#define-a-module" aria-hidden="true">#</a> Define a Module</h3><p>A module is different from a traditional script file in that it defines a well-scoped object that avoids polluting the global namespace. It can explicitly list its dependencies and get a handle on those dependencies without needing to refer to global objects, but instead receive the dependencies as arguments to the function that defines the module. Modules in RequireJS are an extension of the Module Pattern, with the benefit of not needing globals to refer to other modules.</p><p>\u6A21\u5757\u4E0E\u4F20\u7EDF\u811A\u672C\u6587\u4EF6\u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\uFF0C\u5B83\u5B9A\u4E49\u4E86\u4E00\u4E2A\u8303\u56F4\u5E7F\u6CDB\u7684\u5BF9\u8C61\uFF0C\u53EF\u907F\u514D\u6C61\u67D3\u5168\u5C40\u540D\u79F0\u7A7A\u95F4\u3002\u5B83\u53EF\u4EE5\u663E\u5F0F\u5217\u51FA\u5176\u4F9D\u8D56\u5173\u7CFB\uFF0C\u5E76\u5728\u4E0D\u9700\u8981\u5F15\u7528\u5168\u5C40\u5BF9\u8C61\u7684\u60C5\u51B5\u4E0B\u83B7\u53D6\u8FD9\u4E9B\u4F9D\u8D56\u5173\u7CFB\u7684\u53E5\u67C4\uFF0C\u800C\u662F\u5C06\u4F9D\u8D56\u5173\u7CFB\u4F5C\u4E3A\u5B9A\u4E49\u6A21\u5757\u7684\u51FD\u6570\u7684\u53C2\u6570\u6765\u63A5\u6536\u3002RequireJS \u4E2D\u7684\u6A21\u5757\u662F Module Pattern \u7684\u6269\u5C55\uFF0C\u5176\u4F18\u70B9\u662F\u4E0D\u9700\u8981\u5168\u5C40\u53D8\u91CF\u6765\u5F15\u7528\u5176\u4ED6\u6A21\u5757\u3002</p><p>The RequireJS syntax for modules allows them to be loaded as fast as possible, even out of order, but evaluated in the correct dependency order, and since global variables are not created, it makes it possible to load multiple versions of a module in a page.</p><p>\u6A21\u5757\u7684 RequireJS \u8BED\u6CD5\u5141\u8BB8\u5B83\u4EEC\u4EE5\u5C3D\u53EF\u80FD\u5FEB\u7684\u901F\u5EA6\u52A0\u8F7D\uFF0C\u5373\u4F7F\u4E0D\u6309\u987A\u5E8F\u52A0\u8F7D\uFF0C\u4F46\u4EE5\u6B63\u786E\u7684\u4F9D\u8D56\u5173\u7CFB\u987A\u5E8F\u8FDB\u884C\u8BC4\u4F30\uFF0C\u5E76\u4E14\u7531\u4E8E\u672A\u521B\u5EFA\u5168\u5C40\u53D8\u91CF\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5728\u9875\u9762\u4E2D\u52A0\u8F7D\u6A21\u5757\u7684\u591A\u4E2A\u7248\u672C\u3002</p><p>(If you are familiar with or are using CommonJS modules, then please also see CommonJS Notes for information on how the RequireJS module format maps to CommonJS modules).</p><p>\uFF08\u5982\u679C\u60A8\u719F\u6089\u6216\u6B63\u5728\u4F7F\u7528 CommonJS \u6A21\u5757\uFF0C\u90A3\u4E48\u4E5F\u8BF7\u53C2\u9605 CommonJS Notes \u4EE5\u83B7\u53D6\u6709\u5173 RequireJS \u6A21\u5757\u683C\u5F0F\u5982\u4F55\u6620\u5C04\u5230 CommonJS \u6A21\u5757\u7684\u4FE1\u606F\uFF09\u3002</p><p>There should only be one module definition per file on disk. The modules can be grouped into optimized bundles by the optimization tool.</p><p>\u78C1\u76D8\u4E0A\u6BCF\u4E2A\u6587\u4EF6\u5E94\u8BE5\u53EA\u6709\u4E00\u4E2A\u6A21\u5757\u5B9A\u4E49\u3002\u53EF\u4EE5\u901A\u8FC7\u4F18\u5316\u5DE5\u5177\u5C06\u6A21\u5757\u5206\u7EC4\u4E3A\u4F18\u5316\u7684\u5305\u3002</p><h4 id="simple-name-value-pairs" tabindex="-1"><a class="header-anchor" href="#simple-name-value-pairs" aria-hidden="true">#</a> Simple Name/Value Pairs</h4><p>If the module does not have any dependencies, and it is just a collection of name/value pairs, then just pass an object literal to define():</p><p>\u5982\u679C\u6A21\u5757\u6CA1\u6709\u4EFB\u4F55\u4F9D\u8D56\u5173\u7CFB\uFF0C\u800C\u53EA\u662F\u540D\u79F0/\u503C\u5BF9\u7684\u96C6\u5408\uFF0C\u5219\u53EA\u9700\u5C06\u5BF9\u8C61\u6587\u5B57\u4F20\u9012\u7ED9 define\uFF08\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Inside file my/shirt.js:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;unisize&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="definition-functions" tabindex="-1"><a class="header-anchor" href="#definition-functions" aria-hidden="true">#</a> Definition Functions</h4><p>If the module does not have dependencies, but needs to use a function to do some setup work, then define itself, pass a function to define():</p><p>\u5982\u679C\u6A21\u5757\u6CA1\u6709\u4F9D\u8D56\u9879\uFF0C\u4F46\u662F\u9700\u8981\u4F7F\u7528\u51FD\u6570\u6765\u5B8C\u6210\u4E00\u4E9B\u8BBE\u7F6E\u5DE5\u4F5C\uFF0C\u5219\u5B9A\u4E49\u81EA\u5DF1\uFF0C\u7136\u540E\u5C06\u51FD\u6570\u4F20\u9012\u7ED9 define\uFF08\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//my/shirt.js now does setup work</span>
<span class="token comment">//before returning its module definition.</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Do setup work here</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;unisize&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="definition-functions-with-dependencies" tabindex="-1"><a class="header-anchor" href="#definition-functions-with-dependencies" aria-hidden="true">#</a> Definition Functions with Dependencies</h4><p>If the module has dependencies, the first argument should be an array of dependency names, and the second argument should be a definition function. The function will be called to define the module once all dependencies have loaded. The function should return an object that defines the module. The dependencies will be passed to the definition function as function arguments, listed in the same order as the order in the dependency array:</p><p>\u5982\u679C\u6A21\u5757\u5177\u6709\u4F9D\u8D56\u9879\uFF0C\u5219\u7B2C\u4E00\u4E2A\u53C2\u6570\u5E94\u4E3A\u4F9D\u8D56\u9879\u540D\u79F0\u6570\u7EC4\uFF0C\u7B2C\u4E8C\u4E2A\u53C2\u6570\u5E94\u4E3A\u5B9A\u4E49\u51FD\u6570\u3002\u52A0\u8F7D\u6240\u6709\u4F9D\u8D56\u9879\u540E\uFF0C\u5C06\u8C03\u7528\u8BE5\u51FD\u6570\u4EE5\u5B9A\u4E49\u6A21\u5757\u3002\u8BE5\u51FD\u6570\u5E94\u8FD4\u56DE\u5B9A\u4E49\u6A21\u5757\u7684\u5BF9\u8C61\u3002\u4F9D\u8D56\u9879\u5C06\u4F5C\u4E3A\u51FD\u6570\u53C2\u6570\u4F20\u9012\u7ED9\u5B9A\u4E49\u51FD\u6570\uFF0C\u5217\u51FA\u7684\u987A\u5E8F\u4E0E\u4F9D\u8D56\u9879\u6570\u7EC4\u4E2D\u7684\u987A\u5E8F\u76F8\u540C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//my/shirt.js now has some dependencies, a cart and inventory</span>
<span class="token comment">//module in the same directory as shirt.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./cart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./inventory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> inventory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//return an object to define the &quot;my/shirt&quot; module.</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">,</span>
		<span class="token function-variable function">addToCart</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			inventory<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
			cart<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>In this example, a my/shirt module is created. It depends on my/cart and my/inventory. On disk, the files are structured like this:</p><p>\u672C\u793A\u4F8B\u521B\u5EFA\u4E86\u4E00\u4E2A my/shirt \u6A21\u5757\uFF0C\u5B83\u4F9D\u8D56\u4E8E my/cart \u53CA my/inventory\u3002\u78C1\u76D8\u4E0A\u5404\u6587\u4EF6\u5206\u5E03\u5982\u4E0B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>my/cart.js
my/inventory.js
my/shirt.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The function call above specifies two arguments, &quot;cart&quot; and &quot;inventory&quot;. These are the modules represented by the &quot;./cart&quot; and &quot;./inventory&quot; module names.</p><p>\u4E0A\u9762\u7684\u51FD\u6570\u8C03\u7528\u6307\u5B9A\u4E86\u4E24\u4E2A\u53C2\u6570\uFF1A&quot;cart&quot;\u548C&quot;inventory&quot;\u3002\u8FD9\u4E9B\u662F\u7531&quot;./cart&quot;\u548C&quot;./inventory&quot;\u6A21\u5757\u540D\u79F0\u8868\u793A\u7684\u6A21\u5757\u3002</p><p>The function is not called until the my/cart and my/inventory modules have been loaded, and the function receives the modules as the &quot;cart&quot; and &quot;inventory&quot; arguments.</p><p>\u5728\u52A0\u8F7D\u4E86 my/cart \u548C my/inventory \u6A21\u5757\u4E4B\u540E\uFF0C\u8BE5\u51FD\u6570\u624D\u88AB\u8C03\u7528\uFF0C\u5E76\u4E14\u8BE5\u51FD\u6570\u5C06\u8FD9\u4E9B\u6A21\u5757\u4F5C\u4E3A&quot;cart&quot;\u548C&quot;inventory&quot;\u53C2\u6570\u63A5\u6536\u3002</p><p>Modules that define globals are explicitly discouraged, so that multiple versions of a module can exist in a page at a time (see Advanced Usage). Also, the order of the function arguments should match the order of the dependencies.</p><p>\u660E\u786E\u5EFA\u8BAE\u4E0D\u8981\u4F7F\u7528\u5B9A\u4E49\u5168\u5C40\u53D8\u91CF\u7684\u6A21\u5757\uFF0C\u4EE5\u4FBF\u4E00\u6B21\u5728\u4E00\u4E2A\u9875\u9762\u4E2D\u53EF\u4EE5\u5B58\u5728\u4E00\u4E2A\u6A21\u5757\u7684\u591A\u4E2A\u7248\u672C\uFF08\u8BF7\u53C2\u9605\u9AD8\u7EA7\u7528\u6CD5\uFF09\u3002\u6B64\u5916\uFF0C\u51FD\u6570\u53C2\u6570\u7684\u987A\u5E8F\u5E94\u4E0E\u4F9D\u8D56\u9879\u7684\u987A\u5E8F\u5339\u914D\u3002</p><p>The return object from the function call defines the &quot;my/shirt&quot; module. By defining modules in this way, &quot;my/shirt&quot; does not exist as a global object.</p><p>\u51FD\u6570\u8C03\u7528\u7684\u8FD4\u56DE\u5BF9\u8C61\u5B9A\u4E49 &quot;my/shirt&quot; \u6A21\u5757\u3002\u901A\u8FC7\u4EE5\u8FD9\u79CD\u65B9\u5F0F\u5B9A\u4E49\u6A21\u5757\uFF0C&quot;my/shirt&quot;\u5C31\u4E0D\u4F1A\u4F5C\u4E3A\u5168\u5C40\u5BF9\u8C61\u5B58\u5728\u3002</p><h4 id="define-a-module-as-a-function" tabindex="-1"><a class="header-anchor" href="#define-a-module-as-a-function" aria-hidden="true">#</a> Define a Module as a Function</h4><p>Modules do not have to return objects. Any valid return value from a function is allowed. Here is a module that returns a function as its module definition:</p><p>\u6A21\u5757\u4E0D\u5FC5\u8FD4\u56DE\u5BF9\u8C61\u3002\u5141\u8BB8\u4ECE\u51FD\u6570\u8FD4\u56DE\u4EFB\u4F55\u6709\u6548\u7684\u8FD4\u56DE\u503C\u3002\u8FD9\u662F\u4E00\u4E2A\u8FD4\u56DE\u51FD\u6570\u4F5C\u4E3A\u5176\u6A21\u5757\u5B9A\u4E49\u7684\u6A21\u5757\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//A module definition inside foo/title.js. It uses</span>
<span class="token comment">//my/cart and my/inventory modules from before,</span>
<span class="token comment">//but since foo/title.js is in a different directory than</span>
<span class="token comment">//the &quot;my&quot; modules, it uses the &quot;my&quot; in the module dependency</span>
<span class="token comment">//name to find them. The &quot;my&quot; part of the name can be mapped</span>
<span class="token comment">//to any directory, but by default, it is assumed to be a</span>
<span class="token comment">//sibling to the &quot;foo&quot; directory.</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;my/cart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my/inventory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> inventory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//return a function to define &quot;foo/title&quot;.</span>
	<span class="token comment">//It gets or sets the window title.</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> title <span class="token operator">?</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">)</span> <span class="token operator">:</span> inventory<span class="token punctuation">.</span>storeName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> cart<span class="token punctuation">.</span>name
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="define-a-module-with-simplified-commonjs-wrapper-\u4F7F\u7528\u7B80\u5316\u7684-commonjs-wrapper-\u5B9A\u4E49\u4E00\u4E2A\u6A21\u5757" tabindex="-1"><a class="header-anchor" href="#define-a-module-with-simplified-commonjs-wrapper-\u4F7F\u7528\u7B80\u5316\u7684-commonjs-wrapper-\u5B9A\u4E49\u4E00\u4E2A\u6A21\u5757" aria-hidden="true">#</a> Define a Module with Simplified CommonJS Wrapper:\u4F7F\u7528\u7B80\u5316\u7684 CommonJS Wrapper \u5B9A\u4E49\u4E00\u4E2A\u6A21\u5757\uFF1A</h4><p>If you wish to reuse some code that was written in the traditional CommonJS module format it may be difficult to re-work to the array of dependencies used above, and you may prefer to have direct alignment of dependency name to the local variable used for that dependency. You can use the simplified CommonJS wrapper for those cases:</p><p>\u5982\u679C\u60A8\u5E0C\u671B\u91CD\u7528\u4EE5\u4F20\u7EDF CommonJS \u6A21\u5757\u683C\u5F0F\u7F16\u5199\u7684\u67D0\u4E9B\u4EE3\u7801\uFF0C\u5219\u53EF\u80FD\u96BE\u4EE5\u5BF9\u4E0A\u9762\u4F7F\u7528\u7684\u4F9D\u8D56\u9879\u6570\u7EC4\u8FDB\u884C\u91CD\u65B0\u5904\u7406\uFF0C\u5E76\u4E14\u60A8\u53EF\u80FD\u66F4\u5E0C\u671B\u5C06\u4F9D\u8D56\u9879\u540D\u79F0\u76F4\u63A5\u4E0E\u7528\u4E8E\u6B64\u7684\u672C\u5730\u53D8\u91CF\u5BF9\u9F50\u4F9D\u8D56\u6027\u3002\u5728\u4EE5\u4E0B\u60C5\u51B5\u4E0B\uFF0C\u53EF\u4EE5\u4F7F\u7528\u7B80\u5316\u7684 CommonJS \u5305\u88C5\u5668\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>

	<span class="token comment">//Return the module value</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>This wrapper relies on Function.prototype.toString() to give a useful string value of the function contents. This does not work on some devices like the PS3 and some older Opera mobile browsers. Use the optimizer to pull out the dependencies in the array format for use on those devices.</p><p>\u8BE5\u5305\u88C5\u5668\u4F9D\u8D56\u4E8E Function.prototype.toString\uFF08\uFF09\u7ED9\u51FA\u51FD\u6570\u5185\u5BB9\u7684\u6709\u7528\u5B57\u7B26\u4E32\u503C\u3002\u8FD9\u5728\u67D0\u4E9B\u8BBE\u5907\uFF08\u4F8B\u5982 PS3 \u548C\u67D0\u4E9B\u8F83\u65E7\u7684 Opera \u79FB\u52A8\u6D4F\u89C8\u5668\uFF09\u4E0A\u4E0D\u8D77\u4F5C\u7528\u3002\u4F7F\u7528\u4F18\u5316\u5668\u4EE5\u6570\u7EC4\u683C\u5F0F\u63D0\u53D6\u4F9D\u8D56\u9879\uFF0C\u4EE5\u5728\u8FD9\u4E9B\u8BBE\u5907\u4E0A\u4F7F\u7528\u3002</p><p>More information is available on the CommonJS page, and in the &quot;Sugar&quot; section in the Why AMD page.</p><p>\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 CommonJS \u9875\u9762\uFF0C\u4EE5\u53CA&quot;\u4E3A\u4EC0\u4E48\u9009\u62E9 AMD&quot;\u9875\u9762\u7684&quot;\u7CD6&quot;\u90E8\u5206\u3002</p><h4 id="define-a-module-with-a-name" tabindex="-1"><a class="header-anchor" href="#define-a-module-with-a-name" aria-hidden="true">#</a> Define a Module with a Name</h4><p>You may encounter some define() calls that include a name for the module as the first argument to define():</p><p>\u60A8\u53EF\u80FD\u4F1A\u9047\u5230\u4E00\u4E9B define\uFF08\uFF09\u8C03\u7528\uFF0C\u5176\u4E2D\u5305\u542B\u6A21\u5757\u7684\u540D\u79F0\u4F5C\u4E3A define\uFF08\uFF09\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Explicitly defines the &quot;foo/title&quot; module:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;foo/title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;my/cart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my/inventory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> inventory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Define foo/title object in here.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>These are normally generated by the optimization tool. You can explicitly name modules yourself, but it makes the modules less portable -- if you move the file to another directory you will need to change the name. It is normally best to avoid coding in a name for the module and just let the optimization tool burn in the module names. The optimization tool needs to add the names so that more than one module can be bundled in a file, to allow for faster loading in the browser.</p><p>\u8FD9\u4E9B\u901A\u5E38\u662F\u7531\u4F18\u5316\u5DE5\u5177\u751F\u6210\u7684\u3002\u60A8\u53EF\u4EE5\u81EA\u5DF1\u663E\u5F0F\u547D\u540D\u6A21\u5757\uFF0C\u4F46\u8FD9\u4F1A\u4F7F\u6A21\u5757\u7684\u53EF\u79FB\u690D\u6027\u964D\u4F4E-\u5982\u679C\u5C06\u6587\u4EF6\u79FB\u52A8\u5230\u53E6\u4E00\u4E2A\u76EE\u5F55\uFF0C\u5219\u9700\u8981\u66F4\u6539\u540D\u79F0\u3002\u901A\u5E38\u6700\u597D\u907F\u514D\u4E3A\u6A21\u5757\u7684\u540D\u79F0\u7F16\u7801\uFF0C\u800C\u8BA9\u4F18\u5316\u5DE5\u5177\u4EE5\u6A21\u5757\u540D\u79F0\u7684\u5F62\u5F0F\u8FDB\u884C\u523B\u5F55\u3002\u4F18\u5316\u5DE5\u5177\u9700\u8981\u6DFB\u52A0\u540D\u79F0\uFF0C\u4EE5\u4FBF\u4E00\u4E2A\u6587\u4EF6\u4E2D\u53EF\u4EE5\u6346\u7ED1\u591A\u4E2A\u6A21\u5757\uFF0C\u4EE5\u5141\u8BB8\u5728\u6D4F\u89C8\u5668\u4E2D\u66F4\u5FEB\u5730\u52A0\u8F7D\u3002</p><h4 id="other-module-notes" tabindex="-1"><a class="header-anchor" href="#other-module-notes" aria-hidden="true">#</a> Other Module Notes</h4><p><strong>One module per file</strong>: Only one module should be defined per JavaScript file, given the nature of the module name-to-file-path lookup algorithm. You should only use the optimization tool to group multiple modules into optimized files.</p><p><strong>\u6BCF\u4E2A\u6587\u4EF6\u4E00\u4E2A\u6A21\u5757</strong>: \u9274\u4E8E\u6A21\u5757\u540D\u79F0\u5230\u6587\u4EF6\u8DEF\u5F84\u67E5\u627E\u7B97\u6CD5\u7684\u6027\u8D28\uFF0C\u6BCF\u4E2A JavaScript \u6587\u4EF6\u53EA\u80FD\u5B9A\u4E49\u4E00\u4E2A\u6A21\u5757\u3002\u60A8\u4EC5\u5E94\u4F7F\u7528\u4F18\u5316\u5DE5\u5177\u5C06\u591A\u4E2A\u6A21\u5757\u5206\u7EC4\u4E3A\u4F18\u5316\u6587\u4EF6\u3002</p><p><strong>Relative module names inside define()</strong>: For require(&quot;./relative/name&quot;) calls that can happen inside a define() function call, be sure to ask for &quot;require&quot; as a dependency, so that the relative name is resolved correctly:</p><p><strong>define()\u4E2D\u7684\u76F8\u5BF9\u6A21\u5757\u540D</strong>: \u5BF9\u4E8E\u5728 define\uFF08\uFF09\u51FD\u6570\u8C03\u7528\u4E2D\u53EF\u80FD\u53D1\u751F\u7684 require\uFF08&quot;./ relative/name&quot;\uFF09\u8C03\u7528\uFF0C\u8BF7\u52A1\u5FC5\u8981\u6C42&quot;require&quot;\u4F5C\u4E3A\u4F9D\u8D56\u9879\uFF0C\u4EE5\u4FBF\u89E3\u6790\u76F8\u5BF9\u540D\u79F0\u6B63\u786E\u5730\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./relative/name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./relative/name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Or better yet, use the shortened syntax that is available for use with translating CommonJS modules:</p><p>\u6216\u66F4\u5999\u7684\u662F\uFF0C\u4F7F\u7528\u53EF\u7528\u4E8E\u7FFB\u8BD1 CommonJS \u6A21\u5757\u7684\u7F29\u77ED\u7684\u8BED\u6CD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./relative/name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This form will use Function.prototype.toString() to find the require() calls, and add them to the dependency array, along with &quot;require&quot;, so the code will work correctly with relative paths.</p><p>\u8FD9\u79CD\u5F62\u5F0F\u5C06\u4F7F\u7528 Function.prototype.toString\uFF08\uFF09\u67E5\u627E require\uFF08\uFF09\u8C03\u7528\uFF0C\u5E76\u5C06\u5B83\u4EEC\u4E0E&quot;require&quot;\u4E00\u8D77\u6DFB\u52A0\u5230\u4F9D\u8D56\u9879\u6570\u7EC4\u4E2D\uFF0C\u56E0\u6B64\u4EE3\u7801\u53EF\u4EE5\u5728\u76F8\u5BF9\u8DEF\u5F84\u4E0B\u6B63\u5E38\u5DE5\u4F5C\u3002</p><p>Relative paths are really useful if you are creating a few modules inside a directory, so that you can share the directory with other people or other projects, and you want to be able to get a handle on the sibling modules in that directory without having to know the directory&#39;s name.</p><p>\u5982\u679C\u8981\u5728\u76EE\u5F55\u4E2D\u521B\u5EFA\u4E00\u4E9B\u6A21\u5757\uFF0C\u5219\u76F8\u5BF9\u8DEF\u5F84\u975E\u5E38\u6709\u7528\uFF0C\u8FD9\u6837\u60A8\u5C31\u53EF\u4EE5\u4E0E\u5176\u4ED6\u4EBA\u6216\u5176\u4ED6\u9879\u76EE\u5171\u4EAB\u76EE\u5F55\uFF0C\u5E76\u4E14\u5E0C\u671B\u80FD\u591F\u83B7\u5F97\u8BE5\u76EE\u5F55\u4E2D\u540C\u7EA7\u6A21\u5757\u7684\u53E5\u67C4\u800C\u4E0D\u5FC5\u77E5\u9053\u76EE\u5F55\u7684\u540D\u79F0\u3002</p><p>Relative module names are relative to other names, not paths: The loader stores modules by their name and not by their path internally. So for relative name references, those are resolved relative to the module name making the reference, then that module name, or ID, is converted to a path if needs to be loaded. Example code for a &#39;compute&#39; package that has a &#39;main&#39; and &#39;extras&#39; modules in it:</p><p>\u76F8\u5BF9\u6A21\u5757\u540D\u79F0\u76F8\u5BF9\u4E8E\u5176\u4ED6\u540D\u79F0\uFF0C\u800C\u4E0D\u662F\u8DEF\u5F84: \u52A0\u8F7D\u7A0B\u5E8F\u6309\u6A21\u5757\u540D\u79F0\u800C\u4E0D\u662F\u5185\u90E8\u8DEF\u5F84\u5B58\u50A8\u6A21\u5757\u3002\u56E0\u6B64\uFF0C\u5BF9\u4E8E\u76F8\u5BF9\u540D\u79F0\u5F15\u7528\uFF0C\u76F8\u5BF9\u4E8E\u5F15\u7528\u7684\u6A21\u5757\u540D\u79F0\u8FDB\u884C\u89E3\u6790\uFF0C\u7136\u540E\u5982\u679C\u9700\u8981\u52A0\u8F7D\uFF0C\u5219\u5C06\u8BE5\u6A21\u5757\u540D\u79F0\u6216 ID \u8F6C\u6362\u4E3A\u8DEF\u5F84\u3002\u5176\u4E2D\u5177\u6709&quot;main&quot;\u548C&quot;extras&quot;\u6A21\u5757\u7684&quot;compute&quot;\u5305\u7684\u793A\u4F8B\u4EE3\u7801\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>* lib/
    * compute/
        * main.js
        * extras.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>where the main.js module looks like this:</p><p>main.js \u6A21\u5757\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./extras&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">extras</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Uses extras in here.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If this was the paths config:</p><p>\u5982\u679C\u8FD9\u662F\u8DEF\u5F84\u914D\u7F6E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;lib&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">compute</span><span class="token operator">:</span> <span class="token string">&#39;compute/main&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>And a require([&#39;compute&#39;]) is done, then lib/compute/main.js will have the module name of &#39;compute&#39;. When it asks for &#39;./extras&#39;, that is resolved relative to &#39;compute&#39;, so &#39;compute/./extras&#39;, which normalizes to just &#39;extras&#39;. Since there is no paths config for that module name, the path generated will be for &#39;lib/extras.js&#39;, which is incorrect.</p><p>\u5E76\u4E14 require([&#39;compute&#39;])\u505A\u4E86\uFF0C\u90A3\u4E48 LIB /\u8BA1\u7B97/ main.js \u5C06\u6709&quot;\u8BA1\u7B97&quot;\u7684\u6A21\u5757\u540D\u79F0\u3002\u5F53\u5B83\u8981\u6C42&quot;./extras&quot;\u65F6\uFF0C\u76F8\u5BF9\u4E8E&quot;compute&quot;\u53EF\u4EE5\u89E3\u51B3\uFF0C\u56E0\u6B64&quot;compute /./ extras&quot;\u5C06\u5176\u6807\u51C6\u5316\u4E3A&quot;extras&quot;\u3002\u7531\u4E8E\u6CA1\u6709\u7528\u4E8E\u8BE5\u6A21\u5757\u540D\u79F0\u7684\u8DEF\u5F84\u914D\u7F6E\uFF0C\u56E0\u6B64\u751F\u6210\u7684\u8DEF\u5F84\u5C06\u7528\u4E8E&quot;lib/extras.js&quot;\uFF0C\u8FD9\u662F\u4E0D\u6B63\u786E\u7684\u3002</p><p>For this case, packages config is a better option, since it allows setting the main module up as &#39;compute&#39;, but internally the loader will store the module with the ID of &#39;compute/main&#39; so that the relative reference for &#39;./extras&#39; works.</p><p>\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0Cpackages config \u662F\u4E00\u4E2A\u66F4\u597D\u7684\u9009\u62E9\uFF0C\u56E0\u4E3A\u5B83\u5141\u8BB8\u5C06\u4E3B\u6A21\u5757\u8BBE\u7F6E\u4E3A&quot;compute&quot;\uFF0C\u4F46\u662F\u5728\u5185\u90E8\u52A0\u8F7D\u7A0B\u5E8F\u5C06\u4EE5 ID&quot;compute/main&quot;\u5B58\u50A8\u8BE5\u6A21\u5757\uFF0C\u4EE5\u4FBF&quot;./\u6F14\u5458\u7684\u4F5C\u54C1\u3002</p><p>Another option is to construct a module at lib/compute.js that is just define([&#39;./compute/main&#39;], function(m) { return m; });, then there is no need for paths or packages config.</p><p>\u53E6\u4E00\u4E2A\u9009\u62E9\u662F\u5728 lib/compute.js \u5904\u6784\u5EFA\u4E00\u4E2A\u6A21\u5757 just define([&#39;./compute/main&#39;], function(m) { return m; });\uFF0C\u90A3\u4E48\u5C31\u4E0D\u9700\u8981\u8DEF\u5F84\u6216\u7A0B\u5E8F\u5305\u914D\u7F6E\u4E86\u3002</p><p>Or, do not set that paths or packages config and do the top level require call as require([&#39;compute/main&#39;]).</p><p>\u6216\u8005\uFF0C\u4E0D\u8981\u8BBE\u7F6E\u8DEF\u5F84\u6216\u7A0B\u5E8F\u5305\u914D\u7F6E\uFF0C\u5E76\u4E14\u4E0D\u8981\u5728\u9876\u5C42\u8981\u6C42\u8C03\u7528 as require([&#39;compute/main&#39;])\u3002</p><p>Generate URLs relative to module: You may need to generate an URL that is relative to a module. To do so, ask for &quot;require&quot; as a dependency and then use require.toUrl() to generate the URL:</p><p>\u751F\u6210\u76F8\u5BF9\u4E8E\u6A21\u5757\u7684 URL: \u60A8\u53EF\u80FD\u9700\u8981\u751F\u6210\u76F8\u5BF9\u4E8E\u6A21\u5757\u7684 URL\u3002\u4E3A\u6B64\uFF0C\u8981\u6C42&quot;require&quot;\u4F5C\u4E3A\u4F9D\u8D56\u9879\uFF0C\u7136\u540E\u4F7F\u7528 require.toUrl\uFF08\uFF09\u751F\u6210 URL\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> cssUrl <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">toUrl</span><span class="token punctuation">(</span><span class="token string">&#39;./style.css&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Console debugging: If you need to work with a module you already loaded via a require([&quot;module/name&quot;], function(){}) call in the JavaScript console, then you can use the require() form that just uses the string name of the module to fetch it:</p><p>\u63A7\u5236\u53F0\u8C03\u8BD5: \u5982\u679C\u9700\u8981\u4F7F\u7528\u5DF2\u7ECF\u901A\u8FC7 require([&quot;module/name&quot;], function(){})JavaScript \u63A7\u5236\u53F0\u4E2D\u7684\u8C03\u7528\u52A0\u8F7D\u7684\u6A21\u5757\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528 require\uFF08\uFF09\u8868\u5355\uFF0C\u8BE5\u8868\u5355\u4EC5\u4F7F\u7528\u6A21\u5757\u7684\u5B57\u7B26\u4E32\u540D\u79F0\u6765\u83B7\u53D6\u5B83\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;module/name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callSomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Note this only works if &quot;module/name&quot; was previously loaded via the async version of require: require([&quot;module/name&quot;]). If using a relative path, like &#39;./module/name&#39;, those only work inside define</p><p>\u8BF7\u6CE8\u610F\uFF0C\u8FD9\u4EC5\u5728\u5148\u524D\u901A\u8FC7 require\uFF1A\u7684\u5F02\u6B65\u7248\u672C\u52A0\u8F7D&quot;\u6A21\u5757/\u540D\u79F0&quot;\u65F6\u6709\u6548 require([&quot;module/name&quot;])\u3002\u5982\u679C\u4F7F\u7528\u76F8\u5BF9\u8DEF\u5F84\uFF0C\u4F8B\u5982&quot;./module/name&quot;\uFF0C\u5219\u8FD9\u4E9B\u4EC5\u5728\u5185\u90E8\u5B9A\u4E49</p><h4 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h4><p>If you define a circular dependency (&quot;a&quot; needs &quot;b&quot; and &quot;b&quot; needs &quot;a&quot;), then in this case when &quot;b&quot;&#39;s module function is called, it will get an undefined value for &quot;a&quot;. &quot;b&quot; can fetch &quot;a&quot; later after modules have been defined by using the require() method (be sure to specify require as a dependency so the right context is used to look up &quot;a&quot;):</p><p>\u5982\u679C\u5B9A\u4E49\u5FAA\u73AF\u4F9D\u8D56\u5173\u7CFB\uFF08&quot;a&quot;\u9700\u8981&quot;b&quot;\uFF0C&quot;b&quot;\u9700\u8981&quot;a&quot;\uFF09\uFF0C\u5219\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5F53\u8C03\u7528&quot;b&quot;\u7684\u6A21\u5757\u51FD\u6570\u65F6\uFF0C\u5B83\u5C06\u83B7\u5F97&quot;a&quot;\u7684\u672A\u5B9A\u4E49\u503C\u3002\u5728\u4F7F\u7528 require\uFF08\uFF09\u65B9\u6CD5\u5B9A\u4E49\u6A21\u5757\u4E4B\u540E\uFF0C&quot;b&quot;\u53EF\u4EE5\u7A0D\u540E\u83B7\u53D6&quot;a&quot;\uFF08\u8BF7\u786E\u4FDD\u5C06 require \u6307\u5B9A\u4E3A\u4F9D\u8D56\u9879\uFF0C\u4EE5\u4FBF\u4F7F\u7528\u6B63\u786E\u7684\u4E0A\u4E0B\u6587\u67E5\u627E&quot;a&quot;\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Inside b.js:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//&quot;a&quot; in this case will be null if &quot;a&quot; also asked for &quot;b&quot;,</span>
	<span class="token comment">//a circular dependency.</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Normally you should not need to use require() to fetch a module, but instead rely on the module being passed in to the function as an argument. Circular dependencies are rare, and usually a sign that you might want to rethink the design. However, sometimes they are needed, and in that case, use require() as specified above.</p><p>\u901A\u5E38\uFF0C\u60A8\u4E0D\u9700\u8981\u4F7F\u7528 require\uFF08\uFF09\u6765\u83B7\u53D6\u6A21\u5757\uFF0C\u800C\u662F\u4F9D\u9760\u5C06\u6A21\u5757\u4F5C\u4E3A\u53C2\u6570\u4F20\u9012\u7ED9\u51FD\u6570\u3002\u5FAA\u73AF\u4F9D\u8D56\u5F88\u5C11\u89C1\uFF0C\u901A\u5E38\u662F\u60A8\u53EF\u80FD\u9700\u8981\u91CD\u65B0\u8003\u8651\u8BBE\u8BA1\u7684\u4FE1\u53F7\u3002\u4F46\u662F\uFF0C\u6709\u65F6\u9700\u8981\u5B83\u4EEC\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u8BF7\u4F7F\u7528\u4E0A\u9762\u6307\u5B9A\u7684 require\uFF08\uFF09\u3002</p><p>If you are familiar with CommonJS modules, you could instead use exports to create an empty object for the module that is available immediately for reference by other modules. By doing this on both sides of a circular dependency, you can then safely hold on to the the other module. This only works if each module is exporting an object for the module value, not a function:</p><p>\u5982\u679C\u60A8\u719F\u6089 CommonJS \u6A21\u5757\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528\u5BFC\u51FA\u4E3A\u8BE5\u6A21\u5757\u521B\u5EFA\u4E00\u4E2A\u7A7A\u5BF9\u8C61\uFF0C\u8BE5\u7A7A\u5BF9\u8C61\u53EF\u7ACB\u5373\u4F9B\u5176\u4ED6\u6A21\u5757\u5F15\u7528\u3002\u901A\u8FC7\u5728\u5FAA\u73AF\u4F9D\u8D56\u5173\u7CFB\u7684\u4E24\u4FA7\u6267\u884C\u6B64\u64CD\u4F5C\uFF0C\u7136\u540E\u53EF\u4EE5\u5B89\u5168\u5730\u4FDD\u7559\u53E6\u4E00\u4E2A\u6A21\u5757\u3002\u4EC5\u5F53\u6BCF\u4E2A\u6A21\u5757\u90FD\u4E3A\u6A21\u5757\u503C\u800C\u4E0D\u662F\u51FD\u6570\u5BFC\u51FA\u5BF9\u8C61\u65F6\uFF0C\u6B64\u65B9\u6CD5\u624D\u6709\u6548\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Inside b.js:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//If &quot;a&quot; has used exports, then we have a real</span>
	<span class="token comment">//object reference here. However, we cannot use</span>
	<span class="token comment">//any of &quot;a&quot;&#39;s properties until after &quot;b&quot; returns a value.</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>

	exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Or, if you are using the dependency array approach, ask for the special &#39;exports&#39; dependency:</p><p>\u6216\u8005\uFF0C\u5982\u679C\u60A8\u4F7F\u7528\u7684\u662F\u4F9D\u8D56\u9879\u6570\u7EC4\u65B9\u6CD5\uFF0C\u5219\u8981\u6C42\u7279\u6B8A\u7684 &quot;exports&quot;\u4F9D\u8D56\u9879\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Inside b.js:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exports&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//If &quot;a&quot; has used exports, then we have a real</span>
	<span class="token comment">//object reference here. However, we cannot use</span>
	<span class="token comment">//any of &quot;a&quot;&#39;s properties until after &quot;b&quot; returns a value.</span>

	exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="specify-a-jsonp-service-dependency" tabindex="-1"><a class="header-anchor" href="#specify-a-jsonp-service-dependency" aria-hidden="true">#</a> Specify a JSONP Service Dependency</h4><p>JSONP is a way of calling some services in JavaScript. It works across domains and it is an established approach to calling services that just require an HTTP GET via a script tag.</p><p>JSONP \u662F\u4F7F\u7528 JavaScript \u8C03\u7528\u67D0\u4E9B\u670D\u52A1\u7684\u4E00\u79CD\u65B9\u5F0F\u3002\u5B83\u8DE8\u57DF\u5DE5\u4F5C\uFF0C\u5E76\u4E14\u662F\u4E00\u79CD\u4EC5\u901A\u8FC7\u811A\u672C\u6807\u7B7E\u4EC5\u9700\u8981 HTTP GET \u5373\u53EF\u8C03\u7528\u670D\u52A1\u7684\u65E2\u5B9A\u65B9\u6CD5\u3002</p><p>To use a JSONP service in RequireJS, specify &quot;define&quot; as the callback parameter&#39;s value. This means you can get the value of a JSONP URL as if it was a module definition.</p><p>\u8981\u5728 RequireJS \u4E2D\u4F7F\u7528 JSONP \u670D\u52A1\uFF0C\u8BF7\u6307\u5B9A&quot;define&quot;\u4F5C\u4E3A\u56DE\u8C03\u53C2\u6570\u7684\u503C\u3002\u8FD9\u610F\u5473\u7740\u60A8\u53EF\u4EE5\u83B7\u5F97 JSONP URL \u7684\u503C\uFF0C\u5C31\u597D\u50CF\u5B83\u662F\u6A21\u5757\u5B9A\u4E49\u4E00\u6837\u3002</p><p>Here is an example that calls a JSONP API endpoint. In this example, the JSONP callback parameter is called &quot;callback&quot;, so &quot;callback=define&quot; tells the API to wrap the JSON response in a &quot;define()&quot; wrapper:</p><p>\u8FD9\u662F\u4E00\u4E2A\u8C03\u7528 JSONP API \u7AEF\u70B9\u7684\u793A\u4F8B\u3002\u5728\u6B64\u793A\u4F8B\u4E2D\uFF0CJSONP \u56DE\u8C03\u53C2\u6570\u79F0\u4E3A&quot;callback&quot;\uFF0C\u56E0\u6B64&quot;callback = define&quot;\u544A\u8BC9 API \u5C06 JSON \u54CD\u5E94\u5305\u88C5\u5728&quot;define\uFF08\uFF09&quot;\u5305\u88C5\u5668\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;http://example.com/api/data.json?callback=define&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//The data object will be the API response for the</span>
	<span class="token comment">//JSONP data call.</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This use of JSONP should be limited to JSONP services for initial application setup. If the JSONP service times out, it means other modules you define via define() may not get executed, so the error handling is not robust.</p><p>JSONP \u7684\u8FD9\u79CD\u4F7F\u7528\u5E94\u9650\u4E8E\u521D\u59CB\u5E94\u7528\u7A0B\u5E8F\u8BBE\u7F6E\u7684 JSONP \u670D\u52A1\u3002\u5982\u679C JSONP \u670D\u52A1\u8D85\u65F6\uFF0C\u5219\u610F\u5473\u7740\u53EF\u80FD\u65E0\u6CD5\u6267\u884C\u901A\u8FC7 define\uFF08\uFF09\u5B9A\u4E49\u7684\u5176\u4ED6\u6A21\u5757\uFF0C\u56E0\u6B64\u9519\u8BEF\u5904\u7406\u4E0D\u53EF\u9760\u3002</p><p>Only JSONP return values that are JSON objects are supported. A JSONP response that is an array, a string or a number will not work.</p><p>\u4EC5\u652F\u6301\u4F5C\u4E3A JSON \u5BF9\u8C61\u7684 JSONP \u8FD4\u56DE\u503C.\u6570\u7EC4\uFF0C\u5B57\u7B26\u4E32\u6216\u6570\u5B57\u7684 JSONP \u54CD\u5E94\u5C06\u4E0D\u8D77\u4F5C\u7528\u3002</p><p>This functionality should not be used for long-polling JSONP connections -- APIs that deal with real time streaming. Those kinds of APIs should do more script cleanup after receiving each response, and RequireJS will only fetch a JSONP URL once -- subsequent uses of the same URL as a dependency in a require() or define() call will get a cached value.</p><p>\u6B64\u51FD\u6570\u4E0D\u5E94\u7528\u4E8E\u957F\u8F6E\u8BE2 JSONP \u8FDE\u63A5-\u7528\u4E8E\u5904\u7406\u5B9E\u65F6\u6D41\u7684 API\u3002\u8FD9\u7C7B API \u5728\u6536\u5230\u6BCF\u4E2A\u54CD\u5E94\u540E\u5E94\u8BE5\u6267\u884C\u66F4\u591A\u7684\u811A\u672C\u6E05\u7406\u5DE5\u4F5C\uFF0C\u5E76\u4E14 RequireJS \u4EC5\u4F1A\u63D0\u53D6\u4E00\u6B21 JSONP URL-\u968F\u540E\u5C06\u76F8\u540C\u7684 URL \u4F5C\u4E3A require\uFF08\uFF09\u6216 define\uFF08\uFF09\u8C03\u7528\u4E2D\u7684\u4F9D\u8D56\u9879\u4F7F\u7528\uFF0C\u5C06\u83B7\u5F97\u4E00\u4E2A\u7F13\u5B58\u7684\u503C\u3002</p><p>Errors in loading a JSONP service are normally surfaced via timeouts for the service, since script tag loading does not give much detail into network problems. To detect errors, you can override requirejs.onError() to get errors. There is more information in the Handling Errors section.</p><p>\u52A0\u8F7D JSONP \u670D\u52A1\u7684\u9519\u8BEF\u901A\u5E38\u4F1A\u901A\u8FC7\u8BE5\u670D\u52A1\u7684\u8D85\u65F6\u800C\u6D6E\u51FA\u6C34\u9762\uFF0C\u56E0\u4E3A\u811A\u672C\u6807\u8BB0\u52A0\u8F7D\u4E0D\u4F1A\u4E3A\u7F51\u7EDC\u95EE\u9898\u63D0\u4F9B\u592A\u591A\u8BE6\u7EC6\u4FE1\u606F\u3002\u8981\u68C0\u6D4B\u9519\u8BEF\uFF0C\u53EF\u4EE5\u91CD\u5199 requirejs.onError\uFF08\uFF09\u4EE5\u83B7\u53D6\u9519\u8BEF\u3002\u5728&quot;\u5904\u7406\u9519\u8BEF&quot;\u90E8\u5206\u4E2D\u6709\u66F4\u591A\u4FE1\u606F\u3002</p><h4 id="undefining-a-module" tabindex="-1"><a class="header-anchor" href="#undefining-a-module" aria-hidden="true">#</a> Undefining a Module</h4><p>There is a global function, requirejs.undef(), that allows undefining a module. It will reset the loader&#39;s internal state to forget about the previous definition of the module.</p><p>\u6709\u4E00\u4E2A\u5168\u5C40\u51FD\u6570 requirejs.undef\uFF08\uFF09\uFF0C\u5B83\u5141\u8BB8\u53D6\u6D88\u5B9A\u4E49\u6A21\u5757\u3002\u5B83\u5C06\u91CD\u7F6E\u52A0\u8F7D\u7A0B\u5E8F\u7684\u5185\u90E8\u72B6\u6001\uFF0C\u4EE5\u5FFD\u7565\u6A21\u5757\u7684\u5148\u524D\u5B9A\u4E49\u3002</p><p>However, it will not remove the module from other modules that are already defined and got a handle on that module as a dependency when they executed. So it is really only useful to use in error situations when no other modules have gotten a handle on a module value, or as part of any future module loading that may use that module. See the errback section for an example.</p><p>\u4F46\u662F\uFF0C\u5B83\u5C06\u4E0D\u4F1A\u4ECE\u5176\u4ED6\u5DF2\u5B9A\u4E49\u7684\u6A21\u5757\u4E2D\u5220\u9664\u8BE5\u6A21\u5757\uFF0C\u5E76\u4E14\u5728\u6267\u884C\u65F6\u4F1A\u5C06\u8BE5\u6A21\u5757\u4F5C\u4E3A\u4F9D\u8D56\u9879\u83B7\u5F97\u8BE5\u6A21\u5757\u7684\u53E5\u67C4\u3002\u56E0\u6B64\uFF0C\u53EA\u6709\u5728\u6CA1\u6709\u5176\u4ED6\u6A21\u5757\u90FD\u65E0\u6CD5\u5904\u7406\u8BE5\u6A21\u5757\u503C\u7684\u9519\u8BEF\u60C5\u51B5\u4E0B\u4F7F\u7528\u5B83\uFF0C\u6216\u8005\u4F5C\u4E3A\u5C06\u6765\u53EF\u80FD\u4F7F\u7528\u8BE5\u6A21\u5757\u7684\u6A21\u5757\u52A0\u8F7D\u7684\u4E00\u90E8\u5206\uFF0C\u5B83\u624D\u771F\u6B63\u6709\u7528\u3002\u6709\u5173\u793A\u4F8B\uFF0C\u8BF7\u53C2\u89C1 errback \u90E8\u5206\u3002</p><p>If you want to do more sophisticated dependency graph analysis for undefining work, the semi-private onResourceLoad API may be helpful.</p><p>\u5982\u679C\u8981\u8FDB\u884C\u66F4\u590D\u6742\u7684\u4F9D\u8D56\u5173\u7CFB\u56FE\u5206\u6790\u4EE5\u8FDB\u884C\u672A\u5B9A\u4E49\u7684\u5DE5\u4F5C\uFF0C\u5219\u534A\u79C1\u6709\u7684 onResourceLoad API \u53EF\u80FD\u4F1A\u6709\u6240\u5E2E\u52A9\u3002</p><h3 id="mechanics" tabindex="-1"><a class="header-anchor" href="#mechanics" aria-hidden="true">#</a> MECHANICS</h3><p>RequireJS loads each dependency as a script tag, using head.appendChild().</p><p>RequireJS \u4F7F\u7528 head.appendChild\uFF08\uFF09\u5C06\u6BCF\u4E2A\u4F9D\u8D56\u9879\u4F5C\u4E3A\u811A\u672C\u6807\u7B7E\u52A0\u8F7D\u3002</p><p>RequireJS waits for all dependencies to load, figures out the right order in which to call the functions that define the modules, then calls the module definition functions once the dependencies for those functions have been called. Note that the dependencies for a given module definition function could be called in any order, due to their sub-dependency relationships and network load order.</p><p>RequireJS \u7B49\u5F85\u6240\u6709\u4F9D\u8D56\u9879\u52A0\u8F7D\uFF0C\u627E\u51FA\u6B63\u786E\u7684\u987A\u5E8F\u6765\u8C03\u7528\u5B9A\u4E49\u6A21\u5757\u7684\u51FD\u6570\uFF0C\u7136\u540E\u5728\u8C03\u7528\u8FD9\u4E9B\u51FD\u6570\u7684\u4F9D\u8D56\u9879\u540E\u8C03\u7528\u6A21\u5757\u5B9A\u4E49\u51FD\u6570\u3002\u8BF7\u6CE8\u610F\uFF0C\u7531\u4E8E\u7ED9\u5B9A\u6A21\u5757\u5B9A\u4E49\u51FD\u6570\u7684\u5B50\u4F9D\u8D56\u5173\u7CFB\u548C\u7F51\u7EDC\u8D1F\u8F7D\u987A\u5E8F\uFF0C\u53EF\u4EE5\u6309\u4EFB\u4F55\u987A\u5E8F\u8C03\u7528\u5B83\u4EEC\u7684\u4F9D\u8D56\u5173\u7CFB\u3002</p><p>Using RequireJS in a server-side JavaScript environment that has synchronous loading should be as easy as redefining require.load(). The build system does this, the require.load method for that environment can be found in build/jslib/requirePatch.js.</p><p>\u5728\u5177\u6709\u540C\u6B65\u52A0\u8F7D\u7684\u670D\u52A1\u5668\u7AEF JavaScript \u73AF\u5883\u4E2D\u4F7F\u7528 RequireJS \u5C31\u50CF\u91CD\u65B0\u5B9A\u4E49 require.load\uFF08\uFF09\u4E00\u6837\u5BB9\u6613\u3002\u6784\u5EFA\u7CFB\u7EDF\u4F1A\u6267\u884C\u6B64\u64CD\u4F5C\uFF0C\u53EF\u4EE5\u5728 build/jslib/requirePatch.js \u4E2D\u627E\u5230\u8BE5\u73AF\u5883\u7684 require.load \u65B9\u6CD5\u3002</p><p>In the future, this code may be pulled into the require/ directory as an optional module that you can load in your env to get the right load behavior based on the host environment.</p><p>\u5C06\u6765\uFF0C\u6B64\u4EE3\u7801\u53EF\u80FD\u4F5C\u4E3A\u53EF\u9009\u6A21\u5757\u88AB\u62C9\u5165 require /\u76EE\u5F55\uFF0C\u60A8\u53EF\u4EE5\u5728\u73AF\u5883\u4E2D\u52A0\u8F7D\u8BE5\u6A21\u5757\u4EE5\u6839\u636E\u4E3B\u673A\u73AF\u5883\u83B7\u5F97\u6B63\u786E\u7684\u52A0\u8F7D\u884C\u4E3A\u3002</p><h3 id="configuration-options" tabindex="-1"><a class="header-anchor" href="#configuration-options" aria-hidden="true">#</a> CONFIGURATION OPTIONS</h3><p>When using require() in the top-level HTML page (or top-level script file that does not define a module), a configuration object can be passed as the first option:</p><p>\u5728\u9876\u5C42 HTML \u9875\u9762\uFF08\u6216\u672A\u5B9A\u4E49\u6A21\u5757\u7684\u9876\u5C42\u811A\u672C\u6587\u4EF6\uFF09\u4E2D\u4F7F\u7528 require\uFF08\uFF09\u65F6\uFF0C\u53EF\u4EE5\u5C06\u914D\u7F6E\u5BF9\u8C61\u4F5C\u4E3A\u7B2C\u4E00\u4E2A\u9009\u9879\u4F20\u9012\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;scripts/require.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;/another/path&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;some&quot;</span><span class="token operator">:</span> <span class="token string">&quot;some/v1.0&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">waitSeconds</span><span class="token operator">:</span> <span class="token number">15</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">require</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">&quot;some/module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my/module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">someModule<span class="token punctuation">,</span>    myModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//This function will be called when all the dependencies</span>
        <span class="token comment">//listed above are loaded. Note that this function could</span>
        <span class="token comment">//be called before the page is loaded.</span>
        <span class="token comment">//This callback is optional.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>You may also call require.config from your data-main Entry Point, but be aware that the data-main script is loaded asynchronously. Avoid other entry point scripts which wrongly assume that data-main and its require.config will always execute prior to their script loading.</p><p>\u60A8\u4E5F\u53EF\u4EE5\u4ECE\u6570\u636E\u4E3B\u5165\u53E3\u70B9\u8C03\u7528 require.config \uFF0C\u4F46\u662F\u8BF7\u6CE8\u610F\uFF0C\u6570\u636E\u4E3B\u811A\u672C\u662F\u5F02\u6B65\u52A0\u8F7D\u7684\u3002\u907F\u514D\u4F7F\u7528\u5176\u4ED6\u5165\u53E3\u70B9\u811A\u672C\uFF0C\u8FD9\u4E9B\u811A\u672C\u9519\u8BEF\u5730\u5047\u5B9A data-main \u53CA\u5176 require.config \u5C06\u59CB\u7EC8\u5728\u811A\u672C\u52A0\u8F7D\u4E4B\u524D\u6267\u884C\u3002</p><p>Also, you can define the config object as the global variable require before require.js is loaded, and have the values applied automatically. This example specifies some dependencies to load as soon as require.js defines require():</p><p>\u53E6\u5916\uFF0C\u53EF\u4EE5 require \u5728\u52A0\u8F7D require.js \u4E4B\u524D\u5C06 config \u5BF9\u8C61\u5B9A\u4E49\u4E3A\u5168\u5C40\u53D8\u91CF\uFF0C\u5E76\u81EA\u52A8\u5E94\u7528\u503C\u3002\u6B64\u793A\u4F8B\u6307\u5B9A\u4E86\u4E00\u4E9B\u8981\u5728 require.js \u5B9A\u4E49 require\uFF08\uFF09\u65F6\u52A0\u8F7D\u7684\u4F9D\u8D56\u9879\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">var</span> require <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;some/module1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my/module2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module1<span class="token punctuation">,</span> module2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//This function will be called when all the dependencies</span>
            <span class="token comment">//listed above in deps are loaded. Note that this</span>
            <span class="token comment">//function could be called before the page is loaded.</span>
            <span class="token comment">//This callback is optional.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;scripts/require.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Note: It is best to use var require = {} and do not use window.require = {}, it will not behave correctly in IE.</p><p>\u6CE8\u610F: \u6700\u597D\u4F7F\u7528 var require = {}\u5E76\u4E14\u4E0D\u8981\u4F7F\u7528 window.require = {}\uFF0C\u5B83\u5C06\u5728 IE \u4E2D\u65E0\u6CD5\u6B63\u786E\u8FD0\u884C\u3002</p><p>There are some patterns for separating the config from main module loading.</p><p>\u8FD9\u6709\u4E00\u4E9B\u4ECE\u4E3B\u6A21\u5757\u52A0\u8F7D\u4E2D\u5206\u79BB\u914D\u7F6E\u7684\u6A21\u5F0F</p><p>Supported configuration options:</p><p>\u652F\u6301\u7684\u914D\u7F6E\u9879\uFF1A</p><p><strong>baseUrl</strong>: the root path to use for all module lookups. So in the above example, &quot;my/module&quot;&#39;s script tag will have a src=&quot;/another/path/my/module.js&quot;. baseUrl is not used when loading plain .js files (indicated by a dependency string starting with a slash, has a protocol, or ends in .js), those strings are used as-is, so a.js and b.js will be loaded from the same directory as the HTML page that contains the above snippet.</p><p>If no baseUrl is explicitly set in the configuration, the default value will be the location of the HTML page that loads require.js. If a data-main attribute is used, that path will become the baseUrl.</p><p>The baseUrl can be a URL on a different domain as the page that will load require.js. RequireJS script loading works across domains. The only restriction is on text content loaded by text! plugins: those paths should be on the same domain as the page, at least during development. The optimization tool will inline text! plugin resources so after using the optimization tool, you can use resources that reference text! plugin resources from another domain.</p><p><strong>baseUrl</strong>: \u7528\u4E8E\u6240\u6709\u6A21\u5757\u67E5\u627E\u7684\u6839\u8DEF\u5F84\u3002\u56E0\u6B64\uFF0C\u5728\u4E0A\u9762\u7684\u793A\u4F8B\u4E2D\uFF0C&quot;my/module&quot;\u7684\u811A\u672C\u6807\u7B7E\u5C06\u5177\u6709 src =&quot;/another/path/my/module.js&quot;\u3002\u662F\u7684 baseUrl \u4E0D\u88C5\u5165\u666E\u901A.js \u6587\u4EF6\u65F6\u4F7F\u7528\u7684\uFF08\u7531\u4E00\u4E2A\u4F9D\u8D56\u5B57\u7B26\u4E32\u6307\u793A\u5F00\u59CB\u4EE5\u659C\u7EBF\uFF0C\u5177\u6709\u534F\u8BAE\uFF0C\u6216\u5728\u7AEF\u90E8\u7684.js\uFF09\uFF0C\u8FD9\u4E9B\u5B57\u7B26\u4E32\u88AB\u539F\u6837\u4F7F\u7528\uFF0C\u6240\u4EE5 a.js \u548C b.js \u5C06\u4ECE\u4E0E\u5305\u542B\u4E0A\u8FF0\u4EE3\u7801\u6BB5\u7684 HTML \u9875\u9762\u76F8\u540C\u7684\u76EE\u5F55\u4E2D\u52A0\u8F7D\u3002</p><p>\u5982\u679C\u5728\u914D\u7F6E\u4E2D\u672A\u663E\u5F0F\u8BBE\u7F6E baseUrl\uFF0C\u5219\u9ED8\u8BA4\u503C\u5C06\u662F\u52A0\u8F7D require.js \u7684 HTML \u9875\u9762\u7684\u4F4D\u7F6E\u3002\u5982\u679C\u4F7F\u7528 data-main \u5C5E\u6027\uFF0C\u5219\u8BE5\u8DEF\u5F84\u5C06\u6210\u4E3A baseUrl\u3002</p><p>baseUrl \u53EF\u4EE5\u662F\u4E0E\u5C06\u52A0\u8F7D require.js \u7684\u9875\u9762\u4E0D\u540C\u7684\u57DF\u4E0A\u7684 URL\u3002RequireJS \u811A\u672C\u52A0\u8F7D\u8DE8\u57DF\u5DE5\u4F5C\u3002\u552F\u4E00\u7684\u9650\u5236\u662F\u6587\u672C\u52A0\u8F7D\u7684\u6587\u672C\u5185\u5BB9\uFF01\u63D2\u4EF6\uFF1A\u81F3\u5C11\u5728\u5F00\u53D1\u8FC7\u7A0B\u4E2D\uFF0C\u8FD9\u4E9B\u8DEF\u5F84\u5E94\u4E0E\u9875\u9762\u4F4D\u4E8E\u540C\u4E00\u57DF\u3002\u4F18\u5316\u5DE5\u5177\u5C06\u5185\u8054\u6587\u672C\uFF01\u63D2\u4EF6\u8D44\u6E90\uFF0C\u56E0\u6B64\u5728\u4F7F\u7528\u4F18\u5316\u5DE5\u5177\u540E\uFF0C\u60A8\u53EF\u4EE5\u4F7F\u7528\u5F15\u7528\u6587\u672C\u7684\u8D44\u6E90\uFF01\u6765\u81EA\u53E6\u4E00\u4E2A\u57DF\u7684\u63D2\u4EF6\u8D44\u6E90\u3002</p><p><strong>paths</strong>: path mappings for module names not found directly under baseUrl. The path settings are assumed to be relative to baseUrl, unless the paths setting starts with a &quot;/&quot; or has a URL protocol in it (&quot;like http:&quot;). Using the above sample config, &quot;some/module&quot;&#39;s script tag will be src=&quot;/another/path/some/v1.0/module.js&quot;.</p><p>The path that is used for a module name should not include an extension, since the path mapping could be for a directory. The path mapping code will automatically add the .js extension when mapping the module name to a path. If require.toUrl() is used, it will add the appropriate extension, if it is for something like a text template.</p><p>When run in a browser, paths fallbacks can be specified, to allow trying a load from a CDN location, but falling back to a local location if the CDN location fails to load.</p><p><strong>paths</strong> \uFF1A\u5728 baseUrl \u7684\u6B63\u4E0B\u65B9\u627E\u4E0D\u5230\u6A21\u5757\u540D\u79F0\u7684\u8DEF\u5F84\u6620\u5C04\u3002\u9664\u975E\u8DEF\u5F84\u8BBE\u7F6E\u4EE5&quot;/&quot;\u5F00\u5934\u6216\u5176\u4E2D\u5305\u542B URL \u534F\u8BAE\uFF08\u4F8B\u5982&quot;http\uFF1A&quot;\uFF09\uFF0C\u5426\u5219\u5047\u5B9A\u8BE5\u8DEF\u5F84\u8BBE\u7F6E\u76F8\u5BF9\u4E8E baseUrl\u3002\u4F7F\u7528\u4E0A\u9762\u7684\u793A\u4F8B\u914D\u7F6E\uFF0C&quot;some/module&quot;\u7684\u811A\u672C\u6807\u7B7E\u5C06\u4E3A src =&quot;/another/path/some/v1.0/module.js&quot;\u3002</p><p>\u88AB\u7528\u4E8E\u6A21\u5757\u540D\u79F0\u5E94\u8BE5\u8DEF\u5F84\u4E0D\u5305\u62EC\u6269\u5C55\u540D\uFF0C\u56E0\u4E3A path \u6620\u5C04\u53EF\u80FD\u662F\u4E00\u4E2A\u76EE\u5F55\u3002\u5F53\u5C06\u6A21\u5757\u540D\u79F0\u6620\u5C04\u5230\u8DEF\u5F84\u65F6\uFF0C\u8DEF\u5F84\u6620\u5C04\u4EE3\u7801\u5C06\u81EA\u52A8\u6DFB\u52A0.js \u6269\u5C55\u540D\u3002\u5982\u679C\u4F7F\u7528\u4E86 require.toUrl\uFF08\uFF09\uFF0C\u5B83\u5C06\u6DFB\u52A0\u9002\u5F53\u7684\u6269\u5C55\u540D\uFF08\u5982\u679C\u7528\u4E8E\u6587\u672C\u6A21\u677F\uFF09\u3002</p><p>\u5728\u6D4F\u89C8\u5668\u4E2D\u8FD0\u884C\u65F6\uFF0C\u53EF\u4EE5\u6307\u5B9A\u8DEF\u5F84\u56DE\u9000\uFF0C\u4EE5\u5141\u8BB8\u5C1D\u8BD5\u4ECE CDN \u4F4D\u7F6E\u8FDB\u884C\u52A0\u8F7D\uFF0C\u4F46\u662F\u5982\u679C CDN \u4F4D\u7F6E\u65E0\u6CD5\u52A0\u8F7D\uFF0C\u5219\u56DE\u9000\u5230\u672C\u5730\u4F4D\u7F6E\u3002</p><p><strong>bundles</strong>: Introduced in RequireJS 2.1.10: allows configuring multiple module IDs to be found in another script. Example:</p><p><strong>bundles</strong>\uFF1ARequireJS 2.1.10 \u4E2D\u4ECB\u7ECD\uFF1A\u5141\u8BB8\u8BBE\u7F6E\u591A\u4E2A\u6A21\u5757 id \u6765\u5728\u53E6\u4E00\u4E2A\u811A\u672C\u4E2D\u88AB\u53D1\u73B0\u3002\u4F8B\u5982</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">bundles</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;util&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text!template.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;text!secondary.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">util<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//The script for module ID &#39;primary&#39; was loaded,</span>
	<span class="token comment">//and that script included the define()&#39;d</span>
	<span class="token comment">//modules for &#39;util&#39; and &#39;text&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>That config states: modules &#39;main&#39;, &#39;util&#39;, &#39;text&#39; and &#39;text!template.html&#39; will be found by loading module ID &#39;primary&#39;. Module &#39;text!secondary.html&#39; can be found by loading module ID &#39;secondary&#39;.</p><p>\u8BE5\u914D\u7F6E\u6307\u51FA\uFF1A\u6A21\u5757&quot;main&quot;\uFF0C&quot;util&quot;\uFF0C&quot;text&quot;\u548C&quot;text\uFF01template.html&quot;\u5C06\u901A\u8FC7\u52A0\u8F7D\u6A21\u5757 ID&quot;primary&quot;\u6765\u627E\u5230\u3002\u53EF\u4EE5\u901A\u8FC7\u52A0\u8F7D\u6A21\u5757 ID&quot;secondary&quot;\u6765\u627E\u5230\u6A21\u5757 \u200B\u200B&quot;text\uFF01secondary.html&quot;\u3002</p><p>This only sets up where to find a module inside a script that has multiple define()&#39;d modules in it. It does not automatically bind those modules to the bundle&#39;s module ID. The bundle&#39;s module ID is just used for locating the set of modules.</p><p>\u8FD9\u4EC5\u8BBE\u7F6E\u4E86\u5728\u811A\u672C\u4E2D\u5305\u542B\u591A\u4E2A define\uFF08\uFF09\u6A21\u5757\u7684\u6A21\u5757\u4E2D\u67E5\u627E\u6A21\u5757\u7684\u4F4D\u7F6E\u3002\u5B83\u4E0D\u4F1A\u81EA\u52A8\u5C06\u90A3\u4E9B\u6A21\u5757\u7ED1\u5B9A\u5230\u6346\u7ED1\u8F6F\u4EF6\u7684\u6A21\u5757 ID\u3002\u6346\u7ED1\u8F6F\u4EF6\u7684\u6A21\u5757 ID \u4EC5\u7528\u4E8E\u67E5\u627E\u6A21\u5757\u96C6\u3002</p><p>Something similar is possible with paths config, but it is much wordier, and the paths config route does not allow loader plugin resource IDs in its configuration, since the paths config values are path segments, not IDs.</p><p>\u4F7F\u7528 path config \u53EF\u80FD\u4F1A\u53D1\u751F\u7C7B\u4F3C\u7684\u4E8B\u60C5\uFF0C\u4F46\u662F\u5B83\u8981\u590D\u6742\u5F97\u591A\uFF0C\u5E76\u4E14 path config \u8DEF\u7531\u4E0D\u5141\u8BB8\u5728\u5176\u914D\u7F6E\u4E2D\u4F7F\u7528\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u8D44\u6E90 ID\uFF0C\u56E0\u4E3A path config \u7684\u503C\u662F\u8DEF\u5F84\u6BB5\u800C\u4E0D\u662F ID\u3002</p><p>bundles config is useful if doing a build and that build target was not an existing module ID, or if you have loader plugin resources in built JS files that should not be loaded by the loader plugin. Note that the keys and values are module IDs, not path segments. They are absolute module IDs, not a module ID prefix like paths config or map config. Also, bundle config is different from map config in that map config is a one-to-one module ID relationship, where bundle config is for pointing multiple module IDs to a bundle&#39;s module ID.</p><p>\u5982\u679C\u6267\u884C\u6784\u5EFA\u5E76\u4E14\u8BE5\u6784\u5EFA\u76EE\u6807\u4E0D\u662F\u73B0\u6709\u7684\u6A21\u5757 ID\uFF0C\u6216\u8005\u5982\u679C\u5DF2\u6784\u5EFA\u7684 JS \u6587\u4EF6\u4E2D\u5305\u542B\u4E0D\u5E94\u7531\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u52A0\u8F7D\u7684\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u8D44\u6E90\uFF0C\u5219 bundles config \u5F88\u6709\u7528\u3002\u8BF7\u6CE8\u610F\uFF0C\u952E\u548C\u503C\u662F\u6A21\u5757 ID\uFF0C\u800C\u4E0D\u662F\u8DEF\u5F84\u6BB5\u3002\u5B83\u4EEC\u662F\u7EDD\u5BF9\u6A21\u5757 ID\uFF0C\u800C\u4E0D\u662F\u50CF path config \u6216 map config \u8FD9\u6837\u7684\u6A21\u5757 ID \u524D\u7F00\u3002\u53E6\u5916\uFF0Cbundle config \u4E0E map config \u7684\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E map config \u662F\u4E00\u5BF9\u4E00\u7684\u6A21\u5757 ID \u5173\u7CFB\uFF0C\u5176\u4E2D bundle config \u7528\u4E8E\u5C06\u591A\u4E2A\u6A21\u5757 ID \u6307\u5411 bundle \u7684\u6A21\u5757 ID\u3002</p><p>As of RequireJS 2.2.0, the optimizer can generate the bundles config and insert it into the top level requirejs.config() call. See the bundlesConfigOutFile build config option for more details.</p><p>\u4ECE RequireJS 2.2.0 \u5F00\u59CB\uFF0C\u4F18\u5316\u5668\u53EF\u4EE5\u751F\u6210 bundle config \u5E76\u5C06\u5176\u63D2\u5165\u5230\u9876\u5C42 requirejs.config\uFF08\uFF09\u8C03\u7528\u4E2D\u3002\u6709\u5173\u66F4\u591A\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 bundlesConfigOutFile \u6784\u5EFA\u914D\u7F6E\u9009\u9879\u3002</p><p><strong>shim</strong>: Configure the dependencies, exports, and custom initialization for older, traditional &quot;browser globals&quot; scripts that do not use define() to declare the dependencies and set a module value.</p><p>shim: \u4E3A\u4E0D\u4F7F\u7528 define\uFF08\uFF09\u58F0\u660E\u4F9D\u8D56\u5173\u7CFB\u548C\u8BBE\u7F6E\u6A21\u5757\u503C\u7684\u8F83\u65E7\u7684\u4F20\u7EDF&quot;\u6D4F\u89C8\u5668\u5168\u5C40\u53D8\u91CF&quot;\u811A\u672C\u914D\u7F6E\u4F9D\u8D56\u5173\u7CFB\uFF0C\u5BFC\u51FA\u548C\u81EA\u5B9A\u4E49\u521D\u59CB\u5316\u3002</p><p>Here is an example. It requires RequireJS 2.1.0+, and assumes backbone.js, underscore.js and jquery.js have been installed in the baseUrl directory. If not, then you may need to set a paths config for them:</p><p>\u8FD9\u662F\u4E00\u4E2A\u4F8B\u5B50\u3002\u5B83\u9700\u8981 RequireJS 2.1.0+\uFF0C\u5E76\u5047\u5B9A\u5728 baseUrl \u76EE\u5F55\u4E2D\u5DF2\u5B89\u88C5\u4E86 ribs.js\uFF0Cunderscore.js \u548C jquery.js\u3002\u5982\u679C\u6CA1\u6709\uFF0C\u90A3\u4E48\u60A8\u53EF\u80FD\u9700\u8981\u4E3A\u5B83\u4EEC\u8BBE\u7F6E\u8DEF\u5F84\u914D\u7F6E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//Remember: only use shim config for non-AMD scripts,</span>
	<span class="token comment">//scripts that do not already call define(). The shim</span>
	<span class="token comment">//config will not work correctly if used on AMD scripts,</span>
	<span class="token comment">//in particular, the exports and init config will not</span>
	<span class="token comment">//be triggered, and the deps config will be confusing</span>
	<span class="token comment">//for those cases.</span>
	<span class="token literal-property property">shim</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">backbone</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">//These script dependencies should be loaded before loading</span>
			<span class="token comment">//backbone.js</span>
			<span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;underscore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token comment">//Once loaded, use the global &#39;Backbone&#39; as the</span>
			<span class="token comment">//module value.</span>
			<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;Backbone&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">underscore</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;Foo&#39;</span><span class="token punctuation">,</span>
			<span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">//Using a function allows you to call noConflict for</span>
				<span class="token comment">//libraries that support it, and do other cleanup.</span>
				<span class="token comment">//However, plugins for those libraries may still want</span>
				<span class="token comment">//a global. &quot;this&quot; for the function will be the global</span>
				<span class="token comment">//object. The dependencies will be passed in as</span>
				<span class="token comment">//function arguments. If this function returns a value,</span>
				<span class="token comment">//then that value is used as the module export value</span>
				<span class="token comment">//instead of the object found via the &#39;exports&#39; string.</span>
				<span class="token comment">//Note: jQuery registers as an AMD module via define(),</span>
				<span class="token comment">//so this will not work for jQuery. See notes section</span>
				<span class="token comment">//below for an approach for jQuery.</span>
				<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Foo<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//Then, later in a separate file, call it &#39;MyModel.js&#39;, a module is</span>
<span class="token comment">//defined, specifying &#39;backbone&#39; as a dependency. RequireJS will use</span>
<span class="token comment">//the shim config to properly load &#39;backbone&#39; and give a local</span>
<span class="token comment">//reference to this module. The global Backbone will still exist on</span>
<span class="token comment">//the page too.</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;backbone&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Backbone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Backbone<span class="token punctuation">.</span>Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>In RequireJS 2.0.*, the &quot;exports&quot; property in the shim config could have been a function instead of a string. In that case, it functioned the same as the &quot;init&quot; property as shown above. The &quot;init&quot; pattern is used in RequireJS 2.1.0+ so a string value for exports can be used for enforceDefine, but then allow functional work once the library is known to have loaded.</p><p>\u5728 RequireJS 2.0\u3002*\u4E2D\uFF0Cshim \u914D\u7F6E\u4E2D\u7684&quot;exports&quot;\u5C5E\u6027\u53EF\u80FD\u662F\u51FD\u6570\u800C\u4E0D\u662F\u5B57\u7B26\u4E32\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5B83\u7684\u51FD\u6570\u4E0E\u4E0A\u8FF0&quot;init&quot;\u5C5E\u6027\u76F8\u540C\u3002&quot;init&quot;\u6A21\u5F0F\u5728 RequireJS 2.1.0+\u4E2D\u4F7F\u7528\uFF0C\u56E0\u6B64 exports \u53EF\u4EE5\u5C06\u5B57\u7B26\u4E32\u503C\u7528\u4E8E forceDefine\uFF0C\u4F46\u662F\u4E00\u65E6\u5DF2\u77E5\u5DF2\u52A0\u8F7D\u5E93\uFF0C\u5C31\u53EF\u4EE5\u8FDB\u884C\u51FD\u6570\u5DE5\u4F5C\u3002</p><p>For &quot;modules&quot; that are just jQuery or Backbone plugins that do not need to export any module value, the shim config can just be an array of dependencies:</p><p>\u5BF9\u4E8E\u53EA\u662F jQuery \u6216 Backbone \u63D2\u4EF6\u7684&quot;\u6A21\u5757&quot;\uFF0C\u4E0D\u9700\u8981\u5BFC\u51FA\u4EFB\u4F55\u6A21\u5757\u503C\uFF0Cshim \u914D\u7F6E\u53EF\u4EE5\u53EA\u662F\u4E00\u4E2A\u4F9D\u8D56\u9879\u6570\u7EC4\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">shim</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;jquery.colorize&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;jquery.scroll&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;backbone.layoutmanager&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;backbone&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Note however if you want to get 404 load detection in IE so that you can use paths fallbacks or errbacks, then a string exports value should be given so the loader can check if the scripts actually loaded (a return from init is not used for enforceDefine checking): \u4F46\u662F\u8BF7\u6CE8\u610F\uFF0C\u5982\u679C\u8981\u5728 IE \u4E2D\u8FDB\u884C 404 \u8D1F\u8F7D\u68C0\u6D4B\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u4F7F\u7528\u8DEF\u5F84\u56DE\u9000\u6216 errbacks\uFF0C\u5219\u5E94\u63D0\u4F9B\u5B57\u7B26\u4E32\u8F93\u51FA\u503C\uFF0C\u4EE5\u4FBF\u52A0\u8F7D\u7A0B\u5E8F\u53EF\u4EE5\u68C0\u67E5\u811A\u672C\u662F\u5426\u5B9E\u9645\u52A0\u8F7D\uFF08init \u7684\u8FD4\u56DE\u4E0D\u7528\u4E8E enforceDefine \u68C0\u67E5\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">shim</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;jquery.colorize&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;jQuery.fn.colorize&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;jquery.scroll&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;jQuery.fn.scroll&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;backbone.layoutmanager&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;backbone&#39;</span><span class="token punctuation">]</span>
				<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token string">&#39;Backbone.LayoutManager&#39;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Important notes for &quot;shim&quot; config:</p><p>&quot;shim&quot;\u914D\u7F6E\u7684\u91CD\u8981\u8BF4\u660E\uFF1A</p><ul><li>The shim config only sets up code relationships. To load modules that are part of or use shim config, a normal require/define call is needed. Setting shim by itself does not trigger code to load.</li></ul><p>shim \u914D\u7F6E\u4EC5\u8BBE\u7F6E\u4EE3\u7801\u5173\u7CFB\u3002\u8981\u52A0\u8F7D\u5C5E\u4E8E shim config \u6216\u4F7F\u7528 shim config \u7684\u6A21\u5757\uFF0C\u9700\u8981\u4E00\u4E2A\u6B63\u5E38\u7684 require/define \u8C03\u7528\u3002\u672C\u8EAB\u8BBE\u7F6E\u586B\u5145\u7A0B\u5E8F\u4E0D\u4F1A\u89E6\u53D1\u4EE3\u7801\u52A0\u8F7D\u3002</p><ul><li>Only use other &quot;shim&quot; modules as dependencies for shimmed scripts, or AMD libraries that have no dependencies and call define() after they also create a global (like jQuery or lodash). Otherwise, if you use an AMD module as a dependency for a shim config module, after a build, that AMD module may not be evaluated until after the shimmed code in the build executes, and an error will occur. The ultimate fix is to upgrade all the shimmed code to have optional AMD define() calls.</li></ul><p>\u53EA\u4F7F\u7528\u5176\u4ED6 shim \u6A21\u5757\u4F5C\u4E3A shimmed \u811A\u672C\u6A21\u5757\u7684\u4F9D\u8D56\u9879\uFF0C\u6216\u8005 \u90A3\u4E9B\u6CA1\u6709\u4F9D\u8D56\u9879\u7684 AMD \u5E93\u5E76\u5728\u4ED6\u4EEC\u521B\u5EFA\u5168\u5C40(\u4F8B\u5982 jQuery \u6216\u8005 lodash)\u540E\u8C03\u7528 define().\u5426\u5219\uFF0C\u5982\u679C\u4F60\u4F7F\u7528\u4E00\u4E2A AMD \u6A21\u5757\u4F5C\u4E3A shim \u914D\u7F6E\u6A21\u5757\u7684\u4F9D\u8D56 \uFF0C\u5728\u6784\u5EFA\u4E4B\u540E\uFF0C\u90A3\u4E2A AMD \u6A21\u5757\u53EF\u80FD\u76F4\u5230\u6784\u5EFA\u4E2D\u7684 shimmed \u4EE3\u7801\u88AB\u6267\u884C\u4EE5\u540E\u624D\u4F1A\u88AB\u8BC4\u4F30\uFF0C\u5E76\u4E14\u4E00\u4F1A\u51FA\u73B0\u9519\u8BEF\u3002\u6700\u7EC8\u7684\u89E3\u51B3\u65B9\u6848\u662F\u5347\u7EA7\u6240\u6709\u7684 shimmed \u4EE3\u7801\u6765\u4F7F\u5F97\u53EF\u9009\u7684 AMD define() \u8C03\u7528\u3002</p><ul><li>If it is not possible to upgrade the shimmed code to use AMD define() calls, as of RequireJS 2.1.11, the optimizer has a wrapShim build option that will try to automatically wrap the shimmed code in a define() for a build. This changes the scope of shimmed dependencies, so it is not guaranteed to always work, but, for example, for shimmed dependencies that depend on an AMD version of Backbone, it can be helpful.</li></ul><p>\u4ECE RequireJS 2.1.11 \u5F00\u59CB\uFF0C\u5982\u679C\u65E0\u6CD5\u5347\u7EA7\u586B\u5145\u4EE3\u7801\u4EE5\u4F7F\u7528 AMD define\uFF08\uFF09\u8C03\u7528\uFF0C\u5219\u4F18\u5316\u5668\u5177\u6709 wrapShim \u6784\u5EFA\u9009\u9879\uFF0C\u8BE5\u9009\u9879\u5C06\u5C1D\u8BD5\u81EA\u52A8\u5C06\u586B\u5145\u4EE3\u7801\u5305\u88C5\u5728 define\uFF08\uFF09\u4E2D\u4EE5\u8FDB\u884C\u6784\u5EFA\u3002\u8FD9\u4F1A\u66F4\u6539\u586B\u5145\u7684\u4F9D\u8D56\u9879\u7684\u8303\u56F4\uFF0C\u56E0\u6B64\u4E0D\u80FD\u4FDD\u8BC1\u59CB\u7EC8\u8D77\u4F5C\u7528\uFF0C\u4F46\u662F\uFF0C\u4F8B\u5982\uFF0C\u5BF9\u4E8E\u4F9D\u8D56\u4E8E AMD \u7248\u672C\u7684 Backbone \u7684\u586B\u5145\u7684\u4F9D\u8D56\u9879\uFF0C\u5B83\u53EF\u80FD\u4F1A\u6709\u6240\u5E2E\u52A9\u3002</p><p>\u5982\u679C\u4E0D\u80FD\u5347\u7EA7 shimmed \u4EE3\u7801\u6765\u4F7F\u7528 AMD define()\u8C03\u7528\uFF0C\u4ECE RequireJS 2.1.11 \u5F00\u59CB\uFF0C\u8FD9\u4E2A\u4F18\u5316\u5668\u6709\u4E00\u4E2A wrapShim \u6784\u5EFA\u9009\u9879\uFF0C\u4ED6\u4F1A\u5C1D\u8BD5\u81EA\u52A8\u5C06 shimmed \u4EE3\u7801 \u5305\u88C5\u5728\u4E00\u4E2A define() \u4E2D\u53BB\u6784\u5EFA\u3002\u8FD9\u6539\u53D8\u4E86 shimmed \u4F9D\u8D56\u9879\u7684\u8303\u56F4\uFF0C\u56E0\u6B64\u5B83\u4E0D\u80FD\u786E\u4FDD\u603B\u662F\u5DE5\u4F5C\uFF0C\u4F8B\u5982\uFF0C\u5BF9\u4E8E\u4F9D\u8D56\u4E8E\u4E00\u4E2A AMD \u7684\u7248\u672C\u7684 Backbone \u7684 shimmed \u4F9D\u8D56\uFF0C\u4ED6\u662F\u6709\u7528\u7684\u3002</p><ul><li>The init function will not be called for AMD modules. For example, you cannot use a shim init function to call jQuery&#39;s noConflict. See Mapping Modules to use noConflict for an alternate approach to jQuery.</li></ul><p>\u5BF9\u4E8E AMD \u6A21\u5757\uFF0C\u4E0D\u4F1A\u8C03\u7528 init \u51FD\u6570\u3002\u4F8B\u5982\uFF0C\u60A8\u4E0D\u80FD\u4F7F\u7528 shim init \u51FD\u6570\u6765\u8C03\u7528 jQuery \u7684 noConflict\u3002\u8BF7\u53C2\u9605\u6620\u5C04\u6A21\u5757\u4EE5\u5C06 noConflict \u7528\u4E8E jQuery \u7684\u66FF\u4EE3\u65B9\u6CD5\u3002</p><ul><li>Shim config is not supported when running AMD modules in node via RequireJS (it works for optimizer use though). Depending on the module being shimmed, it may fail in Node because Node does not have the same global environment as browsers. As of RequireJS 2.1.7, it will warn you in the console that shim config is not supported, and it may or may not work. If you wish to suppress that message, you can pass requirejs.config({ suppress: { nodeShim: true }});.</li></ul><p>\u901A\u8FC7 RequireJS \u5728 Node \u4E2D\u8FD0\u884C AMD \u6A21\u5757\u65F6\uFF0C\u4E0D\u652F\u6301 Shim config\uFF08\u5C3D\u7BA1\u5B83\u53EF\u7528\u4E8E\u4F18\u5316\u7A0B\u5E8F\uFF09\u3002\u53D6\u51B3\u4E8E\u8981\u586B\u5145\u7684\u6A21\u5757\uFF0C\u5B83\u53EF\u80FD\u5728 Node \u4E2D\u5931\u8D25\uFF0C\u56E0\u4E3A Node \u4E0E\u6D4F\u89C8\u5668\u6CA1\u6709\u76F8\u540C\u7684\u5168\u5C40\u73AF\u5883\u3002\u4ECE RequireJS 2.1.7 \u5F00\u59CB\uFF0C\u5B83\u5C06\u5728\u63A7\u5236\u53F0\u4E2D\u8B66\u544A\u60A8\u4E0D\u652F\u6301 shim config\uFF0C\u5E76\u4E14\u5B83\u53EF\u80FD\u4F1A\u6216\u53EF\u80FD\u4E0D\u4F1A\u8D77\u4F5C\u7528\u3002\u5982\u679C\u60A8\u5E0C\u671B\u9690\u85CF\u8BE5\u6D88\u606F\uFF0C\u5219\u53EF\u4EE5\u901A\u8FC7 requirejs.config({ suppress: { nodeShim: true }});\u3002</p><p>Important optimizer notes for &quot;shim&quot; config:</p><p>\u201Cshim\u201D\u914D\u7F6E\u7684\u91CD\u8981\u4F18\u5316\u6CE8\u610F\u4E8B\u9879:</p><ul><li>You should use the mainConfigFile build option to specify the file where to find the shim config. Otherwise the optimizer will not know of the shim config. The other option is to duplicate the shim config in the build profile.</li></ul><p>\u60A8\u5E94\u8BE5\u4F7F\u7528 mainConfigFile \u6784\u5EFA\u9009\u9879\u6765\u6307\u5B9A\u53EF\u5728\u5176\u4E2D\u627E\u5230\u57AB\u7247\u914D\u7F6E\u7684\u6587\u4EF6\u3002\u5426\u5219\uFF0C\u4F18\u5316\u7A0B\u5E8F\u5C06\u4E0D\u4E86\u89E3\u586B\u5145\u7A0B\u5E8F\u914D\u7F6E\u3002\u53E6\u4E00\u4E2A\u9009\u9879\u662F\u5728\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u4E2D\u590D\u5236\u586B\u5145\u7A0B\u5E8F\u914D\u7F6E\u3002</p><ul><li>Do not mix CDN loading with shim config in a build. Example scenario: you load jQuery from the CDN but use the shim config to load something like the stock version of Backbone that depends on jQuery. When you do the build, be sure to inline jQuery in the built file and do not load it from the CDN. Otherwise, Backbone will be inlined in the built file and it will execute before the CDN-loaded jQuery will load. This is because the shim config just delays loading of the files until dependencies are loaded, but does not do any auto-wrapping of define. After a build, the dependencies are already inlined, the shim config cannot delay execution of the non-define()&#39;d code until later. define()&#39;d modules do work with CDN loaded code after a build because they properly wrap their source in define factory function that will not execute until dependencies are loaded. So the lesson: shim config is a stop-gap measure for non-modular code, legacy code. define()&#39;d modules are better.</li></ul><p>\u4E0D\u8981\u5728\u6784\u5EFA\u4E2D\u5C06 CDN \u52A0\u8F7D\u4E0E shim config \u6DF7\u5408\u4F7F\u7528\u3002\u793A\u4F8B\u65B9\u6848\uFF1A\u4ECE CDN \u52A0\u8F7D jQuery\uFF0C\u4F46\u4F7F\u7528 shim \u914D\u7F6E\u52A0\u8F7D\u7C7B\u4F3C\u4E8E jQuery \u7684 Backbone \u7684\u666E\u901A\u7248\u672C\u3002\u5728\u6267\u884C\u6784\u5EFA\u65F6\uFF0C\u8BF7\u786E\u4FDD\u5728\u5185\u5EFA\u6587\u4EF6\u4E2D\u5185\u8054 jQuery\uFF0C\u5E76\u4E14\u4E0D\u8981\u4ECE CDN \u52A0\u8F7D\u5B83\u3002\u5426\u5219\uFF0CBackbone \u5C06\u5185\u8054\u5230\u751F\u6210\u7684\u6587\u4EF6\u4E2D\uFF0C\u5E76\u5728 CDN \u52A0\u8F7D\u7684 jQuery \u52A0\u8F7D\u4E4B\u524D\u6267\u884C\u3002\u8FD9\u662F\u56E0\u4E3A shim config \u53EA\u662F\u5EF6\u8FDF\u6587\u4EF6\u7684\u52A0\u8F7D\uFF0C\u76F4\u5230\u52A0\u8F7D\u4F9D\u8D56\u9879\u4E3A\u6B62\uFF0C\u4F46\u4E0D\u5BF9 define \u8FDB\u884C\u4EFB\u4F55\u81EA\u52A8\u5305\u88C5\u3002\u6784\u5EFA\u540E\uFF0C\u4F9D\u8D56\u5173\u7CFB\u5DF2\u7ECF\u5185\u8054\uFF0Cshim \u914D\u7F6E\u65E0\u6CD5\u5C06 non-define\uFF08\uFF09\u4EE3\u7801\u7684\u6267\u884C\u63A8\u8FDF\u5230\u4EE5\u540E\u3002\u9650\u5B9A\uFF08\uFF09&#39; d \u6A21\u5757\u5728\u6784\u5EFA\u540E\u786E\u5B9E\u53EF\u4EE5\u5904\u7406 CDN \u52A0\u8F7D\u7684\u4EE3\u7801\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u5C06\u5176\u6E90\u4EE3\u7801\u6B63\u786E\u5305\u88C5\u5728 define factory \u51FD\u6570\u4E2D\uFF0C\u53EA\u6709\u5728\u52A0\u8F7D\u4F9D\u8D56\u9879\u540E\u624D\u80FD\u6267\u884C\u3002\u56E0\u6B64\uFF0C\u8BFE\u7A0B\uFF1Ashim config \u662F\u975E\u6A21\u5757\u5316\u4EE3\u7801\uFF0C\u4F20\u7EDF\u4EE3\u7801\u7684\u6743\u5B9C\u4E4B\u8BA1\u3002define\uFF08\uFF09\u7684\u6A21\u5757\u66F4\u597D\u3002</p><ul><li>For local, multi-file builds, the above CDN advice also applies. For any shimmed script, its dependencies must be loaded before the shimmed script executes. This means either building its dependencies directly in the buid layer that includes the shimmed script, or loading its dependencies with a require([], function (){}) call, then doing a nested require([]) call for the build layer that has the shimmed script.</li></ul><p>\u5BF9\u4E8E\u672C\u5730\u7684\u591A\u6587\u4EF6\u6784\u5EFA\uFF0C\u4E0A\u8FF0 CDN \u5EFA\u8BAE\u4E5F\u9002\u7528\u3002\u5BF9\u4E8E\u4EFB\u4F55\u5300\u573A\u811A\u672C\uFF0C\u5FC5\u987B\u5728\u5300\u573A\u811A\u672C\u6267\u884C\u4E4B\u524D\u52A0\u8F7D\u5176\u4F9D\u8D56\u9879\u3002\u8FD9\u610F\u5473\u7740\u8981\u4E48\u76F4\u63A5\u5728\u5305\u542B\u586B\u5145\u811A\u672C\u7684 buid \u5C42\u4E2D\u6784\u5EFA\u5176\u4F9D\u8D56\u9879\uFF0C\u8981\u4E48\u901A\u8FC7 require([], function (){})\u8C03\u7528\u52A0\u8F7D\u5176\u4F9D\u8D56\u9879\uFF0C\u7136\u540E require([])\u5BF9\u5177\u6709\u586B\u5145\u811A\u672C\u7684\u6784\u5EFA\u5C42\u8FDB\u884C\u5D4C\u5957\u8C03\u7528\u3002</p><ul><li>If you are using uglifyjs to minify the code, do not set the uglify option toplevel to true, or if using the command line do not pass -mt. That option mangles the global names that shim uses to find exports.</li></ul><p>\u5982\u679C\u60A8\u4F7F\u7528 uglifyjs \u7F29\u5C0F\u4EE3\u7801\uFF0C\u8BF7\u4E0D\u8981\u5C06 uglify \u9009\u9879\u8BBE\u7F6E toplevel \u4E3A true\uFF0C\u6216\u8005\u5982\u679C\u4F7F\u7528\u547D\u4EE4 \u884C\u4E0D\u901A\u8FC7-mt\u3002\u8BE5\u9009\u9879\u4F1A\u7834\u574F shim \u7528\u4E8E\u67E5\u627E\u51FA\u53E3\u7684\u5168\u5C40\u540D\u79F0\u3002</p><p><strong>map</strong>: For the given module prefix, instead of loading the module with the given ID, substitute a different module ID.</p><p><strong>map</strong>\uFF1A \u5BF9\u4E8E\u7ED9\u5B9A\u7684\u6A21\u5757\u524D\u7F00\uFF0C\u800C\u4E0D\u662F\u4F7F\u7528\u7ED9\u5B9A\u7684 ID \u52A0\u8F7D\u6A21\u5757\uFF0C\u800C\u662F\u4F7F\u7528\u5176\u4ED6\u6A21\u5757 ID\u3002</p><p>This sort of capability is really important for larger projects which may have two sets of modules that need to use two different versions of &#39;foo&#39;, but they still need to cooperate with each other.</p><p>\u8FD9\u79CD\u51FD\u6570\u5BF9\u4E8E\u5927\u578B\u9879\u76EE\u800C\u8A00\u975E\u5E38\u91CD\u8981\uFF0C\u56E0\u4E3A\u5927\u578B\u9879\u76EE\u53EF\u80FD\u6709\u4E24\u7EC4\u6A21\u5757\u9700\u8981\u4F7F\u7528\u4E24\u4E2A\u4E0D\u540C\u7684&#39;foo&#39;\u7248\u672C\uFF0C\u4F46\u662F\u5B83\u4EEC\u4ECD\u7136\u9700\u8981\u5F7C\u6B64\u5408\u4F5C\u3002</p><p>This is not possible with the context-backed multiversion support. In addition, the paths config is only for setting up root paths for module IDs, not for mapping one module ID to another one.</p><p>\u4F7F\u7528\u4E0A\u4E0B\u6587\u652F\u6301\u7684\u591A\u7248\u672C\u652F\u6301\u662F\u4E0D\u53EF\u80FD\u7684\u3002\u53E6\u5916\uFF0C\u8DEF\u5F84\u914D\u7F6E\u4EC5\u7528\u4E8E\u8BBE\u7F6E\u6A21\u5757 ID \u7684\u6839\u8DEF\u5F84\uFF0C\u800C\u4E0D\u7528\u4E8E\u5C06\u4E00\u4E2A\u6A21\u5757 ID \u6620\u5C04\u5230\u53E6\u4E00\u4E2A\u6A21\u5757\u3002</p><p>map example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;some/newmodule&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo1.2&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;some/oldmodule&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo1.0&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>If the modules are laid out on disk like this:</p><p>\u5982\u679C\u78C1\u76D8\u4E0A\u7684\u6A21\u5757\u5E03\u5C40\u7C7B\u4F3C\u8FD9\u6837</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>	foo1.0.js
	foo1.2.js
		some/
			newmodule.js
			oldmodule.js

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>When &#39;some/newmodule&#39; does <code>require(&#39;foo&#39;)</code> it will get the foo1.2.js file, and when &#39;some/oldmodule&#39; does <code>require(&#39;foo&#39;)</code> it will get the foo1.0.js file.</p><p>\u5F53 &#39;some/newmodule&#39; \u505A \xA0<code>require(&#39;foo&#39;)</code> \u65F6\u5019\uFF0C\u5B83\u5C06\u83B7\u5F97 foo1.2.js \u6587\u4EF6\uFF0C\u800C\u5F53 &#39;some/oldmodule&#39; \u505A<code>require(&#39;foo&#39;)</code>\u65F6\u5019\uFF0C\u5B83\u5C06\u83B7\u5F97 foo1.0.js \u6587\u4EF6</p><p>This feature only works well for scripts that are real AMD modules that call define() and register as anonymous modules. Also, only use absolute module IDs for map config. Relative IDs (like &#39;../some/thing&#39;) do not work.</p><p>\u8BE5\u51FD\u6570\u4EC5\u9002\u7528\u4E8E\u8C03\u7528\u4E86 define\uFF08\uFF09\u5E76\u6CE8\u518C\u4E3A\u533F\u540D\u6A21\u5757\u7684\u771F\u5B9E AMD \u6A21\u5757\u7684\u811A\u672C\u3002\u53E6\u5916\uFF0C\u4EC5\u5BF9\u6620\u5C04\u914D\u7F6E\u4F7F\u7528\u7EDD\u5BF9\u6A21\u5757 ID\u3002\u76F8\u5BF9 ID\uFF08\u5982&#39;../some/thing&#39;\uFF09\u4E0D\u8D77\u4F5C\u7528\u3002</p><p>There is also support for a &quot;*&quot; map value which means &quot;for all modules loaded, use this map config&quot;. If there is a more specific map config, that one will take precedence over the star config. Example:</p><p>\u8FD8\u652F\u6301&quot;*&quot;\u6620\u5C04\u503C\uFF0C\u8FD9\u610F\u5473\u7740&quot;\u5BF9\u4E8E\u6240\u6709\u52A0\u8F7D\u7684\u6A21\u5757\uFF0C\u8BF7\u4F7F\u7528\u6B64\u6620\u5C04\u914D\u7F6E&quot;\u3002\u5982\u679C\u6709\u66F4\u5177\u4F53\u7684\u5730\u56FE\u914D\u7F6E\uFF0C\u5219\u8BE5\u914D\u7F6E\u4F18\u5148\u4E8E\u661F\u578B\u914D\u7F6E\u3002\u4F8B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo1.2&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string-property property">&#39;some/oldmodule&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo1.0&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Means that for any module except &quot;some/oldmodule&quot;, when &quot;foo&quot; is wanted, use &quot;foo1.2&quot; instead. For &quot;some/oldmodule&quot; only, use &quot;foo1.0&quot; when it asks for &quot;foo&quot;.</p><p>\u8868\u793A\u5BF9\u4E8E\u9664&quot;some/oldmodule&quot;\u4EE5\u5916\u7684\u4EFB\u4F55\u6A21\u5757\uFF0C\u5F53\u9700\u8981&quot;foo&quot;\u65F6\uFF0C\u8BF7\u6539\u7528&quot;foo1.2&quot;\u3002\u4EC5\u5BF9\u4E8E&quot;some/oldmodule&quot;\uFF0C\u5F53\u8981\u6C42&quot;foo&quot;\u65F6\u4F7F\u7528&quot;foo1.0&quot;\u3002</p><p>Note: when doing builds with map config, the map config needs to be fed to the optimizer, and the build output must still contain a requirejs config call that sets up the map config. The optimizer does not do ID renaming during the build, because some dependency references in a project could depend on runtime variable state. So the optimizer does not invalidate the need for a map config after the build.</p><p>\u6CE8\u610F: \u4F7F\u7528 map config \u8FDB\u884C\u6784\u5EFA\u65F6\uFF0C\u9700\u8981\u5C06 map config \u9988\u9001\u5230\u4F18\u5316\u5668\uFF0C\u5E76\u4E14 build \u8F93\u51FA\u5FC5\u987B\u4ECD\u7136\u5305\u542B requirejs config \u8C03\u7528\u6765\u8BBE\u7F6E map config\u3002\u4F18\u5316\u5668\u5728\u6784\u5EFA\u671F\u95F4\u4E0D\u4F1A\u8FDB\u884C ID \u91CD\u547D\u540D\uFF0C\u56E0\u4E3A\u9879\u76EE\u4E2D\u7684\u67D0\u4E9B\u4F9D\u8D56\u9879\u5F15\u7528\u53EF\u80FD\u53D6\u51B3\u4E8E\u8FD0\u884C\u65F6\u53D8\u91CF\u72B6\u6001\u3002\u56E0\u6B64\uFF0C\u4F18\u5316\u5668\u4E0D\u4F1A\u5728\u6784\u5EFA\u540E\u4F7F\u5BF9\u6620\u5C04\u914D\u7F6E\u7684\u9700\u6C42\u65E0\u6548\u3002</p><p>config: There is a common need to pass configuration info to a module. That configuration info is usually known as part of the application, and there needs to be a way to pass that down to a module. In RequireJS, that is done with the config option for requirejs.config(). Modules can then read that info by asking for the special dependency &quot;module&quot; and calling module.config(). Example:</p><p>config\uFF1A\u901A\u5E38\u9700\u8981\u5C06\u914D\u7F6E\u4FE1\u606F\u4F20\u9012\u7ED9\u6A21\u5757\u3002\u8BE5\u914D\u7F6E\u4FE1\u606F\u901A\u5E38\u88AB\u79F0\u4E3A\u5E94\u7528\u7A0B\u5E8F\u7684\u4E00\u90E8\u5206\uFF0C\u5E76\u4E14\u9700\u8981\u4E00\u79CD\u5C06\u5176\u4F20\u9012\u7ED9\u6A21\u5757\u7684\u65B9\u6CD5\u3002\u5728 RequireJS \u4E2D\uFF0C\u8FD9\u662F\u901A\u8FC7 requirejs.config\uFF08\uFF09\u7684 config \u9009\u9879\u5B8C\u6210\u7684\u3002\u7136\u540E\uFF0C\u6A21\u5757\u53EF\u4EE5\u901A\u8FC7\u8BF7\u6C42\u7279\u6B8A\u7684\u4F9D\u8D56\u9879&quot;\u6A21\u5757&quot;\u5E76\u8C03\u7528 module.config\uFF08\uFF09\u6765\u8BFB\u53D6\u8BE5\u4FE1\u606F\u3002\u4F8B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//bar.js, which uses simplified CJS wrapping:</span>
<span class="token comment">//https://requirejs.org/docs/whyamd.html#sugar</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Will be the value &#39;large&#39;</span>
	<span class="token keyword">var</span> size <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//baz.js which uses a dependency array,</span>
<span class="token comment">//it asks for the special module ID, &#39;module&#39;:</span>
<span class="token comment">//https://github.com/requirejs/requirejs/wiki/Differences-between-the-simplified-CommonJS-wrapper-and-standard-AMD-define#wiki-magic</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;module&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Will be the value &#39;blue&#39;</span>
	<span class="token keyword">var</span> color <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>color
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>For passing config to a package, target the main module in the package, not the package ID:</p><p>\u8981\u5C06 config \u4F20\u9012\u7ED9\u8F6F\u4EF6\u5305\uFF0C\u8BF7\u4EE5\u8F6F\u4EF6\u5305\u4E2D\u7684\u4E3B\u6A21\u5757\u4E3A\u76EE\u6807\uFF0C\u800C\u4E0D\u662F\u8F6F\u4EF6\u5305 ID \u4E3A\u76EE\u6807\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//Pass an API key for use in the pixie package&#39;s</span>
	<span class="token comment">//main module.</span>
	<span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&#39;pixie/index&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">apiKey</span><span class="token operator">:</span> <span class="token string">&#39;XJKDLNS&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">//Set up config for the &quot;pixie&quot; package, whose main</span>
	<span class="token comment">//module is the index.js file in the pixie folder.</span>
	<span class="token literal-property property">packages</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;pixie&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>packages</strong>: configures loading modules from CommonJS packages. See the packages topic for more information.</p><p><strong>packages</strong>: \u914D\u7F6E\u6765\u81EA CommonJS \u5305\u7684\u52A0\u8F7D\u6A21\u5757\u3002\u8BF7\u53C2\u9605\u8F6F\u4EF6\u5305\u4E3B\u9898\u4EE5\u83B7\u53D6\u66F4\u591A\u4FE1\u606F\u3002</p><p><strong>nodeIdCompat</strong>: Node treats module ID example.js and example the same. By default these are two different IDs in RequireJS. If you end up using modules installed from npm, then you may need to set this config value to true to avoid resolution issues. This option only applies to treating the &quot;.js&quot; suffix differently, it does not do any other node resolution and evaluation matching such as .json file handling (JSON handling needs a &#39;json!&#39; loader plugin anyway). Available in 2.1.10 and greater.</p><p><strong>nodeIdCompat</strong>\uFF1A Node \u6CBB\u7597\u6A21\u5757 IDexample.js \u548C example \u76F8\u540C\u7684\u3002\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u8FD9\u662F RequireJS \u4E2D\u7684\u4E24\u4E2A\u4E0D\u540C ID\u3002\u5982\u679C\u6700\u7EC8\u4F7F\u7528\u7684\u662F\u4ECE npm \u5B89\u88C5\u7684\u6A21\u5757\uFF0C\u5219\u53EF\u80FD\u9700\u8981\u8BBE\u7F6E\u6B64\u914D\u7F6E\u503C true \u4EE5\u907F\u514D\u51FA\u73B0\u89E3\u6790\u95EE\u9898\u3002\u6B64\u9009\u9879\u4EC5\u9002\u7528\u4E8E\u4EE5\u4E0D\u540C\u65B9\u5F0F\u5904\u7406&quot;.js&quot;\u540E\u7F00\uFF0C\u5B83\u4E0D\u6267\u884C\u4EFB\u4F55\u5176\u4ED6 Node \u89E3\u6790\u548C\u8BC4\u4F30\u5339\u914D\uFF0C\u4F8B\u5982.json \u6587\u4EF6\u5904\u7406\uFF08JSON \u5904\u7406\u4ECD\u7136\u9700\u8981&quot;json\uFF01&quot;\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\uFF09\u3002\u5728 2.1.10 \u53CA\u66F4\u9AD8\u7248\u672C\u4E2D\u53EF\u7528\u3002</p><p><strong>waitSeconds</strong>: The number of seconds to wait before giving up on loading a script. Setting it to 0 disables the timeout. The default is 7 seconds.</p><p><strong>waitSeconds</strong>\uFF1A\u653E\u5F03\u653E\u5F03\u52A0\u8F7D\u811A\u672C\u4E4B\u524D\u8981\u7B49\u5F85\u7684\u79D2\u6570\u3002\u5C06\u5176\u8BBE\u7F6E\u4E3A 0 \u5C06\u7981\u7528\u8D85\u65F6\u3002\u9ED8\u8BA4\u503C\u4E3A 7 \u79D2\u3002</p><p><strong>context</strong>: A name to give to a loading context. This allows require.js to load multiple versions of modules in a page, as long as each top-level require call specifies a unique context string. To use it correctly, see the Multiversion Support section.</p><p><strong>context</strong>: \u8D4B\u4E88\u52A0\u8F7D\u4E0A\u4E0B\u6587\u7684\u540D\u79F0\u3002\u53EA\u8981\u6BCF\u4E2A\u9876\u7EA7 require \u8C03\u7528\u6307\u5B9A\u4E00\u4E2A\u552F\u4E00\u7684\u4E0A\u4E0B\u6587\u5B57\u7B26\u4E32\uFF0C\u8FD9\u90FD\u5141\u8BB8 require.js \u5728\u9875\u9762\u4E2D\u52A0\u8F7D\u6A21\u5757\u7684\u591A\u4E2A\u7248\u672C\u3002\u8981\u6B63\u786E\u4F7F\u7528\u5B83\uFF0C\u8BF7\u53C2\u9605&quot;Multiversion \u652F\u6301&quot;\u90E8\u5206\u3002</p><p><strong>deps</strong>: An array of dependencies to load. Useful when require is defined as a config object before require.js is loaded, and you want to specify dependencies to load as soon as require() is defined. Using deps is just like doing a require([]) call, but done as soon as the loader has processed the configuration. It does not block any other require() calls from starting their requests for modules, it is just a way to specify some modules to load asynchronously as part of a config block.</p><p><strong>deps</strong>: \u8981\u52A0\u8F7D\u7684\u4F9D\u8D56\u9879\u6570\u7EC4\u3002\u5F53\u5728 require.js \u52A0\u8F7D\u4E4B\u524D\u5C06 require \u5B9A\u4E49\u4E3A\u914D\u7F6E\u5BF9\u8C61\u65F6\uFF0C\u5E76\u4E14\u60A8\u8981\u6307\u5B9A\u8981\u5728 require\uFF08\uFF09\u5B9A\u4E49\u540E\u7ACB\u5373\u52A0\u8F7D\u7684\u4F9D\u8D56\u9879\u65F6\uFF0C\u6B64\u9009\u9879\u5F88\u6709\u7528\u3002\u4F7F\u7528 deps \u5C31\u50CF\u8FDB\u884C require([])\u8C03\u7528\u4E00\u6837\uFF0C\u4F46\u662F\u5728\u52A0\u8F7D\u7A0B\u5E8F\u5904\u7406\u5B8C\u914D\u7F6E\u540E\u7ACB\u5373\u4F7F\u7528\u3002\u5B83\u4E0D\u4F1A\u963B\u6B62 \u5176\u4ED6\u4EFB\u4F55 require\uFF08\uFF09\u8C03\u7528\u542F\u52A8\u5BF9\u6A21\u5757\u7684\u8BF7\u6C42\uFF0C\u5B83\u53EA\u662F\u6307\u5B9A\u67D0\u4E9B\u6A21\u5757\u4F5C\u4E3A config \u5757\u7684\u4E00\u90E8\u5206\u5F02\u6B65\u52A0\u8F7D\u7684\u4E00\u79CD\u65B9\u6CD5\u3002</p><p><strong>callback</strong>: A function to execute after deps have been loaded. Useful when require is defined as a config object before require.js is loaded, and you want to specify a function to require after the configuration&#39;s deps array has been loaded.</p><p><strong>callback</strong>: \u52A0\u8F7D deps \u540E\u6267\u884C\u7684\u51FD\u6570\u3002\u5728\u5C06 require.js \u52A0\u8F7D\u4E4B\u524D\uFF0C\u5C06 require \u5B9A\u4E49\u4E3A\u914D\u7F6E\u5BF9\u8C61\uFF0C\u5E76\u4E14\u60A8\u5E0C\u671B\u5728\u52A0\u8F7D\u914D\u7F6E\u7684 deps \u6570\u7EC4\u540E\u6307\u5B9A\u8981\u4F7F\u7528\u7684\u51FD\u6570\u65F6\uFF0C\u6B64\u9009\u9879\u5F88\u6709\u7528\u3002</p><p><strong>enforceDefine</strong>: If set to true, an error will be thrown if a script loads that does not call define() or have a shim exports string value that can be checked. See Catching load failures in IE for more information.</p><p><strong>enforceDefine</strong>: \u8BBE\u7F6E\u4E3A true \u65F6\uFF0C\u5982\u679C\u52A0\u8F7D\u7684\u811A\u672C\u672A\u8C03\u7528 define\uFF08\uFF09\u6216\u5177\u6709\u53EF\u68C0\u67E5\u7684\u586B\u5145\u7A0B\u5E8F\u5BFC\u51FA\u5B57\u7B26\u4E32\u503C\uFF0C\u5219\u5C06\u5F15\u53D1\u9519\u8BEF\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1\u5728 IE \u4E2D\u6355\u83B7\u8D1F\u8F7D\u6545\u969C\u3002</p><p><strong>xhtml</strong>: If set to true, document.createElementNS() will be used to create script elements.</p><p><strong>xhtml</strong>: \u5982\u679C\u8BBE\u7F6E\u4E3A true\uFF0C\u5219 document.createElementNS\uFF08\uFF09\u5C06\u7528\u4E8E\u521B\u5EFA\u811A\u672C\u5143\u7D20\u3002</p><p><strong>urlArgs</strong>: Extra query string arguments appended to URLs that RequireJS uses to fetch resources. Most useful to cache bust when the browser or server is not configured correctly. Example cache bust setting for urlArgs:</p><p><strong>urlArgs</strong>: \u9644\u52A0\u5230 RequireJS \u7528\u4E8E\u83B7\u53D6\u8D44\u6E90\u7684 URL \u7684\u9644\u52A0\u67E5\u8BE2\u5B57\u7B26\u4E32\u53C2\u6570\u3002\u5F53\u6D4F\u89C8\u5668\u6216\u670D\u52A1\u5668\u914D\u7F6E\u4E0D\u6B63\u786E\u65F6\uFF0C\u6700\u6709\u7528\u7684\u65B9\u6CD5\u662F\u7F13\u5B58\u5D29\u6E83\u3002urlArgs \u7684\u9AD8\u901F\u7F13\u5B58\u534A\u8EAB\u8BBE\u7F6E\u793A\u4F8B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">urlArgs</span><span class="token operator">:</span> <span class="token string">&#39;bust=&#39;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>As of RequireJS 2.2.0, urlArgs can be a function. If a function, it will receive the module ID and the URL as parameters, and it should return a string that will be added to the end of the URL. Return an empty string if no args. Be sure to take care of adding the &#39;?&#39; or &#39;&amp;&#39; depending on the existing state of the URL. Example:</p><p>\u4ECE RequireJS 2.2.0 \u5F00\u59CB\uFF0CurlArgs \u53EF\u4EE5\u662F\u4E00\u4E2A\u51FD\u6570\u3002\u5982\u679C\u662F\u51FD\u6570\uFF0C\u5B83\u5C06\u63A5\u6536\u6A21\u5757 ID \u548C URL \u4F5C\u4E3A\u53C2\u6570\uFF0C\u5E76\u4E14\u5E94\u8FD4\u56DE\u5C06\u6DFB\u52A0\u5230 URL \u672B\u5C3E\u7684\u5B57\u7B26\u4E32\u3002\u5982\u679C\u6CA1\u6709\u53C2\u6570\uFF0C\u5219\u8FD4\u56DE\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32\u3002\u8BF7\u52A1\u5FC5\u6CE8\u610F\u6DFB\u52A0&quot;\uFF1F&quot; \u6216&quot;\uFF06&quot;\uFF08\u53D6\u51B3\u4E8E URL \u7684\u73B0\u6709\u72B6\u6001\uFF09\u3002\u4F8B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token function-variable function">urlArgs</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token string">&#39;v=1&#39;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;view.html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			args <span class="token operator">=</span> <span class="token string">&#39;v=2&#39;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> args
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>During development it can be useful to use this, however be sure to remove it before deploying your code.</p><p>\u5728\u5F00\u53D1\u8FC7\u7A0B\u4E2D\uFF0C\u4F7F\u7528\u5B83\u53EF\u80FD\u4F1A\u5F88\u6709\u7528\uFF0C\u4F46\u662F\u8BF7\u786E\u4FDD\u5728\u90E8\u7F72\u4EE3\u7801\u4E4B\u524D\u5C06\u5176\u5220\u9664\u3002</p><p><strong>scriptType</strong>: Specify the value for the type=&quot;&quot; attribute used for script tags inserted into the document by RequireJS. Default is &quot;text/javascript&quot;. To use Firefox&#39;s JavaScript 1.8 features, use &quot;text/javascript;version=1.8&quot;.</p><p><strong>scriptType</strong>: \u6307\u5B9A type =&quot;&quot;\u5C5E\u6027\u7684\u503C\uFF0C\u8BE5\u5C5E\u6027\u7528\u4E8E RequireJS \u63D2\u5165\u6587\u6863\u4E2D\u7684\u811A\u672C\u6807\u7B7E\u3002\u9ED8\u8BA4\u503C\u4E3A&quot;\u6587\u672C/ javascript&quot;\u3002\u8981\u4F7F\u7528 Firefox \u7684 JavaScript 1.8 \u51FD\u6570\uFF0C\u8BF7\u4F7F\u7528&quot;text/javascript; version = 1.8&quot;\u3002</p><p><strong>skipDataMain</strong>: Introduced in RequireJS 2.1.9: If set to true, skips the data-main attribute scanning done to start module loading. Useful if RequireJS is embedded in a utility library that may interact with other RequireJS library on the page, and the embedded version should not do data-main loading.</p><p><strong>skipDataMain</strong>\uFF1A\u5728 RequireJS 2.1.9 \u4E2D\u5F15\u5165\uFF1A\u5982\u679C\u8BBE\u7F6E\u4E3A true\uFF0C\u5219\u8DF3\u8FC7\u5BF9\u6570\u636E\u4E3B\u5C5E\u6027\u7684\u626B\u63CF\u4EE5\u5F00\u59CB\u52A0\u8F7D\u6A21\u5757\u3002\u5982\u679C RequireJS \u5D4C\u5165\u5728\u53EF\u4EE5\u4E0E\u9875\u9762\u4E0A\u7684\u5176\u4ED6 RequireJS \u5E93\u8FDB\u884C\u4EA4\u4E92\u7684\u5B9E\u7528\u7A0B\u5E8F\u5E93\u4E2D\uFF0C\u5E76\u4E14\u5D4C\u5165\u7684\u7248\u672C\u4E0D\u5E94\u8FDB\u884C\u6570\u636E\u4E3B\u52A0\u8F7D\uFF0C\u5219\u5F88\u6709\u7528\u3002</p><h3 id="advanced-usage" tabindex="-1"><a class="header-anchor" href="#advanced-usage" aria-hidden="true">#</a> ADVANCED USAGE</h3><h4 id="loading-modules-from-packages" tabindex="-1"><a class="header-anchor" href="#loading-modules-from-packages" aria-hidden="true">#</a> Loading Modules from Packages</h4><p>RequireJS supports loading modules that are in a CommonJS Packages directory structure, but some additional configuration needs to be specified for it to work. Specifically, there is support for the following CommonJS Packages features:</p><p>RequireJS \u652F\u6301\u52A0\u8F7D CommonJS Packages \u76EE\u5F55\u7ED3\u6784\u4E2D\u7684\u6A21\u5757\uFF0C\u4F46\u662F\u9700\u8981\u6307\u5B9A\u4E00\u4E9B\u5176\u4ED6\u914D\u7F6E\u624D\u80FD\u4F7F\u5176\u6B63\u5E38\u5DE5\u4F5C\u3002\u5177\u4F53\u6765\u8BF4\uFF0C\u5B83\u652F\u6301\u4EE5\u4E0B CommonJS Packages \u51FD\u6570\uFF1A</p><ul><li>A package can be associated with a module name/prefix.</li><li>The package config can specify the following properties for a specific package: <ul><li>name: The name of the package (used for the module name/prefix mapping)</li><li>location: The location on disk. Locations are relative to the baseUrl configuration value, unless they contain a protocol or start with a front slash (/).</li><li>main: The name of the module inside the package that should be used when someone does a require for &quot;packageName&quot;. The default value is &quot;main&quot;, so only * specify it if it differs from the default. The value is relative to the package folder.</li></ul></li></ul><ul><li>\u5305\u53EF\u4EE5\u4E0E\u6A21\u5757\u540D\u79F0/\u524D\u7F00\u5173\u8054\u3002</li><li>\u7A0B\u5E8F\u5305\u914D\u7F6E\u53EF\u4EE5\u4E3A\u7279\u5B9A\u7A0B\u5E8F\u5305\u6307\u5B9A\u4EE5\u4E0B\u5C5E\u6027\uFF1A <ul><li>name: \u5305\u7684\u540D\u79F0\uFF08\u7528\u4E8E\u6A21\u5757\u540D\u79F0/\u524D\u7F00\u6620\u5C04\uFF09</li><li>location: \u78C1\u76D8\u4E0A\u7684\u4F4D\u7F6E\u3002\u4F4D\u7F6E\u76F8\u5BF9\u4E8E baseUrl \u914D\u7F6E\u503C\uFF0C\u9664\u975E\u5B83\u4EEC\u5305\u542B\u534F\u8BAE\u6216\u4EE5\u53CD\u659C\u6760\uFF08/\uFF09\u5F00\u5934\u3002</li></ul><ul><li>main\uFF1A\u67D0\u4EBA\u5BF9&quot;packageName&quot;\u7684\u8981\u6C42\u65F6\u5E94\u4F7F\u7528\u7684\u5305\u88C5\u5185\u90E8\u6A21\u5757\u7684\u540D\u79F0\u3002\u9ED8\u8BA4\u503C\u4E3A&quot;main&quot;\uFF0C\u56E0\u6B64\u4EC5\u5F53\u5B83\u4E0D\u540C\u4E8E\u9ED8\u8BA4\u503C\u65F6\u624D\u6307\u5B9A\u5B83\u3002\u8BE5\u503C\u76F8\u5BF9\u4E8E\u5305\u6587\u4EF6\u5939\u3002</li></ul></li></ul><h5 id="important-notes" tabindex="-1"><a class="header-anchor" href="#important-notes" aria-hidden="true">#</a> IMPORTANT NOTES</h5><ul><li>While the packages can have the CommonJS directory layout, the modules themselves should be in a module format that RequireJS can understand. Exception to the rule: if you are using the r.js Node adapter, the modules can be in the traditional CommonJS module format. You can use the CommonJS converter tool if you need to convert traditional CommonJS modules into the async module format that RequireJS uses.</li></ul><ul><li><p>\u5C3D\u7BA1\u8F6F\u4EF6\u5305\u53EF\u4EE5\u5177\u6709 CommonJS \u76EE\u5F55\u5E03\u5C40\uFF0C\u4F46\u6A21\u5757\u672C\u8EAB\u5E94\u91C7\u7528 RequireJS \u53EF\u4EE5\u7406\u89E3\u7684\u6A21\u5757\u683C\u5F0F\u3002\u89C4\u5219\u7684\u4F8B\u5916\uFF1A\u5982\u679C\u4F7F\u7528 r.jsNode \u9002\u914D\u5668\uFF0C\u5219\u6A21\u5757\u53EF\u4EE5\u91C7\u7528\u4F20\u7EDF\u7684 CommonJS \u6A21\u5757\u683C\u5F0F\u3002\u5982\u679C\u9700\u8981\u5C06\u4F20\u7EDF\u7684 CommonJS \u6A21\u5757\u8F6C\u6362\u4E3A RequireJS \u4F7F\u7528\u7684\u5F02\u6B65\u6A21\u5757\u683C\u5F0F\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528 CommonJS \u8F6C\u6362\u5DE5\u5177\u3002</p></li><li><p>Only one version of a package can be used in a project context at a time. You can use RequireJS multiversion support to load two different module contexts, but if you want to use Package A and B in one context and they depend on different versions of Package C, then that will be a problem. This may change in the future.</p></li><li><p>\u4E00\u6B21\u53EA\u80FD\u5728\u9879\u76EE\u4E0A\u4E0B\u6587\u4E2D\u4F7F\u7528\u8F6F\u4EF6\u5305\u7684\u4E00\u4E2A\u7248\u672C\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528 RequireJS \u591A\u7248\u672C\u652F\u6301\u6765\u52A0\u8F7D\u4E24\u4E2A\u4E0D\u540C\u7684\u6A21\u5757\u4E0A\u4E0B\u6587\uFF0C\u4F46\u662F\u5982\u679C\u60A8\u60F3\u5728\u4E00\u4E2A\u4E0A\u4E0B\u6587\u4E2D\u4F7F\u7528\u7A0B\u5E8F\u5305 A \u548C B\uFF0C\u5E76\u4E14\u5B83\u4EEC\u4F9D\u8D56\u4E8E\u7A0B\u5E8F\u5305 C \u7684\u4E0D\u540C\u7248\u672C\uFF0C\u90A3\u4E48\u8FD9\u5C06\u662F\u4E00\u4E2A\u95EE\u9898\u3002\u5C06\u6765\u53EF\u80FD\u4F1A\u6539\u53D8\u3002</p></li></ul><p>If you use a similar project layout as specified in the Start Guide, the start of your web project would look something like this (Node/Rhino-based projects are similar, just use the contents of the scripts directory as the top-level project directory):</p><p>\u5982\u679C\u60A8\u4F7F\u7528\u300A\u5165\u95E8\u6307\u5357\u300B\u4E2D\u6307\u5B9A\u7684\u7C7B\u4F3C\u9879\u76EE\u5E03\u5C40\uFF0C\u5219 Web \u9879\u76EE\u7684\u5F00\u59CB\u5C06\u770B\u8D77\u6765\u50CF\u8FD9\u6837\uFF08\u57FA\u4E8E Node/Rhino \u7684\u9879\u76EE\u662F\u7C7B\u4F3C\u7684\uFF0C\u53EA\u9700\u4F7F\u7528 scripts \u76EE\u5F55\u7684\u5185\u5BB9\u4F5C\u4E3A\u9876\u7EA7\u9879\u76EE\u76EE\u5F55\uFF09\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>project-directory/
	project.html
	scripts/
		require.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Here is how the example directory layout looks with two packages, cart and store:</p><p>\u8FD9\u662F\u5E26\u6709\u4E24\u4E2A\u5305 cart \u548C store \u7684\u793A\u4F8B\u76EE\u5F55\u5E03\u5C40\u7684\u5916\u89C2\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>project-directory/
	project.html
	scripts/
		cart/
			main.js
		store/
			main.js
			util.js
		main.js
		require.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>project.html will have a script tag like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script data<span class="token operator">-</span>main<span class="token operator">=</span><span class="token string">&#39;scripts/main&#39;</span> src<span class="token operator">=</span><span class="token string">&#39;scripts/require.js&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will instruct require.js to load scripts/main.js. main.js uses the &quot;packages&quot; config to set up packages that are relative to require.js, which in this case are the source packages &quot;cart&quot; and &quot;store&quot;:</p><p>\u8FD9\u5C06\u6307\u793A require.js \u52A0\u8F7D\u811A\u672C/main.js\u3002main.js \u4F7F\u7528&quot;packages&quot;\u914D\u7F6E\u6765\u8BBE\u7F6E\u76F8\u5BF9\u4E8E require.js \u7684\u8F6F\u4EF6\u5305\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5B83\u4EEC\u662F\u6E90\u8F6F\u4EF6\u5305&quot;cart&quot;\u548C&quot;store&quot;\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//main.js contents</span>
<span class="token comment">//Pass a config object to require</span>
require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">packages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store/util&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> store<span class="token punctuation">,</span> util</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//use the modules as usual.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>A require of &quot;cart&quot; means that it will be loaded from scripts/cart/main.js, since &quot;main&quot; is the default main module setting supported by RequireJS. A require of &quot;store/util&quot; will be loaded from scripts/store/util.js.</p><p>&quot;cart&quot;\u7684\u9700\u6C42\u610F\u5473\u7740\u5B83\u5C06\u4ECE scripts/cart/main.js \u52A0\u8F7D\uFF0C\u56E0\u4E3A&quot;main&quot;\u662F RequireJS \u652F\u6301\u7684\u9ED8\u8BA4\u4E3B\u6A21\u5757\u8BBE\u7F6E\u3002\u5C06\u4ECE scripts/store/util.js \u52A0\u8F7D&quot;store/util&quot;\u7684\u9700\u6C42\u3002</p><p>If the &quot;store&quot; package did not follow the &quot;main.js&quot; convention, and looked more like this:</p><p>\u5982\u679C&quot;store&quot;\u5305\u672A\u9075\u5FAA&quot;main.js&quot;\u7EA6\u5B9A\uFF0C\u5219\u770B\u8D77\u6765\u66F4\u50CF\u8FD9\u6837\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>project-directory/
	project.html
	scripts/
		cart/
			main.js
		store/
			store.js
			util.js
	main.js
	package.json
	require.js

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Then the RequireJS configuration would look like so:</p><p>\u7136\u540E RequireJS \u914D\u7F6E\u5C06\u770B\u8D77\u6765\u50CF\u8FD9\u6837</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">packages</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>To avoid verbosity, it is strongly suggested to always use packages that use &quot;main&quot; convention in their structure.</p><p>\u4E3A\u907F\u514D\u5197\u957F\uFF0C\u5F3A\u70C8\u5EFA\u8BAE\u59CB\u7EC8\u4F7F\u7528\u5728\u5176\u7ED3\u6784\u4E2D\u4F7F\u7528&quot;\u4E3B\u8981&quot;\u7EA6\u5B9A\u7684\u8F6F\u4EF6\u5305\u3002</p><h4 id="multiversion-support" tabindex="-1"><a class="header-anchor" href="#multiversion-support" aria-hidden="true">#</a> Multiversion Support</h4><p>As mentioned in Configuration Options, multiple versions of a module can be loaded in a page by using different &quot;context&quot; configuration options. require.config() returns a require function that will use the context configuration. Here is an example that loads two different versions of the alpha and beta modules (this example is taken from one of the test files):</p><p>\u5982\u914D\u7F6E\u9009\u9879\u4E2D\u6240\u8FF0\uFF0C\u53EF\u4EE5\u4F7F\u7528\u4E0D\u540C\u7684&quot;\u4E0A\u4E0B\u6587&quot;\u914D\u7F6E\u9009\u9879\u5C06\u6A21\u5757\u7684\u591A\u4E2A\u7248\u672C\u52A0\u8F7D\u5230\u9875\u9762\u4E2D\u3002require.config\uFF08\uFF09\u8FD4\u56DE\u4E00\u4E2A\u4F7F\u7528\u4E0A\u4E0B\u6587\u914D\u7F6E\u7684 require \u51FD\u6570\u3002\u8FD9\u662F\u52A0\u8F7D\u4E24\u4E2A\u4E0D\u540C\u7248\u672C\u7684 alpha \u548C beta \u6A21\u5757\u7684\u793A\u4F8B\uFF08\u6B64\u793A\u4F8B\u6458\u81EA\u4E00\u4E2A\u6D4B\u8BD5\u6587\u4EF6\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../require.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">var</span> reqOne <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;version1&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;version1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">reqOne</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;alpha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;beta&quot;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>   alpha<span class="token punctuation">,</span>   beta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;alpha version is: &quot;</span> <span class="token operator">+</span> alpha<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 1</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beta version is: &quot;</span> <span class="token operator">+</span> beta<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 1</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;omega&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">omega</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;version1 omega loaded with version: &quot;</span> <span class="token operator">+</span>
             omega<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> reqTwo <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;version2&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;version2&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">reqTwo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;alpha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;beta&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>   alpha<span class="token punctuation">,</span>   beta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;alpha version is: &quot;</span> <span class="token operator">+</span> alpha<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 2</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beta version is: &quot;</span> <span class="token operator">+</span> beta<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 2</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;omega&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">omega</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;version2 omega loaded with version: &quot;</span> <span class="token operator">+</span>
            omega<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prints 2</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>Note that &quot;require&quot; is specified as a dependency for the module. This allows the require() function that is passed to the function callback to use the right context to load the modules correctly for multiversion support. If &quot;require&quot; is not specified as a dependency, then there will likely be an error.</p><p>\u6CE8\u610F\uFF0C&quot;require&quot;\u88AB\u6307\u5B9A\u4E3A\u6A21\u5757\u7684\u4F9D\u8D56\u9879\u3002\u8FD9\u5141\u8BB8\u4F20\u9012\u7ED9\u51FD\u6570\u56DE\u8C03\u7684 require\uFF08\uFF09\u51FD\u6570\u4F7F\u7528\u6B63\u786E\u7684\u4E0A\u4E0B\u6587\u6B63\u786E\u52A0\u8F7D\u6A21\u5757\u4EE5\u652F\u6301\u591A\u7248\u672C\u3002\u5982\u679C\u672A\u5C06&quot;require&quot;\u6307\u5B9A\u4E3A\u4F9D\u8D56\u9879\uFF0C\u5219\u53EF\u80FD\u4F1A\u51FA\u73B0\u9519\u8BEF\u3002</p><h4 id="loading-code-after-page-load" tabindex="-1"><a class="header-anchor" href="#loading-code-after-page-load" aria-hidden="true">#</a> Loading Code After Page Load</h4><p>The example above in the Multiversion Support section shows how code can later be loaded by nested require() calls.</p><p>\u4E0A\u9762&quot;Multiversion \u652F\u6301&quot;\u90E8\u5206\u4E2D\u7684\u793A\u4F8B\u663E\u793A\u4E86\u4EE5\u540E\u5982\u4F55\u901A\u8FC7\u5D4C\u5957\u7684 require\uFF08\uFF09\u8C03\u7528\u6765\u52A0\u8F7D\u4EE3\u7801\u3002</p><h4 id="web-worker-support" tabindex="-1"><a class="header-anchor" href="#web-worker-support" aria-hidden="true">#</a> Web Worker Support</h4><p>As of release 0.12, RequireJS can be run inside a Web Worker. Just use importScripts() inside a web worker to load require.js (or the JS file that contains the require() definition), then call require.</p><p>\u4ECE 0.12 \u7248\u5F00\u59CB\uFF0CRequireJS \u53EF\u4EE5\u5728 Web Worker \u4E2D\u8FD0\u884C\u3002\u53EA\u9700\u5728\u7F51\u7EDC\u5DE5\u4F5C\u8005\u4E2D\u4F7F\u7528 importScripts\uFF08\uFF09\u6765\u52A0\u8F7D require.js\uFF08\u6216\u5305\u542B require\uFF08\uFF09\u5B9A\u4E49\u7684 JS \u6587\u4EF6\uFF09\uFF0C\u7136\u540E\u8C03\u7528 require\u3002</p><p>You will likely need to set the baseUrl configuration option to make sure require() can find the scripts to load.</p><p>\u60A8\u53EF\u80FD\u9700\u8981\u8BBE\u7F6E baseUrl \u914D\u7F6E\u9009\u9879\uFF0C\u4EE5\u786E\u4FDD require\uFF08\uFF09\u53EF\u4EE5\u627E\u5230\u8981\u52A0\u8F7D\u7684\u811A\u672C\u3002</p><p>You can see an example of its use by looking at one of the files used in the unit test.</p><p>\u901A\u8FC7\u67E5\u770B\u5355\u5143\u6D4B\u8BD5\u4E2D\u4F7F\u7528\u7684\u6587\u4EF6\u4E4B\u4E00\uFF0C\u53EF\u4EE5\u770B\u5230\u5176\u7528\u6CD5\u793A\u4F8B\u3002</p><h4 id="rhino-support" tabindex="-1"><a class="header-anchor" href="#rhino-support" aria-hidden="true">#</a> Rhino Support</h4><p>RequireJS can be used in Rhino via the r.js adapter. See the r.js README for more information.</p><p>RequireJS \u53EF\u4EE5\u901A\u8FC7 r.js \u9002\u914D\u5668\u5728 Rhino \u4E2D\u4F7F\u7528\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 r.js \u81EA\u8FF0\u6587\u4EF6\u3002</p><h4 id="nashorn-support" tabindex="-1"><a class="header-anchor" href="#nashorn-support" aria-hidden="true">#</a> Nashorn Support</h4><p>As of RequireJS 2.1.16, RequireJS can be used in Nashorn, Java 8+&#39;s JavaScript engine, via the r.js adapter. See the r.js README for more information.</p><p>\u4ECE RequireJS 2.1.16 \u5F00\u59CB\uFF0CRequireJS \u53EF\u4EE5\u901A\u8FC7 r.js \u9002\u914D\u5668\u5728 Java 8+\u7684 JavaScript \u5F15\u64CE Nashorn \u4E2D\u4F7F\u7528\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 r.js \u81EA\u8FF0\u6587\u4EF6\u3002</p><h4 id="handling-errors" tabindex="-1"><a class="header-anchor" href="#handling-errors" aria-hidden="true">#</a> Handling Errors</h4><p>The general class of errors are 404s for scripts (not found), network timeouts or errors in the scripts that are loaded. RequireJS has a few tools to deal with them: require-specific errbacks, a &quot;paths&quot; array config, and a global requirejs.onError.</p><p>\u9519\u8BEF\u7684\u4E00\u822C\u7C7B\u522B\u662F\u811A\u672C\uFF08\u672A\u627E\u5230\uFF09\u7684 404\uFF0C\u7F51\u7EDC\u8D85\u65F6\u6216\u52A0\u8F7D\u7684\u811A\u672C\u4E2D\u7684\u9519\u8BEF\u3002RequireJS \u6709\u4E00\u4E9B\u7528\u4E8E\u5904\u7406\u5B83\u4EEC\u7684\u5DE5\u5177\uFF1A\u7279\u5B9A\u4E8E\u9700\u6C42\u7684 errback\uFF0C&quot;paths&quot;\u6570\u7EC4\u914D\u7F6E\u4EE5\u53CA\u5168\u5C40\u7684 requirejs.onError\u3002</p><p>The error object passed to errbacks and the global requirejs.onError function will usually contain two custom properties:</p><p>\u4F20\u9012\u7ED9 errbacks \u7684\u9519\u8BEF\u5BF9\u8C61\u548C\u5168\u5C40 requirejs.onError \u51FD\u6570\u901A\u5E38\u5C06\u5305\u542B\u4E24\u4E2A\u81EA\u5B9A\u4E49\u5C5E\u6027\uFF1A</p><ul><li>requireType: A string value with a general classification, like &quot;timeout&quot;, &quot;nodefine&quot;, &quot;scripterror&quot;.</li></ul><ul><li><p>requireModules: an array of module names/URLs that timed out.</p></li><li><p>requireType: \u5177\u6709\u4E00\u822C\u5206\u7C7B\u7684\u5B57\u7B26\u4E32\u503C\uFF0C\u4F8B\u5982&quot;timeout&quot;\uFF0C&quot;nodefine&quot;\uFF0C&quot;scripterror&quot;\u3002</p></li><li><p>requireModules\uFF1A \u8D85\u65F6\u7684\u6A21\u5757\u540D\u79F0/ URL \u7684\u6570\u7EC4\u3002</p></li></ul><p>If you get an error with a requireModules, it probably means other modules that depend on the modules in that requireModules array are not defined.</p><p>\u5982\u679C\u60A8\u5728 requireModules \u4E2D\u9047\u5230\u9519\u8BEF\uFF0C\u5219\u53EF\u80FD\u610F\u5473\u7740\u672A\u5B9A\u4E49\u4F9D\u8D56\u4E8E requireModules \u6570\u7EC4\u4E2D\u6A21\u5757\u7684\u5176\u4ED6\u6A21\u5757\u3002</p><h4 id="catching-load-failures-in-ie" tabindex="-1"><a class="header-anchor" href="#catching-load-failures-in-ie" aria-hidden="true">#</a> Catching load failures in IE</h4><p>Internet Explorer has a set of problems that make it difficult to detect load failures for errbacks/paths fallbacks:</p><p>Internet Explorer \u5B58\u5728\u4E00\u7CFB\u5217\u95EE\u9898\uFF0C\u4F7F\u5F97\u96BE\u4EE5\u68C0\u6D4B\u5230\u9519\u8BEF/\u8DEF\u5F84\u540E\u5907\u7684\u52A0\u8F7D\u5931\u8D25\uFF1A</p><ul><li>script.onerror does not work in IE 6-8. There is no way to know if loading a script generates a 404, worse, it triggers the onreadystatechange with a complete state even in a 404 case.</li></ul><ul><li><p>script.onerror does work in IE 9+, but it has a bug where it does not fire script.onload event handlers right after execution of script, so it cannot support the standard method of allowing anonymous AMD modules. So script.onreadystatechange is still used. However, onreadystatechange fires with a complete state before the script.onerror function fires.</p></li><li><p>script.onerror \u5728 IE 6-8 \u4E2D\u4E0D\u8D77\u4F5C\u7528\u3002\u65E0\u6CD5\u77E5\u9053\u52A0\u8F7D\u811A\u672C\u662F\u5426\u4F1A\u751F\u6210 404\uFF0C\u66F4\u7CDF\u7CD5\u7684\u662F\uFF0C\u5373\u4F7F\u5728 404 \u60C5\u51B5\u4E0B\uFF0C\u5B83\u4E5F\u4F1A\u4EE5\u5B8C\u6574\u72B6\u6001\u89E6\u53D1 onreadystatechange\u3002</p></li><li><p>script.onerror \u786E\u5B9E\u53EF\u4EE5\u5728 IE 9+\u4E2D\u8FD0\u884C\uFF0C\u4F46\u5B58\u5728\u4E00\u4E2A\u9519\u8BEF\uFF0C\u5373\u5728\u6267\u884C\u811A\u672C\u540E\u4E0D\u7ACB\u5373\u89E6\u53D1 script.onload \u4E8B\u4EF6\u5904\u7406\u7A0B\u5E8F\uFF0C\u56E0\u6B64\u5B83\u4E0D\u652F\u6301\u5141\u8BB8\u533F\u540D AMD \u6A21\u5757\u7684\u6807\u51C6\u65B9\u6CD5\u3002\u56E0\u6B64\u4ECD\u4F7F\u7528 script.onreadystatechange\u3002\u4F46\u662F\uFF0C\u5728 script.onerror \u51FD\u6570\u542F\u52A8\u4E4B\u524D\uFF0Conreadystatechange \u4F1A\u4EE5\u5B8C\u6574\u72B6\u6001\u542F\u52A8\u3002</p></li></ul><p>So it is very difficult with IE to allow both anonymous AMD modules, which are a core benefit of AMD modules, and reliable detect errors.</p><p>\u56E0\u6B64\uFF0C\u4F7F\u7528 IE \u5F88\u96BE\u540C\u65F6\u5141\u8BB8\u533F\u540D\u7684 AMD \u6A21\u5757\u548C\u53EF\u9760\u7684\u68C0\u6D4B\u9519\u8BEF\uFF0C\u533F\u540D\u7684 AMD \u6A21\u5757\u662F AMD \u6A21\u5757\u7684\u6838\u5FC3\u4F18\u52BF\u3002</p><p>However, if you are in a project that you know uses define() to declare all of its modules, or it uses the shim config to specify string exports for anything that does not use define(), then if you set the enforceDefine config value to true, the loader can confirm if a script load by checking for the define() call or the existence of the shim&#39;s exports global value.</p><p>\u4F46\u662F\uFF0C\u5982\u679C\u60A8\u77E5\u9053\u5728\u4E00\u4E2A\u9879\u76EE\u4E2D\u4F7F\u7528 define\uFF08\uFF09\u58F0\u660E\u5176\u6240\u6709\u6A21\u5757\uFF0C\u6216\u8005\u5B83\u4F7F\u7528 shim config \u4E3A\u4E0D\u4F7F\u7528 define\uFF08\uFF09\u7684\u4EFB\u4F55\u5185\u5BB9\u6307\u5B9A\u5B57\u7B26\u4E32\u5BFC\u51FA\uFF0C\u90A3\u4E48\u5982\u679C\u60A8\u8BBE\u7F6E\u4E86 defineDefine \u914D\u7F6E\u503C\u786E\u5B9E\uFF0C\u52A0\u8F7D\u5668\u53EF\u4EE5\u901A\u8FC7\u68C0\u67E5 define\uFF08\uFF09\u8C03\u7528\u6216\u586B\u5145\u7A0B\u5E8F\u7684\u5BFC\u51FA\u5168\u5C40\u503C\u7684\u5B58\u5728\u6765\u786E\u8BA4\u811A\u672C\u662F\u5426\u5DF2\u52A0\u8F7D\u3002</p><p>So if you want to support Internet Explorer, catch load errors, and have modular code either through direct define() calls or shim config, always set enforceDefine to be true. See the next section for an example.</p><p>\u56E0\u6B64\uFF0C\u5982\u679C\u8981\u652F\u6301 Internet Explorer\uFF0C\u6355\u83B7\u8D1F\u8F7D\u9519\u8BEF\u5E76\u901A\u8FC7\u76F4\u63A5 define\uFF08\uFF09\u8C03\u7528\u6216 shim config \u83B7\u5F97\u6A21\u5757\u5316\u4EE3\u7801\uFF0C\u8BF7\u59CB\u7EC8\u5C06 forcedDefine \u8BBE\u7F6E\u4E3A true\u3002\u6709\u5173\u793A\u4F8B\uFF0C\u8BF7\u53C2\u89C1\u4E0B\u4E00\u90E8\u5206\u3002</p><p>NOTE: If you do set enforceDefine: true, and you use data-main=&quot;&quot; to load your main JS module, then that main JS module must call define() instead of require() to load the code it needs. The main JS module can still call require/requirejs to set config values, but for loading modules it should use define().</p><p>\u6CE8\u610F: \u5982\u679C\u60A8\u786E\u5B9E\u8BBE\u7F6E\u4E86 forceDefine\uFF1Atrue\uFF0C\u5E76\u4E14\u4F7F\u7528 data-main =&quot;&quot;\u6765\u52A0\u8F7D\u4E3B JS \u6A21\u5757\uFF0C\u5219\u8BE5\u4E3B JS \u6A21\u5757\u5FC5\u987B\u8C03\u7528 define\uFF08\uFF09\u800C\u4E0D\u662F require\uFF08\uFF09\u6765\u52A0\u8F7D\u6240\u9700\u7684\u4EE3\u7801\u3002JS \u4E3B\u6A21\u5757\u4ECD\u7136\u53EF\u4EE5\u8C03\u7528 require/requirejs \u6765\u8BBE\u7F6E\u914D\u7F6E\u503C\uFF0C\u4F46\u662F\u5BF9\u4E8E\u52A0\u8F7D\u6A21\u5757\uFF0C\u5B83\u5E94\u8BE5\u4F7F\u7528 define\uFF08\uFF09\u3002</p><p>If you then also use almond to build your code without require.js, be sure to use the insertRequire build setting to insert a require call for the main module -- that serves the same purpose of the initial require() call that data-main does.</p><p>\u5982\u679C\u7136\u540E\u8FD8\u4F7F\u7528 almond \u6765\u6784\u5EFA\u6CA1\u6709 require.js \u7684\u4EE3\u7801\uFF0C\u8BF7\u786E\u4FDD\u4F7F\u7528 insertRequire \u6784\u5EFA\u8BBE\u7F6E\u4E3A\u4E3B\u6A21\u5757\u63D2\u5165\u4E00\u4E2A require \u8C03\u7528-\u8FBE\u5230\u4E0E\u6700\u521D\u7684 require\uFF08\uFF09\u8C03\u7528\u76F8\u540C\u7684\u76EE\u7684\uFF0C\u5373\u8C03\u7528 data-main \u505A\u3002</p><h4 id="require-errbacks" tabindex="-1"><a class="header-anchor" href="#require-errbacks" aria-hidden="true">#</a> require([]) errbacks</h4><p><strong>Errbacks</strong>, when used with requirejs.undef(), will allow you to detect if a module fails to load, undefine that module, reset the config to a another location, then try again.</p><p>\u5F53\u4E0E requirejs.undef\uFF08\uFF09\u4E00\u8D77\u4F7F\u7528\u65F6\uFF0C<strong>Errbacks</strong> \u5C06\u5141\u8BB8\u60A8\u68C0\u6D4B\u6A21\u5757\u662F\u5426\u65E0\u6CD5\u52A0\u8F7D\uFF0C\u53D6\u6D88\u5B9A\u4E49\u8BE5\u6A21\u5757\uFF0C\u5C06\u914D\u7F6E\u91CD\u7F6E\u5230\u53E6\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u7136\u540E\u91CD\u8BD5\u3002</p><p>A common use case for this is to use a CDN-hosted version of a library, but if that fails, switch to loading the file locally:</p><p>\u4E00\u4E2A\u5E38\u89C1\u7684\u7528\u4F8B\u662F\u4F7F\u7528 CDN \u6258\u7BA1\u7684\u5E93\u7248\u672C\uFF0C\u4F46\u662F\u5982\u679C\u5931\u8D25\uFF0C\u8BF7\u5207\u6362\u5230\u672C\u5730\u52A0\u8F7D\u6587\u4EF6\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">enforceDefine</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//Later</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Do something with $ here</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//The errback, error callback</span>
	<span class="token comment">//The error has a list of modules that failed</span>
	<span class="token keyword">var</span> failedId <span class="token operator">=</span> err<span class="token punctuation">.</span>requireModules <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>requireModules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>failedId <span class="token operator">===</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//undef is function only on the global requirejs object.</span>
		<span class="token comment">//Use it to clear internal knowledge of jQuery. Any modules</span>
		<span class="token comment">//that were dependent on jQuery and in the middle of loading</span>
		<span class="token comment">//will not be loaded yet, they will wait until a valid jQuery</span>
		<span class="token comment">//does load.</span>
		requirejs<span class="token punctuation">.</span><span class="token function">undef</span><span class="token punctuation">(</span>failedId<span class="token punctuation">)</span>

		<span class="token comment">//Set the path to jQuery to local path</span>
		requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;local/jquery&#39;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>

		<span class="token comment">//Try again. Note that the above require callback</span>
		<span class="token comment">//with the &quot;Do something with $ here&quot; comment will</span>
		<span class="token comment">//be called if this new attempt to load jQuery succeeds.</span>
		<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">//Some other error. Maybe show message to the user.</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>With <code>requirejs.undef()</code>, if you later set up a different config and try to load the same module, the loader will still remember which modules needed that dependency and finish loading them when the newly configured module loads.</p><p>\u4F7F\u7528<code>requirejs.undef\uFF08\uFF09</code>\uFF0C\u5982\u679C\u60A8\u7A0D\u540E\u8BBE\u7F6E\u5176\u4ED6\u914D\u7F6E\u5E76\u5C1D\u8BD5\u52A0\u8F7D\u76F8\u540C\u7684\u6A21\u5757\uFF0C\u5219\u52A0\u8F7D\u5668\u4ECD\u4F1A\u8BB0\u4F4F\u54EA\u4E9B\u6A21\u5757\u9700\u8981\u8BE5\u4F9D\u8D56\u5173\u7CFB\uFF0C\u5E76\u5728\u65B0\u914D\u7F6E\u7684\u6A21\u5757\u52A0\u8F7D\u65F6\u5B8C\u6210\u52A0\u8F7D\u3002</p><p>Note: errbacks only work with callback-style require calls, not define() calls. define() is only for declaring modules.</p><p>Note\uFF1Aerrbacks \u4EC5\u9002\u7528\u4E8E\u56DE\u8C03\u6837\u5F0F\u7684 require \u8C03\u7528\uFF0C\u800C\u4E0D\u9002\u7528 define\uFF08\uFF09\u8C03\u7528\u3002define\uFF08\uFF09\u4EC5\u7528\u4E8E\u58F0\u660E\u6A21\u5757\u3002</p><h4 id="paths-config-fallbacks" tabindex="-1"><a class="header-anchor" href="#paths-config-fallbacks" aria-hidden="true">#</a> paths config fallbacks</h4><p>The above pattern for detecting a load failure, undef()ing a module, modifying paths and reloading is a common enough request that there is also a shorthand for it. The paths config allows array values:</p><p>\u4E0A\u9762\u7684\u7528\u4E8E\u68C0\u6D4B\u8D1F\u8F7D\u6545\u969C\uFF0C\u5BF9\u6A21\u5757\u8FDB\u884C undef\uFF08\uFF09\uFF0C\u4FEE\u6539\u8DEF\u5F84\u548C\u91CD\u65B0\u52A0\u8F7D\u7684\u6A21\u5F0F\u662F\u4E00\u4E2A\u8DB3\u591F\u666E\u904D\u7684\u8981\u6C42\uFF0C\u5B83\u4E5F\u6709\u4E00\u4E2A\u7B80\u5199\u5F62\u5F0F\u3002\u8DEF\u5F84\u914D\u7F6E\u5141\u8BB8\u6570\u7EC4\u503C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//To get timely, correct error triggers in IE, force a define/shim exports check.</span>
	<span class="token literal-property property">enforceDefine</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token string">&#39;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min&#39;</span><span class="token punctuation">,</span>
			<span class="token comment">//If the CDN location fails, load from this location</span>
			<span class="token string">&#39;lib/jquery&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//Later</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>This above code will try the CDN location, but if that fails, fall back to the local lib/jquery.js location.</p><p>\u4E0A\u9762\u7684\u4EE3\u7801\u5C06\u5C1D\u8BD5 CDN \u4F4D\u7F6E\uFF0C\u4F46\u662F\u5982\u679C\u5931\u8D25\uFF0C\u8BF7\u9000\u56DE\u5230\u672C\u5730 lib/jquery.js \u4F4D\u7F6E\u3002</p><p>Note: paths fallbacks only work for exact module ID matches. This is different from normal paths config which can apply to any part of a module ID prefix segment. Fallbacks are targeted more for unusual error recovery, not a generic path search path solution, since those are inefficient in the browser.</p><p>\u6CE8\u610F\uFF1A\u8DEF\u5F84\u56DE\u9000\u4EC5\u9002\u7528\u4E8E\u786E\u5207\u7684\u6A21\u5757 ID \u5339\u914D\u3002\u8FD9\u4E0E\u53EF\u5E94\u7528\u4E8E\u6A21\u5757 ID \u524D\u7F00\u6BB5\u7684\u4EFB\u4F55\u90E8\u5206\u7684\u666E\u901A\u8DEF\u5F84\u914D\u7F6E\u4E0D\u540C\u3002\u540E\u5907\u7684\u76EE\u6807\u66F4\u591A\u662F\u9488\u5BF9\u5F02\u5E38\u9519\u8BEF\u7684\u6062\u590D\uFF0C\u800C\u4E0D\u662F\u901A\u7528\u7684\u8DEF\u5F84\u641C\u7D22\u8DEF\u5F84\u89E3\u51B3\u65B9\u6848\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u5728\u6D4F\u89C8\u5668\u4E2D\u6548\u7387\u4F4E\u4E0B\u3002</p><h4 id="global-requirejs-onerror-function" tabindex="-1"><a class="header-anchor" href="#global-requirejs-onerror-function" aria-hidden="true">#</a> Global requirejs.onError function</h4><p>To detect errors that are not caught by local errbacks, you can override requirejs.onError():</p><p>\u8981\u68C0\u6D4B\u672C\u5730\u9519\u8BEF\u672A\u6355\u83B7\u7684\u9519\u8BEF\uFF0C\u53EF\u4EE5\u8986\u76D6 requirejs.onError\uFF08\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function-variable function">onError</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>requireType<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>requireType <span class="token operator">===</span> <span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;modules: &#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>requireModules<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">throw</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="loader-plugins" tabindex="-1"><a class="header-anchor" href="#loader-plugins" aria-hidden="true">#</a> LOADER PLUGINS</h3><p>RequireJS supports loader plugins. This is a way to support dependencies that are not plain JS files, but are still important for a script to have loaded before it can do its work. The RequireJS wiki has a list of plugins. This section talks about some specific plugins that are maintained alongside RequireJS:</p><p>RequireJS \u652F\u6301\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u3002\u8FD9\u662F\u4E00\u79CD\u652F\u6301\u4F9D\u8D56\u5173\u7CFB\u7684\u65B9\u6CD5\uFF0C\u8BE5\u4F9D\u8D56\u5173\u7CFB\u4E0D\u662F\u666E\u901A\u7684 JS \u6587\u4EF6\uFF0C\u4F46\u662F\u5BF9\u4E8E\u811A\u672C\u5728\u6267\u884C\u5DE5\u4F5C\u4E4B\u524D\u5DF2\u52A0\u8F7D\u4ECD\u7136\u5F88\u91CD\u8981\u3002RequireJS Wiki \u6709\u4E00\u4E2A\u63D2\u4EF6\u5217\u8868\u3002\u672C\u8282\u8BA8\u8BBA\u4E0E RequireJS \u4E00\u8D77\u7EF4\u62A4\u7684\u4E00\u4E9B\u7279\u5B9A\u63D2\u4EF6\uFF1A</p><h5 id="specify-a-text-file-dependency" tabindex="-1"><a class="header-anchor" href="#specify-a-text-file-dependency" aria-hidden="true">#</a> Specify a Text File Dependency</h5><p>It is nice to build HTML using regular HTML tags, instead of building up DOM structures in script. However, there is no good way to embed HTML in a JavaScript file. The best that can be done is using a string of HTML, but that can be hard to manage, particularly for multi-line HTML.</p><p>\u4F7F\u7528\u5E38\u89C4 HTML \u6807\u7B7E\u6784\u5EFA HTML \u5F88\u597D\uFF0C\u800C\u4E0D\u662F\u5728\u811A\u672C\u4E2D\u6784\u5EFA DOM \u7ED3\u6784\u3002\u4F46\u662F\uFF0C\u6CA1\u6709\u5F88\u597D\u7684\u65B9\u6CD5\u5C06 HTML \u5D4C\u5165 JavaScript \u6587\u4EF6\u4E2D\u3002\u6700\u597D\u7684\u529E\u6CD5\u662F\u4F7F\u7528 HTML \u5B57\u7B26\u4E32\uFF0C\u4F46\u8FD9\u53EF\u80FD\u5F88\u96BE\u7BA1\u7406\uFF0C\u5C24\u5176\u662F\u5BF9\u4E8E\u591A\u884C HTML\u3002</p><p>RequireJS has a plugin, text.js, that can help with this issue. It will automatically be loaded if the text! prefix is used for a dependency. See the text.js README for more information.</p><p>RequireJS \u6709\u4E00\u4E2A\u63D2\u4EF6 text.js\uFF0C\u53EF\u4EE5\u5E2E\u52A9\u89E3\u51B3\u6B64\u95EE\u9898\u3002\u5982\u679C\u6587\u672C\u5C06\u81EA\u52A8\u52A0\u8F7D\uFF01\u524D\u7F00\u7528\u4E8E\u4F9D\u8D56\u9879\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 text.js \u81EA\u8FF0\u6587\u4EF6\u3002</p><h4 id="page-load-event-support-dom-ready" tabindex="-1"><a class="header-anchor" href="#page-load-event-support-dom-ready" aria-hidden="true">#</a> Page Load Event Support/DOM Ready</h4><p>It is possible when using RequireJS to load scripts quickly enough that they complete before the DOM is ready. Any work that tries to interact with the DOM should wait for the DOM to be ready. For modern browsers, this is done by waiting for the DOMContentLoaded event.</p><p>\u4F7F\u7528 RequireJS \u8DB3\u591F\u5FEB\u5730\u52A0\u8F7D\u811A\u672C\u4EE5\u4F7F\u5176\u5728 DOM \u51C6\u5907\u597D\u4E4B\u524D\u5B8C\u6210\u65F6\uFF0C\u8FD9\u662F\u53EF\u80FD\u7684\u3002\u4EFB\u4F55\u5C1D\u8BD5\u4E0E DOM \u4EA4\u4E92\u7684\u5DE5\u4F5C\u90FD\u5E94\u7B49\u5F85 DOM \u51C6\u5907\u5C31\u7EEA\u3002\u5BF9\u4E8E\u73B0\u4EE3\u6D4F\u89C8\u5668\uFF0C\u8FD9\u662F\u901A\u8FC7\u7B49\u5F85 DOMContentLoaded \u4E8B\u4EF6\u6765\u5B8C\u6210\u7684\u3002</p><p>However, not all browsers in use support DOMContentLoaded. The domReady module implements a cross-browser method to determine when the DOM is ready. Download the module and use it in your project like so:</p><p>\u4F46\u662F\uFF0C\u5E76\u975E\u6240\u6709\u4F7F\u7528\u4E2D\u7684\u6D4F\u89C8\u5668\u90FD\u652F\u6301 DOMContentLoaded\u3002domReady \u6A21\u5757\u5B9E\u73B0\u4E86\u8DE8\u6D4F\u89C8\u5668\u65B9\u6CD5\u6765\u786E\u5B9A DOM \u51C6\u5907\u5C31\u7EEA\u7684\u65F6\u95F4\u3002\u4E0B\u8F7D\u6A21\u5757\uFF0C\u5E76\u5728\u60A8\u7684\u9879\u76EE\u4E2D\u4F7F\u7528\u5B83\uFF0C\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;domReady&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">domReady</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">domReady</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//This function is called once the DOM is ready.</span>
		<span class="token comment">//It will be safe to query the DOM and manipulate</span>
		<span class="token comment">//DOM nodes in this function.</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Since DOM ready is a common application need, ideally the nested functions in the API above could be avoided. The domReady module also implements the Loader Plugin API, so you can use the loader plugin syntax (notice the ! in the domReady dependency) to force the require() callback function to wait for the DOM to be ready before executing.</p><p>\u7531\u4E8E DOM ready \u662F\u5E38\u89C1\u7684\u5E94\u7528\u7A0B\u5E8F\u9700\u6C42\uFF0C\u56E0\u6B64\u7406\u60F3\u60C5\u51B5\u4E0B\u53EF\u4EE5\u907F\u514D\u4E0A\u9762 API \u4E2D\u7684\u5D4C\u5957\u51FD\u6570\u3002domReady \u6A21\u5757\u8FD8\u5B9E\u73B0\u4E86 Loader Plugin API\uFF0C\u56E0\u6B64\u60A8\u53EF\u4EE5\u4F7F\u7528 loader \u63D2\u4EF6\u8BED\u6CD5\uFF08\u6CE8\u610F domReady \u4F9D\u8D56\u9879\u4E2D\u7684\uFF01\uFF09\u6765\u5F3A\u5236 require\uFF08\uFF09\u56DE\u8C03\u51FD\u6570\u5728\u6267\u884C\u4E4B\u524D\u7B49\u5F85 DOM \u51C6\u5907\u5C31\u7EEA\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>domReady
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>will return the current document when used as a loader plugin:</p><p>\u7528\u4F5C\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u65F6\uFF0C\u5C06\u8FD4\u56DE\u5F53\u524D\u6587\u6863\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;domReady!&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//This function is called once the DOM is ready,</span>
	<span class="token comment">//notice the value for &#39;domReady!&#39; is the current</span>
	<span class="token comment">//document.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Note: If the document takes a while to load (maybe it is a very large document, or has HTML script tags loading large JS files that block DOM completion until they are done), using domReady as a loader plugin may result in a RequireJS &quot;timeout&quot; error. If this is a problem either increase the waitSeconds configuration, or just use domReady as a module and call domReady() inside the require() callback.</p><p>\u6CE8\u610F: \u5982\u679C\u6587\u6863\u52A0\u8F7D\u65F6\u95F4\u8F83\u957F\uFF08\u53EF\u80FD\u662F\u975E\u5E38\u5927\u7684\u6587\u6863\uFF0C\u6216\u8005 HTML \u811A\u672C\u6807\u7B7E\u52A0\u8F7D\u4E86\u5927\u578B JS \u6587\u4EF6\uFF0C\u8FD9\u4E9B\u6587\u4EF6\u4F1A\u963B\u6B62 DOM \u5B8C\u6210\u76F4\u5230\u5B8C\u6210\uFF09\uFF0C\u90A3\u4E48\u4F7F\u7528 domReady \u4F5C\u4E3A\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u53EF\u80FD\u4F1A\u5BFC\u81F4 RequireJS&quot;\u8D85\u65F6&quot;\u9519\u8BEF\u3002\u5982\u679C\u8FD9\u662F\u4E00\u4E2A\u95EE\u9898\uFF0C\u8BF7\u589E\u52A0 waitSeconds \u914D\u7F6E\uFF0C\u6216\u8005\u4EC5\u4F7F\u7528 domReady \u4F5C\u4E3A\u6A21\u5757\u5E76\u5728 require\uFF08\uFF09\u56DE\u8C03\u5185\u8C03\u7528 domReady\uFF08\uFF09\u3002</p><h4 id="define-an-i18n-bundle" tabindex="-1"><a class="header-anchor" href="#define-an-i18n-bundle" aria-hidden="true">#</a> Define an I18N Bundle</h4><p>Once your web app gets to a certain size and popularity, localizing the strings in the interface and providing other locale-specific information becomes more useful. However, it can be cumbersome to work out a scheme that scales well for supporting multiple locales.</p><p>\u4E00\u65E6\u60A8\u7684 Web \u5E94\u7528\u8FBE\u5230\u4E00\u5B9A\u7684\u5927\u5C0F\u548C\u6D41\u884C\u5EA6\uFF0C\u5728\u754C\u9762\u4E2D\u672C\u5730\u5316\u5B57\u7B26\u4E32\u5E76\u63D0\u4F9B\u5176\u4ED6\u7279\u5B9A\u4E8E\u8BED\u8A00\u73AF\u5883\u7684\u4FE1\u606F\u5C31\u53D8\u5F97\u66F4\u52A0\u6709\u7528\u3002\u4F46\u662F\uFF0C\u5236\u5B9A\u4E00\u4E2A\u53EF\u4EE5\u5F88\u597D\u5730\u6269\u5C55\u4EE5\u652F\u6301\u591A\u4E2A\u8BED\u8A00\u73AF\u5883\u7684\u65B9\u6848\u53EF\u80FD\u5F88\u9EBB\u70E6\u3002</p><p>RequireJS allows you to set up a basic module that has localized information without forcing you to provide all locale-specific information up front. It can be added over time, and only strings/values that change between locales can be defined in the locale-specific file.</p><p>RequireJS \u5141\u8BB8\u60A8\u8BBE\u7F6E\u5177\u6709\u672C\u5730\u5316\u4FE1\u606F\u7684\u57FA\u672C\u6A21\u5757\uFF0C\u800C\u4E0D\u5FC5\u5F3A\u5236\u60A8\u9884\u5148\u63D0\u4F9B\u6240\u6709\u7279\u5B9A\u4E8E\u8BED\u8A00\u73AF\u5883\u7684\u4FE1\u606F\u3002\u5B83\u53EF\u4EE5\u968F\u65F6\u95F4\u6DFB\u52A0\uFF0C\u5E76\u4E14\u53EA\u80FD\u5728\u7279\u5B9A\u4E8E\u8BED\u8A00\u73AF\u5883\u7684\u6587\u4EF6\u4E2D\u5B9A\u4E49\u5728\u8BED\u8A00\u73AF\u5883\u4E4B\u95F4\u66F4\u6539\u7684\u5B57\u7B26\u4E32/\u503C\u3002</p><p>i18n bundle support is provided by the i18n.js plugin. It is automatically loaded when a module or dependency specifies the i18n! prefix (more info below). Download the plugin and put it in the same directory as your app&#39;s main JS file.</p><p>i18n.js \u63D2\u4EF6\u63D0\u4F9B\u4E86\u5BF9 i18n \u5305\u7684\u652F\u6301\u3002\u5F53\u6A21\u5757\u6216\u4F9D\u8D56\u9879\u6307\u5B9A i18n \u65F6\uFF0C\u5B83\u5C06\u81EA\u52A8\u52A0\u8F7D\uFF01\u524D\u7F00\uFF08\u4E0B\u9762\u6709\u66F4\u591A\u4FE1\u606F\uFF09\u3002\u4E0B\u8F7D\u63D2\u4EF6\uFF0C\u5E76\u5C06\u5176\u4E0E\u5E94\u7528\u7A0B\u5E8F\u7684\u4E3B JS \u6587\u4EF6\u653E\u5728\u540C\u4E00\u76EE\u5F55\u4E2D\u3002</p><p>To define a bundle, put it in a directory called &quot;nls&quot; -- the i18n! plugin assumes a module name with &quot;nls&quot; in it indicates an i18n bundle. The &quot;nls&quot; marker in the name tells the i18n plugin where to expect the locale directories (they should be immediate children of the nls directory). If you wanted to provide a bundle of color names in your &quot;my&quot; set of modules, create the directory structure like so:</p><p>\u8981\u5B9A\u4E49\u5305\uFF0C\u8BF7\u5C06\u5176\u653E\u5728\u540D\u4E3A&quot;nls&quot;\u7684\u76EE\u5F55\u4E2D-i18n\uFF01\u63D2\u4EF6\u5047\u5B9A\u6A21\u5757\u540D\u79F0\u4E2D\u5E26\u6709&quot;nls&quot;\uFF0C\u8868\u793A\u4E00\u4E2A i18n \u8F6F\u4EF6\u5305\u3002\u540D\u79F0\u4E2D\u7684&quot;nls&quot;\u6807\u8BB0\u544A\u8BC9 i18n \u63D2\u4EF6\u5728\u54EA\u91CC\u53EF\u4EE5\u770B\u5230\u8BED\u8A00\u73AF\u5883\u76EE\u5F55\uFF08\u5B83\u4EEC\u5E94\u8BE5\u662F nls \u76EE\u5F55\u7684\u76F4\u63A5\u5B50\u76EE\u5F55\uFF09\u3002\u5982\u679C\u8981\u5728&quot;\u6211\u7684&quot;\u6A21\u5757\u96C6\u4E2D\u63D0\u4F9B\u4E00\u7EC4\u989C\u8272\u540D\u79F0\uFF0C\u8BF7\u6309\u4EE5\u4E0B\u65B9\u5F0F\u521B\u5EFA\u76EE\u5F55\u7ED3\u6784\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>my/nls/colors.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The contents of that file should look like so:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//my/nls/colors.js contents:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>An object literal with a property of &quot;root&quot; defines this module. That is all you have to do to set the stage for later localization work.</p><p>\u5C5E\u6027\u4E3A&quot;root&quot;\u7684\u5BF9\u8C61\u6587\u5B57\u5B9A\u4E49\u4E86\u6B64\u6A21\u5757\u3002\u60A8\u8981\u505A\u7684\u5C31\u662F\u4E3A\u4EE5\u540E\u7684\u672C\u5730\u5316\u5DE5\u4F5C\u5960\u5B9A\u57FA\u7840\u3002</p><p>You can then use the above module in another module, say, in a my/lamps.js file:</p><p>\u7136\u540E\uFF0C\u60A8\u53EF\u4EE5\u5728 my/lamps.js \u6587\u4EF6\u7684\u53E6\u4E00\u4E2A\u6A21\u5757\u4E2D\u4F7F\u7528\u4E0A\u8FF0\u6A21\u5757\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Contents of my/lamps.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;i18n!my/nls/colors&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">colors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">testMessage</span><span class="token operator">:</span> <span class="token string">&#39;The name for red in this locale is: &#39;</span> <span class="token operator">+</span> colors<span class="token punctuation">.</span>red<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The my/lamps module has one property called &quot;testMessage&quot; that uses colors.red to show the localized value for the color red.</p><p>Later, when you want to add a specific translation to a file, say for the fr-fr locale, change my/nls/colors to look like so:</p><p>my/lamps \u6A21\u5757\u5177\u6709\u4E00\u4E2A\u540D\u4E3A&quot;testMessage&quot;\u7684\u5C5E\u6027\uFF0C\u8BE5\u5C5E\u6027\u4F7F\u7528 colors.red \u6765\u663E\u793A\u7EA2\u8272\u7684\u672C\u5730\u5316\u503C\u3002</p><p>\u7A0D\u540E\uFF0C\u5F53\u60A8\u60F3\u5411\u6587\u4EF6\u6DFB\u52A0\u7279\u5B9A\u7684\u7FFB\u8BD1\u65F6\uFF0C\u4F8B\u5982\u4F7F\u7528 fr-fr \u8BED\u8A00\u73AF\u5883\uFF0C\u8BF7\u5C06 my/nls/colors \u66F4\u6539\u4E3A\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Contents of my/nls/colors.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token string-property property">&#39;fr-fr&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Then define a file at my/nls/fr-fr/colors.js that has the following contents:</p><p>\u7136\u540E\u5728 my/nls/fr-fr/colors.js \u5B9A\u4E49\u4E00\u4E2A\u6587\u4EF6\uFF0C\u8BE5\u6587\u4EF6\u5305\u542B\u4EE5\u4E0B\u5185\u5BB9\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Contents of my/nls/fr-fr/colors.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">&#39;rouge&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">&#39;bleu&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token string">&#39;vert&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>RequireJS will use the browser&#39;s navigator.languages, navigator.language or navigator.userLanguage property to determine what locale values to use for my/nls/colors, so your app does not have to change. If you prefer to set the locale, you can use the module config to pass the locale to the plugin:</p><p>RequireJS \u5C06\u4F7F\u7528\u6D4F\u89C8\u5668\u7684 navigator.languages\uFF0Cnavigator.language \u6216 navigator.userLanguage \u5C5E\u6027\u6765\u786E\u5B9A\u8981\u7528\u4E8E my/nls/colors \u7684\u8BED\u8A00\u73AF\u5883\u503C\uFF0C\u56E0\u6B64\u60A8\u7684\u5E94\u7528\u7A0B\u5E8F\u4E0D\u5FC5\u66F4\u6539\u3002\u5982\u679C\u60A8\u5E0C\u671B\u8BBE\u7F6E\u8BED\u8A00\u73AF\u5883\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528\u6A21\u5757\u914D\u7F6E\u5C06\u8BED\u8A00\u73AF\u5883\u4F20\u9012\u7ED9\u63D2\u4EF6\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">//Set the config for the i18n</span>
		<span class="token comment">//module ID</span>
		<span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&#39;fr-fr&#39;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Note that RequireJS will always use a lowercase version of the locale, to avoid case issues, so all of the directories and files on disk for i18n bundles should use lowercase locales.</p><p>\u6CE8\u610F RequireJS \u5C06\u59CB\u7EC8\u4F7F\u7528\u5C0F\u5199\u7248\u672C\u7684\u8BED\u8A00\u73AF\u5883\uFF0C\u4EE5\u907F\u514D\u51FA\u73B0\u5927\u5C0F\u5199\u95EE\u9898\uFF0C\u56E0\u6B64\uFF0Ci18n \u8F6F\u4EF6\u5305\u7684\u78C1\u76D8\u4E0A\u7684\u6240\u6709\u76EE\u5F55\u548C\u6587\u4EF6\u90FD\u5E94\u4F7F\u7528\u5C0F\u5199\u8BED\u8A00\u73AF\u5883\u3002</p><p>RequireJS is also smart enough to pick the right locale bundle, the one that most closely matches the ones provided by my/nls/colors. For instance, if the locale is &quot;en-us&quot;, then the &quot;root&quot; bundle will be used. If the locale is &quot;fr-fr-paris&quot; then the &quot;fr-fr&quot; bundle will be used.</p><p>RequireJS \u4E5F\u8DB3\u591F\u806A\u660E\uFF0C\u53EF\u4EE5\u9009\u62E9\u6B63\u786E\u7684\u8BED\u8A00\u73AF\u5883\u5305\uFF0C\u8BE5\u8BED\u8A00\u5305\u4E0E my/nls/colors \u63D0\u4F9B\u7684\u8BED\u8A00\u5305\u6700\u5339\u914D\u3002\u4F8B\u5982\uFF0C\u5982\u679C\u533A\u57DF\u8BBE\u7F6E\u4E3A&quot;en-us&quot;\uFF0C\u5219\u5C06\u4F7F\u7528&quot;root&quot;\u6346\u7ED1\u5305\u3002\u5982\u679C\u533A\u57DF\u8BBE\u7F6E\u4E3A&quot;fr-fr-paris&quot;\uFF0C\u5219\u5C06\u4F7F\u7528&quot;fr-fr&quot;\u6346\u7ED1\u5305\u3002</p><p>RequireJS also combines bundles together, so for instance, if the french bundle was defined like so (omitting a value for red):</p><p>RequireJS \u8FD8\u5C06\u6346\u7ED1\u5305\u5408\u5E76\u5728\u4E00\u8D77\uFF0C\u56E0\u6B64\uFF0C\u4F8B\u5982\uFF0C\u5982\u679C\u6CD5\u5F0F\u6346\u7ED1\u5305\u662F\u8FD9\u6837\u5B9A\u4E49\u7684\uFF08\u5C06\u7EA2\u8272\u503C\u7701\u7565\uFF09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Contents of my/nls/fr-fr/colors.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">&#39;bleu&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token string">&#39;vert&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Then the value for red in &quot;root&quot; will be used. This works for all locale pieces. If all the bundles listed below were defined, then RequireJS will use the values in the following priority order (the one at the top takes the most precedence):</p><p>\u7136\u540E\u5C06\u4F7F\u7528&quot;root&quot;\u4E2D red \u7684\u503C\u3002\u8FD9\u9002\u7528\u4E8E\u6240\u6709\u8BED\u8A00\u73AF\u5883\u3002\u5982\u679C\u5B9A\u4E49\u4E86\u4E0B\u9762\u5217\u51FA\u7684\u6240\u6709\u6346\u7ED1\u5305\uFF0C\u90A3\u4E48 RequireJS \u5C06\u6309\u7167\u4EE5\u4E0B\u4F18\u5148\u7EA7\u987A\u5E8F\u4F7F\u7528\u503C\uFF08\u9876\u90E8\u7684\u4F18\u5148\u7EA7\u6700\u9AD8\uFF09\uFF1A</p><ul><li>my/nls/fr-fr-paris/colors.js</li><li>my/nls/fr-fr/colors.js</li><li>my/nls/fr/colors.js</li><li>my/nls/colors.js</li></ul><p>If you prefer to not include the root bundle in the top level module, you can define it like a normal locale bundle. In that case, the top level module would look like:</p><p>\u5982\u679C\u60A8\u4E0D\u5E0C\u671B\u5728\u9876\u7EA7\u6A21\u5757\u4E2D\u5305\u542B\u6839\u5305\uFF0C\u5219\u53EF\u4EE5\u50CF\u666E\u901A\u8BED\u8A00\u73AF\u5883\u5305\u4E00\u6837\u5B9A\u4E49\u5B83\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u9876\u5C42\u6A21\u5757\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//my/nls/colors.js contents:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token string-property property">&#39;fr-fr&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token string-property property">&#39;fr-fr-paris&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>and the root bundle would look like:</p><p>\u6839\u675F\u770B\u8D77\u6765\u50CF\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Contents of my/nls/root/colors.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="requirejs-optimizer" tabindex="-1"><a class="header-anchor" href="#requirejs-optimizer" aria-hidden="true">#</a> RequireJS Optimizer</h2><p>RequireJS has an optimization tool that does the following</p><p>RequireJS \u6709\u4E00\u4E2A\u4F18\u5316\u5DE5\u5177\uFF0C\u53EF\u4EE5\u6267\u884C\u4EE5\u4E0B\u64CD\u4F5C</p><ul><li>Combines related scripts together into build layers and minifies them via UglifyJS (the default) or Closure Compiler (an option when using Java).</li></ul><ul><li>\u5C06\u76F8\u5173\u811A\u672C\u7EC4\u5408\u5230\u6784\u5EFA\u5C42\u4E2D\uFF0C\u5E76\u901A\u8FC7 UglifyJS (\u9ED8\u8BA4\u8BBE\u7F6E)\u6216 Closure Compiler(\u4F7F\u7528 Java \u65F6\u7684\u9009\u9879)\u5C06\u5B83\u4EEC\u6700\u5C0F\u5316\u3002</li></ul><ul><li>Optimizes CSS by inlining CSS files referenced by @import and removing comments.</li></ul><ul><li>\u901A\u8FC7\u5185\u8054@import \u5F15\u7528\u7684 CSS \u6587\u4EF6\u5E76\u5220\u9664\u6CE8\u91CA\u6765\u4F18\u5316 CSS\u3002</li></ul><p>The optimizer is part of the r.js adapter for Node and Nashorn, and it is designed to be run as part of a build or packaging step after you are done with development and are ready to deploy the code for your users.</p><p>\u4F18\u5316\u7A0B\u5E8F\u662F\u7528\u4E8E Node \u548C Nashorn \u7684 r.js \u9002\u914D\u5668\u7684\u4E00\u90E8\u5206\uFF0C\u5B83\u88AB\u8BBE\u8BA1\u4E3A\u5728\u5B8C\u6210\u5F00\u53D1\u5E76\u51C6\u5907\u4E3A\u7528\u6237\u90E8\u7F72\u4EE3\u7801\u540E\uFF0C\u4F5C\u4E3A\u6784\u5EFA\u6216\u6253\u5305\u6B65\u9AA4\u7684\u4E00\u90E8\u5206\u8FD0\u884C\u3002</p><p>The optimizer will only combine modules that are specified in arrays of string literals that are passed to top-level require and define calls, or the require(&#39;name&#39;) string literal calls in a simplified CommonJS wrapping. So, it will not find modules that are loaded via a variable name:</p><p>\u4F18\u5316\u5668\u5C06\u4EC5\u7EC4\u5408\u5728\u4F20\u9012\u7ED9\u9876\u7EA7 require \u548C define \u8C03\u7528\u7684\u5B57\u7B26\u4E32\u5E38\u91CF\u6570\u7EC4\u4E2D\u6307\u5B9A\u7684\u6A21\u5757\uFF0C\u6216\u5728\u7B80\u5316\u7684 CommonJS \u5305\u88C5\u4E2D\u4F7F\u7528 require(&#39;name&#39;)\u5B57\u7B26\u4E32\u5E38\u91CF\u8C03\u7528\u3002\u56E0\u6B64\uFF0C\u5B83\u5C06\u627E\u4E0D\u5230\u901A\u8FC7\u53D8\u91CF\u540D\u79F0\u52A0\u8F7D\u7684\u6A21\u5757\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> mods <span class="token operator">=</span> someCondition <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
<span class="token function">require</span><span class="token punctuation">(</span>mods<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>but &#39;a&#39; and &#39;b&#39; will be included if specified like so:</p><p>\u4F46\u5982\u679C\u8FD9\u6837\u6307\u5B9A\uFF0C\u5C06\u5305\u62EC&quot;a&quot;\u548C&quot;b&quot;\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>or:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This behavior allows dynamic loading of modules even after optimization. You can always explicitly add modules that are not found via the optimizer&#39;s static analysis by using the include option.</p><p>\u6B64\u884C\u4E3A\u5373\u4F7F\u5728\u4F18\u5316\u540E\u4E5F\u5141\u8BB8\u52A8\u6001\u52A0\u8F7D\u6A21\u5757\u3002\u60A8\u59CB\u7EC8\u53EF\u4EE5\u4F7F\u7528 include \u9009\u9879\u6765\u663E\u5F0F\u6DFB\u52A0\u901A\u8FC7\u4F18\u5316\u5668\u7684\u9759\u6001\u5206\u6790\u627E\u4E0D\u5230\u7684\u6A21\u5757\u3002</p><h3 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h3><p>The optimizer can be run using Node, Java with Rhino or Nashorn, or in the browser. The requirements for each option:</p><p>\u53EF\u4EE5\u4F7F\u7528 Node\uFF0C\u5E26\u6709 Rhino \u6216 Nashorn \u7684 Java \u6216\u5728\u6D4F\u89C8\u5668\u4E2D\u8FD0\u884C\u4F18\u5316\u5668\u3002\u6BCF\u4E2A\u9009\u9879\u7684\u8981\u6C42\uFF1A</p><ul><li>Node: (preferred) Node 0.4.0 or later.</li><li>Java: Java 1.6 or later.</li><li>Browser: as of 2.1.2, the optimizer can run in a web browser that has array extras. While the optimizer options are the same as shown below, it is called via JavaScript instead of command line options. It is also only good for generating optimized single files, not a directory optimization. See the browser example. This option is really only useful for providing web-based custom builds of your library.</li></ul><ul><li>Node: (\u9996\u9009)Node 0.4.0 \u6216\u66F4\u9AD8\u7248\u672C\u3002</li><li>Java: Java 1.6 \u6216\u66F4\u9AD8\u7248\u672C\u3002</li><li>\u6D4F\u89C8\u5668: \u4ECE 2.1.2 \u5F00\u59CB\uFF0C\u4F18\u5316\u5668\u53EF\u4EE5\u5728\u5177\u6709 extras \u6570\u7EC4\u7684 Web \u6D4F\u89C8\u5668\u4E2D\u8FD0\u884C\u3002\u5C3D\u7BA1\u4F18\u5316\u7A0B\u5E8F\u9009\u9879\u4E0E\u4EE5\u4E0B\u6240\u793A\u76F8\u540C\uFF0C\u4F46 \u200B\u200B \u5B83\u662F\u901A\u8FC7 JavaScript \u800C\u4E0D\u662F\u547D\u4EE4\u884C\u9009\u9879\u8C03\u7528\u7684\u3002\u5B83\u4E5F\u4EC5\u9002\u7528\u4E8E\u751F\u6210\u4F18\u5316\u7684\u5355\u4E2A\u6587\u4EF6\uFF0C\u800C\u4E0D\u662F\u76EE\u5F55\u4F18\u5316\u3002\u8BF7\u53C2\u9605\u6D4F\u89C8\u5668\u793A\u4F8B\u3002\u6B64\u9009\u9879\u5B9E\u9645\u4E0A\u4EC5\u5BF9\u63D0\u4F9B\u5E93\u7684\u57FA\u4E8E Web \u7684\u81EA\u5B9A\u4E49\u7248\u672C\u6709\u7528\u3002</li></ul><p>For command line use, Node is the preferred execution environment. The optimizer runs <strong>much faster</strong> with Node.</p><p>\u5BF9\u4E8E\u547D\u4EE4\u884C\u4F7F\u7528\uFF0CNode \u662F\u9996\u9009\u7684\u6267\u884C\u73AF\u5883\u3002\u4F18\u5316\u5668\u901A\u8FC7 Node \u8FD0\u884C\u5F97\u66F4\u5FEB\u3002</p><p>All the example commands in this page assume Node usage, and running on a Linux/OS X command line. See the r.js README for how to run it in Java.</p><p>\u6B64\u9875\u9762\u4E2D\u7684\u6240\u6709\u793A\u4F8B\u547D\u4EE4\u5747\u5047\u5B9A\u4F7F\u7528 Node\uFF0C\u5E76\u4E14\u5728 Linux/OS X \u547D\u4EE4\u884C\u4E0A\u8FD0\u884C\u3002\u6709\u5173\u5982\u4F55\u5728 Java \u4E2D\u8FD0\u884C\u5B83\u7684\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 r.js \u81EA\u8FF0\u6587\u4EF6\u3002</p><h3 id="download" tabindex="-1"><a class="header-anchor" href="#download" aria-hidden="true">#</a> Download</h3><ol><li><p>You can download the tool on the download page.</p></li><li><p>If you are using Node with NPM, you can install r.js globally as part of the &quot;requirejs&quot; package in NPM:</p></li></ol><p>1): \u60A8\u53EF\u4EE5\u5728\u4E0B\u8F7D\u9875\u9762\u4E0A\u4E0B\u8F7D\u8BE5\u5DE5\u5177\u3002</p><p>2):\u5982\u679C\u5C06 Node \u4E0E NPM \u4E00\u8D77\u4F7F\u7528\uFF0C\u5219\u53EF\u4EE5\u5C06 R.js \u5168\u5C40\u5B89\u88C5\u4E3A NPM \u4E2D&quot;requirejs&quot;\u8F6F\u4EF6\u5305\u7684\u4E00\u90E8\u5206\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install <span class="token operator">-</span>g requirejs
r<span class="token punctuation">.</span>js <span class="token operator">-</span>o app<span class="token punctuation">.</span>build<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If on Windows, you may need to type r.js.cmd instead of r.js. Or, you can use DOSKEY:</p><p>\u5982\u679C\u5728 Windows \u4E0A\uFF0C\u5219\u53EF\u80FD\u9700\u8981\u952E\u5165 r.js.cmd \u800C\u4E0D\u662F r.js\u3002\u6216\u8005\uFF0C\u60A8\u53EF\u4EE5\u4F7F\u7528 DOSKEY\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">DOSKEY</span> r<span class="token punctuation">.</span>js<span class="token operator">=</span>r<span class="token punctuation">.</span>js<span class="token punctuation">.</span>cmd $\\<span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If you want to install requirejs locally in a project as an npm package, instead of globally:</p><p>\u5982\u679C\u8981\u4EE5 npm \u8F6F\u4EF6\u5305\u7684\u5F62\u5F0F\u5728\u9879\u76EE\u4E2D\u672C\u5730\u5B89\u88C5 requirejs\uFF0C\u800C\u4E0D\u662F\u5168\u5C40\u5B89\u88C5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install requirejs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>With this local install, you can run the optimizer by running the r.js or r.js.cmd file found in the project&#39;s node_modules/.bin directory.</p><p>\u4F7F\u7528\u6B64\u672C\u5730\u5B89\u88C5\uFF0C\u60A8\u53EF\u4EE5\u901A\u8FC7\u8FD0\u884C\u9879\u76EE\u76EE\u5F55\u4E2D\u7684 r.js \u6216 r.js.cmd \u6587\u4EF6\u6765\u8FD0\u884C\u4F18\u5316\u5668 node_modules/.bin\u3002</p><p>With the local install, you can also use the optimizer via a function call inside a node program.</p><p>\u5728\u672C\u5730\u5B89\u88C5\u4E2D\uFF0C\u60A8\u8FD8\u53EF\u4EE5\u901A\u8FC7 Node \u7A0B\u5E8F\u5185\u90E8\u7684\u51FD\u6570\u8C03\u7528\u6765\u4F7F\u7528\u4F18\u5316\u5668\u3002</p><p>The rest of this page assumes that r.js is just downloaded manually from the download page. It is normally the clearest, most portable way to use the optimizer.</p><p>\u8BE5\u9875\u9762\u7684\u5176\u4F59\u90E8\u5206\u5047\u5B9A r.js \u53EA\u662F\u4ECE\u4E0B\u8F7D\u9875\u9762\u624B\u52A8\u4E0B\u8F7D\u7684\u3002\u901A\u5E38\uFF0C\u8FD9\u662F\u4F7F\u7528\u4F18\u5316\u5668\u7684\u6700\u6E05\u6670\uFF0C\u6700\u4FBF\u6377\u7684\u65B9\u6CD5\u3002</p><h3 id="example-setup" tabindex="-1"><a class="header-anchor" href="#example-setup" aria-hidden="true">#</a> Example setup</h3><p>The examples in this page will assume you downloaded and saved r.js in a directory that is a sibling to your project directory. The optimizer that is part of r.js can live anywhere you want, but you will likely need to adjust the paths accordingly in these examples.</p><p>\u6B64\u9875\u9762\u4E2D\u7684\u793A\u4F8B\u5C06\u5047\u5B9A\u60A8\u5DF2\u5C06 r.js \u4E0B\u8F7D\u5E76\u4FDD\u5B58\u5728\u9879\u76EE\u76EE\u5F55\u7684\u540C\u7EA7\u76EE\u5F55\u4E2D\u3002\u4F5C\u4E3A r.js \u4E00\u90E8\u5206\u7684\u4F18\u5316\u5668\u53EF\u4EE5\u653E\u5728\u60A8\u60F3\u8981\u7684\u4EFB\u4F55\u4F4D\u7F6E\uFF0C\u4F46\u662F\u5728\u8FD9\u4E9B\u793A\u4F8B\u4E2D\uFF0C\u60A8\u53EF\u80FD\u9700\u8981\u76F8\u5E94\u5730\u8C03\u6574\u8DEF\u5F84\u3002</p><p>Example setup:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>appdirectory
	main.html
	css
		common.css
		main.css
	scripts
		require.js
		main.js
		one.js
		two.js
		three.js
r.js (The r.js optimizer from download page)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>main.html has script tags for require.js and loads main.js via a require call, like so:</p><p>main.html \u5177\u6709 require.js \u7684\u811A\u672C\u6807\u7B7E\uFF0C\u5E76\u901A\u8FC7 require \u8C03\u7528\u52A0\u8F7D main.js\uFF0C\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css/main.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>main.js loads one.js, two.js and three.js via a require call:</p><p>main.js \u901A\u8FC7 require \u8C03\u7528\u52A0\u8F7D one.js\uFF0Ctwo.js \u548C three.js\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>main.css has content like the following:</p><p>main.css \u7684\u5185\u5BB9\u5982\u4E0B\uFF1A</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;common.css&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="token selector">.app</span> <span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../../img/app.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h3><p>Command line arguments are interchangeable with a build profile properties</p><p>\u547D\u4EE4\u884C\u53C2\u6570\u53EF\u4E0E\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u5C5E\u6027\u4E92\u6362</p><p>You can either specify options on the command line:</p><p>\u60A8\u53EF\u4EE5\u5728\u547D\u4EE4\u884C\u4E2D\u6307\u5B9A\u9009\u9879\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node r.js -o baseUrl=. paths.jquery=some/other/jquery name=main out=main-built.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>or in a build profile. In a build.js, the same command line arguments can be specified like so:</p><p>\u6216\u5728\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u4E2D\u3002\u5728 build.js \u4E2D\uFF0C\u53EF\u4EE5\u50CF\u4E0B\u9762\u8FD9\u6837\u6307\u5B9A\u76F8\u540C\u7684\u547D\u4EE4\u884C\u53C2\u6570\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;some/other/jquery&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">out</span><span class="token operator">:</span> <span class="token string">&#39;main-built.js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>then just pass the build profile&#39;s file name to the optimizer:</p><p>\u7136\u540E\u53EA\u9700\u5C06\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u7684\u6587\u4EF6\u540D\u4F20\u9012\u7ED9\u4F18\u5316\u5668\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node r.js -o build.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Command line arguments take precedence over build profile settings, and you can mix them together:</p><p>\u547D\u4EE4\u884C\u53C2\u6570\u4F18\u5148\u4E8E\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u8BBE\u7F6E\uFF0C\u60A8\u53EF\u4EE5\u5C06\u5B83\u4EEC\u6DF7\u5408\u5728\u4E00\u8D77\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node r.js -o build.js optimize=none
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>There is a limitation on the command line argument syntax. Dots are viewed as object property separators, to allow something like paths.jquery=lib/jquery to be transformed to the following in the optimizer:</p><p>\u547D\u4EE4\u884C\u53C2\u6570\u8BED\u6CD5\u6709\u9650\u5236\u3002\u70B9\u88AB\u89C6\u4E3A\u5BF9\u8C61\u5C5E\u6027\u5206\u9694\u7B26\uFF0C\u4EE5\u5141\u8BB8 paths.jquery=lib/jquery \u5728\u4F18\u5316\u5668\u4E2D\u5C06\u7C7B\u4F3C\u7684\u5185\u5BB9\u8F6C\u6362\u4E3A\u4EE5\u4E0B\u5185\u5BB9\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>paths: {
    jquery: &#39;lib/jquery&#39;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>but this means you cannot set the value for a paths property of &quot;core/jquery.tabs&quot; to a value. This would not work: paths.core/jquery.tabs=empty:, since it would result in this incorrect structure:</p><p>\u4F46\u8FD9\u610F\u5473\u7740\u60A8\u4E0D\u80FD\u5C06&quot;core/jquery.tabs&quot;\u7684 paths \u5C5E\u6027\u7684\u503C\u8BBE\u7F6E\u4E3A\u4E00\u4E2A\u503C\u3002\u8FD9\u5C06\u4E0D\u8D77\u4F5C\u7528\uFF1Apaths.core/jquery.tabs=empty:\uFF0C\u56E0\u4E3A\u5B83\u4F1A\u5BFC\u81F4\u6B64\u9519\u8BEF\u7684\u7ED3\u6784\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>paths: {
    &#39;core/jquery&#39;: {
        tabs: &#39;empty:&#39;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If you need to set a path like the &quot;core/jquery.tabs&quot; one, use a build.js file with the build options specified as a JavaScript object instead of using command line arguments.</p><p>\u5982\u679C\u60A8\u9700\u8981\u8BBE\u7F6E\u7C7B\u4F3C&quot;core/jquery.tabs&quot;\u7684\u8DEF\u5F84\uFF0C\u8BF7\u4F7F\u7528\u5E26\u6709\u6307\u5B9A\u4E3A JavaScript \u5BF9\u8C61\u7684\u6784\u5EFA\u9009\u9879\u7684 build.js \u6587\u4EF6\uFF0C\u800C\u4E0D\u8981\u4F7F\u7528\u547D\u4EE4\u884C\u53C2\u6570\u3002</p><p>For a list of all options, see all configuration options.</p><p>\u6709\u5173\u6240\u6709\u9009\u9879\u7684\u5217\u8868\uFF0C\u8BF7\u53C2\u9605\u6240\u6709\u914D\u7F6E\u9009\u9879\u3002</p><p>Relative path resolution rules:</p><p>\u76F8\u5BF9\u8DEF\u5F84\u89E3\u6790\u89C4\u5219\uFF1A</p><p>In general, if it is a path, it is relative to the build.js file used to hold the build options, or if just using command line arguments, relative to the current working directory. Example of properties that are file paths: appDir, dir, mainConfigFile, out, wrap.startFile, wrap.endFile.</p><p>\u901A\u5E38\uFF0C\u5982\u679C\u5B83\u662F\u8DEF\u5F84\uFF0C\u5219\u76F8\u5BF9\u4E8E\u7528\u4E8E\u4FDD\u5B58\u6784\u5EFA\u9009\u9879\u7684 build.js \u6587\u4EF6\uFF0C\u6216\u8005\u4EC5\u76F8\u5BF9\u4E8E\u5F53\u524D\u5DE5\u4F5C\u76EE\u5F55\u800C\u8A00\uFF0C\u5982\u679C\u4EC5\u4F7F\u7528\u547D\u4EE4\u884C\u53C2\u6570\u3002\u6587\u4EF6\u8DEF\u5F84\u5C5E\u6027\u7684\u793A\u4F8B\uFF1AappDir\uFF0Cdir\uFF0CmainConfigFile\uFF0Cout\uFF0Cwrap.startFile\uFF0Cwrap.endFile\u3002</p><p>For baseUrl, it is relative to appDir. If no appDir, then baseUrl is relative to the build.js file, or if just using command line arguments, the current working directory.</p><p>\u5BF9\u4E8E\u7684 baseUrl\uFF0C\u5B83\u662F\u76F8\u5BF9\u4E8E APPDIR\u3002\u5982\u679C\u6CA1\u6709 appDir\uFF0C\u5219 baseUrl \u76F8\u5BF9\u4E8E build.js \u6587\u4EF6\uFF0C\u6216\u8005\u5982\u679C\u4EC5\u4F7F\u7528\u547D\u4EE4\u884C\u53C2\u6570\uFF0C\u5219\u76F8\u5BF9\u4E8E\u5F53\u524D\u5DE5\u4F5C\u76EE\u5F55\u3002</p><p>For paths and packages, they are relative to baseUrl, just as they are for require.js.</p><p>\u5BF9\u4E8E\u8DEF\u5F84\u548C\u5305\uFF0C\u5B83\u4EEC\u662F\u76F8\u5BF9\u7684 baseUrl\uFF0C\u53EA\u662F\u56E0\u4E3A\u4ED6\u4EEC\u662F require.js\u3002</p><p>For properties that are module IDs, they should be module IDs, and not file paths. Examples are name, include, exclude, excludeShallow, deps.</p><p>\u5BF9\u4E8E\u4F5C\u4E3A\u6A21\u5757 ID \u7684\u5C5E\u6027\uFF0C\u5B83\u4EEC\u5E94\u8BE5\u662F\u6A21\u5757 ID\uFF0C\u800C\u4E0D\u662F\u6587\u4EF6\u8DEF\u5F84\u3002\u793A\u4F8B\u5305\u62EC name\uFF0Cinclude\uFF0Cexclude\uFF0CexcludeShallow\uFF0Cdeps\u3002</p><p>Config settings in your main JS module that is loaded in the browser at runtime are not read by default by the optimizer</p><p>\u4F18\u5316\u5668\u9ED8\u8BA4\u4E0D\u4F1A\u8BFB\u53D6\u8FD0\u884C\u65F6\u5728\u6D4F\u89C8\u5668\u4E2D\u52A0\u8F7D\u7684\u4E3B JS \u6A21\u5757\u4E2D\u7684\u914D\u7F6E\u8BBE\u7F6E</p><p>This is because the config settings for a build can be very different, with multiple optimization targets. So a separate set of config options need to be specified for the optimizer.</p><p>\u8FD9\u662F\u56E0\u4E3A\u6784\u5EFA\u7684\u914D\u7F6E\u8BBE\u7F6E\u53EF\u80FD\u975E\u5E38\u4E0D\u540C\uFF0C\u6709\u591A\u4E2A\u4F18\u5316\u76EE\u6807\u3002\u56E0\u6B64\uFF0C\u9700\u8981\u4E3A\u4F18\u5316\u7A0B\u5E8F\u6307\u5B9A\u4E00\u7EC4\u5355\u72EC\u7684\u914D\u7F6E\u9009\u9879\u3002</p><p>In version 1.0.5+ of the optimizer, the mainConfigFile option can be used to specify the location of the runtime config. If specified with the path to your main JS file, the first requirejs({}), requirejs.config({}), require({}), or require.config({}) found in that file will be parsed out and used as part of the configuration options passed to the optimizer:</p><p>\u5728\u4F18\u5316\u7A0B\u5E8F\u7684 1.0.5+\u7248\u672C\u4E2D\uFF0CmainConfigFile \u9009\u9879\u53EF\u7528\u4E8E\u6307\u5B9A\u8FD0\u884C\u65F6\u914D\u7F6E\u7684\u4F4D\u7F6E\u3002\u5982\u679C\u4F7F\u7528\u4E3B JS \u6587\u4EF6\u7684\u8DEF\u5F84\u6307\u5B9A\uFF0Crequirejs({}), requirejs.config({}), require({}), or require.config({})\u5219\u5C06\u89E3\u6790\u51FA\u8BE5\u6587\u4EF6\u4E2D\u7684\u7B2C\u4E00\u4E2A\u6587\u4EF6\uFF0C\u5E76\u5C06\u5176\u7528\u4F5C\u4F20\u9012\u7ED9\u4F18\u5316\u5668\u7684\u914D\u7F6E\u9009\u9879\u7684\u4E00\u90E8\u5206\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mainConfigFile: &#39;path/to/main.js&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The precedence for config: command line, build profile, mainConfigFile. In other words, the mainConfigFile configuration has the lowest priority.</p><p>config \u7684\u4F18\u5148\u7EA7\uFF1A\u547D\u4EE4\u884C\uFF0C\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\uFF0CmainConfigFile\u3002\u6362\u53E5\u8BDD\u8BF4\uFF0CmainConfigFile \u914D\u7F6E\u7684\u4F18\u5148\u7EA7\u6700\u4F4E\u3002</p><h3 id="optimizing-one-javascript-file" tabindex="-1"><a class="header-anchor" href="#optimizing-one-javascript-file" aria-hidden="true">#</a> Optimizing one JavaScript file</h3><p>Use the above example setup, if you just wanted to optimize main.js, you could use this command, from inside the appdirectory/scripts directory:</p><p>\u4F7F\u7528\u4E0A\u9762\u7684\u793A\u4F8B\u8BBE\u7F6E\uFF0C\u5982\u679C\u60A8\u53EA\u60F3\u4F18\u5316 main.js\uFF0C\u5219\u53EF\u4EE5\u5728 appdirectory/scripts \u76EE\u5F55\u5185\u90E8\u4F7F\u7528\u6B64\u547D\u4EE4\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o name=main out=main-built.js baseUrl=.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will create a file called appdirectory/scripts/main-built.js that will include the contents of main.js, one.js, two.js and three.js.</p><p>\u8FD9\u5C06\u521B\u5EFA\u4E00\u4E2A\u540D\u4E3A appdirectory/scripts/main-built.js \u7684\u6587\u4EF6\uFF0C\u5176\u4E2D\u5C06\u5305\u542B main.js\uFF0Cone.js\uFF0Ctwo.js \u548C three.js \u7684\u5185\u5BB9\u3002</p><p>Normally you should not save optimized files with your pristine project source. Normally you would save them to a copy of your project, but to make this example easier it is saved with the source. Change the out= option to any directory you like, that has a copy of your source. Then, you can change the main-built.js file name to just main.js so the HTML page will load the optimized version of the file.</p><p>\u901A\u5E38\u4F60\u5E94\u8BE5\u4E0D\u4FDD\u5B58\u4F18\u5316\u540E\u7684\u6587\u4EF6\u4E0E\u539F\u59CB\u7684\u9879\u76EE\u6E90\u3002\u901A\u5E38\uFF0C\u60A8\u4F1A\u5C06\u5B83\u4EEC\u4FDD\u5B58\u5230\u9879\u76EE\u7684\u526F\u672C\u4E2D\uFF0C\u4F46\u662F\u4E3A\u4E86\u4F7F\u6B64\u793A\u4F8B\u66F4\u52A0\u5BB9\u6613\uFF0C\u5B83\u4E0E\u6E90\u4E00\u8D77\u4FDD\u5B58\u3002\u5C06 out =\u9009\u9879\u66F4\u6539\u4E3A\u60A8\u559C\u6B22\u7684\u4EFB\u4F55\u5305\u542B\u6E90\u526F\u672C\u7684\u76EE\u5F55\u3002\u7136\u540E\uFF0C\u60A8\u53EF\u4EE5\u5C06 main-built.js \u6587\u4EF6\u540D\u66F4\u6539\u4E3A main.js\uFF0C\u4EE5\u4FBF HTML \u9875\u9762\u5C06\u52A0\u8F7D\u6587\u4EF6\u7684\u4F18\u5316\u7248\u672C\u3002</p><p>If you want to include require.js with the main.js source, you can use this kind of command:</p><p>\u5982\u679C\u8981\u5728 main.js \u6E90\u4EE3\u7801\u4E2D\u5305\u542B require.js\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528\u4EE5\u4E0B\u547D\u4EE4\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o baseUrl=. paths.requireLib=../../require name=main include=requireLib out=main-built.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Since &quot;require&quot; is a reserved dependency name, you create a &quot;requireLib&quot; dependency and map it to the require.js file.</p><p>\u7531\u4E8E&quot;require&quot;\u662F\u4FDD\u7559\u7684\u4F9D\u8D56\u9879\u540D\u79F0\uFF0C\u56E0\u6B64\u60A8\u5C06\u521B\u5EFA&quot;requireLib&quot;\u4F9D\u8D56\u9879\u5E76\u5C06\u5176\u6620\u5C04\u5230 require.js \u6587\u4EF6\u3002</p><p>Once that optimization is done, you can change the script tag to reference &quot;main-built.js&quot; instead of &quot;require.js&quot;, and your optimized project will only need to make one script request.</p><p>\u4F18\u5316\u5B8C\u6210\u540E\uFF0C\u60A8\u53EF\u4EE5\u66F4\u6539\u811A\u672C\u6807\u8BB0\u4EE5\u5F15\u7528&quot;main-built.js&quot;\u800C\u4E0D\u662F&quot;require.js&quot;\uFF0C\u5E76\u4E14\u4F18\u5316\u540E\u7684\u9879\u76EE\u4EC5\u9700\u8981\u53D1\u51FA\u4E00\u4E2A\u811A\u672C\u8BF7\u6C42\u3002</p><p>If you want to wrap your built file so it can be used in pages that do not have an AMD loader like RequireJS, see the Optimization FAQ.</p><p>\u5982\u679C\u60A8\u60F3\u6253\u5305\u751F\u6210\u7684\u6587\u4EF6\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u5728\u6CA1\u6709 AMD \u52A0\u8F7D\u5668\u7684\u9875\u9762(\u5982 RequireJS)\u4E2D\u4F7F\u7528\u5B83\uFF0C\u8BF7\u53C2\u9605\u4F18\u5316\u5E38\u89C1\u95EE\u9898\u89E3\u7B54.</p><h3 id="shallow-exclusions-for-fast-development" tabindex="-1"><a class="header-anchor" href="#shallow-exclusions-for-fast-development" aria-hidden="true">#</a> Shallow exclusions for fast development</h3><p>You can use the one JavaScript file optimization approach to make your development experience faster. By optimizing all the modules in your project into one file, except the one you are currently developing, you can reload your project quickly in the browser, but still give you the option of fine grained debugging in a module.</p><p>\u60A8\u53EF\u4EE5\u4F7F\u7528\u4E00\u79CD JavaScript \u6587\u4EF6\u4F18\u5316\u65B9\u6CD5\u6765\u52A0\u5FEB\u60A8\u7684\u5F00\u53D1\u4F53\u9A8C\u3002\u901A\u8FC7\u5C06\u9879\u76EE\u4E2D\u7684\u6240\u6709\u6A21\u5757\u4F18\u5316\u4E3A\u4E00\u4E2A\u6587\u4EF6(\u5F53\u524D\u6B63\u5728\u5F00\u53D1\u7684\u6587\u4EF6\u9664\u5916)\uFF0C\u53EF\u4EE5\u5728\u6D4F\u89C8\u5668\u4E2D\u5FEB\u901F\u91CD\u65B0\u52A0\u8F7D\u9879\u76EE\uFF0C\u4F46\u4ECD\u53EF\u4EE5\u9009\u62E9\u5728\u6A21\u5757\u4E2D\u8FDB\u884C\u7CBE\u7EC6\u8C03\u8BD5\u3002</p><p>You can do this by using the excludeShallow option. Using the example setup above, assume you are currently building out or debugging two.js. You could use this optimization command:</p><p>\u60A8\u53EF\u4EE5\u4F7F\u7528 excludeShallow \u9009\u9879\u6765\u6267\u884C\u6B64\u64CD\u4F5C\u3002\u4F7F\u7528\u4E0A\u9762\u7684\u793A\u4F8B\u8BBE\u7F6E\uFF0C\u5047\u8BBE\u60A8\u5F53\u524D\u6B63\u5728\u6784\u5EFA\u6216\u8C03\u8BD5 two.js\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528\u4EE5\u4E0B\u4F18\u5316\u547D\u4EE4\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o name=main excludeShallow=two out=main-built.js baseUrl=.
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If you do not want the main-build.js file minified, pass optimize=none in the command above.</p><p>\u5982\u679C\u60A8\u4E0D\u60F3\u7F29\u5C0F main-build.js \u6587\u4EF6\uFF0C\u8BF7\u5728\u4E0A\u9762\u7684\u547D\u4EE4\u4E2D\u4F20\u9012 optimize = none\u3002</p><p>Then configure the HTML page to load the main-built.js file instead of main.js by configuring the path used for &quot;main&quot; to be &quot;main-built&quot;:</p><p>\u7136\u540E\u901A\u8FC7\u5C06\u7528\u4E8E&quot;main&quot;\u7684\u8DEF\u5F84\u914D\u7F6E\u4E3A&quot;main-built&quot;\uFF0C\u5C06 HTML \u9875\u9762\u914D\u7F6E\u4E3A\u52A0\u8F7D main-built.js \u6587\u4EF6\u800C\u4E0D\u662F main.js\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>!DOCTYPE html&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css/main.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
			require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token comment">//Comment out this line to go back to loading</span>
					<span class="token comment">//the non-optimized main.js source file.</span>
					<span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;main-built&#39;</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Now, when this page is loaded, the require() for &quot;main&quot; will load the main-built.js file. Since excludeShallow told it just to exclude two.js, two.js will still be loaded as a separate file, allowing you to see it as a separate file in the browser&#39;s debugger, so you can set breakpoints and better track its individual changes.</p><p>\u73B0\u5728\uFF0C\u5F53\u52A0\u8F7D\u6B64\u9875\u9762\u65F6\uFF0C&quot;main&quot;\u7684 require()\u5C06\u52A0\u8F7D main-built.js \u6587\u4EF6\u3002\u7531\u4E8E excludeShallow \u544A\u8BC9\u5B83\u53EA\u662F\u8981\u6392\u9664 two.js\uFF0C\u56E0\u6B64 two.js \u4ECD\u5C06\u4F5C\u4E3A\u72EC\u7ACB\u6587\u4EF6\u52A0\u8F7D\uFF0C\u4F7F\u60A8\u53EF\u4EE5\u5728\u6D4F\u89C8\u5668\u7684\u8C03\u8BD5\u5668\u4E2D\u5C06\u5176\u89C6\u4E3A\u72EC\u7ACB\u6587\u4EF6\uFF0C\u56E0\u6B64\u53EF\u4EE5\u8BBE\u7F6E\u65AD\u70B9\u5E76\u66F4\u597D\u5730\u8DDF\u8E2A\u5176\u5404\u4E2A\u66F4\u6539\u3002</p><h3 id="empty-paths-for-network-cdn-resources" tabindex="-1"><a class="header-anchor" href="#empty-paths-for-network-cdn-resources" aria-hidden="true">#</a> empty: paths for network/CDN resources</h3><p>You may have a script you want to load from a Content Delivery Network (CDN) or any other server on a different domain.</p><p>\u60A8\u53EF\u80FD\u5177\u6709\u8981\u4ECE Content Delivery Network(CDN)\u6216\u5176\u4ED6\u57DF\u4E0A\u7684\u4EFB\u4F55\u5176\u4ED6\u670D\u52A1\u5668\u52A0\u8F7D\u7684\u811A\u672C\u3002</p><p>The optimizer cannot load network resources, so if you want it included in the build, be sure to create a paths config to map the file to a module name. Then, for running the optimizer, download the CDN script and pass a paths config to the optimizer that maps the module name to the local file path.</p><p>\u4F18\u5316\u5668\u65E0\u6CD5\u52A0\u8F7D\u7F51\u7EDC\u8D44\u6E90\uFF0C\u56E0\u6B64\uFF0C\u5982\u679C\u60A8\u5E0C\u671B\u5C06\u5176\u5305\u542B\u5728\u6784\u5EFA\u4E2D\uFF0C\u8BF7\u786E\u4FDD\u521B\u5EFA\u8DEF\u5F84\u914D\u7F6E\u4EE5\u5C06\u6587\u4EF6\u6620\u5C04\u5230\u6A21\u5757\u540D\u79F0\u3002\u7136\u540E\uFF0C\u8981\u8FD0\u884C\u4F18\u5316\u5668\uFF0C\u8BF7\u4E0B\u8F7D CDN \u811A\u672C\uFF0C\u7136\u540E\u5C06\u8DEF\u5F84\u914D\u7F6E\u4F20\u9012\u7ED9\u4F18\u5316\u5668\uFF0C\u4EE5\u5C06\u6A21\u5757\u540D\u79F0\u6620\u5C04\u5230\u672C\u5730\u6587\u4EF6\u8DEF\u5F84\u3002</p><p>However, it is more likely that you do not want to include that resource in the build. If the script does not have any dependencies, or you do not want to include its dependencies or will be including them in another way, then you can use the special &#39;empty:&#39; scheme in the paths config to just skip the file when doing an optimization.</p><p>\u4F46\u662F\uFF0C\u60A8\u5F88\u53EF\u80FD\u4E0D\u60F3\u5728\u6784\u5EFA\u4E2D\u5305\u62EC\u8BE5\u8D44\u6E90\u3002\u5982\u679C\u811A\u672C\u6CA1\u6709\u4EFB\u4F55\u4F9D\u8D56\u5173\u7CFB\uFF0C\u6216\u8005\u60A8\u4E0D\u60F3\u5305\u542B\u5176\u4F9D\u8D56\u5173\u7CFB\u6216\u5C06\u4EE5\u5176\u4ED6\u65B9\u5F0F\u5305\u542B\u5B83\u4EEC\uFF0C\u5219\u53EF\u4EE5\u5728 paths \u914D\u7F6E\u4E2D\u4F7F\u7528\u7279\u6B8A\u7684&quot;empty\uFF1A&quot;\u65B9\u6848\u5728\u6267\u884C\u64CD\u4F5C\u65F6\u8DF3\u8FC7\u8BE5\u6587\u4EF6\u3002\u4F18\u5316\u3002</p><p>In your main.js file, create a paths config that gives the script a module name. This can be done even if the script does not define a module via a call to define(). paths config are just used to map short module/script IDs to an URL. This allows you to use a different paths config for the optimization. In main.js:</p><p>\u5728 main.js \u6587\u4EF6\u4E2D\uFF0C\u521B\u5EFA\u4E00\u4E2A\u8DEF\u5F84\u914D\u7F6E\uFF0C\u4E3A\u811A\u672C\u63D0\u4F9B\u6A21\u5757\u540D\u79F0\u3002\u5373\u4F7F\u811A\u672C\u6CA1\u6709\u901A\u8FC7\u8C03\u7528 define()\u6765\u5B9A\u4E49\u6A21\u5757\uFF0C\u4E5F\u53EF\u4EE5\u8FD9\u6837\u505A\u3002\u8DEF\u5F84\u914D\u7F6E\u4EC5\u7528\u4E8E\u5C06\u7B80\u77ED\u7684\u6A21\u5757/\u811A\u672C ID \u6620\u5C04\u5230 URL\u3002\u8FD9\u4F7F\u60A8\u53EF\u4EE5\u4F7F\u7528\u5176\u4ED6\u8DEF\u5F84\u914D\u7F6E\u8FDB\u884C\u4F18\u5316\u3002\u5728 main.js \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Then, when running the optimizer, use &#39;empty:&#39; for the paths config:</p><p>\u7136\u540E\uFF0C\u5728\u8FD0\u884C\u4F18\u5316\u7A0B\u5E8F\u65F6\uFF0C\u5C06&quot;empty\uFF1A&quot;\u7528\u4E8E\u8DEF\u5F84\u914D\u7F6E\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o name=main out=main-built.js baseUrl=. paths.jquery=empty:
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Or, in a build profile:</p><p>\u6216\u8005\uFF0C\u5728\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u4E2D\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>({
    baseUrl: &quot;.&quot;,
    name: &quot;main&quot;,
    out: &quot;main-built.js&quot;,
    paths: {
        jquery: &quot;empty:&quot;
    }
})
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="optimizing-one-css-file" tabindex="-1"><a class="header-anchor" href="#optimizing-one-css-file" aria-hidden="true">#</a> Optimizing one CSS file</h3><p>Use the above example setup, if you just wanted to optimize main.css, you could use this command, from inside the appdirectory/css directory:</p><p>\u4F7F\u7528\u4E0A\u9762\u7684\u793A\u4F8B\u8BBE\u7F6E\uFF0C\u5982\u679C\u60A8\u53EA\u60F3\u4F18\u5316 main.css\uFF0C\u5219\u53EF\u4EE5\u5728 appdirectory/css \u76EE\u5F55\u4E2D\u4F7F\u7528\u4EE5\u4E0B\u547D\u4EE4\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o cssIn=main.css out=main-built.css
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will create a file called appdirectory/css/main-build.css that will include the contents of main.css, have the url() paths properly adjusted, and have comments removed.</p><p>\u8FD9\u5C06\u521B\u5EFA\u4E00\u4E2A\u540D\u4E3A appdirectory/css/main-build.css \u7684\u6587\u4EF6\uFF0C\u8BE5\u6587\u4EF6\u5C06\u5305\u542B main.css \u7684\u5185\u5BB9\uFF0C\u5DF2\u6B63\u786E\u8C03\u6574 url()\u8DEF\u5F84\uFF0C\u5E76\u5220\u9664\u4E86\u6CE8\u91CA\u3002</p><p>See the notes for the Optimizing one JavaScript file about avoiding saving optimized files in your pristine source tree. It is only done here to make the example simpler.</p><p>Note: The url() path fixing will always fix the paths relative to the cssIn build option path, not the out build option.</p><p>\u8BF7\u53C2\u9605&quot;\u4F18\u5316\u4E00\u4E2A JavaScript \u6587\u4EF6&quot;\u7684\u6CE8\u91CA\uFF0C\u6709\u5173\u907F\u514D\u5728\u539F\u59CB\u6E90\u4EE3\u7801\u6811\u4E2D\u4FDD\u5B58\u4F18\u5316\u7684\u6587\u4EF6\u3002\u4EC5\u5728\u6B64\u5904\u8FDB\u884C\u64CD\u4F5C\u4EE5\u7B80\u5316\u793A\u4F8B\u3002</p><p>\u6CE8\u610F\uFF1Aurl()\u8DEF\u5F84\u56FA\u5B9A\u5C06\u59CB\u7EC8\u56FA\u5B9A\u76F8\u5BF9\u4E8E cssIn \u6784\u5EFA\u9009\u9879\u8DEF\u5F84\u7684\u8DEF\u5F84\uFF0C\u800C\u4E0D\u662F out \u6784\u5EFA\u9009\u9879\u7684\u8DEF\u5F84\u3002</p><h3 id="optimizing-a-whole-project" tabindex="-1"><a class="header-anchor" href="#optimizing-a-whole-project" aria-hidden="true">#</a> Optimizing a whole project</h3><p>The optimizer can take care of optimizing all the CSS and JS files in your project by using a build profile.</p><p>\u4F18\u5316\u5668\u53EF\u4EE5\u4F7F\u7528\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u6765\u4F18\u5316\u9879\u76EE\u4E2D\u7684\u6240\u6709 CSS \u548C JS \u6587\u4EF6\u3002</p><p>Create a build profile, call it app.build.js, and put it in the scripts directory. The app.build.js file can live anywhere, but just be sure to adjust the paths accordingly in the example below -- all paths will be relative to where the app.build.js is located. Example app.build.js:</p><p>\u521B\u5EFA\u4E00\u4E2A\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\uFF0C\u5C06\u5176\u79F0\u4E3A app.build.js\uFF0C\u5E76\u5C06\u5176\u653E\u5728\u811A\u672C\u76EE\u5F55\u4E2D\u3002app.build.js \u6587\u4EF6\u53EF\u4EE5\u5B58\u5728\u4E8E\u4EFB\u4F55\u5730\u65B9\uFF0C\u4F46\u662F\u8BF7\u786E\u4FDD\u5728\u4E0B\u9762\u7684\u793A\u4F8B\u4E2D\u76F8\u5E94\u5730\u8C03\u6574\u8DEF\u5F84-\u6240\u6709\u8DEF\u5F84\u90FD\u5C06\u76F8\u5BF9\u4E8E app.build.js \u6240\u5728\u7684\u4F4D\u7F6E\u3002\u793A\u4F8B app.build.js\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>({
    appDir: &quot;../&quot;,
    baseUrl: &quot;scripts&quot;,
    dir: &quot;../../appdirectory-build&quot;,
    modules: [
        {
            name: &quot;main&quot;
        }
    ]
})
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>This build profile tells RequireJS to copy all of appdirectory to a sibling directory called appdirectory-build and apply all the optimizations in the appdirectory-build directory. It is strongly suggested you use a different output directory than the source directory -- otherwise bad things will likely happen as the optimizer overwrites your source.</p><p>\u8BE5\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u544A\u8BC9 RequireJS \u5C06\u6240\u6709 appdirectory \u590D\u5236\u5230\u4E00\u4E2A\u540D\u4E3A appdirectory-build \u7684\u5144\u5F1F\u76EE\u5F55\u4E2D\uFF0C\u5E76\u5728 appdirectory-build \u76EE\u5F55\u4E2D\u5E94\u7528\u6240\u6709\u4F18\u5316\u3002\u5F3A\u70C8\u5EFA\u8BAE\u60A8\u4F7F\u7528\u4E0E\u6E90\u76EE\u5F55\u4E0D\u540C\u7684\u8F93\u51FA\u76EE\u5F55-\u5426\u5219\uFF0C\u5F53\u4F18\u5316\u7A0B\u5E8F\u8986\u76D6\u6E90\u65F6\uFF0C\u53EF\u80FD\u4F1A\u53D1\u751F\u4E0D\u826F\u60C5\u51B5\u3002</p><p>RequireJS will use baseUrl to resolve the paths for any module names. The baseUrl should be relative to appDir.</p><p>RequireJS \u5C06\u4F7F\u7528 baseUrl \u89E3\u6790\u4EFB\u4F55\u6A21\u5757\u540D\u79F0\u7684\u8DEF\u5F84\u3002\u8BE5\u7684 baseUrl \u5E94\u8BE5\u662F\u76F8\u5BF9\u4E8E APPDIR\u3002</p><p>In the modules array, specify the module names that you want to optimize, in the example, &quot;main&quot;. &quot;main&quot; will be mapped to appdirectory/scripts/main.js in your project. The build system will then trace the dependencies for main.js and inject them into the appdirectory-build/scripts/main.js file.</p><p>\u5728\u6A21\u5757\u6570\u7EC4\u4E2D\uFF0C\u6307\u5B9A\u8981\u4F18\u5316\u7684\u6A21\u5757\u540D\u79F0\uFF0C\u4F8B\u5982&quot;main&quot;\u3002&quot;main&quot;\u5C06\u6620\u5C04\u5230\u60A8\u9879\u76EE\u4E2D\u7684 appdirectory/scripts/main.js\u3002\u7136\u540E\uFF0C\u6784\u5EFA\u7CFB\u7EDF\u5C06\u8DDF\u8E2A main.js \u7684\u4F9D\u8D56\u9879\uFF0C\u5E76\u5C06\u5176\u6CE8\u5165\u5230 appdirectory-build/scripts/main.js \u6587\u4EF6\u4E2D\u3002</p><p>It will also optimize any CSS files it finds inside appdirectory-build.</p><p>\u5B83\u8FD8\u4F1A\u4F18\u5316\u5728 appdirectory-build \u4E2D\u627E\u5230\u7684\u6240\u6709 CSS \u6587\u4EF6\u3002</p><p>To run the build, run this command from inside the appdirectory/scripts directory:</p><p>\u8981\u8FD0\u884C\u6784\u5EFA\uFF0C\u8BF7\u4ECE appdirectory/scripts \u76EE\u5F55\u5185\u90E8\u8FD0\u884C\u4EE5\u4E0B\u547D\u4EE4\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>node ../../r.js -o app.build.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Once the build is done, you can use appdirectory-build as your optimized project, ready for deployment.</p><p>\u6784\u5EFA\u5B8C\u6210\u540E\uFF0C\u60A8\u53EF\u4EE5\u5C06 appdirectory-build \u7528\u4F5C\u4F18\u5316\u7684\u9879\u76EE\uFF0C\u51C6\u5907\u8FDB\u884C\u90E8\u7F72\u3002</p><h3 id="optimizing-a-multi-page-project" tabindex="-1"><a class="header-anchor" href="#optimizing-a-multi-page-project" aria-hidden="true">#</a> Optimizing a multi-page project</h3><p>requirejs/example-multipage is an example of a project that has multiple pages, but shares a common configuration and a common optimized build layer.</p><p>requirejs/example-multipage \u662F\u4E00\u4E2A\u9879\u76EE\u7684\u793A\u4F8B\uFF0C\u8BE5\u9879\u76EE\u5177\u6709\u591A\u4E2A\u9875\u9762\uFF0C\u4F46\u662F\u5171\u4EAB\u4E00\u4E2A\u516C\u5171\u914D\u7F6E\u548C\u4E00\u4E2A\u516C\u5171\u7684\u4F18\u5316\u6784\u5EFA\u5C42\u3002</p><h3 id="turbo-options" tabindex="-1"><a class="header-anchor" href="#turbo-options" aria-hidden="true">#</a> Turbo options</h3><p>The default for the optimizer is to do the safest, most robust set of actions that avoid surprises after a build. However, depending on your project setup, you may want to turn off some of these features to get faster builds:</p><p>\u4F18\u5316\u5668\u7684\u9ED8\u8BA4\u8BBE\u7F6E\u662F\u6267\u884C\u6700\u5B89\u5168\uFF0C\u6700\u53EF\u9760\u7684\u4E00\u7EC4\u64CD\u4F5C\uFF0C\u4EE5\u907F\u514D\u5728\u6784\u5EFA\u540E\u51FA\u73B0\u610F\u5916\u60C5\u51B5\u3002\u4F46\u662F\uFF0C\u6839\u636E\u60A8\u7684\u9879\u76EE\u8BBE\u7F6E\uFF0C\u60A8\u53EF\u80FD\u9700\u8981\u5173\u95ED\u5176\u4E2D\u4E00\u4E9B\u51FD\u6570\u4EE5\u83B7\u5F97\u66F4\u5FEB\u7684\u6784\u5EFA\uFF1A</p><ul><li>The biggest time drain is minification. If you are just doing builds as part of a dev workflow, then set optimize to &quot;none&quot;.</li><li>If doing a whole project optimization, but only want to minify the build layers specified in modules options and not the rest of the JS files in the build output directory, you can set skipDirOptimize to true.</li><li>Normally each run of a whole project optimization will delete the output build directory specified by dir for cleanliness. Some build options, like onBuildWrite, will modify the output directory in a way that is hazardous to do twice over the same files. However, if you are doing simple builds with no extra file transforms besides build layer minification, then you can set keepBuildDir to true to keep the build directory between runs. Then, only files that have changed between build runs will be copied.</li></ul><ul><li>\u6700\u5927\u7684\u65F6\u95F4\u6D41\u5931\u662F\u7F29\u5C0F\u3002\u5982\u679C\u60A8\u53EA\u662F\u5C06\u6784\u5EFA\u4F5C\u4E3A\u5F00\u53D1\u5DE5\u4F5C\u6D41\u7A0B\u7684\u4E00\u90E8\u5206\uFF0C\u5219\u5C06 optimize \u8BBE\u7F6E\u4E3A&quot;none&quot;\u3002</li><li>\u5982\u679C\u8981\u8FDB\u884C\u6574\u4E2A\u9879\u76EE\u7684\u4F18\u5316\uFF0C\u800C\u53EA\u5E0C\u671B\u6700\u5C0F\u5316\u6A21\u5757\u9009\u9879\u4E2D\u6307\u5B9A\u7684\u6784\u5EFA\u5C42\uFF0C\u800C\u4E0D\u662F\u6700\u5C0F\u5316\u6784\u5EFA\u8F93\u51FA\u76EE\u5F55\u4E2D\u7684\u5176\u4F59 JS \u6587\u4EF6\uFF0C\u5219\u53EF\u4EE5\u5C06 skipDirOptimize \u8BBE\u7F6E\u4E3A true\u3002</li><li>\u901A\u5E38\uFF0C\u6574\u4E2A\u9879\u76EE\u4F18\u5316\u7684\u6BCF\u6B21\u8FD0\u884C\u90FD\u4F1A\u5220\u9664 dir \u6307\u5B9A\u7684\u8F93\u51FA\u6784\u5EFA\u76EE\u5F55\uFF0C\u4EE5\u4FDD\u6301\u6574\u6D01\u3002\u67D0\u4E9B\u6784\u5EFA\u9009\u9879(\u5982 onBuildWrite)\u5C06\u4EE5\u5371\u9669\u7684\u65B9\u5F0F\u4FEE\u6539\u8F93\u51FA\u76EE\u5F55\uFF0C\u4ECE\u800C\u5BF9\u540C\u4E00\u6587\u4EF6\u6267\u884C\u4E24\u6B21\u3002\u4F46\u662F\uFF0C\u5982\u679C\u60A8\u6267\u884C\u7684\u662F\u7B80\u5355\u6784\u5EFA\uFF0C\u5E76\u4E14\u9664\u4E86\u6700\u5C0F\u5316\u6784\u5EFA\u5C42\u4E4B\u5916\uFF0C\u6CA1\u6709\u5176\u4ED6\u6587\u4EF6\u8F6C\u6362\uFF0C\u5219\u53EF\u4EE5\u5C06 keepBuildDir \u8BBE\u7F6E\u4E3A true \u5728\u4E24\u6B21\u8FD0\u884C\u4E4B\u95F4\u4FDD\u7559\u6784\u5EFA\u76EE\u5F55\u3002\u7136\u540E\uFF0C\u5C06\u4EC5\u590D\u5236\u5728\u4E24\u6B21\u6784\u5EFA\u8FD0\u884C\u4E4B\u95F4\u5DF2\u66F4\u6539\u7684\u6587\u4EF6\u3002</li></ul><p>As of version 2.1.2, there are some speed shortcuts the optimizer will take by default if optimize is set to &quot;none&quot;. However, if you are using &quot;none&quot; for optimize and you are planning to minify the built files after the optimizer runs, then you should turn set normalizeDirDefines to &quot;all&quot; so that define() calls are normalized correctly to withstand minification. If you are doing minification via the optimize option, then you do not need to worry about setting this option.</p><p>\u4ECE 2.1.2 \u7248\u5F00\u59CB\uFF0C\u5982\u679C\u5C06 optimize \u8BBE\u7F6E\u4E3A\uFF0C\u5219\u4F18\u5316\u5668\u9ED8\u8BA4\u4F1A\u91C7\u7528\u4E00\u4E9B\u901F\u5EA6\u5FEB\u6377\u65B9\u5F0F&quot;none&quot;\u3002\u4F46\u662F\uFF0C\u5982\u679C\u4F60\u6B63\u5728\u4F7F\u7528&quot;none&quot;\u7684\u4F18\u5316\u548C\u60A8\u6240\u89C4\u5212\u7684\u4F18\u5316\u8FD0\u884C\u540E\uFF0C\u6765\u7F29\u5C0F\u5185\u7F6E\u6587\u4EF6\uFF0C\u90A3\u4E48\u4F60\u5E94\u8BE5\u628A\u4E00\u5957 normalizeDirDefines \u4EE5&quot;all&quot;\u4F7F\u5B9A\u4E49()\u8C03\u7528\u6B63\u786E\u5F52\u627F\u53D7\u5FAE\u5C0F\u3002\u5982\u679C\u8981\u901A\u8FC7\u4F18\u5316\u9009\u9879\u8FDB\u884C\u7F29\u5C0F\uFF0C\u5219\u65E0\u9700\u62C5\u5FC3\u8BBE\u7F6E\u6B64\u9009\u9879\u3002</p><h3 id="integration-with-has-js" tabindex="-1"><a class="header-anchor" href="#integration-with-has-js" aria-hidden="true">#</a> Integration with has.js</h3><p>has.js is a great tool to that adds easy feature detection for your project. There is some optimizer support for optimizing code paths for has.js tests.</p><p>has.js \u662F\u4E00\u4E2A\u5F88\u68D2\u7684\u5DE5\u5177\uFF0C\u53EF\u4EE5\u4E3A\u60A8\u7684\u9879\u76EE\u6DFB\u52A0\u7B80\u5355\u7684\u51FD\u6570\u68C0\u6D4B\u3002\u6709\u4E00\u4E9B\u4F18\u5316\u5668\u652F\u6301\u53EF\u4F18\u5316 has.js \u6D4B\u8BD5\u7684\u4EE3\u7801\u8DEF\u5F84\u3002</p><p>If your code uses tests like the following:</p><p>\u5982\u679C\u60A8\u7684\u4EE3\u7801\u4F7F\u7528\u5982\u4E0B\u6D4B\u8BD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;someThing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//use native someThing</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">//do some workaround</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You can define a has object in the build config with true or false values for some has() tests, and the optimizer will replace the has() test with the true or false value.</p><p>\u60A8\u53EF\u4EE5\u5728\u6784\u5EFA\u914D\u7F6E\u4E2D\u4E3A\u67D0\u4E9B has()\u6D4B\u8BD5\u4F7F\u7528 true \u6216 false \u503C\u5B9A\u4E49 has \u5BF9\u8C61\uFF0C\u5E76\u4E14\u4F18\u5316\u7A0B\u5E8F\u5C06\u7528 true \u6216 false \u503C\u66FF\u6362 has()\u6D4B\u8BD5\u3002</p><p>If your build profile looked like so:</p><p>\u5982\u679C\u60A8\u7684\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>({
    baseUrl: &quot;.&quot;,
    name: &quot;hasTestModule&quot;,
    out: &quot;builds/hasTestModule.js&quot;,
    has: {
        someThing: true
    }
})
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Then the optimizer will transform the above code sample to:</p><p>\u7136\u540E\uFF0C\u4F18\u5316\u5668\u4F1A\u5C06\u4E0A\u9762\u7684\u4EE3\u7801\u793A\u4F8B\u8F6C\u6362\u4E3A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//use native someThing</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">//do some workaround</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Then, if you use the default optimize setting of &quot;uglify&quot; in r.js 0.26.0 or later, or if the optimize setting is set to &quot;closure&quot; (when run under Java), the minifier will optimize out the dead code branch! So you can do custom builds of your code that are optimized for a set of has() tests.</p><p>\u7136\u540E\uFF0C\u5982\u679C\u60A8\u5728 r.js 0.26.0 \u6216\u66F4\u9AD8\u7248\u672C\u4E2D\u4F7F\u7528\u9ED8\u8BA4\u7684\u4F18\u5316\u8BBE\u7F6E&quot;uglify&quot;\uFF0C\u6216\u8005\u5982\u679C\u5C06\u4F18\u5316\u8BBE\u7F6E\u8BBE\u7F6E\u4E3A&quot;closure&quot;(\u5728 Java \u4E0B\u8FD0\u884C)\uFF0C\u5219\u538B\u7F29\u7A0B\u5E8F\u5C06\u4F18\u5316\u65E0\u6548\u4EE3\u7801\u5206\u652F\uFF01\u56E0\u6B64\uFF0C\u60A8\u53EF\u4EE5\u5BF9\u4EE3\u7801\u8FDB\u884C\u81EA\u5B9A\u4E49\u6784\u5EFA\uFF0C\u8FD9\u4E9B\u6784\u5EFA\u9488\u5BF9\u4E00\u7EC4 has()\u6D4B\u8BD5\u8FDB\u884C\u4E86\u4F18\u5316\u3002</p><h3 id="source-maps" tabindex="-1"><a class="header-anchor" href="#source-maps" aria-hidden="true">#</a> Source maps</h3><p>Version 2.1.6 and higher have experimental support for source maps. It works for mapping minified, bundled code to unminified, separate modules and only when optimize is set to &quot;uglify2&quot;. optimize set to &quot;closure&quot; allows only mapping minified, bundled code to unminified bundled code (closure only available when running under Java with Rhino). The unminified files will show up in the developer tools with a &quot;.src.js&quot; file extension.</p><p>2.1.6 \u7248\u6216\u66F4\u9AD8\u7248\u672C\u5177\u6709\u5BF9\u6E90\u6620\u5C04\u7684\u5B9E\u9A8C\u6027\u652F\u6301\u3002\u4EC5\u5728\u5C06 optimize \u8BBE\u7F6E\u4E3A\u65F6\uFF0C\u5B83\u624D\u80FD\u5C06\u7F29\u5C0F\u7684\u6346\u7ED1\u4EE3\u7801\u6620\u5C04\u5230\u672A\u7F29\u5C0F\u7684\u5355\u72EC\u6A21\u5757&quot;uglify2&quot;\u3002\u6700\u4F18\u5316\u8BBE\u7F6E\u4E3A&quot;closure&quot;\u53EA\u5141\u8BB8\u5C06\u7F29\u5C0F\u7684\u6346\u7ED1\u4EE3\u7801\u6620\u5C04\u5230\u6700\u5C0F\u7684\u6346\u7ED1\u4EE3\u7801(\u4EC5\u5F53\u5728\u5177\u6709 Rhino \u7684 Java \u4E0B\u8FD0\u884C\u65F6\uFF0C\u95ED\u5305\u624D\u53EF\u7528)\u3002\u672A\u7F29\u5C0F\u7684\u6587\u4EF6\u5C06\u4EE5&quot;.src.js&quot;\u6587\u4EF6\u6269\u5C55\u540D\u663E\u793A\u5728\u5F00\u53D1\u4EBA\u5458\u5DE5\u5177\u4E2D\u3002</p><p>To enable the source map generation, set generateSourceMaps to true. Since the minifier needs to have full control over the minified file to generate the source map, the preserveLicenseComments should be explicitly set to false. There is is a way to get some license comments in the minified source though.</p><p>\u8981\u542F\u7528\u6E90\u5730\u56FE\u751F\u6210\uFF0C\u8BF7\u5C06 generateSourceMaps \u8BBE\u7F6E\u4E3A true\u3002\u7531\u4E8E minifier \u9700\u8981\u6709\u5B8C\u5168\u63A7\u5236\u6743\u7F29\u5C0F\u7684\u6587\u4EF6\u751F\u6210\u6E90\u56FE\uFF0CpreserveLicenseComments \u5E94\u660E\u786E\u8BBE\u5B9A false\u3002\u4E0D\u8FC7\uFF0C\u6709\u4E00\u79CD\u65B9\u6CD5\u53EF\u4EE5\u5728\u7F29\u5C0F\u7684\u6E90\u4EE3\u7801\u4E2D\u83B7\u5F97\u4E00 \u4E9B\u8BB8\u53EF\u8BC1\u6CE8\u91CA\u3002</p><p>The optimizer has supported sourceURL (by setting useSourceUrl to true), for debugging combined modules as individual files. However, that only works with non-minified code. Source maps translate a minified file to a non-minified version. It does not make sense to use useSourceUrl with generateSourceMaps since useSourceUrl needs the source values as strings, which prohibits the useful minification done in combination with generateSourceMaps.</p><p>\u4F18\u5316\u5668\u652F\u6301 sourceURL(\u901A\u8FC7\u5C06 useSourceUrl \u8BBE\u7F6E\u4E3A true)\uFF0C\u7528\u4E8E\u5C06\u7EC4\u5408\u7684\u6A21\u5757\u4F5C\u4E3A\u5355\u4E2A\u6587\u4EF6\u8FDB\u884C\u8C03\u8BD5\u3002\u4F46\u662F\uFF0C\u8FD9\u4EC5\u9002\u7528\u4E8E\u672A\u7F29\u5C0F\u7684\u4EE3\u7801\u3002\u6E90\u6620\u5C04\u5C06\u7F29\u5C0F\u7684\u6587\u4EF6\u8F6C\u6362\u4E3A\u975E\u7F29\u5C0F\u7684\u7248\u672C\u3002\u5C06 useSourceUrl \u4E0E generateSourceMaps \u4E00\u8D77\u4F7F\u7528\u662F\u6CA1\u6709\u610F\u4E49\u7684\uFF0C\u56E0\u4E3A useSourceUrl \u9700\u8981\u5C06\u6E90\u503C\u4F5C\u4E3A\u5B57\u7B26\u4E32\u4F7F\u7528\uFF0C\u8FD9\u7981\u6B62\u4E86\u4E0E generateSourceMaps \u4E00\u8D77\u8FDB\u884C\u7684\u6709\u7528\u7F29\u5C0F\u3002</p><h3 id="all-configuration-options" tabindex="-1"><a class="header-anchor" href="#all-configuration-options" aria-hidden="true">#</a> All configuration options</h3><p>There is an example.build.js file in the requirejs/build directory that details all of the allowed optimizer configuration options.</p><p>requirejs/build \u76EE\u5F55\u4E2D\u6709\u4E00\u4E2A example.build.js \u6587\u4EF6\uFF0C\u5176\u4E2D\u8BE6\u8FF0\u4E86\u6240\u6709\u5141\u8BB8\u7684\u4F18\u5316\u5668\u914D\u7F6E\u9009\u9879\u3002</p><h3 id="deployment-techniques" tabindex="-1"><a class="header-anchor" href="#deployment-techniques" aria-hidden="true">#</a> Deployment techniques</h3><p>The r.js optimizer is designed to offer some primitives that can be used for different deployment scenarios by adding other code on top of it. See the deployment techniques wiki page for ideas on how to use the optimizer in that fashion.</p><p>r.js \u4F18\u5316\u5668\u65E8\u5728\u901A\u8FC7\u5728\u5176\u4E4B\u4E0A\u6DFB\u52A0\u5176\u4ED6\u4EE3\u7801\u6765\u63D0\u4F9B\u4E00\u4E9B\u53EF\u7528\u4E8E\u4E0D\u540C\u90E8\u7F72\u65B9\u6848\u7684\u539F\u8BED\u3002\u6709\u5173\u5982\u4F55\u4EE5\u8FD9\u79CD\u65B9\u5F0F\u4F7F\u7528\u4F18\u5316\u5668\u7684\u60F3\u6CD5\uFF0C\u8BF7\u53C2\u9605\u90E8\u7F72\u6280\u672F Wiki \u9875\u9762\u3002</p><h3 id="common-pitfalls" tabindex="-1"><a class="header-anchor" href="#common-pitfalls" aria-hidden="true">#</a> Common pitfalls</h3><p>If you are having trouble with the examples below, here are some common pitfalls that might be the source of the problem:</p><p>\u5982\u679C\u60A8\u5728\u4F7F\u7528\u4EE5\u4E0B\u793A\u4F8B\u65F6\u9047\u5230\u95EE\u9898\uFF0C\u8BF7\u6CE8\u610F\u4EE5\u4E0B\u5E38\u89C1\u95EE\u9898\uFF0C\u8FD9\u53EF\u80FD\u662F\u95EE\u9898\u7684\u6839\u6E90\uFF1A</p><p>Do not specify the output directory to within the source area for your JavaScript</p><p>\u4E0D\u8981\u5C06\u8F93\u51FA\u76EE\u5F55\u6307\u5B9A\u4E3A JavaScript \u7684\u6E90\u533A\u57DF\u5185</p><p>For instance, if your baseUrl is &#39;js&#39; and your build output goes into &#39;js/build&#39;, there will likely be problems with extra, nested files generated on each optimization run. This guidance is only for optimizations that are not single file optimizations.</p><p>\u4F8B\u5982\uFF0C\u5982\u679C\u60A8\u7684 baseUrl \u662F&#39;js&#39;\uFF0C\u800C\u60A8\u7684\u6784\u5EFA\u8F93\u51FA\u8FDB\u5165\u4E86&#39;js/build&#39;\uFF0C\u5219\u6BCF\u6B21\u4F18\u5316\u8FD0\u884C\u65F6\u751F\u6210\u7684\u989D\u5916\u7684\u5D4C\u5957\u6587\u4EF6\u53EF\u80FD\u4F1A\u51FA\u73B0\u95EE\u9898\u3002\u672C\u6307\u5357\u4EC5\u9002\u7528\u4E8E\u4E0D\u662F\u5355\u6587\u4EF6\u4F18\u5316\u7684\u4F18\u5316\u3002</p><p>Avoid optimization names that are outside the baseUrl</p><p>\u907F\u514D\u4F7F\u7528 baseUrl \u4E4B\u5916\u7684\u4F18\u5316\u540D\u79F0</p><p>For instance, if your baseUrl is &#39;js&#39;, and your optimization targets:</p><p>\u4F8B\u5982\uFF0C\u5982\u679C\u60A8\u7684 baseUrl \u662F&#39;js&#39;\uFF0C\u5E76\u4E14\u60A8\u7684\u4F18\u5316\u76EE\u6807\u662F\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name: &#39;../main&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>the optimization could overwrite or place files outside the output directory. For those cases, create a paths config to map that file to a local name, like:</p><p>\u4F18\u5316\u53EF\u80FD\u4F1A\u8986\u76D6\u6587\u4EF6\u6216\u5C06\u6587\u4EF6\u653E\u7F6E\u5728\u8F93\u51FA\u76EE\u5F55\u4E4B\u5916\u3002\u5BF9\u4E8E\u8FD9\u4E9B\u60C5\u51B5\uFF0C\u8BF7\u521B\u5EFA\u8DEF\u5F84\u914D\u7F6E\u4EE5\u5C06\u8BE5\u6587\u4EF6\u6620\u5C04\u5230\u672C\u5730\u540D\u79F0\uFF0C\u4F8B\u5982\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>paths: {
    main: &#39;../main&#39;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>then use name:</p><p>\u7136\u540E\u4F7F\u7528\u540D\u79F0\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name: &#39;main&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>for the optimization target.</p><p>\u7528\u4E8E\u4F18\u5316\u76EE\u6807\u3002</p><p>Note the build limitations of shim config. In particular, you cannot load dependencies for shimmed libraries from a CDN. See the shim config section for more information.</p><p>\u8BF7\u6CE8\u610F\u57AB\u7247\u914D\u7F6E\u7684\u6784\u5EFA\u9650\u5236\u3002\u7279\u522B\u662F\uFF0C\u60A8\u4E0D\u80FD\u4ECE CDN \u52A0\u8F7D\u586B\u5145\u7A0B\u5E8F\u5E93\u7684\u4F9D\u8D56\u9879\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1\u57AB\u7247\u914D\u7F6E\u90E8\u5206\u3002</p><h2 id="how-to-use-requirejs-with-jquery" tabindex="-1"><a class="header-anchor" href="#how-to-use-requirejs-with-jquery" aria-hidden="true">#</a> How to use RequireJS with jQuery</h2><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h3><p>While RequireJS loads jQuery just like any other dependency, jQuery&#39;s wide use and extensive plugin ecosystem mean you&#39;ll likely have other scripts in your project that also depend on jQuery. You might approach your jQuery RequireJS configuration differently depending on whether you are starting a new project or whether you are adapting existing code.</p><p>\u5C3D\u7BA1 RequireJS \u50CF\u5176\u4ED6\u4F9D\u8D56\u9879\u4E00\u6837\u52A0\u8F7D jQuery\uFF0C\u4F46 jQuery \u7684\u5E7F\u6CDB\u4F7F\u7528\u548C\u5E7F\u6CDB\u7684\u63D2\u4EF6\u751F\u6001\u7CFB\u7EDF\u610F\u5473\u7740\u60A8\u53EF\u80FD\u5728\u9879\u76EE\u4E2D\u62E5\u6709\u4E5F\u4F9D\u8D56 jQuery \u7684\u5176\u4ED6\u811A\u672C\u3002\u60A8\u53EF\u80FD\u4F1A\u4EE5\u4E0D\u540C\u7684\u65B9\u5F0F\u6765\u5904\u7406 jQuery RequireJS \u914D\u7F6E\uFF0C\u5177\u4F53\u53D6\u51B3\u4E8E\u60A8\u662F\u5F00\u59CB\u4E00\u4E2A\u65B0\u9879\u76EE\u8FD8\u662F\u6B63\u5728\u6539\u7F16\u73B0\u6709\u7684</p><h3 id="global-functions" tabindex="-1"><a class="header-anchor" href="#global-functions" aria-hidden="true">#</a> Global Functions</h3><p>jQuery registers itself as the global variables &quot;$&quot; and &quot;jQuery&quot;, even when it detects AMD/RequireJS. The AMD approach advises against the use of global functions, but the decision to turn off these jQuery globals hinges on whether you have non-AMD code that depends on them. jQuery has a noConflict function that supports releasing control of the global variables and this can be automated in your requirejs.config, as we will see later.</p><p>jQuery \u5C06\u81EA\u5DF1\u6CE8\u518C\u4E3A\u5168\u5C40\u53D8\u91CF&quot;$&quot;\u548C&quot;jQuery&quot;\uFF0C\u5373\u4F7F\u5B83\u68C0\u6D4B\u5230 AMD/RequireJS\u3002AMD \u65B9\u6CD5\u5EFA\u8BAE\u4E0D\u8981\u4F7F\u7528\u5168\u5C40\u51FD\u6570\uFF0C\u4F46\u662F\u5173\u95ED\u8FD9\u4E9B jQuery \u5168\u5C40\u53D8\u91CF\u7684\u51B3\u5B9A\u53D6\u51B3\u4E8E\u60A8\u662F\u5426\u62E5\u6709\u4F9D\u8D56\u4E8E\u5B83\u4EEC\u7684\u975E AMD \u4EE3\u7801\u3002jQuery \u5177\u6709\u4E00\u4E2A noConflict \u51FD\u6570\uFF0C\u8BE5\u51FD\u6570\u652F\u6301\u91CA\u653E\u5BF9\u5168\u5C40\u53D8\u91CF\u7684\u63A7\u5236\uFF0C\u5E76\u4E14\u53EF\u4EE5\u5728\u60A8\u7684 requirejs.config \u4E2D\u5C06\u5176\u81EA\u52A8\u5316\uFF0C\u8FD9\u5C06\u5728\u540E\u9762\u4ECB\u7ECD\u3002</p><h3 id="module-name" tabindex="-1"><a class="header-anchor" href="#module-name" aria-hidden="true">#</a> Module Name</h3><p>jQuery defines named AMD module &#39;jquery&#39; (all lower case) when it detects AMD/RequireJS. To reduce confusion, we recommend using &#39;jquery&#39; as the module name in your requirejs.config.</p><p>jQuery \u5728\u68C0\u6D4B\u5230 AMD/RequireJS \u65F6\u5B9A\u4E49\u4E86\u547D\u540D\u4E3A AMD \u7684\u6A21\u5757 &quot;jquery&quot;(\u5168\u90E8\u5C0F\u5199)\u3002\u4E3A\u4E86\u51CF\u5C11\u6DF7\u4E71\uFF0C\u6211\u4EEC\u5EFA\u8BAE\u5728\u60A8\u7684 requirejs.config \u4E2D\u4F7F\u7528&quot;jquery&quot;\u4F5C\u4E3A\u6A21\u5757\u540D\u79F0\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;js/lib&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// the left side is the module ID,</span>
		<span class="token comment">// the right side is the path to</span>
		<span class="token comment">// the jQuery file, relative to baseUrl.</span>
		<span class="token comment">// Also, the path should NOT include</span>
		<span class="token comment">// the &#39;.js&#39; file extension. This example</span>
		<span class="token comment">// is using jQuery 1.9.0 located at</span>
		<span class="token comment">// js/lib/jquery-1.9.0.js, relative to</span>
		<span class="token comment">// the HTML page.</span>
		<span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;jquery-1.9.0&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>The other (recommended) solution is to just name the file &#39;jquery.js&#39; and place it in the baseUrl directory. Then the above paths entry is not needed.</p><p>\u53E6\u4E00\u4E2A(\u63A8\u8350)\u89E3\u51B3\u65B9\u6848\u662F\u4EC5\u5C06\u6587\u4EF6\u547D\u540D\u4E3A&quot;jquery.js&quot;\u5E76\u5C06\u5176\u653E\u7F6E\u5728 baseUrl \u76EE\u5F55\u4E2D\u3002\u7136\u540E\uFF0C\u4E0D\u9700\u8981\u4E0A\u8FF0\u8DEF\u5F84\u6761\u76EE\u3002</p><p>You can avoid lots of configuration lines by placing the files according to the default ID-to-path convention of baseUrl + moduleID + &#39;.js&#39;. The examples below show how to set baseUrl to be the directory for third-party, library code, and use one extra paths config for your app code.</p><p>\u901A\u8FC7\u6839\u636E\u9ED8\u8BA4\u7684 ID \u5230\u8DEF\u5F84\u7EA6\u5B9A\u653E\u7F6E\u6587\u4EF6\uFF0C\u53EF\u4EE5\u907F\u514D\u5F88\u591A\u914D\u7F6E\u884C baseUrl + moduleID + &#39;.js&#39;\u3002\u4EE5\u4E0B\u793A\u4F8B\u663E\u793A\u4E86\u5982\u4F55\u5C06 baseUrl \u8BBE\u7F6E\u4E3A\u7B2C\u4E09\u65B9\u5E93\u4EE3\u7801\u7684\u76EE\u5F55\uFF0C\u4EE5\u53CA\u5982\u4F55\u4E3A\u60A8\u7684\u5E94\u7528\u7A0B\u5E8F\u4EE3\u7801\u4F7F\u7528\u4E00\u4E2A\u989D\u5916\u7684\u8DEF\u5F84\u914D\u7F6E\u3002</p><p>So to reiterate, you will likely get an error if you refer to jQuery with another module name, like &#39;lib/jquery&#39;. <strong>This example will not work</strong>:</p><p>\u56E0\u6B64\uFF0C\u91CD\u7533\u4E00\u4E0B\uFF0C\u5982\u679C\u4F7F\u7528\u5176\u4ED6\u6A21\u5757\u540D\u79F0(\u5982)\u5F15\u7528 jQuery\uFF0C\u5219\u53EF\u80FD\u4F1A\u51FA\u73B0\u9519\u8BEF&#39;lib/jquery&#39;\u3002\u8FD9\u4E2A\u4F8B\u5B50\u4E0D\u8D77\u4F5C\u7528\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token comment">// THIS WILL NOT WORK</span>
	<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;lib/jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>It will not work, since jQuery registers itself with the name of &#39;jquery&#39; and not &#39;lib/jquery&#39;. In general, explicitly naming modules in the define() call are discouraged, but jQuery has some special constraints.</p><p>\u7531\u4E8E jQuery \u4F7F\u7528&#39;jquery&#39;\u800C\u4E0D\u662F&#39;lib/jquery&#39;\u7684\u540D\u79F0\u8FDB\u884C\u6CE8\u518C\uFF0C\u56E0\u6B64\u65E0\u6CD5\u4F7F\u7528\u3002\u901A\u5E38\uFF0C\u4E0D\u5EFA\u8BAE\u5728 define()\u8C03\u7528\u4E2D\u663E\u5F0F\u547D\u540D\u6A21\u5757\uFF0C\u4F46\u662F jQuery \u6709\u4E00\u4E9B\u7279\u6B8A\u7684\u7EA6\u675F\u3002</p><h3 id="example-using-shim-config" tabindex="-1"><a class="header-anchor" href="#example-using-shim-config" aria-hidden="true">#</a> Example using shim config</h3><p>This example shows how to use the shim config to specify dependencies for jQuery plugins that do not call define(). This example is useful if you have an existing jQuery project you want to convert and do not want to modify the sources of the jQuery plugins to call define().</p><p>\u6B64\u793A\u4F8B\u663E\u793A\u5982\u4F55\u4F7F\u7528 shim config \u4E3A\u4E0D\u8C03\u7528 define()\u7684 jQuery \u63D2\u4EF6\u6307\u5B9A\u4F9D\u8D56\u9879\u3002\u5982\u679C\u60A8\u6709\u4E00\u4E2A\u73B0\u6709\u7684 jQuery \u9879\u76EE\u8981\u8F6C\u6362\u5E76\u4E14\u4E0D\u60F3\u4FEE\u6539 jQuery \u63D2\u4EF6\u7684\u6E90\u4EE5\u8C03\u7528 define()\uFF0C\u5219\u6B64\u793A\u4F8B\u5F88\u6709\u7528\u3002</p>`,750),f={href:"https://github.com/requirejs/example-jquery-shim",target:"_blank",rel:"noopener noreferrer"},g=s("Example using jQuery with shim config"),y=n("h3",{id:"example-loading-jquery-from-a-cdn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#example-loading-jquery-from-a-cdn","aria-hidden":"true"},"#"),s(" Example loading jquery from a CDN")],-1),q=n("p",null,"This example shows how to load and optimize your code while loading jQuery from a Content Delivery Network (CDN). This example requires all your jQuery plugins to call define() to properly express their dependencies. Shim config does not work after optimization builds with CDN resources.",-1),v=n("p",null,"\u672C\u793A\u4F8B\u8BF4\u660E\u4E86\u5982\u4F55\u4ECE Content Delivery Network(CDN)\u52A0\u8F7D jQuery \u65F6\u52A0\u8F7D\u548C\u4F18\u5316\u4EE3\u7801\u3002\u8FD9\u4E2A\u4F8B\u5B50\u8981\u6C42\u60A8\u6240\u6709\u7684 jQuery \u63D2\u4EF6\u90FD\u8C03\u7528 define()\u6765\u6B63\u786E\u8868\u8FBE\u5B83\u4EEC\u7684\u4F9D\u8D56\u5173\u7CFB\u3002\u4F7F\u7528 CDN \u8D44\u6E90\u8FDB\u884C\u4F18\u5316\u6784\u5EFA\u540E\uFF0Cshim config \u4E0D\u8D77\u4F5C\u7528\u3002",-1),j={href:"https://github.com/requirejs/example-jquery-cdn",target:"_blank",rel:"noopener noreferrer"},w=s("Example using jQuery from a CDN"),x=t(`<h3 id="mapping-modules-to-use-noconflict" tabindex="-1"><a class="header-anchor" href="#mapping-modules-to-use-noconflict" aria-hidden="true">#</a> Mapping Modules to use noConflict</h3><p>If all of your modules (including any third party jQuery plugins or library code that depend on jQuery) are AMD compatible and you want to avoid having $ or jQuery in the global namespace when they call requirejs([&#39;jquery&#39;]), you can use the map config to map the use of jQuery to a module that calls noConflict and returns that value of jQuery for the &#39;jquery&#39; module ID.</p><p>\u5982\u679C\u60A8\u6240\u6709\u6A21\u5757(\u5305\u62EC\u4F9D\u8D56 jQuery \u7684\u4EFB\u4F55\u7B2C\u4E09\u65B9 jQuery \u63D2\u4EF6\u6216\u5E93\u4EE3\u7801)\u90FD\u4E0E AMD \u517C\u5BB9\uFF0C\u5E76\u4E14\u60A8\u5E0C\u671B\u907F\u514D\u5728\u8C03\u7528\u5B83\u4EEC\u65F6\u5728\u5168\u5C40\u547D\u540D\u7A7A\u95F4\u4E2D\u4F7F\u7528$\u6216 jQuery\uFF0C\u5219 requirejs([&#39;jquery&#39;])\u53EF\u4EE5\u4F7F\u7528 map config \u6620\u5C04\u4F7F\u7528\u5C06 jQuery \u8F6C\u6362\u4E3A\u4E00\u4E2A\u8C03\u7528 noConflict \u7684\u6A21\u5757\uFF0C\u5E76\u8FD4\u56DE jQuery \u7684\u503C\u4F5C\u4E3A&#39;jquery&#39;\u6A21\u5757 ID\u3002</p><p>You can use this example with the CDN example above -- the shim example will not work since shimmed libraries need a global jQuery.</p><p>\u60A8\u53EF\u4EE5\u5C06\u6B64\u793A\u4F8B\u4E0E\u4E0A\u9762\u7684 CDN \u793A\u4F8B\u4E00\u8D77\u4F7F\u7528-shim \u793A\u4F8B\u5C06\u4E0D\u8D77\u4F5C\u7528\uFF0C\u56E0\u4E3A\u586B\u5145\u7684\u5E93\u9700\u8981\u5168\u5C40 jQuery\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// Add this map config in addition to any baseUrl or</span>
	<span class="token comment">// paths config you may already have in the project.</span>
	<span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// &#39;*&#39; means all modules will get &#39;jquery-private&#39;</span>
		<span class="token comment">// for their &#39;jquery&#39; dependency.</span>
		<span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;jquery-private&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

		<span class="token comment">// &#39;jquery-private&#39; wants the real jQuery module</span>
		<span class="token comment">// though. If this line was not here, there would</span>
		<span class="token comment">// be an unresolvable cyclic dependency.</span>
		<span class="token string-property property">&#39;jquery-private&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// and the &#39;jquery-private&#39; module, in the</span>
<span class="token comment">// jquery-private.js file:</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">jq</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> jq<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>This means that any module which uses jQuery will need to use the AMD return value rather than depending on the global $:</p><p>\u8FD9\u610F\u5473\u7740\u4EFB\u4F55\u4F7F\u7528 jQuery \u7684\u6A21\u5757\u90FD\u5C06\u9700\u8981\u4F7F\u7528 AMD \u8FD4\u56DE\u503C\uFF0C\u800C\u4E0D\u662F\u4F9D\u8D56\u4E8E\u5168\u5C40$\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token comment">// OK</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">jq</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jq<span class="token punctuation">)</span> <span class="token comment">// OK</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token comment">// UNDEFINED!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="the-previous-example-with-a-concatenated-require-jquery-file" tabindex="-1"><a class="header-anchor" href="#the-previous-example-with-a-concatenated-require-jquery-file" aria-hidden="true">#</a> The previous example with a concatenated require-jquery file</h3><p>Previously, we&#39;ve been pointing to an example using a special require-jquery file, which consisted of require.js and jQuery concatenated. This is no longer the recommended way to use jQuery with require.js, but if you&#39;re looking for the (no longer maintained) example, you can find require-jquery here.</p><p>\u4EE5\u524D\uFF0C\u6211\u4EEC\u4E00\u76F4\u5728\u4F7F\u7528\u4E00\u4E2A\u7279\u6B8A\u7684 require-jquery \u6587\u4EF6\u6307\u5411\u4E00\u4E2A\u793A\u4F8B\uFF0C\u8BE5\u6587\u4EF6\u7531 require.js \u548C jQuery \u4E32\u8054\u800C\u6210\u3002\u8FD9\u4E0D\u518D\u662F\u5C06 jQuery \u4E0E require.js \u4E00\u8D77\u4F7F\u7528\u7684\u63A8\u8350\u65B9\u6CD5\uFF0C\u4F46\u662F\u5982\u679C\u60A8\u6B63\u5728\u5BFB\u627E(\u4E0D\u518D\u7EF4\u62A4)\u793A\u4F8B\uFF0C\u5219\u53EF\u4EE5\u5728\u6B64\u5904\u627E\u5230 require-jquery\u3002</p><h2 id="requirejs-in-node" tabindex="-1"><a class="header-anchor" href="#requirejs-in-node" aria-hidden="true">#</a> RequireJS in Node</h2><h3 id="doesn-t-node-already-have-a-module-loader" tabindex="-1"><a class="header-anchor" href="#doesn-t-node-already-have-a-module-loader" aria-hidden="true">#</a> Doesn&#39;t Node already have a module loader?</h3><p>Yes Node does. That loader uses the CommonJS module format. The CommonJS module format is non-optimal for the browser, and I do not agree with some of the trade-offs made in the CommonJS module format. By using RequireJS on the server, you can use one format for all your modules, whether they are running server side or in the browser. That way you can preserve the speed benefits and easy debugging you get with RequireJS in the browser, and not have to worry about extra translation costs for moving between two formats.</p><p>If you want to use define() for your modules but still run them in Node without needing to run RequireJS on the server, see the section below about using amdefine.</p><p>\u662F\u7684\uFF0CNode \u53EF\u4EE5\u3002\u8BE5\u52A0\u8F7D\u5668\u4F7F\u7528 CommonJS \u6A21\u5757\u683C\u5F0F\u3002\u5BF9\u4E8E\u6D4F\u89C8\u5668\u6765\u8BF4\uFF0CCommonJS \u6A21\u5757\u683C\u5F0F\u4E0D\u662F\u6700\u4F73\u7684\uFF0C\u6211\u4E0D\u540C\u610F\u4F7F\u7528 CommonJS \u6A21\u5757\u683C\u5F0F\u8FDB\u884C\u7684\u4E00\u4E9B\u6298\u8877\u3002\u901A\u8FC7\u5728\u670D\u52A1\u5668\u4E0A\u4F7F\u7528 RequireJS\uFF0C\u60A8\u53EF\u4EE5\u5BF9\u6240\u6709\u6A21\u5757\u4F7F\u7528\u4E00\u79CD\u683C\u5F0F\uFF0C\u65E0\u8BBA\u5B83\u4EEC\u662F\u5728\u670D\u52A1\u5668\u7AEF\u8FD8\u662F\u5728\u6D4F\u89C8\u5668\u4E2D\u8FD0\u884C\u3002\u8FD9\u6837\uFF0C\u60A8\u53EF\u4EE5\u4FDD\u7559\u5728\u6D4F\u89C8\u5668\u4E2D\u4F7F\u7528 RequireJS \u6240\u83B7\u5F97\u7684\u901F\u5EA6\u4F18\u52BF\u548C\u7B80\u4FBF\u7684\u8C03\u8BD5\u51FD\u6570\uFF0C\u800C\u4E0D\u5FC5\u62C5\u5FC3\u5728\u4E24\u79CD\u683C\u5F0F\u4E4B\u95F4\u79FB\u52A8\u4F1A\u4EA7\u751F\u989D\u5916\u7684\u89E3\u6790\u6210\u672C\u3002</p><p>\u5982\u679C\u8981\u5BF9\u6A21\u5757\u4F7F\u7528 define()\uFF0C\u4F46\u4ECD\u5728 Node \u4E2D\u8FD0\u884C\u5B83\u4EEC\u800C\u4E0D\u9700\u8981\u5728\u670D\u52A1\u5668\u4E0A\u8FD0\u884C RequireJS\uFF0C\u8BF7\u53C2\u9605\u4E0B\u9762\u6709\u5173\u4F7F\u7528 amdefine \u7684\u90E8\u5206\u3002</p><h3 id="can-i-use-node-modules-already-written-in-the-commonjs-module-format" tabindex="-1"><a class="header-anchor" href="#can-i-use-node-modules-already-written-in-the-commonjs-module-format" aria-hidden="true">#</a> Can I use Node modules already written in the CommonJS module format?</h3><p>Yes! The Node adapter for RequireJS, called r.js, will use Node&#39;s implementation of require and Node&#39;s search paths if the module is not found with the configuration used by RequireJS, so you can continue to use your existing Node-based modules without having to do changes to them.</p><p>RequireJS will use its Configuration Options first to find modules. If RequireJS cannot find the module with its configuration, it is assumed to be a module that uses Node&#39;s type of modules and configuration. So, only configure module locations with RequireJS if they use the RequireJS API. For modules that expect Node&#39;s APIs and configuration/paths, just install them with a Node package manager, like npm, and do not configure their locations with RequireJS.</p><p>Best practice: Use npm to install Node-only packages/modules into the projects node_modules directory, but do not configure RequireJS to look inside the node_modules directory. Also avoid using relative module IDs to reference modules that are Node-only modules. So, do not do something like require(&quot;./node_modules/foo/foo&quot;).</p><p>Other notes:</p><ul><li>RequireJS in Node can only load modules that are on the local disk -- fetching modules across http, for instance, is not supported at this time.</li><li>RequireJS config options like map, packages, paths are only applied if RequireJS loads the module. If RequireJS needs to ask the node module system, the original ID is passed to Node. If you need a node module to work with a map config, inline define() calls work, as shown in this email list thread.</li></ul><p>\u5982\u679C\u672A\u901A\u8FC7 RequireJS \u4F7F\u7528\u7684\u914D\u7F6E\u627E\u5230\u6A21\u5757\uFF0C\u5219 RequireJS \u7684 Node \u9002\u914D\u5668 r.js \u5C06\u4F7F\u7528 Node \u7684 require \u5B9E\u73B0\u548C Node \u7684\u641C\u7D22\u8DEF\u5F84\uFF0C\u56E0\u6B64\u60A8\u53EF\u4EE5\u7EE7\u7EED\u4F7F\u7528\u73B0\u6709\u7684\u57FA\u4E8E Node \u7684\u6A21\u5757\uFF0C\u800C\u4E0D\u5FC5\u8FD9\u6837\u505A\u6539\u53D8\u4ED6\u4EEC\u3002</p><p>RequireJS \u5C06\u9996\u5148\u4F7F\u7528\u5176\u914D\u7F6E\u9009\u9879\u6765\u67E5\u627E\u6A21\u5757\u3002\u5982\u679C RequireJS \u627E\u4E0D\u5230\u5177\u6709\u5176\u914D\u7F6E\u7684\u6A21\u5757\uFF0C\u5219\u5C06\u5176\u5047\u5B9A\u4E3A\u4F7F\u7528 Node \u7684\u6A21\u5757\u7C7B\u578B\u548C\u914D\u7F6E\u7684\u6A21\u5757\u3002\u56E0\u6B64\uFF0C\u5982\u679C\u6A21\u5757\u4F4D\u7F6E\u4F7F\u7528 RequireJS API\uFF0C\u5219\u4EC5\u4F7F\u7528 RequireJS \u914D\u7F6E\u6A21\u5757\u4F4D\u7F6E\u3002\u5BF9\u4E8E\u9700\u8981 Node API \u548C\u914D\u7F6E/\u8DEF\u5F84\u7684\u6A21\u5757\uFF0C\u53EA\u9700\u4F7F\u7528 Node \u8F6F\u4EF6\u5305\u7BA1\u7406\u5668(\u5982 npm)\u5B89\u88C5\u5B83\u4EEC\uFF0C\u800C\u4E0D\u7528 RequireJS \u914D\u7F6E\u5B83\u4EEC\u7684\u4F4D\u7F6E\u3002</p><p>\u6700\u4F73\u5B9E\u8DF5: \u4F7F\u7528 npm \u5C06\u4EC5 Node \u7684\u8F6F\u4EF6\u5305/\u6A21\u5757\u5B89\u88C5\u5230\u9879\u76EE\u7684 node_modules \u76EE\u5F55\u4E2D\uFF0C\u4F46\u4E0D\u8981\u5C06 RequireJS \u914D\u7F6E\u4E3A\u5728 node_modules \u76EE\u5F55\u4E2D\u67E5\u627E\u3002\u8FD8\u8981\u907F\u514D\u4F7F\u7528\u76F8\u5BF9\u6A21\u5757 ID \u6765\u5F15\u7528\u4F5C\u4E3A\u4EC5 Node \u6A21\u5757\u7684\u6A21\u5757\u3002\u56E0\u6B64\uFF0C\u8BF7\u52FF\u6267\u884C require(\u201C./node_modules/foo/foo&quot;)\u4E4B\u7C7B\u7684\u64CD\u4F5C\u3002</p><p>\u5176\u4ED6\u8BF4\u660E:</p><ul><li>Node \u4E2D\u7684 RequireJS \u53EA\u80FD\u52A0\u8F7D\u672C\u5730\u78C1\u76D8\u4E0A\u7684\u6A21\u5757-\u4F8B\u5982\uFF0C\u76EE\u524D\u4E0D\u652F\u6301\u8DE8 http \u63D0\u53D6\u6A21\u5757\u3002</li><li>\u4EC5\u5728 RequireJS \u52A0\u8F7D\u6A21\u5757\u65F6\u624D\u5E94\u7528\u8BF8\u5982 map\uFF0C\u5305\uFF0C\u8DEF\u5F84\u4E4B\u7C7B\u7684 RequireJS \u914D\u7F6E\u9009\u9879\u3002\u5982\u679C RequireJS \u9700\u8981\u8BE2\u95EE Node \u6A21\u5757\u7CFB\u7EDF\uFF0C\u5219\u5C06\u539F\u59CB ID \u4F20\u9012\u7ED9 Node\u3002\u5982\u679C\u60A8\u9700\u8981 Node \u6A21\u5757\u6765\u5904\u7406 map config\uFF0C\u5219\u5185\u8054 define()\u8C03\u7528\u53EF\u4EE5\u6B63\u5E38\u5DE5\u4F5C\u3002</li></ul><h3 id="how-do-i-use-it" tabindex="-1"><a class="header-anchor" href="#how-do-i-use-it" aria-hidden="true">#</a> How do I use it?</h3><p>There are two ways to get the Node adapter:</p><p>\u6709\u4E24\u79CD\u83B7\u53D6 Node \u9002\u914D\u5668\u7684\u65B9\u6CD5\uFF1A</p><h4 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h4><p>Use npm to install it:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install requirejs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This option will install the latest release.</p><h4 id="download-r-js" tabindex="-1"><a class="header-anchor" href="#download-r-js" aria-hidden="true">#</a> Download r.js</h4><p>If you prefer to not use npm, you can get r.js directly:</p>`,38),S=s("Download r.js from the "),J={href:"https://requirejs.org/docs/download.html#rjs",target:"_blank",rel:"noopener noreferrer"},I=s("the download page"),T=s(" and place it in your project."),R=s("Get the source from the "),D={href:"https://github.com/requirejs/r.js",target:"_blank",rel:"noopener noreferrer"},N=s("r.js repo"),M=s(' and either generate the r.js via "node dist.js", or grab a snapshot from the dist directory.'),C=t(`<ul><li>\u4ECE\u4E0B\u8F7D\u9875\u9762\u4E0B\u8F7D r.js \u5E76\u5C06\u5176\u653E\u5728\u60A8\u7684\u9879\u76EE\u4E2D\u3002</li><li>\u4ECE r.js \u4ED3\u5E93\u83B7\u53D6\u6E90\u4EE3\u7801\uFF0C\u6216\u8005\u901A\u8FC7&quot;node dist.js&quot;\u751F\u6210 r.js\uFF0C\u6216\u8005\u4ECE dist \u76EE\u5F55\u4E2D\u83B7\u53D6\u5FEB\u7167\u3002</li></ul><h4 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h4><p>These instructions assume an npm installation of &#39;requirejs&#39;. If you are using the r.js file directly, replace require(&#39;requirejs&#39;) with require(&#39;./path/to/r.js&#39;). Basic usage is:</p><p>\u8FD9\u4E9B\u8BF4\u660E\u5047\u5B9A npm \u5B89\u88C5\u4E86&#39;requirejs&#39;\u3002\u5982\u679C\u76F4\u63A5\u4F7F\u7528 r.js \u6587\u4EF6\uFF0C\u5219\u5C06 require(&#39;requirejs&#39;)\u66FF\u6362\u4E3A require(&#39;./path/to/r.js&#39;)\u3002\u57FA\u672C\u7528\u6CD5\u662F\uFF1A</p><ul><li>require(&#39;requirejs&#39;)</li><li>Pass the main js file&#39;s &quot;require&quot; function in the configuration to requirejs.</li></ul><ul><li>require(&#39;requirejs&#39;)</li><li>\u5728\u914D\u7F6E\u4E2D\u5C06\u4E3B js \u6587\u4EF6\u7684&quot;require&quot;\u51FD\u6570\u4F20\u9012\u7ED9 requirejs\u3002</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> requirejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;requirejs&#39;</span><span class="token punctuation">)</span>

requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//Pass the top-level main.js/index.js require</span>
	<span class="token comment">//function to requirejs so that node modules</span>
	<span class="token comment">//are loaded relative to the top-level JS file.</span>
	<span class="token literal-property property">nodeRequire</span><span class="token operator">:</span> require<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo<span class="token punctuation">,</span> bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//foo and bar are loaded according to requirejs</span>
	<span class="token comment">//config, but if not found, then node&#39;s require</span>
	<span class="token comment">//is used to load the module.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Be sure to read the notes in section 2 about configuring RequireJS so that it can load node-only modules installed via npm.</p><p>To see a more complete example that loads a module via RequireJS but uses Node-native modules for other things, see the embedded test in the r.js repo.</p><p>Note: requirejs([], function() {}) will call the function callback asynchronously in RequireJS 2.1+ (for earlier versions it was synchronously called). However, when running in Node, module loading will be loaded using sync IO calls, and loader plugins should resolve calls to their load method synchronously. This allows sync uses of the requirejs module in node to work via requirejs(&#39;stringValue&#39;) calls:</p><p>\u786E\u4FDD\u9605\u8BFB\u7B2C 2 \u8282\u4E2D\u6709\u5173\u914D\u7F6E RequireJS \u7684\u6CE8\u91CA\uFF0C\u4EE5\u4FBF\u5B83\u53EF\u4EE5\u52A0\u8F7D\u901A\u8FC7 npm \u5B89\u88C5\u7684\u4EC5 Node \u6A21\u5757\u3002</p><p>\u8981\u67E5\u770B\u901A\u8FC7 RequireJS \u52A0\u8F7D\u6A21\u5757\u4F46\u5C06 Node-native \u6A21\u5757\u7528\u4E8E\u5176\u4ED6\u7528\u9014\u7684\u66F4\u5B8C\u6574\u7684\u793A\u4F8B\uFF0C\u8BF7\u53C2\u9605 r.js \u5B58\u50A8\u5E93\u4E2D\u7684\u5D4C\u5165\u5F0F\u6D4B\u8BD5\u3002</p><p>\u6CE8\u610F: requirejs([], function() {}) \u5C06\u5728 RequireJS 2.1+\u4E2D\u5F02\u6B65\u8C03\u7528\u51FD\u6570\u56DE\u8C03(\u5BF9\u4E8E\u65E9\u671F\u7248\u672C\uFF0C\u5B83\u662F\u540C\u6B65\u8C03\u7528\u7684)\u3002\u4F46\u662F\uFF0C\u5728 Node \u4E2D\u8FD0\u884C\u65F6\uFF0C\u5C06\u4F7F\u7528\u540C\u6B65 IO \u8C03\u7528\u6765\u52A0\u8F7D\u6A21\u5757\u52A0\u8F7D\uFF0C\u5E76\u4E14\u52A0\u8F7D\u5668\u63D2\u4EF6\u5E94\u540C\u6B65\u89E3\u6790\u5BF9\u5176\u52A0\u8F7D\u65B9\u6CD5\u7684\u8C03\u7528\u3002\u8FD9\u5141\u8BB8 Node \u4E2D\u5BF9 requirejs \u6A21\u5757\u7684\u540C\u6B65\u4F7F\u7528\u901A\u8FC7 requirejs(&#39;stringValue&#39;)\u8C03\u7528\u6765\u5DE5\u4F5C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Retrieves the module value for &#39;a&#39; synchronously</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="building-node-modules-with-amd-or-requirejs" tabindex="-1"><a class="header-anchor" href="#building-node-modules-with-amd-or-requirejs" aria-hidden="true">#</a> Building node modules with AMD or RequireJS</h4><p>If you want to code a module so that it works with RequireJS and in Node, without requiring users of your library in Node to use RequireJS, then you can use the amdefine package to do this:</p><p>\u5982\u679C\u8981\u5BF9\u6A21\u5757\u8FDB\u884C\u7F16\u7801\u4EE5\u4F7F\u5176\u53EF\u4E0E RequireJS \u548C Node \u4E00\u8D77\u4F7F\u7528\uFF0C\u800C\u65E0\u9700 Node \u4E2D\u5E93\u7684\u7528\u6237\u4F7F\u7528 RequireJS\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528 amdefine \u5305\u6765\u6267\u884C\u6B64\u64CD\u4F5C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> define <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;amdefine&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dependency&#39;</span><span class="token punctuation">)</span>

	<span class="token comment">//The value returned from the function is</span>
	<span class="token comment">//used as the module export visible to Node.</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The RequireJS optimizer, as of version 1.0.3, will strip out the use of &#39;amdefine&#39; above, so it is safe to use this module for your web-based projects too. Just be sure to use <strong>the exact &#39;amdefine&#39; if() test and contents as shown above</strong>. Differences in spaces/line breaks are allowed. See the amdefine project for more information.</p><p>If you want to use RequireJS directly to code your module, and then export a module value to node so that it can be used in other Node programs without requiring that app to use RequireJS, you can use the approach listed in the next example.</p><p>It is best to set the baseUrl specifically to the directory containing the module, so that it works properly when nested inside a node_modules heirarchy. Use the synchronous requirejs(&#39;moduleId&#39;) to fetch the module using the config and rules in requirejs, then use Node&#39;s module.exports to export your module value:</p><p>\u4ECE 1.0.3 \u7248\u5F00\u59CB\uFF0CRequireJS \u4F18\u5316\u5668\u5C06\u53D6\u6D88\u4E0A\u9762\u7684&quot;amdefine&quot;\u7684\u4F7F\u7528\uFF0C\u56E0\u6B64\u4E5F\u53EF\u4EE5\u5C06\u8BE5\u6A21\u5757\u7528\u4E8E\u57FA\u4E8E Web \u7684\u9879\u76EE\u3002\u53EA\u8981\u786E\u4FDD\u4F7F\u7528\u7CBE\u786E\u7684&#39;amdefine&#39;if()\u6D4B\u8BD5\u548C\u5185\u5BB9\u5373\u53EF\uFF0C\u5982\u4E0A\u6240\u793A\u3002\u5141\u8BB8\u7A7A\u683C/\u6362\u884C\u7B26\u4E4B\u95F4\u5B58\u5728\u5DEE\u5F02\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 amdefine \u9879\u76EE\u3002</p><p>\u5982\u679C\u8981\u76F4\u63A5\u4F7F\u7528 RequireJS \u5BF9\u6A21\u5757\u8FDB\u884C\u7F16\u7801\uFF0C\u7136\u540E\u5C06\u6A21\u5757\u503C\u5BFC\u51FA\u5230 Node\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u5728\u5176\u4ED6 Node \u7A0B\u5E8F\u4E2D\u4F7F\u7528\u5B83\uFF0C\u800C\u65E0\u9700\u8BE5\u5E94\u7528\u7A0B\u5E8F\u4F7F\u7528 RequireJS\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528\u4E0B\u4E00\u4E2A\u793A\u4F8B\u4E2D\u5217\u51FA\u7684\u65B9\u6CD5\u3002</p><p>\u6700\u597D\u5C06 baseUrl \u4E13\u95E8\u8BBE\u7F6E\u4E3A\u5305\u542B\u6A21\u5757\u7684\u76EE\u5F55\uFF0C\u4EE5\u4FBF\u5D4C\u5957\u5728 node_modules \u5C42\u6B21\u7ED3\u6784\u4E2D\u65F6\u53EF\u4EE5\u6B63\u5E38\u5DE5\u4F5C\u3002\u4F7F\u7528 requirejs(&#39;moduleId&#39;)sync \u901A\u8FC7 requirejs \u4E2D\u7684\u914D\u7F6E\u548C\u89C4\u5219\u83B7\u53D6\u6A21\u5757\uFF0C\u7136\u540E\u4F7F\u7528 Node \u7684 module.exports \u5BFC\u51FA\u6A21\u5757\u503C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> requirejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;requirejs&#39;</span><span class="token punctuation">)</span>

requirejs<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">//Use node&#39;s special variable __dirname to</span>
	<span class="token comment">//get the directory containing this file.</span>
	<span class="token comment">//Useful if building a library that will</span>
	<span class="token comment">//be used in node but does not require the</span>
	<span class="token comment">//use of node outside</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>

	<span class="token comment">//Pass the top-level main.js/index.js require</span>
	<span class="token comment">//function to requirejs so that node modules</span>
	<span class="token comment">//are loaded relative to the top-level JS file.</span>
	<span class="token literal-property property">nodeRequire</span><span class="token operator">:</span> require<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//foo and bar are loaded according to requirejs</span>
<span class="token comment">//config, and if found, assumed to be an AMD module.</span>
<span class="token comment">//If they are not found via the requirejs config,</span>
<span class="token comment">//then node&#39;s require is used to load the module,</span>
<span class="token comment">//and if found, the module is assumed to be a</span>
<span class="token comment">//node-formatted module. Note: this synchronous</span>
<span class="token comment">//style of loading a module only works in Node.</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">requirejs</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//Now export a value visible to Node.</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="using-the-optimizer-as-a-node-module" tabindex="-1"><a class="header-anchor" href="#using-the-optimizer-as-a-node-module" aria-hidden="true">#</a> Using the optimizer as a node module</h4><p>The node module also exposes the RequireJS Optimizer as an optimize method for using the RequireJS optimizer via a function call instead of a command line tool:</p><p>Node \u6A21\u5757\u4E5F\u66B4\u9732\u4E86 RequireJS \u4F18\u5316\u4E3A\u4F18\u5316\u7528\u4E8E\u4F7F\u7528\u8BE5\u65B9\u6CD5 RequireJS \u4F18\u5316\u5668\u901A\u8FC7\u4E00\u4E2A\u51FD\u6570\u8C03\u7528\uFF0C\u800C\u4E0D\u662F\u4E00\u4E2A\u547D\u4EE4\u884C\u5DE5\u5177\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> requirejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;requirejs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;../appDir/scripts&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">out</span><span class="token operator">:</span> <span class="token string">&#39;../build/main-built.js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

requirejs<span class="token punctuation">.</span><span class="token function">optimize</span><span class="token punctuation">(</span>
	config<span class="token punctuation">,</span>
	<span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">buildResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//buildResponse is just a text output of the modules</span>
		<span class="token comment">//included. Load the built file for the contents.</span>
		<span class="token comment">//Use config.out to get the optimized file contents.</span>
		<span class="token keyword">var</span> contents <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//optimization err callback</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>This allows you to build other optimization workflows, like a web builder that can be used if you prefer to always develop with the &quot;one script file included before the <code>&lt;/body&gt;</code> tag&quot; approach. The optimizer running in Node is fairly fast, but for larger projects that do not want to regenerate the build for every browser request, but just if you modify a script that is part of the build. You could use Node&#39;s fs.watchFile() to watch files and then trigger the build when a file changes.</p><p>\u8FD9\u6837\uFF0C\u60A8\u5C31\u53EF\u4EE5\u6784\u5EFA\u5176\u4ED6\u4F18\u5316\u5DE5\u4F5C\u6D41\uFF0C\u4F8B\u5982\uFF0C\u5982\u679C\u60A8\u5E0C\u671B\u59CB\u7EC8\u4F7F\u7528&quot;\u6807\u8BB0\u4E4B\u524D\u5305\u542B\u4E00\u4E2A\u811A\u672C\u6587\u4EF6&quot;\u7684\u65B9\u6CD5\u8FDB\u884C\u5F00\u53D1\uFF0C\u5219\u53EF\u4EE5\u4F7F\u7528 Web \u6784\u5EFA\u5668\u3002\u5728 Node \u4E2D\u8FD0\u884C\u7684\u4F18\u5316\u5668\u8FD0\u884C\u901F\u5EA6\u76F8\u5F53\u5FEB\uFF0C\u4F46\u662F\u5BF9\u4E8E\u90A3\u4E9B\u4E0D\u60F3\u4E3A\u6BCF\u4E2A\u6D4F\u89C8\u5668\u8BF7\u6C42\u91CD\u65B0\u751F\u6210\u6784\u5EFA\u6587\u4EF6\u7684\u5927\u578B\u9879\u76EE\u800C\u8A00\uFF0C\u53EA\u662F\u60A8\u4FEE\u6539\u4E86\u6784\u5EFA\u6587\u4EF6\u4E2D\u7684\u811A\u672C\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528 Node \u7684 fs.watchFile()\u76D1\u89C6\u6587\u4EF6\uFF0C\u7136\u540E\u5728\u6587\u4EF6\u66F4\u6539\u65F6\u89E6\u53D1\u6784\u5EFA\u3002</p><h4 id="feedback" tabindex="-1"><a class="header-anchor" href="#feedback" aria-hidden="true">#</a> Feedback</h4>`,32),z=s("If you find you have a problem, and want to report it, use the r.js "),U={href:"http://github.com/requirejs/r.js/issues",target:"_blank",rel:"noopener noreferrer"},A=s("GitHub Issues page"),O=s("."),L=t(`<h2 id="commonjs-notes" tabindex="-1"><a class="header-anchor" href="#commonjs-notes" aria-hidden="true">#</a> CommonJS Notes</h2><h3 id="introduction-1" tabindex="-1"><a class="header-anchor" href="#introduction-1" aria-hidden="true">#</a> INTRODUCTION</h3><p>CommonJS defines a module format. Unfortunately, it was defined without giving browsers equal footing to other JavaScript environments. Because of that, there are CommonJS spec proposals for Transport formats and an asynchronous require.</p><p>RequireJS tries to keep with the spirit of CommonJS, with using string names to refer to dependencies, and to avoid modules defining global objects, but still allow coding a module format that works well natively in the browser. RequireJS implements the Asynchronous Module Definition (formerly Transport/C) proposal.</p><p>If you have modules that are in the traditional CommonJS module format, then you can easily convert them to work with RequireJS. Not all modules will convert cleanly to the new format. Types of modules that may not convert well:</p><ul><li>Modules that use conditional code to do a require call, like if(someCondition) require(&#39;a1&#39;) else require(&#39;a2&#39;);</li><li>Some types of circular dependencies.</li></ul><p>CommonJS \u5B9A\u4E49\u4E86\u4E00\u79CD\u6A21\u5757\u683C\u5F0F\u3002\u4E0D\u5E78\u7684\u662F\uFF0C\u5B83\u5728\u5B9A\u4E49\u65F6\u5E76\u672A\u8D4B\u4E88\u6D4F\u89C8\u5668\u4E0E\u5176\u4ED6 JavaScript \u73AF\u5883\u540C\u7B49\u7684\u5730\u4F4D\u3002\u56E0\u6B64\uFF0C\u5B58\u5728\u6709\u5173\u4F20\u8F93\u683C\u5F0F\u548C\u5F02\u6B65 require \u7684 CommonJS \u89C4\u8303\u5EFA\u8BAE\u3002</p><p>RequireJS \u5C1D\u8BD5\u4FDD\u6301 CommonJS \u7684\u7CBE\u795E\uFF0C\u4F7F\u7528\u5B57\u7B26\u4E32\u540D\u79F0\u6765\u5F15\u7528\u4F9D\u8D56\u9879\uFF0C\u5E76\u907F\u514D\u6A21\u5757\u5B9A\u4E49\u5168\u5C40\u5BF9\u8C61\uFF0C\u4F46\u4ECD\u7136\u5141\u8BB8\u7F16\u7801\u5728\u6D4F\u89C8\u5668\u4E2D\u672C\u673A\u8FD0\u884C\u826F\u597D\u7684\u6A21\u5757\u683C\u5F0F\u3002RequireJS \u5B9E\u73B0\u5F02\u6B65\u6A21\u5757\u5B9A\u4E49(\u4EE5\u524D\u79F0\u4E3A Transport/C)\u5EFA\u8BAE\u3002</p><p>\u5982\u679C\u60A8\u5177\u6709\u4F20\u7EDF CommonJS \u6A21\u5757\u683C\u5F0F\u7684\u6A21\u5757\uFF0C\u5219\u53EF\u4EE5\u8F7B\u677E\u5730\u5C06\u5B83\u4EEC\u8F6C\u6362\u4E3A\u4E0E RequireJS \u4E00\u8D77\u4F7F\u7528\u3002\u5E76\u975E\u6240\u6709\u6A21\u5757\u90FD\u4F1A\u5E72\u51C0\u5730\u8F6C\u6362\u4E3A\u65B0\u683C\u5F0F\u3002\u53EF\u80FD\u65E0\u6CD5\u5F88\u597D\u8F6C\u6362\u7684\u6A21\u5757\u7C7B\u578B\uFF1A</p><ul><li>\u4F7F\u7528\u6761\u4EF6\u4EE3\u7801\u6267\u884C require \u8C03\u7528\u7684\u6A21\u5757\uFF0C\u4F8B\u5982 if(someCondition)require(&#39;a1&#39;)else require(&#39;a2&#39;);</li><li>\u67D0\u4E9B\u7C7B\u578B\u7684\u5FAA\u73AF\u4F9D\u8D56\u9879\u3002</li></ul><h3 id="manual-conversion" tabindex="-1"><a class="header-anchor" href="#manual-conversion" aria-hidden="true">#</a> MANUAL CONVERSION</h3><p>If you just have a few modules to convert, then all you need to do is wrap the module in this code:</p><p>\u5982\u679C\u60A8\u53EA\u6709\u51E0\u4E2A\u8981\u8F6C\u6362\u7684\u6A21\u5757\uFF0C\u5219\u53EA\u9700\u5C06\u6A21\u5757\u5305\u88C5\u5728\u4EE5\u4E0B\u4EE3\u7801\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Put traditional CommonJS module content here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>IMPORTANT</strong>: The function arguments should always be listed as require, exports, module, with those exact names and in that exact order, otherwise chaos will ensue. You can leave off exports and module from the list, but if they are needed, they need to be specified in the exact order illustrated here.</p><p>\u91CD\u8981\u63D0\u793A: \u51FD\u6570\u53C2\u6570\u5E94\u59CB\u7EC8\u6309 require, exports, module,\u987A\u5E8F\u5217\u51FA\uFF0C\u5E76\u5177\u6709\u786E\u5207\u7684\u540D\u79F0\u548C\u6B63\u786E\u7684\u987A\u5E8F\uFF0C\u5426\u5219\u4F1A\u9020\u6210\u6DF7\u4E71\u3002\u60A8\u53EF\u4EE5\u4ECE\u5217\u8868\u4E2D\u7701\u7565\u5BFC\u51FA\u548C\u6A21\u5757\uFF0C\u4F46\u662F\u5982\u679C\u9700\u8981\u5B83\u4EEC\uFF0C\u5219\u9700\u8981\u6309\u7167\u6B64\u5904\u8BF4\u660E\u7684\u786E\u5207\u987A\u5E8F\u8FDB\u884C\u6307\u5B9A\u3002</p><h3 id="conversion-tool" tabindex="-1"><a class="header-anchor" href="#conversion-tool" aria-hidden="true">#</a> CONVERSION TOOL</h3><p>If you have many modules to convert, the r.js project has a converter tool built into the r.js file. Give it the path to the directory you want to convert and an output directory</p><p>\u5982\u679C\u60A8\u6709\u8BB8\u591A\u8981\u8F6C\u6362\u7684\u6A21\u5757\uFF0C\u5219 r.js \u9879\u76EE\u5728 r.js \u6587\u4EF6\u4E2D\u5185\u7F6E\u4E86\u4E00\u4E2A\u8F6C\u6362\u5DE5\u5177\u3002\u4E3A\u5176\u63D0\u4F9B\u8981\u8F6C\u6362\u7684\u76EE\u5F55\u7684\u8DEF\u5F84\u548C\u8F93\u51FA\u76EE\u5F55\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>node r<span class="token punctuation">.</span>js <span class="token operator">-</span>convert path<span class="token operator">/</span>to<span class="token operator">/</span>commonjs<span class="token operator">/</span>modules<span class="token operator">/</span> path<span class="token operator">/</span>to<span class="token operator">/</span>output
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>There are a small number of CommonJS modules do not work well as define()-wrapped modules. See the r.js README</p><p>\u5C11\u6570 CommonJS \u6A21\u5757\u4E0D\u80FD\u50CF define()\u5305\u88F9\u7684\u6A21\u5757\u90A3\u6837\u5F88\u597D\u5730\u5DE5\u4F5C\u3002</p><h3 id="setting-exported-value" tabindex="-1"><a class="header-anchor" href="#setting-exported-value" aria-hidden="true">#</a> SETTING EXPORTED VALUE</h3><p>There are some CommonJS systems, mainly Node, that allow setting the exported value by assigning the exported value as module.exports. That idiom is supported by RequireJS, but there is another, easier way -- just return the value from the function passed to define</p><p>\u6709\u4E00\u4E9B CommonJS \u7CFB\u7EDF(\u4E3B\u8981\u662F Node)\u5141\u8BB8\u901A\u8FC7\u5C06\u5BFC\u51FA\u7684\u503C\u5206\u914D\u4E3A module.exports \u6765\u8BBE\u7F6E\u5BFC\u51FA\u7684\u503C\u3002RequireJS \u652F\u6301\u8BE5\u60EF\u7528\u8BED\uFF0C\u4F46\u662F\u8FD8\u6709\u53E6\u4E00\u79CD\u66F4\u7B80\u5355\u7684\u65B9\u6CD5-\u53EA\u9700\u4ECE\u4F20\u9012\u7ED9 define \u7684\u51FD\u6570\u4E2D\u8FD4\u56DE\u503C\u5373\u53EF\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>

	<span class="token comment">//Define this module as exporting a function</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		foo<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>With this approach, then you normally do not need the exports and module function arguments, so you can leave them off the module definition.</p><p>\u4F7F\u7528\u8FD9\u79CD\u65B9\u6CD5\uFF0C\u901A\u5E38\u4E0D\u9700\u8981 exports \u548C\u6A21\u5757\u51FD\u6570\u53C2\u6570\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5C06\u5B83\u4EEC\u4FDD\u7559\u5728\u6A21\u5757\u5B9A\u4E49\u4E4B\u5916\u3002</p><h3 id="alternative-syntax" tabindex="-1"><a class="header-anchor" href="#alternative-syntax" aria-hidden="true">#</a> ALTERNATIVE SYNTAX</h3><p>Instead of using require() to get dependencies inside the function passed to define(), you can also specify them via a dependency array argument to define(). The order of the names in the dependency array match the order of arguments passed to the definition function passed to define(). So the above example that uses the module foo:</p><p>\u9664\u4E86\u4F7F\u7528 require()\u83B7\u53D6\u4F20\u9012\u7ED9 define()\u7684\u51FD\u6570\u5185\u90E8\u7684\u4F9D\u8D56\u5173\u7CFB\u4E4B\u5916\uFF0C\u60A8\u8FD8\u53EF\u4EE5\u901A\u8FC7 define()\u7684\u4F9D\u8D56\u5173\u7CFB\u6570\u7EC4\u53C2\u6570\u6765\u6307\u5B9A\u5B83\u4EEC\u3002\u4F9D\u8D56\u5173\u7CFB\u6570\u7EC4\u4E2D\u540D\u79F0\u7684\u987A\u5E8F\u4E0E\u4F20\u9012\u7ED9\u4F20\u9012\u7ED9 define()\u7684\u5B9A\u4E49\u51FD\u6570\u7684\u53C2\u6570\u987A\u5E8F\u76F8\u5339\u914D\u3002\u56E0\u6B64\uFF0C\u4E0A\u9762\u7684\u793A\u4F8B\u4F7F\u7528\u6A21\u5757 foo\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		foo<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,32),E=s("See the "),P={href:"https://requirejs.org/docs/api.html",target:"_blank",rel:"noopener noreferrer"},_=s("API docs"),Q=s(" for more information on that syntax."),F=t(`<h3 id="loading-modules-from-commonjs-packages" tabindex="-1"><a class="header-anchor" href="#loading-modules-from-commonjs-packages" aria-hidden="true">#</a> LOADING MODULES FROM COMMONJS PACKAGES</h3><p>Modules in CommonJS packages can be loaded by RequireJS by setting up the RequireJS configuration to know about the location and package attributes. See the packages API section for more information.</p><p>\u53EF\u4EE5\u901A\u8FC7\u8BBE\u7F6E RequireJS \u914D\u7F6E\u4EE5\u4E86\u89E3\u4F4D\u7F6E\u548C\u5305\u5C5E\u6027\u6765\u7531 RequireJS \u52A0\u8F7D CommonJS \u5305\u4E2D\u7684\u6A21\u5757\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1\u5305 API \u90E8\u5206\u3002</p><h3 id="optimization-tool" tabindex="-1"><a class="header-anchor" href="#optimization-tool" aria-hidden="true">#</a> OPTIMIZATION TOOL</h3><p>RequireJS has an optimization tool that can combine module definitions together into optimized bundles for browser delivery. It works as a command-line tool that you use as part of code deployment. See the optimization docs for more information.</p><p>RequireJS \u6709\u4E00\u4E2A\u4F18\u5316\u5DE5\u5177\uFF0C\u53EF\u4EE5\u5C06\u6A21\u5757\u5B9A\u4E49\u7EC4\u5408\u5230\u4F18\u5316\u7684\u5305\u4E2D\uFF0C\u4EE5\u4F9B\u6D4F\u89C8\u5668\u4EA4\u4ED8\u3002\u5B83\u7528\u4F5C\u547D\u4EE4\u884C\u5DE5\u5177\uFF0C\u60A8\u53EF\u4EE5\u5728\u4EE3\u7801\u90E8\u7F72\u4E2D\u4F7F\u7528\u5B83\u3002\u6709\u5173\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u89C1 \u4F18\u5316\u6587\u6863\u3002</p><h2 id="common-errors" tabindex="-1"><a class="header-anchor" href="#common-errors" aria-hidden="true">#</a> Common Errors</h2><h3 id="mismatched-anonymous-define-modules" tabindex="-1"><a class="header-anchor" href="#mismatched-anonymous-define-modules" aria-hidden="true">#</a> Mismatched anonymous define() modules ...</h3><p>\u4E0D\u5339\u914D\u7684\u533F\u540D DEFINE()\u6A21\u5757...</p><p>If you manually code a script tag in HTML to load a script with an anonymous define() call, this error can occur.</p><p>\u5982\u679C\u60A8\u624B\u52A8\u7F16\u5199 HTML \u811A\u672C\u6807\u8BB0\u4EE5\u901A\u8FC7\u533F\u540D define()\u8C03\u7528\u52A0\u8F7D\u811A\u672C\uFF0C\u5219\u53EF\u80FD\u4F1A\u53D1\u751F\u6B64\u9519\u8BEF\u3002</p><p>If you manually code a script tag in HTML to load a script that has a few named modules, but then try to load an anonymous module that ends up having the same name as one of the named modules in the script loaded by the manually coded script tag.</p><p>\u5982\u679C\u60A8\u5728 HTML \u4E2D\u624B\u52A8\u7F16\u7801\u811A\u672C\u6807\u8BB0\u4EE5\u52A0\u8F7D\u5177\u6709\u4E00\u4E9B\u547D\u540D\u6A21\u5757\u7684\u811A\u672C\uFF0C\u4F46\u662F\u968F\u540E\u5C1D\u8BD5\u52A0\u8F7D\u6700\u7EC8\u4E0E\u5728\u624B\u52A8\u7F16\u7801\u811A\u672C\u52A0\u8F7D\u7684\u811A\u672C\u4E2D\u5177\u6709\u540D\u79F0\u6A21\u5757\u4E4B\u4E00\u540D\u79F0\u76F8\u540C\u7684\u533F\u540D\u6A21\u5757\u6807\u7B7E\u3002</p><p>If you use the loader plugins or anonymous modules (modules that call define() with no string ID) but do not use the RequireJS optimizer to combine files together, this error can occur. The optimizer knows how to name anonymous modules correctly so that they can be combined with other modules in an optimized file.</p><p>\u5982\u679C\u60A8\u4F7F\u7528\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u6216\u533F\u540D\u6A21\u5757(\u4E0D\u5E26\u5B57\u7B26\u4E32 ID \u8C03\u7528 define()\u7684\u6A21\u5757)\u4F46\u4E0D\u4F7F\u7528 RequireJS \u4F18\u5316\u5668\u5C06\u6587\u4EF6\u7EC4\u5408\u5728\u4E00\u8D77\uFF0C\u5219\u53EF\u80FD\u53D1\u751F\u6B64\u9519\u8BEF\u3002\u4F18\u5316\u5668\u77E5\u9053\u5982\u4F55\u6B63\u786E\u547D\u540D\u533F\u540D\u6A21\u5757\uFF0C\u4EE5\u4FBF\u5B83\u4EEC\u53EF\u4EE5\u4E0E\u4F18\u5316\u6A21\u5757\u4E2D\u7684\u5176\u4ED6\u6A21\u5757\u7EC4\u5408\u3002</p><p>If you use var define; at the top of your file for jshint/jslint purposes, this will cause a problem for the optimizer because it avoids parsing files that declare a define variable, since that may indicate a script that was created by a concatenation of some scripts that use a local define.</p><p>\u5982\u679C var define;\u5C06\u6587\u4EF6\u9876\u90E8\u7528\u4E8E jshint/jslint\uFF0C\u8FD9\u5C06\u5BF9\u4F18\u5316\u5668\u9020\u6210\u95EE\u9898\uFF0C\u56E0\u4E3A\u5B83\u907F\u514D\u4E86\u89E3\u6790\u58F0\u660E define \u53D8\u91CF\u7684\u6587\u4EF6\uFF0C\u56E0\u4E3A\u8FD9\u53EF\u80FD\u8868\u660E\u811A\u672C\u662F\u7531\u67D0\u4E9B\u4F7F\u7528\u4EE5\u4E0B\u811A\u672C\u7684\u811A\u672C\u4E32\u8054\u800C\u6210\u7684\u672C\u5730\u5B9A\u4E49\u3002</p><p>To avoid the error:</p><p>\u4E3A\u907F\u514D\u8BE5\u9519\u8BEF\uFF1A</p><ul><li>Be sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load scripts that have define() calls in them.</li><li>If you manually code an HTML script tag, be sure it only includes named modules, and that an anonymous module that will have the same name as one of the modules in that file is not loaded.</li><li>If the problem is the use of loader plugins or anonymous modules but the RequireJS optimizer is not used for file bundling, use the RequireJS optimizer.</li><li>If the problem is the var define lint approach, use /_global define _/ (no space before &quot;global&quot;) comment style instead.</li></ul><ul><li>\u786E\u4FDD\u901A\u8FC7 RequireJS API \u52A0\u8F7D\u6240\u6709\u8C03\u7528 define()\u7684\u811A\u672C\u3002\u4E0D\u8981\u624B\u52A8\u5728 HTML \u4E2D\u7F16\u5199\u811A\u672C\u6807\u8BB0\uFF0C\u4EE5\u52A0\u8F7D\u5176\u4E2D\u5177\u6709 define()\u8C03\u7528\u7684\u811A\u672C\u3002</li><li>\u5982\u679C\u60A8\u624B\u52A8\u7F16\u7801 HTML \u811A\u672C\u6807\u8BB0\uFF0C\u8BF7\u786E\u4FDD\u5B83\u4EC5\u5305\u542B\u547D\u540D\u6A21\u5757\uFF0C\u5E76\u4E14\u4E0D\u4F1A\u52A0\u8F7D\u4E0E\u8BE5\u6587\u4EF6\u4E2D\u7684\u6A21\u5757\u540D\u79F0\u76F8\u540C\u7684\u533F\u540D\u6A21\u5757\u3002</li><li>\u5982\u679C\u95EE\u9898\u662F\u4F7F\u7528\u52A0\u8F7D\u7A0B\u5E8F\u63D2\u4EF6\u6216\u533F\u540D\u6A21\u5757\uFF0C\u4F46 RequireJS \u4F18\u5316\u5668\u672A\u7528\u4E8E\u6587\u4EF6\u6346\u7ED1\uFF0C\u8BF7\u4F7F\u7528 RequireJS \u4F18\u5316\u5668\u3002</li><li>\u5982\u679C\u95EE\u9898\u662F var define \u68C9\u7ED2\u65B9\u6CD5\uFF0C\u8BF7\u6539\u7528/_global define _/(\u201C\u5168\u5C40&quot;\u524D\u4E0D\u80FD\u6709\u7A7A\u683C)\u6CE8\u91CA\u6837\u5F0F\u3002</li></ul><h3 id="load-timeout-for-modules" tabindex="-1"><a class="header-anchor" href="#load-timeout-for-modules" aria-hidden="true">#</a> Load timeout for modules: ...</h3><p>\u6A21\u5757\u7684\u52A0\u8F7D\u8D85\u65F6\uFF1A...</p><p>Likely causes and fixes:</p><p>\u53EF\u80FD\u7684\u539F\u56E0\u548C\u89E3\u51B3\u65B9\u6CD5\uFF1A</p><ul><li>There was a script error in one of the listed modules. If there is no script error in the browser&#39;s error console, and if you are using Firebug, try loading the page in another browser like Chrome or Safari. Sometimes script errors do not show up in Firebug.</li><li>The path configuration for a module is incorrect. Check the &quot;Net&quot; or &quot;Network&quot; tab in the browser&#39;s developer tools to see if there was a 404 for an URL that would map to the module name. Make sure the script file is in the right place. In some cases you may need to use the paths configuration to fix the URL resolution for the script.</li><li>The paths config was used to set two module IDs to the same file, and that file only has one anonymous module in it. If module IDs &quot;something&quot; and &quot;lib/something&quot; are both configured to point to the same &quot;scripts/libs/something.js&quot; file, and something.js only has one anonymous module in it, this kind of timeout error can occur. The fix is to make sure all module ID references use the same ID (either choose &quot;something&quot; or &quot;lib/something&quot; for all references), or use map config.</li></ul><ul><li>\u5217\u51FA\u7684\u6A21\u5757\u4E4B\u4E00\u4E2D\u5B58\u5728\u811A\u672C\u9519\u8BEF\u3002\u5982\u679C\u6D4F\u89C8\u5668\u7684\u9519\u8BEF\u63A7\u5236\u53F0\u4E2D\u6CA1\u6709\u811A\u672C\u9519\u8BEF\uFF0C\u5E76\u4E14\u60A8\u4F7F\u7528\u7684\u662F Firebug\uFF0C\u8BF7\u5C1D\u8BD5\u5728\u5176\u4ED6\u6D4F\u89C8\u5668(\u4F8B\u5982 Chrome \u6216 Safari)\u4E2D\u52A0\u8F7D\u9875\u9762\u3002\u6709\u65F6\uFF0C\u811A\u672C\u9519\u8BEF\u4E0D\u4F1A\u5728 Firebug \u4E2D\u663E\u793A\u3002</li><li>\u6A21\u5757\u7684\u8DEF\u5F84\u914D\u7F6E\u4E0D\u6B63\u786E\u3002\u68C0\u67E5\u6D4F\u89C8\u5668\u5F00\u53D1\u4EBA\u5458\u5DE5\u5177\u4E2D\u7684\u201C\u7F51\u7EDC&quot;\u6216\u201C\u7F51\u7EDC&quot;\u9009\u9879\u5361\uFF0C\u4EE5\u67E5\u770B\u662F\u5426\u5B58\u5728 404 \u6620\u5C04\u5230\u6A21\u5757\u540D\u79F0\u7684 URL\u3002\u786E\u4FDD\u811A\u672C\u6587\u4EF6\u5728\u6B63\u786E\u7684\u4F4D\u7F6E\u3002\u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u60A8\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u8DEF\u5F84\u914D\u7F6E\u6765\u4FEE\u590D\u811A\u672C\u7684 URL \u89E3\u6790\u3002</li><li>\u8DEF\u5F84\u914D\u7F6E\u7528\u4E8E\u5C06\u4E24\u4E2A\u6A21\u5757 ID \u8BBE\u7F6E\u4E3A\u540C\u4E00\u6587\u4EF6\uFF0C\u5E76\u4E14\u8BE5\u6587\u4EF6\u4E2D\u4EC5\u5305\u542B\u4E00\u4E2A\u533F\u540D\u6A21\u5757\u3002\u5982\u679C\u5C06\u6A21\u5757\u6807\u8BC6&quot;something&quot;\u548C&quot;lib/something&quot;\u90FD\u914D\u7F6E\u4E3A\u6307\u5411\u76F8\u540C\u7684&quot;scripts/libs/something.js&quot;\u6587\u4EF6\uFF0C\u5E76\u4E14 something.js \u4E2D\u4EC5\u5305\u542B\u4E00\u4E2A\u533F\u540D\u6A21\u5757\uFF0C\u5219\u53EF\u80FD\u4F1A\u53D1\u751F\u8FD9\u79CD\u8D85\u65F6\u9519\u8BEF\u3002\u89E3\u51B3\u65B9\u6CD5\u662F\u786E\u4FDD\u6240\u6709\u6A21\u5757 ID \u5F15\u7528\u90FD\u4F7F\u7528\u76F8\u540C\u7684 ID(\u4E3A\u6240\u6709\u5F15\u7528\u9009\u62E9&quot;something&quot;\u6216&quot;lib/something&quot;)\uFF0C\u6216\u4F7F\u7528 map config.</li></ul><h3 id="error-evaluating-module" tabindex="-1"><a class="header-anchor" href="#error-evaluating-module" aria-hidden="true">#</a> Error evaluating module ...</h3><p>\u9519\u8BEF\u8BC4\u4F30\u6A21\u5757...</p><p>An error occured when the define() function was called for the module given in the error message. It is an error with the code logic inside the define function. The error could happen inside a require callback.</p><p>\u4E3A\u9519\u8BEF\u6D88\u606F\u4E2D\u7ED9\u5B9A\u7684\u6A21\u5757\u8C03\u7528 define()\u51FD\u6570\u65F6\u53D1\u751F\u9519\u8BEF\u3002define \u51FD\u6570\u5185\u90E8\u7684\u4EE3\u7801\u903B\u8F91\u5B58\u5728\u9519\u8BEF\u3002\u8BE5\u9519\u8BEF\u53EF\u80FD\u53D1\u751F\u5728 require \u56DE\u8C03\u5185\u90E8\u3002</p><p>In Firefox and WebKit browsers, a line number and file name will be indicated in the error. It can be used to locate the source of the problem. Better isolation of the error can be done by using a debugger to place a breakpoint in the file that contains the error.</p><p>\u5728 Firefox \u548C WebKit \u6D4F\u89C8\u5668\u4E2D\uFF0C\u9519\u8BEF\u4E2D\u5C06\u663E\u793A\u884C\u53F7\u548C\u6587\u4EF6\u540D\u3002\u5B83\u53EF\u4EE5\u7528\u6765\u5B9A\u4F4D\u95EE\u9898\u7684\u6839\u6E90\u3002\u901A\u8FC7\u4F7F\u7528\u8C03\u8BD5\u5668\u5728\u5305\u542B\u9519\u8BEF\u7684\u6587\u4EF6\u4E2D\u653E\u7F6E\u4E00\u4E2A\u65AD\u70B9\uFF0C\u53EF\u4EE5\u66F4\u597D\u5730\u9694\u79BB\u9519\u8BEF\u3002</p><h3 id="module-name-has-not-been-loaded-yet-for-context" tabindex="-1"><a class="header-anchor" href="#module-name-has-not-been-loaded-yet-for-context" aria-hidden="true">#</a> Module name ... has not been loaded yet for context: ...</h3><p>\u6A21\u5757\u540D\u79F0...\u5C1A\u672A\u4E3A\u4E0A\u4E0B\u6587\u52A0\u8F7D\uFF1A...</p><p>This occurs when there is a require(&#39;name&#39;) call, but the &#39;name&#39; module has not been loaded yet.</p><p>\u5F53\u6709\u4E00\u4E2A require(&#39;name&#39;)\u8C03\u7528\uFF0C\u4F46\u5C1A\u672A\u52A0\u8F7D&#39;name&#39;\u6A21\u5757\u65F6\uFF0C\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\u3002</p><p>If the error message includes Use require([]), then it was a top-level require call (not a require call inside a define() call) that should be using the async, callback version of require to load the code:</p><p>\u5982\u679C\u9519\u8BEF\u6D88\u606F\u5305\u542B Use require([])\uFF0C\u5219\u5B83\u662F\u5E94\u4F7F\u7528\u5F02\u6B65\uFF0C\u56DE\u8C03\u7248 require \u52A0\u8F7D\u4EE3\u7801\u7684\u9876\u7EA7 require \u8C03\u7528(\u800C\u4E0D\u662F define()\u8C03\u7528\u5185\u7684 require \u8C03\u7528)\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//If this code is not in a define call,</span>
<span class="token comment">//DO NOT use require(&#39;foo&#39;), but use the async</span>
<span class="token comment">//callback version:</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//foo is now loaded.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>If you are using the simplified define wrapper, make sure you have require as the first argument to the definition function:</p><p>\u5982\u679C\u4F7F\u7528\u7B80\u5316\u7684\u5B9A\u4E49\u5305\u88C5\u5668\uFF0C\u8BF7\u786E\u4FDD\u5C06 require \u4F5C\u4E3A\u5B9A\u4E49\u51FD\u6570\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> namedModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If you are listing dependencies in the dependency array, make sure that require and name are in the dependency array:</p><p>\u5982\u679C\u8981\u5728\u4F9D\u8D56\u9879\u6570\u7EC4\u4E2D\u5217\u51FA\u4F9D\u8D56\u9879\uFF0C\u8BF7\u786E\u4FDD require \u548C name \u5728\u4F9D\u8D56\u9879\u6570\u7EC4\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> namedModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>In particular, the following will not work:</p><p>\u7279\u522B\u662F\u4EE5\u4E0B\u60C5\u51B5\u5C06\u4E0D\u8D77\u4F5C\u7528\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//THIS WILL FAIL</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> namedModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This fails because requirejs needs to be sure to load and execute all dependencies before calling the factory function above. If a dependency array is given to define(), then requirejs assumes that all dependencies are listed in that array, and it will not scan the factory function for other dependencies. So, either do not pass in the dependency array, or if using the dependency array, list all the dependencies in it.</p><p>If part of a require() callback, all the dependencies need to be listed in the array:</p><p>\u5931\u8D25\u662F\u56E0\u4E3A\u5728\u8C03\u7528\u4E0A\u8FF0\u5DE5\u5382\u51FD\u6570\u4E4B\u524D\uFF0Crequirejs \u9700\u8981\u786E\u4FDD\u52A0\u8F7D\u5E76\u6267\u884C\u6240\u6709\u4F9D\u8D56\u9879\u3002\u5982\u679C\u4E3A define()\u63D0\u4F9B\u4E86\u4E00\u4E2A\u4F9D\u8D56\u9879\u6570\u7EC4\uFF0C\u5219 requirejs \u5047\u5B9A\u8BE5\u6570\u7EC4\u4E2D\u5217\u51FA\u4E86\u6240\u6709\u4F9D\u8D56\u9879\uFF0C\u5E76\u4E14\u4E0D\u4F1A\u626B\u63CF\u5DE5\u5382\u51FD\u6570\u4E2D\u662F\u5426\u5B58\u5728\u5176\u4ED6\u4F9D\u8D56\u9879\u3002\u56E0\u6B64\uFF0C\u8981\u4E48\u4E0D\u4F20\u5165\u4F9D\u8D56\u9879\u6570\u7EC4\uFF0C\u8981\u4E48\u4F7F\u7528\u4F9D\u8D56\u9879\u6570\u7EC4\u5217\u51FA\u5176\u4E2D\u7684\u6240\u6709\u4F9D\u8D56\u9879\u3002</p><p>\u5982\u679C\u662F require()\u56DE\u8C03\u7684\u4E00\u90E8\u5206\uFF0C\u5219\u6240\u6709\u4F9D\u8D56\u9879\u90FD\u9700\u8981\u5728\u6570\u7EC4\u4E2D\u5217\u51FA\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> namedModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Be sure that require(&#39;name&#39;) only occurs inside a define() definition function or a require() callback function, never in the global space by its own.</p><p>In the RequreJS 1.0.x releases, there is a bug with having a space between the require and parens in WebKit browsers when using the simplified CommonJS wrapping (no dependency array):</p><p>\u786E\u4FDD require(&#39;name&#39;)\u4EC5\u51FA\u73B0\u5728 define()\u5B9A\u4E49\u51FD\u6570\u6216 require()\u56DE\u8C03\u51FD\u6570\u5185\u90E8\uFF0C\u800C\u4E0D\u4F1A\u51FA\u73B0\u5728\u5168\u5C40\u7A7A\u95F4\u4E2D\u3002</p><p>\u5728 RequreJS 1.0.x \u53D1\u884C\u7248\u4E2D\uFF0C\u4F7F\u7528\u7B80\u5316\u7684 CommonJS \u5305\u88C5(\u65E0\u4F9D\u8D56\u9879\u6570\u7EC4)\u65F6\uFF0CWebKit \u6D4F\u89C8\u5668\u4E2D\u7684 require \u548C parens \u4E4B\u95F4\u5B58\u5728\u7A7A\u683C\u5B58\u5728\u4E00\u4E2A\u9519\u8BEF\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//Notice the space between require and the arguments.</span>
	<span class="token keyword">var</span> namedModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The workaround is to just remove the space. This is fixed in the 2.0 code, and may be backported to the 1.0.x series if a 1.0.9 release is done.</p><p>\u89E3\u51B3\u65B9\u6CD5\u662F\u4EC5\u5220\u9664\u7A7A\u95F4\u3002\u8FD9\u5728 2.0 \u4EE3\u7801\u4E2D\u5DF2\u4FEE\u590D\uFF0C\u5982\u679C\u5B8C\u6210 1.0.9 \u7248\uFF0C\u5219\u53EF\u4EE5\u53CD\u5411\u79FB\u690D\u5230 1.0.x \u7CFB\u5217\u3002</p><h3 id="invalid-require-call" tabindex="-1"><a class="header-anchor" href="#invalid-require-call" aria-hidden="true">#</a> Invalid require call</h3><p>\u65E0\u6548\u7684\u8981\u6C42\u547C\u53EB</p><p>This occurs when there is a call like:</p><p>\u5F53\u6709\u7C7B\u4F3C\u8FD9\u6837\u7684\u547C\u53EB\u65F6\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dependency&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dependency</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Asynchronously loading dependencies should use an array to list the dependencies:</p><p>\u5F02\u6B65\u52A0\u8F7D\u4F9D\u8D56\u9879\u5E94\u4F7F\u7528\u6570\u7EC4\u5217\u51FA\u4F9D\u8D56\u9879\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;dependency&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dependency</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="no-define-call-for" tabindex="-1"><a class="header-anchor" href="#no-define-call-for" aria-hidden="true">#</a> No define call for ...</h3><p>\u6CA1\u6709\u5B9A\u4E49\u8981\u6C42...</p><p>This occurs when enforceDefine is set to true, and a script that is loaded either:</p><p>\u5F53 forcemDefine \u8BBE\u7F6E\u4E3A true\uFF0C\u5E76\u4E14\u52A0\u8F7D\u4E86\u4EE5\u4E0B\u4EFB\u4E00\u811A\u672C\u65F6\uFF0C\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\uFF1A</p><ul><li>Did not call define() to declare a module.</li><li>Or was part of a shim config that specified a string exports property that can be checked to verify loading, and that check failed.</li><li>Or was part of a shim config that did not set a string value for the exports config option.</li></ul><ul><li>\u6CA1\u6709\u8C03\u7528 define()\u6765\u58F0\u660E\u6A21\u5757\u3002</li><li>\u6216\u8005\u662F\u57AB\u7247\u914D\u7F6E\u7684\u4E00\u90E8\u5206\uFF0C\u57AB\u7247\u914D\u7F6E\u6307\u5B9A\u4E86 exports \u53EF\u4EE5\u68C0\u67E5\u4EE5\u9A8C\u8BC1\u52A0\u8F7D\u7684\u5B57\u7B26\u4E32\u5C5E\u6027\uFF0C\u4F46\u68C0\u67E5\u5931\u8D25\u3002</li><li>\u6216\u8005\u662F\u672A\u4E3A config \u9009\u9879\u8BBE\u7F6E\u5B57\u7B26\u4E32\u503C\u7684\u586B\u5145\u7A0B\u5E8F\u914D\u7F6E\u7684\u4E00\u90E8\u5206 exports\u3002</li></ul><p>Or, if the error shows up only in IE and not in other browsers (which may generate a Script error, the script probably:</p><p>\u6216\u8005\uFF0C\u5982\u679C\u9519\u8BEF\u4EC5\u5728 IE \u4E2D\u663E\u793A\uFF0C\u800C\u4E0D\u5728\u5176\u4ED6\u6D4F\u89C8\u5668\u4E2D\u663E\u793A(\u8FD9\u53EF\u80FD\u4F1A\u4EA7\u751F Script \u9519\u8BEF\uFF0C\u5219\u8BE5\u811A\u672C\u53EF\u80FD\u662F\uFF1A</p><ul><li>Threw a JavaScript syntax/evaluation error.</li><li>Or there was a 404 error in IE where the script failed to load.</li></ul><ul><li>\u5F15\u53D1 JavaScript \u8BED\u6CD5/\u8BC4\u4F30\u9519\u8BEF\u3002</li><li>\u6216 IE \u4E2D\u51FA\u73B0 404 \u9519\u8BEF\uFF0C\u811A\u672C\u65E0\u6CD5\u52A0\u8F7D\u3002</li></ul><p>Those IE behaviors result in IE&#39;s quirks in detecting script errors.</p><p>To fix it:</p><p>\u8981\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF1A</p><ul><li>If the module calls define(), make sure the define call was reached by debugging in a script debugger.</li><li>If part of a shim config, make sure the shim config&#39;s exports check is correct.</li><li>If in IE, check for an HTTP 404 error or a JavaScript sytnax error by using a script debugger.</li></ul><ul><li>\u5982\u679C\u6A21\u5757\u8C03\u7528 define()\uFF0C\u8BF7\u901A\u8FC7\u5728\u811A\u672C\u8C03\u8BD5\u5668\u4E2D\u8FDB\u884C\u8C03\u8BD5\u6765\u786E\u4FDD\u5DF2\u5230\u8FBE define \u8C03\u7528\u3002</li><li>\u5982\u679C\u662F\u5300\u573A\u914D\u7F6E\u7684\u4E00\u90E8\u5206\uFF0C\u8BF7\u786E\u4FDD\u5300\u573A\u914D\u7F6E\u7684\u5BFC\u51FA\u68C0\u67E5\u6B63\u786E\u65E0\u8BEF\u3002</li><li>\u5982\u679C\u5728 IE \u4E2D\uFF0C\u8BF7\u4F7F\u7528\u811A\u672C\u8C03\u8BD5\u5668\u68C0\u67E5 HTTP 404 \u9519\u8BEF\u6216 JavaScript sytnax \u9519\u8BEF\u3002</li></ul><h3 id="script-error" tabindex="-1"><a class="header-anchor" href="#script-error" aria-hidden="true">#</a> Script error</h3><p>\u811A\u672C\u9519\u8BEF</p><p>This occurs when the script.onerror function is triggered in a browser. This usually means there is a JavaScript syntax error or other execution problem running the script. To fix it, examine the script that generated the error in a script debugger.</p><p>This error may not show up in IE, just other browsers, and instead, in IE you may see the No define call for ... error when you see &quot;Script error&quot;. This is due to IE&#39;s quirks in detecting script errors.</p><p>\u5728\u6D4F\u89C8\u5668\u4E2D\u89E6\u53D1 script.onerror \u51FD\u6570\u65F6\uFF0C\u4F1A\u53D1\u751F\u8FD9\u79CD\u60C5\u51B5\u3002\u8FD9\u901A\u5E38\u610F\u5473\u7740\u8FD0\u884C\u811A\u672C\u5B58\u5728 JavaScript \u8BED\u6CD5\u9519\u8BEF\u6216\u5176\u4ED6\u6267\u884C\u95EE\u9898\u3002\u8981\u89E3\u51B3\u6B64\u95EE\u9898\uFF0C\u8BF7\u5728\u811A\u672C\u8C03\u8BD5\u5668\u4E2D\u68C0\u67E5\u751F\u6210\u9519\u8BEF\u7684\u811A\u672C\u3002</p><p>\u8BE5\u9519\u8BEF\u53EF\u80FD\u4E0D\u4F1A\u5728 IE \u4E2D\u663E\u793A\uFF0C\u800C\u53EA\u4F1A\u5728\u5176\u4ED6\u6D4F\u89C8\u5668\u4E2D\u663E\u793A\uFF0C\u76F8\u53CD\uFF0C\u5728 IE \u4E2D\uFF0C\u5F53\u60A8\u770B\u5230\u201C\u811A\u672C\u9519\u8BEF&quot;\u65F6\uFF0C\u53EF\u80FD\u4F1A\u770B\u5230 No define call for ...\u9519\u8BEF\u3002.</p><h3 id="no-matching-script-interactive-for" tabindex="-1"><a class="header-anchor" href="#no-matching-script-interactive-for" aria-hidden="true">#</a> No matching script interactive for</h3><p>\u6CA1\u6709\u5339\u914D\u7684\u811A\u672C\u4E92\u52A8\u5F0F\u7684...</p><p>This error only shows up in some IE browsers. Most likely caused by loading a script that calls define() but was loaded in a plain script tag or via some other call, like an eval() of a JavaScript string.</p><p>\u6B64\u9519\u8BEF\u4EC5\u5728\u67D0\u4E9B IE \u6D4F\u89C8\u5668\u4E2D\u663E\u793A\u3002\u6700\u6709\u53EF\u80FD\u662F\u7531\u4E8E\u52A0\u8F7D\u4E86\u8C03\u7528 define()\u4F46\u5DF2\u901A\u8FC7\u7EAF\u811A\u672C\u6807\u8BB0\u6216\u901A\u8FC7\u5176\u4ED6\u8C03\u7528(\u4F8B\u5982 JavaScript \u5B57\u7B26\u4E32\u7684 eval())\u52A0\u8F7D\u7684\u811A\u672C\u5F15\u8D77\u7684\u3002</p><p>To avoid the error, be sure to load all scripts that call define via the RequireJS API.</p><p>\u4E3A\u907F\u514D\u8BE5\u9519\u8BEF\uFF0C\u8BF7\u786E\u4FDD\u901A\u8FC7 RequireJS API \u52A0\u8F7D\u6240\u6709\u8C03\u7528 define \u7684\u811A\u672C\u3002</p><h3 id="path-is-not-supported" tabindex="-1"><a class="header-anchor" href="#path-is-not-supported" aria-hidden="true">#</a> Path is not supported: ...</h3><p>\u4E0D\u652F\u6301\u8DEF\u5F84\uFF1A...</p><p>This error occurs when the optimizer encounters a path to a module or script which is a network path. The optimizer only allows building with local resources. To fix it:</p><p>Make sure you reference the network dependency as a module name, not as a full URL, so that it can be mapped to a different during the build:</p><p>\u5F53\u4F18\u5316\u5668\u9047\u5230\u6A21\u5757\u6216\u811A\u672C\u7684\u8DEF\u5F84(\u5373\u7F51\u7EDC\u8DEF\u5F84)\u65F6\uFF0C\u4F1A\u53D1\u751F\u6B64\u9519\u8BEF\u3002\u4F18\u5316\u5668\u4EC5\u5141\u8BB8\u4F7F\u7528\u672C\u5730\u8D44\u6E90\u8FDB\u884C\u6784\u5EFA\u3002\u8981\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898\uFF1A</p><p>\u786E\u4FDD\u5C06\u7F51\u7EDC\u4F9D\u8D56\u9879\u4F5C\u4E3A\u6A21\u5757\u540D\u79F0\u800C\u4E0D\u662F\u5B8C\u6574\u7684 URL \u5F15\u7528\uFF0C\u4EE5\u4FBF\u5728\u6784\u5EFA\u8FC7\u7A0B\u4E2D\u53EF\u4EE5\u5C06\u5176\u6620\u5C04\u5230\u5176\u4ED6\u540D\u79F0\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//DO NOT DO THIS</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;http://some.domain.dom/path/to/dependency.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dependency</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//Rather, do this:</span>
require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">dependency</span><span class="token operator">:</span> <span class="token string">&#39;http://some.domain.dom/path/to/dependency&#39;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>require([&#39;dependency&#39;], function (dependency) {});</p><p>If you want to include this dependency in the built/optimized file, download the JS file and in the build profile for the optimizer, put in a paths config that points to that local file.</p><p>If you want to exclude that file from being included, and just need to map &quot;dependency&quot; for the build (otherwise it will not build), then use the special &quot;empty:&quot; paths config:</p><p>\u5982\u679C\u8981\u5728\u6784\u5EFA/\u4F18\u5316\u7684\u6587\u4EF6\u4E2D\u5305\u542B\u6B64\u4F9D\u8D56\u9879\uFF0C\u8BF7\u4E0B\u8F7D JS \u6587\u4EF6\uFF0C\u5E76\u5728\u4F18\u5316\u5668\u7684\u6784\u5EFA\u914D\u7F6E\u6587\u4EF6\u4E2D\uFF0C\u653E\u5165\u6307\u5411\u8BE5\u672C\u5730\u6587\u4EF6\u7684\u8DEF\u5F84\u914D\u7F6E\u3002</p><p>\u5982\u679C\u8981\u4ECE\u8BE5\u6587\u4EF6\u4E2D\u6392\u9664\u8BE5\u6587\u4EF6\uFF0C\u800C\u53EA\u9700\u8981\u4E3A\u6784\u5EFA\u6620\u5C04\u201C\u4F9D\u8D56\u5173\u7CFB&quot;(\u5426\u5219\u5B83\u5C06\u65E0\u6CD5\u6784\u5EFA)\uFF0C\u5219\u8BF7\u4F7F\u7528\u7279\u6B8A\u7684&quot;empty\uFF1A&quot;\u8DEF\u5F84\u914D\u7F6E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Inside the build profile</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;dependency&#39;</span><span class="token operator">:</span> <span class="token string">&#39;empty:&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="cannot-use-preservelicensecomments-and-generatesourcemaps-together\xA7-10" tabindex="-1"><a class="header-anchor" href="#cannot-use-preservelicensecomments-and-generatesourcemaps-together\xA7-10" aria-hidden="true">#</a> Cannot use preserveLicenseComments and generateSourceMaps together\xA7 10</h3><p>\u4E0D\u80FD\u7528 PRESERVELICENSECOMMENTS \u548C GENERATESOURCEMAPS \u4E00\u8D77</p><p>In the r.js optimizer, preserveLicenseComments works as a pre- and post-processing step on a JS file. Various kinds of license comments are found, pulled out of the JS source, then that modified source is passed to the minifier. When the minifier is done, the comments are added to the top of the file by the r.js optimizer.</p><p>However, for the minifier to accurately construct a source map, the minified source cannot be modified in any way, so preserveLicenseComments is incompatible with generateSourceMaps. generateSourceMaps was introduced in version 2.1.2 of the optimizer.</p><p>The default for the optimizer is for preserveLicenseComments to be true. So if using generateSourceMaps, then explicitly set preserveLicenseComments to false. If you want to preserve some license comments, you can manually modify the license comments in the JS source to use the JSDoc-style @license comment. See &quot;Annotating JavaScript for the Closure Compiler&quot; for more information. That same format works for UglifyJS2.</p><p>\u5728 r.js \u4F18\u5316\u5668\u4E2D\uFF0CpreserveLicenseComments \u5145\u5F53 JS \u6587\u4EF6\u7684\u9884\u5904\u7406\u548C\u540E\u5904\u7406\u6B65\u9AA4\u3002\u627E\u5230\u5404\u79CD\u8BB8\u53EF\u8BC1\u6CE8\u91CA\uFF0C\u5C06\u5176\u4ECE JS \u6E90\u4E2D\u62C9\u51FA\uFF0C\u7136\u540E\u5C06\u4FEE\u6539\u540E\u7684\u6E90\u4F20\u9012\u7ED9\u538B\u7F29\u7A0B\u5E8F\u3002\u5B8C\u6210\u538B\u7F29\u7A0B\u5E8F\u540E\uFF0Cr.js \u4F18\u5316\u5668\u4F1A\u5C06\u6CE8\u91CA\u6DFB\u52A0\u5230\u6587\u4EF6\u9876\u90E8\u3002</p><p>\u7136\u800C\uFF0C\u5BF9\u4E8E minifier \u51C6\u786E\u5730\u6784\u5EFA\u6E90\u6620\u5C04\uFF0C\u6E90\u7CBE\u7F29\u4E0D\u80FD\u4EE5\u4EFB\u4F55\u65B9\u5F0F\u4FEE\u6539\uFF0C\u6240\u4EE5 preserveLicenseComments \u4E0E\u4E0D\u76F8\u5BB9 generateSourceMaps\u3002\u5728\u4F18\u5316\u5668\u7684 2.1.2 \u7248\u672C\u4E2D\u5F15\u5165\u4E86 generateSourceMaps\u3002</p><p>\u4F18\u5316\u7A0B\u5E8F\u7684\u9ED8\u8BA4\u503C\u662F keepLicenseComments \u4E3A true\u3002\u56E0\u6B64\uFF0C\u5982\u679C\u4F7F\u7528 generateSourceMaps\uFF0C\u5219\u5C06\u663E\u5F0F\u5730\u5C06 preserveLicenseComments \u8BBE\u7F6E\u4E3A false\u3002\u5982\u679C\u8981\u4FDD\u7559\u4E00\u4E9B\u8BB8\u53EF\u8BC1\u6CE8\u91CA\uFF0C\u5219\u53EF\u4EE5\u5728 JS \u6E90\u4EE3\u7801\u4E2D\u624B\u52A8\u4FEE\u6539\u8BB8\u53EF\u8BC1\u6CE8\u91CA\u4EE5\u4F7F\u7528 JSDoc \u6837\u5F0F\u7684@license \u6CE8\u91CA\u3002</p><h3 id="importscripts-failed-for" tabindex="-1"><a class="header-anchor" href="#importscripts-failed-for" aria-hidden="true">#</a> importScripts failed for ...</h3><p>IMPORTSCRIPTS \u5931\u8D25...</p><p>When RequireJS is used in a Web Worker, importScripts is used to load modules. If that call failed for some reason, this error is generated.</p><p>\u5F53 RequireJS \u5728\u4F7F\u7528 Web \u5DE5\u4F5C\uFF0CimportScripts \u7528\u4E8E\u52A0\u8F7D\u6A21\u5757\u3002\u5982\u679C\u8BE5\u547C\u53EB\u7531\u4E8E\u67D0\u79CD\u539F\u56E0\u5931\u8D25\uFF0C\u5219\u4F1A\u751F\u6210\u6B64\u9519\u8BEF\u3002</p>`,121);function H(W,B){const a=o("ExternalLinkIcon");return p(),i(r,null,[u,n("p",null,[d,n("a",m,[h,e(a)]),k]),b,n("p",null,[n("a",f,[g,e(a)])]),y,q,v,n("p",null,[n("a",j,[w,e(a)])]),x,n("ul",null,[n("li",null,[S,n("a",J,[I,e(a)]),T]),n("li",null,[R,n("a",D,[N,e(a)]),M])]),C,n("p",null,[z,n("a",U,[A,e(a)]),O]),L,n("p",null,[E,n("a",P,[_,e(a)]),Q]),F],64)}var $=l(c,[["render",H]]);export{$ as default};
