import{_ as p,M as e,p as o,q as c,R as s,t as n,N as i,a1 as a}from"./framework-e8cb8151.js";const l={},u=a('<h1 id="_02-如何高效操作-dom-元素" tabindex="-1"><a class="header-anchor" href="#_02-如何高效操作-dom-元素" aria-hidden="true">#</a> 02-如何高效操作 DOM 元素？</h1><p>本课时我们主要介绍高效操作 DOM 元素相关的内容。</p><h3 id="什么是-dom" tabindex="-1"><a class="header-anchor" href="#什么是-dom" aria-hidden="true">#</a> 什么是 DOM</h3><p>DOM（Document Object Model，文档对象模型）是 JavaScript 操作 HTML 的接口（这里只讨论属于前端范畴的 HTML DOM），属于前端的入门知识，同样也是核心内容，因为大部分前端功能都需要借助 DOM 来实现，比如：</p><ul><li>动态渲染列表、表格表单数据；</li><li>监听点击、提交事件；</li><li>懒加载一些脚本或样式文件；</li><li>实现动态展开树组件，表单组件级联等这类复杂的操作。</li></ul>',5),r={href:"https://dom.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},k=a(`<ul><li>DOM 节点</li><li>DOM 事件</li><li>选择区域</li></ul><p><strong>选择区域</strong>的使用场景有限，一般用于富文本编辑类业务，我们不做深入讨论；<strong>DOM 事件</strong>有一定的关联性，将在下一课时中详细讨论；对于 <strong>DOM 节点</strong>，需与另外两个概念标签和元素进行区分：</p><ul><li>标签是 HTML 的基本单位，比如 p、div、input；</li><li>节点是 DOM 树的基本单位，有多种类型，比如注释节点、文本节点；</li><li>元素是节点中的一种，与 HTML 标签相对应，比如 p 标签会对应 p 元素。</li></ul><p>举例说明，在下面的代码中，“p” 是标签， 生成 DOM 树的时候会产生两个节点，一个是元素节点 p，另一个是字符串为“亚里士朱德”的文本节点。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>亚里士朱德<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="会框架更要会-dom" tabindex="-1"><a class="header-anchor" href="#会框架更要会-dom" aria-hidden="true">#</a> 会框架更要会 DOM</h3><p>有的前端工程师因为平常使用 Vue、React 这些框架比较多，觉得直接操作 DOM 的情况比较少，认为熟悉框架就行，不需要详细了解 DOM。这个观点对于初级工程师而言确实如此，能用框架写页面就算合格。</p><p>但对于屏幕前想成为高级/资深前端工程师的你而言，只会使用某个框架或者能答出 DOM 相关面试题，这些肯定是不够的。恰恰相反，作为高级/资深前端工程师，不仅应该对 DOM 有深入的理解，还应该能够借此开发框架插件、修改框架甚至能写出自己的框架。</p><p>因此，这一课时我们就深入了解 DOM，谈谈如何高效地操作 DOM。</p><h3 id="为什么说-dom-操作耗时" tabindex="-1"><a class="header-anchor" href="#为什么说-dom-操作耗时" aria-hidden="true">#</a> 为什么说 DOM 操作耗时</h3><p>要解释 DOM 操作带来的性能问题，我们不得不提一下<strong>浏览器的工作机制</strong>。</p><h4 id="线程切换" tabindex="-1"><a class="header-anchor" href="#线程切换" aria-hidden="true">#</a> 线程切换</h4><p>如果你对浏览器结构有一定了解，就会知道浏览器包含渲染引擎（也称浏览器内核）和 JavaScript 引擎，它们都是单线程运行。单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。</p><p>浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称<strong>上下文切换</strong>。而这个操作相对而言是比较耗时的。</p><p>每次 DOM 操作就会引发线程的上下文切换——从 JavaScript 引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行，这就带来了<strong>性能损耗</strong>。单次切换消耗的时间是非常少的，但是如果频繁地大量切换，那么就会产生性能问题。</p><p>比如下面的测试代码，循环读取一百万次 DOM 中的 body 元素的耗时是读取 JSON 对象耗时的 10 倍。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 测试次数：一百万次</span>
<span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">1000000</span>
<span class="token comment">// 缓存body元素</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body
<span class="token comment">// 循环赋值对象作为对照参考</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> body
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token comment">// object: 1.77197265625ms</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;dom&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 循环读取body元素引发线程切换</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp <span class="token operator">=</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;dom&#39;</span><span class="token punctuation">)</span> <span class="token comment">// dom: 18.302001953125ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。</p><h4 id="重新渲染" tabindex="-1"><a class="header-anchor" href="#重新渲染" aria-hidden="true">#</a> 重新渲染</h4><p>另一个更加耗时的因素是元素及样式变化引起的再次渲染，在渲染过程中最耗时的两个步骤为<strong>重排</strong>（Reflow）与<strong>重绘</strong>（Repaint）。</p><p>浏览器在渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和 CSSOM 树，然后合并进行排布，再绘制成我们可见的页面。如果在操作 DOM 时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成 CSSOM 树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。</p><p>可能会影响到其他元素排布的操作就会引起重排，继而引发重绘，比如：</p><ul><li>修改元素边距、大小</li><li>添加、删除元素</li><li>改变窗口大小</li></ul><p>与之相反的操作则只会引起重绘，比如：</p><ul><li>设置背景图片</li><li>修改字体颜色</li><li>改变 visibility 属性值</li></ul><p>如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：https://csstriggers.com/。</p><p>下面是两段验证代码，我们通过 Chrome 提供的性能分析工具来对渲染耗时进行分析。</p><p>第一段代码，通过修改 div 元素的边距来触发重排，渲染耗时（粗略地认为渲染耗时为紫色 Rendering 事件和绿色 Painting 事件耗时之和）3045 毫秒。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">100000</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html
<span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>divs<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">div<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;10px&#39;</span> <span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/09/03/CgqCHl67pcyAWvv3AAApkJ2_V24631.png" alt="image.png"></p><p>第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时 2359 ms。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">100000</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html
<span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>divs<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">div<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;green&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pdqAS3FFAAAmGZWHWDs688.png" alt="image (1).png"></p><p>从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的 Painting 事件耗时接近，也印证了重排会导致重绘。</p><h3 id="如何高效操作-dom" tabindex="-1"><a class="header-anchor" href="#如何高效操作-dom" aria-hidden="true">#</a> 如何高效操作 DOM</h3><p>明白了 DOM 操作耗时之处后，要提升性能就变得很简单了，反其道而行之，减少这些操作即可。</p><h4 id="在循环外操作元素" tabindex="-1"><a class="header-anchor" href="#在循环外操作元素" aria-hidden="true">#</a> 在循环外操作元素</h4><p>比如下面两段测试代码对比了读取 1000 次 JSON 对象以及访问 1000 次 body 元素的耗时差异，相差一个数量级。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">10000</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;switch&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;switch&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1.873046875ms</span>
<span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;batch&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  body <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;batch&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0.846923828125ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然即使在循环外也要尽量减少操作元素，因为不知道他人调用你的代码时是否处于循环中。</p><h4 id="批量操作元素" tabindex="-1"><a class="header-anchor" href="#批量操作元素" aria-hidden="true">#</a> 批量操作元素</h4><p>比如说要创建 1 万个 div 元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将 1 万个 div 元素的 html 字符串拼接成一个完整字符串，然后赋值给 body 元素的 innerHTML 属性就可以明显减少耗时。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">10000</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;createElement&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;createElement&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 54.964111328125ms</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;innerHTML&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  html <span class="token operator">+=</span> <span class="token string">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html <span class="token comment">// 31.919921875ms</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;innerHTML&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然通过修改 innerHTML 来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。</p><p>创建 2 万个 div 元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过 style 属性对第 1 个 div 元素进行 2 万次样式调整。下面是直接操作 style 属性的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">20000</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;green&#39;</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/09/04/CgqCHl67pemAQjkLAAAk8lHks5c377.png" alt="image (2).png"></p><p>如果将需要修改的样式属性放入 JavaScript 数组，然后对这些修改进行 reduce 操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> times <span class="token operator">=</span> <span class="token number">20000</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html

<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//  创建缓存样式的数组</span>
<span class="token keyword">let</span> microTask <span class="token comment">// 执行修改样式的微任务</span>
<span class="token keyword">const</span> <span class="token function-variable function">st</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 合并样式</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token operator">...</span>cur <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> style<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  microTask <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">setStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">style</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>
  <span class="token comment">// 创建微任务</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>microTask<span class="token punctuation">)</span> microTask <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token function">setStyle</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下面的耗时占比图可以看到，紫色 Rendering 事件耗时有所减少。</p><p><img src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67piqAR40eAAAkNcoz7jY032.png" alt="image (3).png"></p><p>virtualDOM 之所以号称高性能，其实现原理就与此类似。</p><h4 id="缓存元素集合" tabindex="-1"><a class="header-anchor" href="#缓存元素集合" aria-hidden="true">#</a> 缓存元素集合</h4><p>比如将通过选择器函数获取到的 DOM 元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。</p><p>下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div 元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素，代码以及时间消耗如下所示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">div</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjKAIKXfAAAlxYMHz74357.png" alt="image (4).png"></p><p>如果能够将元素集合赋值给 JavaScript 变量，每次通过变量去修改元素，那么性能将会得到不小的提升。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> divs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  divs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjmAKJrEAAAjr0DG628141.png" alt="image (5).png"></p><p>对比两者耗时占比图可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的 Scripting 耗时上具有明显优势。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>本课时从深入理解 DOM 的必要性说起，然后分析了 DOM 操作耗时的原因，最后再针对这些原因提出了可行的解决方法。</p><p>除了这些方法之外，还有一些原则也可能帮助我们提升渲染性能，比如：</p><ul><li>尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成 CSSOM 树的时间；</li><li>尽量减少重排和重绘影响的区域；</li><li>使用 CSS3 特性来实现动画效果。</li></ul><p>希望你首先能理解原因，然后记住这些方法和原则，编写出高性能代码。</p><p>最后布置一道思考题：说一说你还知道哪些提升渲染速度的方法和原则？</p><hr><h3 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h3><h5 id="_7761" tabindex="-1"><a class="header-anchor" href="#_7761" aria-hidden="true">#</a> **7761：</h5><blockquote><p>利用绝对定位 脱离文档流，这样操作定位里面的内容不会引起外部的重排</p></blockquote><h5 id="_3336" tabindex="-1"><a class="header-anchor" href="#_3336" aria-hidden="true">#</a> **3336：</h5><blockquote><p>有动画的话，也可以考虑分层渲染的机制。加上 will-change</p></blockquote><h5 id="云" tabindex="-1"><a class="header-anchor" href="#云" aria-hidden="true">#</a> **云：</h5><blockquote><p>dom 的操作进行 json 数据化，只操作一个根节点即可</p></blockquote><h5 id="_4550" tabindex="-1"><a class="header-anchor" href="#_4550" aria-hidden="true">#</a> **4550：</h5><blockquote><p>rendering 的俩个图对比：3000ms-2300ms，相差 700ms，怎么就看出了重排“明显”耗性能？有个 idle 耗了 2000ms</p></blockquote><h6 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a>     讲师回复：</h6><blockquote><p>    通过查看 rendering 事件比较，idle 不属于渲染过程~</p></blockquote><h5 id="明" tabindex="-1"><a class="header-anchor" href="#明" aria-hidden="true">#</a> *明：</h5><blockquote><p>现在我才知道性能优化怎么重要，好好跟着老师学习，然后练习，应用，实践。</p></blockquote><h5 id="_6943" tabindex="-1"><a class="header-anchor" href="#_6943" aria-hidden="true">#</a> **6943：</h5><blockquote><p>牛逼，以实践的方式带我体会了一下影响性能的地方及解决方案，感谢老师</p></blockquote><h5 id="龙" tabindex="-1"><a class="header-anchor" href="#龙" aria-hidden="true">#</a> **龙：</h5><blockquote><p>学习到了，赞 👍</p></blockquote><h5 id="琴" tabindex="-1"><a class="header-anchor" href="#琴" aria-hidden="true">#</a> *琴：</h5><blockquote><p>牛啤！还得深入理解下重排和重绘</p></blockquote><h5 id="用户-1028" tabindex="-1"><a class="header-anchor" href="#用户-1028" aria-hidden="true">#</a> **用户 1028：</h5><blockquote><p>最后一个缓存元素集合的例子 const divsLen = divs.length; for(let i = 0; i &lt; divsLen; i++) { ... }</p></blockquote><h6 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a>     讲师回复：</h6><blockquote><p>    你好，不知写的代码是什么意思呢？想验证另外一种思路？还是？</p></blockquote><h5 id="源" tabindex="-1"><a class="header-anchor" href="#源" aria-hidden="true">#</a> **源：</h5><blockquote><p>可以开启子线程处理复杂计算，计算结束通知主线程操作 dom</p></blockquote><h5 id="jiaxin" tabindex="-1"><a class="header-anchor" href="#jiaxin" aria-hidden="true">#</a> Jiaxin：</h5><blockquote><p>知识点很有用，这些平时不会细想，想要提升自己的能力还是很有必要了解的，赞 👍</p></blockquote><h5 id="煌" tabindex="-1"><a class="header-anchor" href="#煌" aria-hidden="true">#</a> **煌：</h5><blockquote><p>不错，打卡！</p></blockquote><h5 id="阳" tabindex="-1"><a class="header-anchor" href="#阳" aria-hidden="true">#</a> **阳：</h5><blockquote><p>很多知识点是平时开发没注意到的，很有用！</p></blockquote><h5 id="辉" tabindex="-1"><a class="header-anchor" href="#辉" aria-hidden="true">#</a> **辉：</h5><blockquote><p>楼顶 😄</p></blockquote>`,101);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("如果你查看过 "),s("a",r,[n("DOM V3 标准"),i(t)]),n("，会发现包含多个内容，但归纳起来常用的主要由 3 个部分组成：")]),k])}const h=p(l,[["render",d],["__file","index-02.html.vue"]]);export{h as default};
