import{_ as n,p as a,q as s,a1 as e}from"./framework-e8cb8151.js";const t={},p=e(`<h1 id="你不知道的-javascript" tabindex="-1"><a class="header-anchor" href="#你不知道的-javascript" aria-hidden="true">#</a> 你不知道的 JavaScript</h1><h2 id="_1、作用域和闭包" tabindex="-1"><a class="header-anchor" href="#_1、作用域和闭包" aria-hidden="true">#</a> 1、作用域和闭包</h2><h2 id="_2、this-和对象原型" tabindex="-1"><a class="header-anchor" href="#_2、this-和对象原型" aria-hidden="true">#</a> 2、this 和对象原型</h2><h3 id="_1-关于-this" tabindex="-1"><a class="header-anchor" href="#_1-关于-this" aria-hidden="true">#</a> 1. 关于 this</h3><h3 id="_2-this-全面解析" tabindex="-1"><a class="header-anchor" href="#_2-this-全面解析" aria-hidden="true">#</a> 2. this 全面解析</h3><h3 id="_3-对象" tabindex="-1"><a class="header-anchor" href="#_3-对象" aria-hidden="true">#</a> 3. 对象</h3><ol><li><p><code>in</code> 操作符会检查属性是否在对象及其<code>[[prototype]]原型链</code>中(参见第 5 章节)。相比之下，<code>hasOwnProperty(...)</code>只会检查属性是否在 <code>myObject</code>对象中，不会检查 <code>[[prototype]] 链</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
  myObject<span class="token punctuation">,</span>
  <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 让 a 像普通属性一样可以枚举</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
  myObject<span class="token punctuation">,</span>
  <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 让 b 不可枚举</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span> <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token comment">// .......</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> myObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> myObject<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// &quot;a&quot; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，<em>myObject.b</em> 确实存在并且有访问值，但是却不会出现在 <em>for...in</em> 循环中（尽管可以通过 in 操作符来判断是否存在）。原因是 <strong>可枚举</strong> 就相当于 <strong>可以出现在对象属性的遍历中</strong></p></blockquote></li><li></li></ol><h3 id="_4-类" tabindex="-1"><a class="header-anchor" href="#_4-类" aria-hidden="true">#</a> 4. 类</h3><h3 id="_5-原型" tabindex="-1"><a class="header-anchor" href="#_5-原型" aria-hidden="true">#</a> 5. 原型</h3>`,9),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(t,[["render",c],["__file","你不知道的JavaScript.html.vue"]]);export{u as default};
