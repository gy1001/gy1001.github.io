import{_ as n,p as s,q as a,a1 as p}from"./framework-e8cb8151.js";const e={},t=p(`<h1 id="_22-函数式编程" tabindex="-1"><a class="header-anchor" href="#_22-函数式编程" aria-hidden="true">#</a> 22-函数式编程</h1><p>在之前的文章中，我们学习了许多关于函数本质的知识，那么我们接下来，就应该思考函数的应用问题： 在实际开发中，我们需要用函数来做些什么？ 我们可以使用函数这些特性来玩一些什么高级的东西？ 我们要如何使用函数才能让我们的代码更加清晰直观？</p><p><strong>函数式编程</strong>，就是我们接下来要思考的函数应用问题。</p><h2 id="_01-封装" tabindex="-1"><a class="header-anchor" href="#_01-封装" aria-hidden="true">#</a> 01-封装</h2><p>封装是一个非常重要的概念。这个概念在我们的代码中随处可见。</p><p>对于函数来说，封装是将一堆代码放在函数中，当我们想要执行这一堆代码的时候，不用重复编写，而只需要调用一下这个函数，就能够做到同样的事情。</p><p>因此，将一堆代码封装成为一个函数，会极大的降低我们的代码量。</p><p>例如一个简单的例子，我们要计算两个数字的平均值，那么我们会如下计算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">const</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token keyword">const</span> average <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将其封装成为一个函数之后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 封装</span>
<span class="token keyword">function</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
  <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token number">2</span>
<span class="token punctuation">}</span>


<span class="token comment">// 使用</span>
<span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果只是代码的堆砌，封装没有任何难度。而真正需要我们深入思考的核心重点，还在于，要明白，<strong>封装，其实是对公共逻辑的提炼。</strong></p><p>例如，我们要计算一个数组中，所有子项的和。</p><p>如果我们仅仅只是计算一个简单数组的子项之和时，会直接将子项加起来就可以了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果数组的子项数量很多呢？这样的方式就变得非常不合适，因此当我们想要针对所有的数组，来实现计算子项之和时，就必须要提炼出来公共的逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 封装</span>
<span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们在使用函数时，没有去总结过封装的提炼思维，那么你的函数可能会非常糟糕，甚至自缚手脚，出现一些无法预知的 bug。</p><h2 id="_02-函数式编程" tabindex="-1"><a class="header-anchor" href="#_02-函数式编程" aria-hidden="true">#</a> 02-函数式编程</h2><p>函数式编程是一种编程范式，是一个非常好用的封装思维。</p><p>现在已知有一个数组，需求是找出数组中的所有数字，并将这些数组放在一个新的数组里。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不考虑封装的问题，很容易实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果封装只是代码的堆砌，也能够做到</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> newArr
<span class="token punctuation">}</span>

<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，这并不是很好的方式，这样的方式仅仅只能满足单个数组这样的需求，那如果我们还需要从其他数组中也找出来所有的数字项呢？又只能重新写。</p><p>因此，我们要从多个需求场景中，将共同的逻辑提炼出来封装一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将目标数组作为参数传入到函数中</span>
<span class="token keyword">function</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> newArr
<span class="token punctuation">}</span>


<span class="token comment">// 使用时</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> numArr <span class="token operator">=</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// 无论有多少个数组，都能够做到同样的需求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装好之后，我们在使用时，只需要关心该函数有什么功能，需要什么参数，而不需要过多的关心函数的内部实现，就能够顺利的将函数运用起来。从整个项目来说，这样的代码会简洁许多，维护起来也会更加简单。</p><p>当然，对于这些简单的案例，许多同学在做封装时，自然的就使用了这样的策略，但是因为没有提炼的意识，在遇到复杂场景时，就容易写出低质量的函数。这里需要我们结合更多的实践，持续的强化我们的提炼思维。</p><p>在现实中这种思维也非常常见。</p><p>我们点外卖，只需要在 app 中下单，然后等待外卖小哥把外卖送到我们手里就行。我们不用关注我们点的餐是如何做出来的，也不用关注外卖小哥是如何送过来的，这种更加关心结果的思维方式，便是函数式编程的运用。</p><p>OK，通过一些简单的案例了解了函数式编程之后，下一章我们将会更加详细的解读函数式编程思维。</p>`,34),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","index-22.html.vue"]]);export{r as default};
