import{_ as e,p as a,q as s,a1 as n}from"./framework-e8cb8151.js";const d="/assets/5f3f2ebb0001e57006400391-33a93979.jpg",o="/assets/5f3f2f2e0001ac5122761546-8967ae46.png",i={},c=n('<h1 id="_16-镜像构建指南dockerfile" tabindex="-1"><a class="header-anchor" href="#_16-镜像构建指南dockerfile" aria-hidden="true">#</a> 16-镜像构建指南Dockerfile</h1><p><img src="'+d+`" alt="img"></p><blockquote><p>合理安排时间，就等于节约时间。——培根</p></blockquote><p>我们在前面的文章中也介绍过构建镜像的话需要编写一个 Dockerfile 文件，我们可以类比 C++ 项目中的 makefile，不过要比 makefile 简单很多。这一章节我们就来看看 Dockerfile 应该如何去写。</p><h2 id="_1-dockerfile-的使用" tabindex="-1"><a class="header-anchor" href="#_1-dockerfile-的使用" aria-hidden="true">#</a> 1. Dockerfile 的使用</h2><p>在正式介绍 Dockerfile 的语法之前，我们先来看一下如何使用 Dockerfile。Dockerfile 要联合 <code>docker build</code> 命令进行使用，我们可以通过 -f 参数指定 Dockerfile 的路径（这个路径不光是本地路径，甚至可以是一个可以访问的 URL），如果没有指定则在 PATH 目录（PATH 目录为 <code>docker build</code> 的最后一个参数，当然我们一般使用 PATH 都是当前目录，可以用 “.” 来表示）下寻找名字叫 “Dockerfile” 的文件，也就是下面两种方式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> /path/to/dockerfile <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这样 build 出来的镜像是没有名字和 tag 的，下面是一个简单 Dockerfile。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> busybox:latest</span>

<span class="token instruction"><span class="token keyword">COPY</span> 1 /tmp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过上面这种方式 <code>docker build .</code> 的方式 build 完之后，通过 <code>docker images</code> 查看 build 出来的镜像会发现 REPOSITORY 和 TAG 都是 <code>&lt;none&gt;</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
<span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>              d9420474dd92        <span class="token number">7</span> minutes ago       <span class="token number">1</span>.22MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面说到的这种情况，我们可以通过 <code>-t</code> 参数指定生成的镜像的名字和 tag。比如 <code>-t hello:v1</code>，我们执行一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker dockerfile<span class="token punctuation">]</span><span class="token comment"># docker build -t hello:v1 .</span>
Sending build context to Docker daemon   <span class="token number">2</span>.56kB
Step <span class="token number">1</span>/2 <span class="token builtin class-name">:</span> FROM busybox:latest
 ---<span class="token operator">&gt;</span> 6d5fcfe5ff17
Step <span class="token number">2</span>/2 <span class="token builtin class-name">:</span> COPY <span class="token number">1</span> /tmp
 ---<span class="token operator">&gt;</span> Using cache
 ---<span class="token operator">&gt;</span> d9420474dd92
Successfully built d9420474dd92
Successfully tagged hello:v1
<span class="token punctuation">[</span>root@docker dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               v1                  d9420474dd92        <span class="token number">9</span> minutes ago       <span class="token number">1</span>.22MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然如果你想了解 <code>docker build</code> 可以支持的所有参数，可以通过 <code>docker build --help</code> 查看，这里就不赘述了。</p><p><img src="`+o+`" alt="图片描述"></p><h2 id="_2-dockerfile-的语法" tabindex="-1"><a class="header-anchor" href="#_2-dockerfile-的语法" aria-hidden="true">#</a> 2. Dockerfile 的语法</h2><p>下面我们来进入正题，也就是 Dockerfile 支持的语法有哪些。如果你的机器上安装了 Docker，可以通过 <code>man dockerfile</code> 来查看，如果没有安装也没有关系，这篇文章会详细解释。Dockerfile 的文件格式一般都是以一个关键字开头，比如上面例子中的 <code>FROM</code> 和 <code>COPY</code>，其中 <code>FROM</code> 表示引用的基础镜像，<code>COPY</code> 表示拷贝一个文件到镜像中。Dockerfile 支持的常用关键字主要有如下几种：</p><ul><li>FROM : 指定引用的基础镜像；</li><li>MAINTAINER : 指定该 Dockerfile 的维护者信息，这个在公司内部的时候比较有用，我们可以将公司内部的邮箱或者工号写上；</li><li>LABEL : 用来指定镜像的一些元信息；</li><li>RUN : 运行该关键字之后紧跟着的命令，比如 <code>RUN cp 1 /tmp</code>；</li><li>COPY : 文件或者文件夹拷贝；</li><li>ADD : 该命令也是文件拷贝，后面我们会详细比较它和 COPY 的区别；</li><li>EXPOSE：设置容器的监听端口；</li><li>WORKDIR: 指定工作目录；</li><li>ENV: 指定环境变量；</li><li>VOLUME：指定磁盘挂载点；</li><li>USER: 指定命令的执行用户；</li><li>CMD: 指定该镜像的默认启动命令，CMD 只需要指定一个即可，形如 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 。如果指定了多个 CMD，只有最后一个会生效；</li><li>ENTRYPOINT：容器的默认启动入口。比如我们使用 <code>docker run</code> 启动容器时，容器的默认启动入口就是镜像中通过该指令指定的命令或者脚本，我们可以在外面使用参数将其覆盖掉；</li><li>ARG：在 build 的时候指定参数；</li><li>注释：注释以 <code>#</code> 开始。</li></ul><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> FROM</h3><p><code>FROM</code> 很简单，需要注意的是 <code>FROM</code> 必须是 Dockerfile 的第一条有效命令，所谓有效是指非注释命令。<code>FROM</code> 后面跟随的 docker 镜像可以有多种格式，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM image
FROM image:tag
FROM image@digest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果没有指定 tag 或者 digest，则表示把该镜像的 latest 版本作为基础镜像</strong>。当然在生产环境下，<strong>latest 版本永远不应该作为基础镜像</strong>，因为如果将 latest 版本作为基础镜像就意味着镜像会一直变化。</p><h3 id="maintainer" tabindex="-1"><a class="header-anchor" href="#maintainer" aria-hidden="true">#</a> MAINTAINER</h3><p>类似如下格式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>MAINTAINER <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token punctuation">(</span>xxx@imooc.com<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是现在官方文档上面已经将 <code>MAINTAINER</code> 标注为 <em><strong>deprecated</strong></em> 了，一般是通过 <code>LABEL</code> 来指定维护者信息，比较维护者也可以算是镜像的原信息。</p><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> LABEL</h3><p>正如上面说说，<code>LABEL</code> 用来添加镜像的 metadata，格式也比较简单，如下，也就是说这里的 metadata 都是 key value 对。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LABEL <span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然你也可以将 metadata 中的 key-value 拆成每行一个，都以 LABEL 开头。一旦 Dockerfile 中增加了 <code>LABEL</code> 信息，build 出来的镜像则可以通过 <code>docker inspect</code> 命令进行查看。下面就是我们通过 <code>docker inspect</code> 查看到的 nginx 镜像的 label 信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker dockerfile<span class="token punctuation">]</span><span class="token comment"># docker inspect nginx</span>
<span class="token punctuation">..</span>.
<span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
 <span class="token string">&quot;maintainer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span>
<span class="token punctuation">}</span>,
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> RUN</h3><p><code>RUN</code> 命令表示运行后面紧跟的命令，有如下两种形式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RUN <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>
RUN <span class="token punctuation">[</span><span class="token string">&quot;executable&quot;</span>, <span class="token string">&quot;param1&quot;</span>, <span class="token string">&quot;params&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令应该是 Dockerfile 中最常用的命令了，比如我们要在镜像中通过 yum 安装 redis，那么我们可以通过如下方式编写我们的 Dockerfile。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> yum install redis</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;yum&quot;</span>, <span class="token string">&quot;install&quot;</span>, <span class="token string">&quot;redis&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>RUN</code> 还有一点需要注意的是 Dockerfile 中的每一个 RUN 命令都会生成一个新的镜像层，这个我们再讨论。</p><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h3><p><code>COPY</code> 用来拷贝文件或者文件夹。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> hom* /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> ADD</h3><p>类似 <code>COPY</code>，可以认为是增强版的 <code>COPY</code>。区别主要体现在两个地方：</p><ul><li>当 <code>ADD</code> 后面跟压缩文件时，拷贝的时候会将压缩文件进行解压。</li><li><code>ADD</code> 可以用来下载网上的文件</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ADD</span> html.tar.gz /var/www/html</span>
<span class="token instruction"><span class="token keyword">ADD</span> https://xxx.com/html.tar.gz /var/www/html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h3><p>表明 Docker 应用内部监听的端口，可以指定端口的协议是 TCP 还是 UDP，没有指定认为是 TCP。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>EXPOSE <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>protocal<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如我们要暴露 80 端口。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器内部监听了端口，那么我们启动容器的时候一般都会通过 <code>-p</code> 参数将该端口暴露出去。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir" aria-hidden="true">#</a> WORKDIR</h3><p>指定工作目录。一旦指定，则后面的命令（比如 <code>RUN</code>）的工作目录都是 <code>WORKDIR</code> 指定的目录，也就是说命令 <code>pwd</code> 的输出就是 <code>WORKDIR</code></p><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> ENV</h3><p>用来指定环境变量，格式如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span>
<span class="token instruction"><span class="token keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其意义类似我们在 Linux 中使用的 export 导入环境变量。</p><h3 id="volume" tabindex="-1"><a class="header-anchor" href="#volume" aria-hidden="true">#</a> VOLUME</h3><p><code>VOLUME</code> 会为镜像生成一个新的挂载点。但是我们也可以不使用 <code>VOLUME</code>，而是在 <code>docker run</code> 的时候通过 <code>-v</code> 参数指定。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">VOLUME</span> [<span class="token string">&quot;/data&quot;</span>]</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> /data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> USER</h3><p><code>USER</code> 对应的需求是：有的时候，不同命令需要通过不同的用户或者用户组来执行，那么我们在 dockerfile 中就可以通过 <code>USER</code> 来设置接下来的命令 （比如 <code>RUN</code>）的执行用户。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">USER</span> &lt;user&gt;[:&lt;group&gt;] or</span>
<span class="token instruction"><span class="token keyword">USER</span> &lt;UID&gt;[:&lt;GID&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p><code>CMD</code> 用来为镜像指定一个默认的启动命令，所谓默认是说我们可以通过 <code>docker run</code> 命令行参数通过其他的命令来覆盖 <code>CMD</code>。<code>CMD</code> 支持的格式如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;executable&quot;</span>,<span class="token string">&quot;param1&quot;</span>,<span class="token string">&quot;param2&quot;</span>] </span>
<span class="token instruction"><span class="token keyword">CMD</span> command param1 param2 </span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;param1&quot;</span>,<span class="token string">&quot;param2&quot;</span>] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第三种方式，会将 param1 和 param2 作为参数传递给 ENTRYPOINT。我们可以通过如下的方式通过 <code>docker run</code> 指定 docker 的启动命令为 <code>/bin/bash</code> 覆盖 <code>CMD</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token operator">&lt;</span>params<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>image<span class="token operator">&gt;</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint" aria-hidden="true">#</a> ENTRYPOINT</h3><p><code>ENTRYPOINT</code> 类似 <code>CMD</code>，也是指定镜像的默认启动命令，但是不能像上面那样 <code>docker run</code> 的方式来覆盖。那么问题来了，如果我想通过其他的启动程序来验证我的镜像，我怎么做呢？举个例子，<code>ENTRYPOINT</code> 指定的是应用程序启动，但是我们启动的过程中一直启动不了，所以我想通过 <code>/bin/bash</code> 想把 docker 启动起来，然后再检测依赖环境，那么怎么做呢？</p><p>答案是通过 --entrypoint 参数来覆盖。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--entrypoint</span> /bin/bash <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="arg" tabindex="-1"><a class="header-anchor" href="#arg" aria-hidden="true">#</a> ARG</h3><p><code>ARG</code> 用来在 <code>docker build</code> 的时候传参，比如如下的 dockerfile 我们就可以在 build 的时候指定 user。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> user</span>
<span class="token instruction"><span class="token keyword">USER</span> <span class="token variable">$user</span></span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建的时候指定参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build --build-arg <span class="token assign-left variable">user</span><span class="token operator">=</span>root <span class="token parameter variable">-t</span> myDocker:v1 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>本文介绍了 dockerfile 的语法和常用命令，基本通过这些常用命令足够我们去构建我们的日常开发中需要的大部分镜像了。但是还是希望大家可以多实践，毕竟实践才能出真知。</p>`,83),l=[c];function r(t,p){return a(),s("div",null,l)}const k=e(i,[["render",r],["__file","index-16.html.vue"]]);export{k as default};
