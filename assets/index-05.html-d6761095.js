import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t="/assets/单例模式-6f8f8a50.png",p={},o=e(`<h1 id="_05-单例模式-全局只允许有一个实例-多则出错-用-ts-语法实现更优雅" tabindex="-1"><a class="header-anchor" href="#_05-单例模式-全局只允许有一个实例-多则出错-用-ts-语法实现更优雅" aria-hidden="true">#</a> 05-单例模式 - 全局只允许有一个实例，多则出错（用 TS 语法实现更优雅）</h1><blockquote><p>单例模式是前端常用设计模式之一，而且单例模式的设计思想到处都能体现，如 Vuex 全局唯一的 store 。本章将详细讲解单例模式，从概念背景，到代码示例和 UML 类图，最后到它的具体使用场景。</p></blockquote><h2 id="_01-主要内容" tabindex="-1"><a class="header-anchor" href="#_01-主要内容" aria-hidden="true">#</a> 01: 主要内容</h2><ul><li>概念介绍 + 解决的问题</li><li>UML 类图和代码演示</li><li>应用场景</li></ul><h3 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法" aria-hidden="true">#</a> 学习方法</h3><ul><li>UML 类图和代码结合理解</li><li>要结合使用场景</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>前端用到严格的单例<strong>模式</strong>并不多，但单例模式的<strong>思想</strong>到处都有</li></ul><h2 id="_02-介绍" tabindex="-1"><a class="header-anchor" href="#_02-介绍" aria-hidden="true">#</a> 02: 介绍</h2><p>单例模式，即对一个 class 只能创建一个实例，即便调用多次。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>如一个系统的登录框、遮罩层，可能会被很多地方调用，但登录框只初始化一次即可，以后的直接复用。</p><p>再例如，想 Vuex Redux 这些全局数据存储，全局只能有一个实例，如果有多个，会出错的。</p><h3 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码" aria-hidden="true">#</a> 伪代码</h3><p>登录框，初始化多次没必要。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">LoginModal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// modal1 和 modal2 功能一样，没必要初始化两次</span>
<span class="token keyword">const</span> modal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> modal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局存储，初始化多个实例，会出错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token comment">/* get set ... */</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

<span class="token keyword">const</span> store2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 获取不到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-演示" tabindex="-1"><a class="header-anchor" href="#_03-演示" aria-hidden="true">#</a> 03: 演示</h2><p><img src="`+t+`" alt=""></p><h3 id="使用-ts-特性" tabindex="-1"><a class="header-anchor" href="#使用-ts-特性" aria-hidden="true">#</a> 使用 TS 特性</h3><ul><li><code>static</code> 静态属性和方法 —— <strong>详细介绍一下，对比“静态 xx”和“实例 xx”</strong></li><li><code>private</code> 外部无法直接初始化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token comment">// private - 外部无法初始化</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

  <span class="token comment">// static 属性</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token literal-property property">instance</span><span class="token operator">:</span> Singleton <span class="token operator">|</span> <span class="token keyword">null</span>

  <span class="token comment">// static 方法</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Singleton <span class="token punctuation">{</span>
    <span class="token comment">// 这里也可以写 \`this.instance\` ，注意和实例方法中 this 的区别！！！</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Singleton<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// const s1 = new Singleton() // 直接初始化会报错</span>
<span class="token comment">// Singleton.instance // 直接访问 instance 也会报错</span>

<span class="token comment">// 创建实例</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不使用-ts-特性" tabindex="-1"><a class="header-anchor" href="#不使用-ts-特性" aria-hidden="true">#</a> 不使用 TS 特性</h3><h4 id="最常见的方式-使用闭包" tabindex="-1"><a class="header-anchor" href="#最常见的方式-使用闭包" aria-hidden="true">#</a> 最常见的方式，使用闭包</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genGetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> instance <span class="token comment">// 闭包</span>

  <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> getInstance <span class="token operator">=</span> <span class="token function">genGetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结合模块化语法-会更好一些" tabindex="-1"><a class="header-anchor" href="#结合模块化语法-会更好一些" aria-hidden="true">#</a> 结合模块化语法，会更好一些</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> instance <span class="token comment">// 闭包</span>

<span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 外部只能 import 这个函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="是否符合设计原则" tabindex="-1"><a class="header-anchor" href="#是否符合设计原则" aria-hidden="true">#</a> 是否符合设计原则？</h3><p>5 大设计原则中，最重要的就是：<strong>开放封闭原则</strong>，对扩展开放，对修改封闭</p><ul><li>内部封装 getInstance ，内聚，解耦</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>使用 TypeScript 演示（注意 static）</li><li>使用 JavaScript 演示</li><li>验证：符合开放封闭原则</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><p>JS 是单线程语言，如果是 Java 等多线程语言，单例模式需要加<strong>线程锁</strong>。</p><h2 id="_04-场景" tabindex="-1"><a class="header-anchor" href="#_04-场景" aria-hidden="true">#</a> 04: 场景</h2><h3 id="登录框" tabindex="-1"><a class="header-anchor" href="#登录框" aria-hidden="true">#</a> 登录框</h3><blockquote><p>一个页面有很多地方调用登录框，使用单例模式</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">LoginForm</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> state<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hide&#39;</span> <span class="token comment">// &#39;hide&#39; / &#39;show&#39;</span>

  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;show&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;已经显示了&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;显示 LoginForm&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;show&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;hide&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;已经隐藏了&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;隐藏 LoginForm&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;hide&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> LoginForm <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginForm <span class="token punctuation">{</span>
    <span class="token comment">// 注意这里的 this</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> loginForm1 <span class="token operator">=</span> LoginForm<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> loginForm2 <span class="token operator">=</span> LoginForm<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loginForm1 <span class="token operator">===</span> loginForm2<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>前端用到严格的单例模式并不多，但单例模式的思想到处都有</p><ul><li>自定义事件 <code>eventBus</code> 全局只有一个</li><li><code>Vuex</code> <code>Redux</code> <code>store</code> 全局只有一个</li><li>严格的单例模式应用不多，但是单例的<strong>思想</strong>随处可见</li></ul><h2 id="_05-总结" tabindex="-1"><a class="header-anchor" href="#_05-总结" aria-hidden="true">#</a> 05: 总结</h2><h3 id="内容回顾" tabindex="-1"><a class="header-anchor" href="#内容回顾" aria-hidden="true">#</a> 内容回顾</h3><ul><li>概念介绍 + 解决的问题</li><li>UML 类图和代码演示</li><li>应用场景</li></ul><h3 id="重要细节" tabindex="-1"><a class="header-anchor" href="#重要细节" aria-hidden="true">#</a> 重要细节</h3><ul><li>TS <code>static</code> <code>private</code> ，以及 UML 图的表示</li><li>静态方法中的 <code>this</code></li><li>Java 多线程，单例模式需要加线程锁 —— JS 单线程</li></ul><h3 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> 注意事项</h3><ul><li>前端用到严格的单例<strong>模式</strong>并不多，但单例模式的<strong>思想</strong>到处都有</li></ul>`,49),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","index-05.html.vue"]]);export{d as default};
