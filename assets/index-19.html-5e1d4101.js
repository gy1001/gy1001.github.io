import{_ as s,p as n,q as e,a1 as a}from"./framework-e8cb8151.js";const l="/assets/5f486cba0001555606400426-35809ae9.jpg",o={},t=a('<h1 id="_19-容器间网络通信link-的技术原理解析" tabindex="-1"><a class="header-anchor" href="#_19-容器间网络通信link-的技术原理解析" aria-hidden="true">#</a> 19-容器间网络通信link 的技术原理解析</h1><p><img src="'+l+`" alt="img"></p><blockquote><p>读一本好书，就是和许多高尚的人谈话。——歌德</p></blockquote><p>前面两篇文章介绍了 Docker 网络情况，这篇文章介绍一下 Link 的原理。这里说的 Link 是在 Docker 容器创建的过程中通过 <code>--link</code> 参数将新创建出来的 Docker 容器和已有的容器之间串讲一个安全通道用来做数据交互。</p><p>Link 的使用场景还是很常见的，比如我们线上应用有一个 web 应用以 Docker 容器运行，有一个数据库（MySQL）也以 Docker 容器运行，由于 web 应用需要访问数据库的数据，那么我们就可以在这两个容器之间使用 Link 连接起来。</p><h2 id="_1-link-使用" tabindex="-1"><a class="header-anchor" href="#_1-link-使用" aria-hidden="true">#</a> 1. Link 使用</h2><p>Link 的使用比较简单，我们这里演示一下。首先运行一个 MySQL 的 Docker 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 --name mysql mysql:latest</span>
e47e603ffb17f4b42d8841ff26d3b93935eed4cb4e3155ae901c0a3afce37b45
<span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
e47e603ffb17        mysql:latest        <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">6</span> seconds ago       Up <span class="token number">5</span> seconds        <span class="token number">33060</span>/tcp, <span class="token number">0.0</span>.0.0:3307-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp   mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们创建一个 busybox 的 Docker 容器，并通过 telnet 连接 MySQL 的 Docker 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti --name busybox --link mysql:mysql busybox:latest sh</span>
/ <span class="token comment"># telnet mysql</span>
telnet: can&#39;t connect to remote <span class="token function">host</span> <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: Connection refused
/ <span class="token comment"># telnet mysql 3306</span>
Connected to mysql
J
�1.1jJXq/%
   p@R<span class="token operator">|</span>Iccaching_sha2_password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 busybox 容器的启动参数里面的 <code>--link mysql:mysql</code> 就是将我们新建出来的 busybox 容器和名字叫 mysql 的 Docker 容器建立一个 link 通道。<code>--link</code> 的参数格式为 <code>--link &lt;name or id&gt;:alias</code> ，第一个参数是目标容器的名字或者 ID，第二个 alias 相当于我们在 busybox Docker 容器中访问 MySQL Docker 容器的 host。</p><p>为了表示我们确实是通过 link 连通了这两个 Docker 容器，我们不带 link 参数创建一个 busybox 容器出来，并尝试访问 MySQL 的 Docker 容器，然后直接提示无法对 mysql 做 dns 解析。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti busybox:latest sh</span>
/ <span class="token comment"># telnet mysql 3306</span>
telnet: bad address <span class="token string">&#39;mysql&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 link 究竟做了什么呢？</p><h2 id="_2-hosts-文件修改" tabindex="-1"><a class="header-anchor" href="#_2-hosts-文件修改" aria-hidden="true">#</a> 2. hosts 文件修改</h2><p>通过上面的例子我们发现没有加 link 参数时，提示无法做 dns 解析，那么直觉告诉我们这个操作可能和 /etc/hosts 文件相关，我们比较一下加了 link 参数和没有加 link 参数的两个容器的 /etc/hosts 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/ <span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
<span class="token number">172.17</span>.0.2	mysql e47e603ffb17
<span class="token number">172.17</span>.0.3	d73dc6529032
/ <span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
<span class="token number">172.17</span>.0.4	f1090a6f3bf2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到加了 link 参数的容器的 hosts 文件中多了一条记录 <code>172.17.0.2 mysql e47e603ffb17</code> ，这条记录正是告诉我们如何访问 mysql。</p><h2 id="_3-环境变量" tabindex="-1"><a class="header-anchor" href="#_3-环境变量" aria-hidden="true">#</a> 3. 环境变量</h2><p>当两个容器通过 <code>--link</code> 建立连接后，会在接收容器中额外设置一些环境变量以保存源容器的一些信息。下面是我们 busybox 中保存的关于源容器 MySQL 的一些环境变量。主要包括一些 IP、端口和网络协议信息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">/</span> <span class="token comment"># env | grep MYSQL</span>
MYSQL_PORT_33060_TCP<span class="token operator">=</span>tcp:<span class="token comment">//172.17.0.2:33060</span>
MYSQL_ENV_MYSQL_MAJOR<span class="token operator">=</span><span class="token number">8.0</span>
MYSQL_PORT_3306_TCP_ADDR<span class="token operator">=</span><span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span>
MYSQL_ENV_MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span>
MYSQL_ENV_GOSU_VERSION<span class="token operator">=</span><span class="token number">1.7</span>
MYSQL_PORT_3306_TCP_PORT<span class="token operator">=</span><span class="token number">3306</span>
MYSQL_PORT_3306_TCP_PROTO<span class="token operator">=</span>tcp
MYSQL_PORT_33060_TCP_ADDR<span class="token operator">=</span><span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span>
MYSQL_PORT<span class="token operator">=</span>tcp:<span class="token comment">//172.17.0.2:3306</span>
MYSQL_PORT_3306_TCP<span class="token operator">=</span>tcp:<span class="token comment">//172.17.0.2:3306</span>
MYSQL_PORT_33060_TCP_PORT<span class="token operator">=</span><span class="token number">33060</span>
MYSQL_ENV_MYSQL_VERSION<span class="token operator">=</span><span class="token number">8.0</span><span class="token number">.19</span><span class="token operator">-</span><span class="token number">1</span>debian9
MYSQL_PORT_33060_TCP_PROTO<span class="token operator">=</span>tcp
MYSQL_NAME<span class="token operator">=</span><span class="token operator">/</span>busybox<span class="token operator">/</span>mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-iptables" tabindex="-1"><a class="header-anchor" href="#_4-iptables" aria-hidden="true">#</a> 4. iptables</h2><p>在接收容器上设置了环境变化和更改了 /etc/hosts 文件之后，接收容器仅仅是得到了源容器的相关信息，比如 IP、端口等，但是并不能表示两个容器之间可以互相通信。那么网络通信如何来保证呢？</p><p>如果对前面的那篇 《Docker 网络初探》还有印象的话，这个时候应该可以想到 iptables，事实上 Docker 也确实是这么做的。通过 iptables-save 我们可以观察到下面两天 <em><strong>filter</strong></em> 规则。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.2/32 <span class="token number">172.17</span>.0.3/32 <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">3306</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.3/32 <span class="token number">172.17</span>.0.2/32 <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">3306</span> <span class="token parameter variable">-j</span> ACCEPT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两条规则确保了我们的 busybox 容器在源容器（MySQL 容器）的 tcp/3306 端口上通信的流量不会被丢掉，从而保证了接收容器可以顺利地从源容器中获取到想要的数据。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>本节简单介绍了 Docker 的 link 技术工作原理，可以看出来原理还是比较简单的。</p><p>值得一提的是，现在官方已经不建议使用 <code>--link</code> 来进行网络通信了。</p><blockquote><p><strong>Warning</strong>: The <code>--link</code> flag is a legacy feature of Docker. It may eventually be removed. Unless you absolutely need to continue using it, we recommend that you use user-defined networks to facilitate communication between two containers instead of using <code>--link</code>. One feature that user-defined networks do not support that you can do with <code>--link</code> is sharing environment variables between containers. However, you can use other mechanisms such as volumes to share environment variables between containers in a more controlled way.</p></blockquote><p>简单翻译一下：</p><blockquote><p>警告：<code>--link</code> 参数是 Docker 早期的遗留特性，可能最终会被移除掉。除非你一定要使用它，否则我们建议你使用自定义网络的方式来实现多个 container 之间的网络通信。自定义网络相比 <code>--link</code> 的一个弊端是无法共享环境变量，但是你可以通过类似在多个容器中挂载同一个 volume 的方式来实现这个需求。</p></blockquote><p>事实上，当我们接触到 Kubernetes 之后，我们就会知道 link 这种方式是多么的简陋。</p>`,33),i=[t];function c(p,r){return n(),e("div",null,i)}const m=s(o,[["render",c],["__file","index-19.html.vue"]]);export{m as default};
