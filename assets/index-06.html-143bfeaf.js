import{_ as t,M as p,p as o,q as c,R as s,t as n,N as l,a1 as a}from"./framework-e8cb8151.js";const i={},u=a(`<h1 id="_06-响应系统-compute-watch" tabindex="-1"><a class="header-anchor" href="#_06-响应系统-compute-watch" aria-hidden="true">#</a> 06-响应系统-compute &amp;&amp; watch</h1><h2 id="_01-开篇" tabindex="-1"><a class="header-anchor" href="#_01-开篇" aria-hidden="true">#</a> 01: 开篇</h2><p>对于响应性系统而言，除了我们在前两章接触的<code>ref</code>和<code>reactive</code>之外，还有另外来个两个也是我们经常使用的，那就是</p><ol><li>计算属性<code>computed</code></li><li>侦听器<code>watch</code></li></ol><p>那么在本章，我们就来看一下，这两个<code>API</code>是如何进行实现的</p><p>在看本章节的内容之前，大家需要：<strong>搞明白 vue3 中 computed 和 watch 的作用和基本用法</strong></p><p>搞明白了这两个 <code>API</code>的基本用法之后，大家就可以开始本章节的学习啦~~~</p><h2 id="_02-源码阅读-跟踪-vue3-源码实现逻辑" tabindex="-1"><a class="header-anchor" href="#_02-源码阅读-跟踪-vue3-源码实现逻辑" aria-hidden="true">#</a> 02: 源码阅读：跟踪 vue3 源码实现逻辑</h2><blockquote><p>计算属性 computed 会<strong>基于响应式依赖收集被缓存</strong>，并且在依赖的响应式数据发生变化时候<strong>重新计算</strong></p></blockquote><p>那么根据计算属性的概念，我们可以创建对应的测试实例，例如：<code>packages/vue/examples/mine/computed.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> computedObj <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;姓名：&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;孙悟空&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><code>computed</code>函数执行, 此时参数为一个函数，通过<code>isFunction</code>函数的处理,并把第一个参数(传递的函数)赋值给内部变量<code>getter</code>,而<code>setter</code>赋值为空</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/shared/src/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isFunction <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> val <span class="token keyword">is</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>

<span class="token comment">// packages/reactivity/src/computed.ts</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ComputedSetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  getterOrOptions<span class="token operator">:</span> ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> WritableComputedOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  debugOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">,</span>
  isSSR <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> getter<span class="token operator">:</span> ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">let</span> setter<span class="token operator">:</span> ComputedSetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

  <span class="token keyword">const</span> onlyGetter <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span> <span class="token comment">// 如果是函数，</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyGetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions <span class="token comment">// 就赋值给 getter</span>
    setter <span class="token operator">=</span> __DEV__
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Write operation failed: computed value is readonly&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token operator">:</span> <span class="token constant">NOOP</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>get
    setter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>set
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> cRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputedRefImpl</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> onlyGetter <span class="token operator">||</span> <span class="token operator">!</span>setter<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> debugOptions <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cRef<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>onTrack <span class="token operator">=</span> debugOptions<span class="token punctuation">.</span>onTrack
    cRef<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>onTrigger <span class="token operator">=</span> debugOptions<span class="token punctuation">.</span>onTrigger
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cRef <span class="token keyword">as</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着执行<code>new ComputedRefImpl</code>,创建一个<code>ComputedRefImpl</code>实例,<code>constructor</code>接收<code>getter setter等参数</code>,内部调用<code>new ReactiveEffect</code>来实例化，并赋给给<code>this._effect</code>(说明调用 this._effect.run()方法时会调用传入的getter函数参数)。注意：这里有一个<code>_dirty</code>变量，它是来控制何时触发收集依赖。只有当其为<code>false</code>时，才会触发。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ComputedRefImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> dep<span class="token operator">?</span><span class="token operator">:</span> Dep <span class="token operator">=</span> <span class="token keyword">undefined</span>

  <span class="token keyword">private</span> _value<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> effect<span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

  <span class="token keyword">public</span> <span class="token keyword">readonly</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span>	<span class="token comment">// 	如果用 isRef 判断，说明也会返回 true</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token keyword">public</span> _dirty <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">public</span> _cacheable<span class="token operator">:</span> <span class="token builtin">boolean</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    getter<span class="token operator">:</span> ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> _setter<span class="token operator">:</span> ComputedSetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    isSSR<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  注意： 这里多个第二个参数，是一个 scheduler 可以理解为一个调度器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheable <span class="token operator">=</span> <span class="token operator">!</span>isSSR
    <span class="token keyword">this</span><span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span> <span class="token operator">=</span> isReadonly
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// the computed ref may get wrapped by other proxies e.g. readonly() #3376</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token function">trackRefValue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_dirty <span class="token operator">||</span> <span class="token operator">!</span>self<span class="token punctuation">.</span>_cacheable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token comment">// 这里调用的 fn 函数其实就是传递进来的 constructor 中的参数 getter</span>
      self<span class="token punctuation">.</span>_value <span class="token operator">=</span> self<span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value
  <span class="token punctuation">}</span>

  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setter</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后<code>computed</code>函数执行完毕，接着执行<code>effect</code>函数，会触发<code>computedObj.value</code>然后触发<code>ComputedRefImpl</code>中<code>get value()</code>函数。接着执行<code>trackRefValue(self)</code>来收集依赖。这时候判断<code>_dirty</code>状态，如果为真(此时为真)，<code>_dirty</code>又恢复为<code>false</code>，然后执行它的<code>run</code>方法(会执行回调，,它会导致 obj.name 的触发，也就是 reactive 的get行为，也就会收集当前依赖：getter 函数，并把函数的返回值也就是 computed 中的计算值赋值给<code>self._value</code>),接着返回<code>self._value</code>.此时<code>innerText</code>中展示的就是<code>姓名：张三</code>。</p></li><li><p>2s后，修改<code>reactive</code>类型的<code>obj.name</code>值，会触发<code>createSetter</code>函数的触发，接着调用<code>trigger</code>函数，然后调用<code>triggerEffects</code>函数，触发依赖。这里就出现了调度的作用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffects</span><span class="token punctuation">(</span>
  dep<span class="token operator">:</span> Dep <span class="token operator">|</span> ReactiveEffect<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  debuggerEventExtraInfo<span class="token operator">?</span><span class="token operator">:</span> DebuggerEventExtraInfo
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">?</span> dep <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>dep<span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> effect <span class="token keyword">of</span> effects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是 computed  属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> debuggerEventExtraInfo<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> effect <span class="token keyword">of</span> effects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> debuggerEventExtraInfo<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span>
  effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">,</span>
  debuggerEventExtraInfo<span class="token operator">?</span><span class="token operator">:</span> DebuggerEventExtraInfo
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect <span class="token operator">||</span> effect<span class="token punctuation">.</span>allowRecurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> effect<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      effect<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> effect <span class="token punctuation">}</span><span class="token punctuation">,</span> debuggerEventExtraInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果有调度器，就要调用调度器函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      effect<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里就会调用调度器函数， 也就是<code>computedRefImpl</code>中的如下代码,而此时<code>this._dirty</code>已经变为false，然后随后又变为true，并执行依赖的触发<code>triggerRefValue(this)</code>，这里就会重新调用<code>() =&gt; { document.querySelector(&#39;#app&#39;).innerText = computedObj.value}</code> 函数，更新视图</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>	  <span class="token comment">// ReactiveEffect第二个参数几十调度器函数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>至此，整个<code>obj.name</code>引发的副作用全部执行完成</p><p>由以上代码可知，整个的计算属性的逻辑是非常复杂的，我们来做一下整理</p><ol><li><p>整个实践由<code>obj.name</code>开始</p></li><li><p>触发<code>proxy</code>实例的<code>setter</code></p></li><li><p>执行<code>trigger</code>,<strong>第一次触发依赖</strong></p></li><li><p>注意：此时<code>effect</code>包含调度器属性，所以会触发调度器</p></li><li><p>在匿名函数中：<strong>再次触发依赖</strong></p></li><li><p>即：<strong>两次都触发依赖</strong></p></li><li><p>最后执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;姓名&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到值作为<code>computedObj</code>的值</p></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>那么到这里我们基本上了解了<code>computed</code>的执行逻辑，里面涉及到了一些我们前面没有来了解过的概念，比如<strong>调度器 scheduler</strong>,并且整体的<code>computed</code>的流程也是相当复杂的</p><p>所以接下来们就去实现<code>computd</code>的时候，分寸会一步步的进行。</p><h2 id="_03-框架实现-构建-computedrefimpl-读取计算属性的值" tabindex="-1"><a class="header-anchor" href="#_03-框架实现-构建-computedrefimpl-读取计算属性的值" aria-hidden="true">#</a> 03：框架实现：构建 computedRefImpl, 读取计算属性的值</h2><p>对于 <code>computd</code>而言，整体比较复杂，所以我们将分步进行实现</p><p>那么对于本小节而言，我们首先的目标是：<strong>构建 computedRefImpl 类，创建出 computed 方法，并且能够读取值</strong></p><ol><li><p>创建<code>packages/reactivity/src/computed.ts</code></p><blockquote><p>判断传递的参数是否是一个函数，如果是，就赋值给 getter</p><p>在 get value函数中进行收集依赖，以及触发回调赋值给_value,并返回 _value</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// @vue/shared</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isFunction <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> val <span class="token keyword">is</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>

<span class="token comment">// packages/reactivity/src/effect.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ComputedRelImpl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./computed&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  computed<span class="token operator">?</span><span class="token operator">:</span> ComputedRelImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token comment">// 新增加</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token punctuation">}</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//computed.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/shared&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Dep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dep&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./effect&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> trackRefValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ref&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> getter
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> cRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputedRelImpl</span><span class="token punctuation">(</span>getter<span class="token punctuation">)</span>
  <span class="token keyword">return</span> cRef
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ComputedRelImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> dep<span class="token operator">?</span><span class="token operator">:</span> Dep <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token keyword">private</span> _value<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> effect<span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trackRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着我们分别进行导出<code>computed</code>函数即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/reactivity/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./computed&quot;</span>
<span class="token comment">// packages/vue/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/reactivity&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建测试实例<code>packages/vue/example/reactive/computed.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">80</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> computedObj <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;姓名：&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;猪八戒&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行浏览器，可以看到数据被成功渲染，此时数据还不是响应式的，所以 2s后的试图数据并不会发生变化</p></li></ol><h2 id="_04-框架实现-computed-的响应性-初见调度器-处理脏状态" tabindex="-1"><a class="header-anchor" href="#_04-框架实现-computed-的响应性-初见调度器-处理脏状态" aria-hidden="true">#</a> 04：框架实现：computed 的响应性：初见调度器，处理脏状态</h2><p>根据之间的代码可知，如果我们想要实现<strong>响应性</strong>，那么必须具备以下两个条件</p><ol><li><strong>收集依赖</strong>：该操作我们目前已经在<code>get value</code>中进行了</li><li><strong>触发依赖</strong>：该操作我们目前尚未完成，而这个也是我们本小节主要需要做的事情</li></ol><p>那么根据第二小节的源码可知，这部份代码是写在<code>ReactiveEffect</code>第二个参数上的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个参数是一个匿名函数，被叫做<code>scheduler</code>调度器</p><p>该匿名函数中，又涉及到一个<code>_dirty</code>变量，该变量我们把它叫做<strong>脏</strong></p><p>那么想要实现<code>computed</code>的响应性，就必须要明白这两个东西的概念</p><h3 id="调度器" tabindex="-1"><a class="header-anchor" href="#调度器" aria-hidden="true">#</a> 调度器</h3><p>调度器<code>scheduler</code>是一个相对比较复杂的概念，它在<code>computed</code>和<code>watch</code>中都有涉及，但是在当前的<code>computed</code>实现中，它的作用还算比较清晰</p><p>所以根据我们秉承的<strong>没有使用就当做不存在</strong>的概念，我们只需要搞清楚，它在当前的作用即可</p><p>根据我们第二小节的源码阅读，我们可以知道，此时的<code>scheduler</code>就相当于一个<strong>回调函数</strong></p><p>在<code>triggerEffect</code>只要<code>effect</code>存在<code>scheduler</code>,就会执行该函数</p><h3 id="dirty-脏" tabindex="-1"><a class="header-anchor" href="#dirty-脏" aria-hidden="true">#</a> dirty 脏</h3><p>对于脏变量，他其实代表的是一个状态，如果当前状态为真，那么在每次通过<code>.value</code>形式调用<code>get value</code>的是时候就会把这个<code>dirty</code>状态置为 false。然后在调用调度器函数的时候，又会重新置为<code>true</code>,并触发依赖<code>triggerRefValue</code>，页面视图就会更新。</p><p>也就是这个变量决定了我们在什么时候来触发依赖</p><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><ol><li><p>在<code>ComputedRefImpl</code>类中添加相关属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 新增引入 triggerRefValue</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> trackRefValue<span class="token punctuation">,</span> triggerRefValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ref&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ComputedRelImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> dep<span class="token operator">?</span><span class="token operator">:</span> Dep <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token keyword">private</span> _value<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> effect<span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token keyword">public</span> <span class="token keyword">readonly</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// 新增加</span>
  <span class="token keyword">public</span> _dirty <span class="token operator">=</span> <span class="token boolean">true</span> 
  <span class="token function">constructor</span><span class="token punctuation">(</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新增加调度器函数 scheduler</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trackRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token comment">// 增加判断函数，脏状态为 true 时候执行,并置为 false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同时<code>ReactiveEffect</code>也要进行更改，因为新增加了第二个参数调度器<code>scheduler</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EffectScheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> computed<span class="token operator">?</span><span class="token operator">:</span> ComputedRelImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token comment">// 新增加 </span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">public</span> scheduler<span class="token operator">:</span> EffectScheduler <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token punctuation">}</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着我们需要更改依赖触发里面的逻辑，如果有调度器函数，就要执行调度器函数,修改<code>packages/reactivity/src/effect.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样我们就实现了<code>computed</code>的一个响应性，运行测试用例，我们就可以看到 2s 后视图发生了变化</p></li></ol><h2 id="_05-框架实现-computed-的缓存性" tabindex="-1"><a class="header-anchor" href="#_05-框架实现-computed-的缓存性" aria-hidden="true">#</a> 05：框架实现：computed 的缓存性</h2><p>那么到现在呢，我们已经实现了<code>computed</code>属性的一个响应性。但是如果大家使用过计算属性的话，大家就很清楚<code>Vue</code>中计算属性<code>computed</code>区别于函数的一个重要特点就是<strong>具备缓存性</strong>.也就是当我们多次触发计算属性的时候，他只会执行一次。</p><p>我们修改测试示例代码为下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">80</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> computedObj <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;计算属性执行了&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token string">&#39;姓名：&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们发现在刚开始页面正常显示了，在 2s 之后进入了死循环。那么为什么呢？</p><p>如果我们想要实现计算属性的缓存性，又该如何进行实现呢？</p><h3 id="为什么会出现死循" tabindex="-1"><a class="header-anchor" href="#为什么会出现死循" aria-hidden="true">#</a> 为什么会出现死循</h3><p>我们为当前的代码进行<code>debugger</code>,查看出现该问题的原因。我们知道这个死循环是在<code>延迟两秒后</code>出现的，而延迟两秒后是<code>obj.name</code>的调用，即：<code>reactive</code>的<code>getter</code>行为被触发，也就是<code>trigger</code>方法触发时</p><ol><li>为<code>packages/reactivity/src/effect.ts</code>中的<code>trigger</code>方法增加断点，延迟两秒之后，进入断点：</li><li>此时执行的代码是<code>obj.name = &quot;李四&quot;</code>,所以在<code>target</code>为<code>{ name: &quot;李四&quot; }</code></li><li>但是要<strong>注意</strong>，此时<code>targetMap</code>中，以及收集过<code>effect</code>了，此时的<code>dep</code>中包含一个计算属性的<code>effect</code></li></ol><p>​ <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b725861acab457b893e556bdffda39e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol start="4"><li><p>代码继续向下执行，进入<code>triggerEffects(dep)</code>方法</p></li><li><p>在<code>triggerEffects(dep)</code>方法中，继续进入<code>triggerEffect(effct)</code></p></li><li><p>在<code>triggerEffect</code>中接收到的<code>effect</code>，即为刚才查看到的<strong>计算属性的effect</strong>（如上图）</p></li><li><p>此时因为<code>effect</code>中存在<code>scheduler</code>，所以会执行该计算属性的<code>scheduler</code>函数，在<code>scheduler</code>函数中，会触发<code>triggerRefValue(this)</code>，而<code>triggerRefValue</code>则再次触发<code>triggerEffects</code></p></li><li><p>特别注意：此时<code>effects</code>的值为<strong>计算属性实例的 dep</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fa97ef14ddd496a834755a37d7ecf50~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>循环<code>effects</code>，从而再次进入<code>triggerEffect</code>中</p></li><li><p>再次进入<code>triggerEffect</code>，此时<code>effect</code>为<strong>非计算属性</strong>的<code>effect</code>，即<code>fn</code>函数</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9992bc02125d491d9898263545e97c21~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>因为他不是<strong>计算属性</strong>的<code>effect</code>，所以会直接触发<code>run</code>方法</p></li><li><p>而我们知道<code>run</code>方法中，其实就是触发了<code>fn</code>函数，所以最终会执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> computedObj<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但是在这个函数中，是有触发<code>computedObj.value</code>的，而<code>computedObj.value</code>其实就是触发了<code>computed</code>的<code>get value</code>方法</p></li><li><p>那么这次<code>run</code>的执行会触发<strong>两次 computed 的 get value</strong></p><ol><li>第一次进入 <ol><li>进入<code>computed</code>的<code>get value</code></li><li>首先依赖收集</li><li>接下来检查<code>dirty</code>脏的状态，执行<code>this.effect.run()</code></li><li>获取最新值，返回</li></ol></li><li>第二次进入 <ol><li>进入<code>computed</code>的<code>get value</code></li><li>首先依赖收集</li><li>接下来检查<code>dirty</code>的脏的状态，<strong>因为上一次中 dirty 已经为 false</strong>，所以本次不会再触发<code>this.effect.run</code></li><li>直接返回结束</li></ol></li></ol></li><li><p><strong>按说代码这里应该结束了</strong>。但是不要忘记，在刚才我们计入到<code>triggerEffects</code>时，<code>effects</code>是一个数组，内部还存在一个<code>computed</code>的<code>effect</code>，所以代码会继续执行，再次来到<code>triggerEffect</code>中</p><ol><li><p>此时<code>effect</code>为<code>computed</code>的<code>effect</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/247457b1658c45d58b67ff6d9b9b505e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>这会导致，再次触发<code>scheduler</code></p></li><li><p><code>scheduler</code>中还会再次触发<code>triggerRefValue</code></p></li><li><p><code>triggerRefValue</code>又触发<code>triggerEffects</code>，<strong>再次生成一个新的 effects 包含 两个 effect</strong>, 就像<strong>第7步</strong>一样</p></li><li><p>从而导致<strong>死循环</strong></p></li></ol></li></ol><p>那么明确好了导致死循环的代码逻辑之后，接下来就是如何解决这个死循环的问题呢？</p><blockquote><p>PS: 这里大家要注意：vue-next-mine是一个学习 vue3 核心源代码的库，所以它在一些复杂业务中会存在各种 bug。而这样的 bug 在 vue3 的源码中处理完善的逻辑非常非常复杂，我们不可能完全按照 vue3 的标准来处理</p><p>所以我们秉承着<strong>最少量代码的实现逻辑</strong>来解决对应的 bug,它<strong>并不是一个完善的方案（相比于vue3的源代码）</strong>，但是我们可以<strong>保证vue3的源码逻辑，并且是合理的</strong></p></blockquote><h3 id="如何解决死循环" tabindex="-1"><a class="header-anchor" href="#如何解决死循环" aria-hidden="true">#</a> 如何解决死循环</h3><p>想要解决这个死循环问题，其实比较简单，我们只需要在<code>packages/reactivity/src/effect.ts</code>中的<code>triggerEffects</code>中修改如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffects</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 依赖项目集合是否是数组，不是就变为一个数据，</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token operator">?</span> deps <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>deps<span class="token punctuation">]</span>
  <span class="token comment">// 使用两个 for  循环，来顺序执行相关依赖即可</span>
  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那为什么这样就可以解决死循环呢的<code>bug</code>呢？</p><p>我们再按照刚才的顺序追踪下代码进行查看</p><ol><li><p>为<code>packages/reactivity/src/effect.ts</code>中的<code>trigger</code>方法增加断点，延迟两秒之后，进入断点</p></li><li><p>此时执行的代码是<code>obj.name=&quot;李四&quot;</code>，所以现在<code>target</code>为<code>{ name: &quot;李四&quot; }</code></p></li><li><p>但是要<strong>注意</strong>，此时<code>targetMap</code>中，已经<strong>收集过 effectl了</strong>，其中包含一个计算属性</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a14ca742d4a4271a13066eb7c698fc9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>代码继续往下执行，进<code>triggerEffects(dep)</code>方法</p></li><li><p>在<code>triggerEffects(dep)</code>方法中，继续进入<code>triggerEffect(effect)</code></p></li><li><p>在<code>triggerEffect</code>中接收到的<code>effect</code>，即为刚才查看的<strong>计算属性的<code>effect</code></strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/191bca7948624fd1bba290e4b8029c5d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>此时因为<code>effect</code>存在<code>scheduler</code>,所以会执行该计算属性的<code>scheduler</code>函数，在<code>scheduler</code>函数中，会触发<code>triggerRefValue(this)</code>,而<code>triggerRefValue</code>则会再次触发<code>triggerEffects</code></p></li><li><p>------------------ 不同从这里开始-------------------</p></li><li><p>因为此时我们在<code>triggerEffects</code>中，增加了<strong>判断逻辑</strong>，所以<strong>永远会先触发</strong>计算属性的<code>effect</code></p></li><li><p>所以此时我们再次进入到<code>triggerEffect</code>时，此时的<code>effect</code>依然为<strong>计算属性的 effect</strong></p></li><li><p>从而因为存在<code>scheduler</code>,所以会执行调度器函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但是此时要注意: <strong>此时_dirty脏的状态</strong>为<code>true</code>，即：<strong>不会触发 triggerRefValue 来触发依赖</strong>，此时计算属性的<code>scheduler</code>调度器会<strong>直接结束</strong></p></li><li><p>然后代码<strong>跳回到 triggerEffects 两次循环中</strong>，使用<strong>非计算属性的 effect</strong>执行<code>triggerEffect</code>方法</p></li><li><p>本次进入<code>triggerEffect</code>方法时，<code>effect</code>数据如下</p><p>![image-20230318135905927](/Users/yuangao/Library/Application Support/typora-user-images/image-20230318135905927.png)</p></li><li><p>那么这次<code>run</code>方法的执行会触发<strong>两次 computed 的 get value</strong></p></li><li><p>所以代码会进入到<code>computed</code>的<code>get value</code>中</p><ol><li>第一次进入 <ol><li>进入<code>computed</code>的<code>get value</code></li><li>首先收集依赖</li><li>接下来检查<code>dirty</code>的脏状态，执行<code>this.effect.run()</code></li><li>获取最新值，返回</li></ol></li><li>第二次进入 <ol><li>首先<code>computed</code>的<code>get value</code></li><li>首先收集依赖</li><li>接下来检查 <code>dirty</code>的状态，<strong>因为上一次中 dirty 已经为 false</strong>,所以本次<strong>不会再触发 this.effect.run()</strong></li><li>直接返回结束</li></ol></li></ol></li><li><p>所有代码逻辑结束</p></li></ol><p>查看测试实例的打印，<code>computed</code>只打印了一次</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>那么到这里我们就解决了计算属性的死循环问题和<strong>缓存问题</strong></p><p>其实解决的方式非常的简单，我们只需要控制<code>computed</code>的<code>effect</code>和非<code>computed</code>的<code>effect</code>的顺序执行 ，通过明确的<code>dirty</code>来控制 <code>run</code>和<code>triggerRefValue</code>的执行即可</p><h2 id="_06-总结-computed的计算属性" tabindex="-1"><a class="header-anchor" href="#_06-总结-computed的计算属性" aria-hidden="true">#</a> 06：总结：computed的计算属性</h2><p>那么到这里我们已经完成了<code>computed</code>计算属性的构建</p><p>接下来我们来总计一下计算属性的重点</p><ol><li>计算属性的重点，本质上是一个<code>ComputedRefImpl</code>的实例</li><li><code>ComputedRefImpl</code>中通过<code>dirty</code>变量来控制<code>run</code>的执行和<code>triggerRefValue</code>的触发</li><li>想要访问计算属性的值，必须通过<code>.value</code>,因为它内部和<code>ref</code>一样是通过<code>get value</code>来进行实现的</li><li>每次<code>.value</code>的时候都会触发<code>trackRefValue</code>即：收集依赖</li><li>在依赖触发的时候，需要谨记，先触发<code>computed</code>的<code>effect</code>，再触发非<code>computed</code>的<code>effect</code></li></ol><h2 id="_07-源码阅读-响应性的数据监听器-watch-跟踪源码实现逻辑" tabindex="-1"><a class="header-anchor" href="#_07-源码阅读-响应性的数据监听器-watch-跟踪源码实现逻辑" aria-hidden="true">#</a> 07：源码阅读：响应性的数据监听器 watch,跟踪源码实现逻辑</h2>`,68),r={href:"https://cn.vuejs.org/guide/essentials/watchers.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><code>watch</code>的实现 和 <code>computed</code>有一些相似的地方，但是作用却大不相同。<code>watch</code>可以<strong>监听响应式数据的变化，从而触发指定的函数</strong></p><p>在<code>vue3</code>中使用<code>watch</code>的代码如下所示</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watch监听被触发&#39;</span><span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;oldValue&#39;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      deep<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>watch</code>函数接收三个参数</p><ol><li>监听的响应式对象</li><li>回调函数 <code>cb</code></li><li><code>options</code> 配置对象 <ol><li><code>immediate</code>：watch 初始化后被立刻触发一次</li><li><code>deep</code>：深度监听</li></ol></li></ol><p>由此可见，<code>watch</code>函数颇为复杂，所以我们在跟踪<code>watch</code>的源码实现时，应当分步骤来进行跟踪</p><h3 id="基础的-watch-实例" tabindex="-1"><a class="header-anchor" href="#基础的-watch-实例" aria-hidden="true">#</a> 基础的 watch 实例</h3><p>修改<code>packages/vue/examples/mine/watch.html</code>实力代码如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> wactch<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watch监听被触发&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;oldValue：&#39;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value：&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中</p><ol><li>首先通过<code>reactive</code> 函数构建了响应性的实例</li><li>然后触发 <code>watch</code></li><li>最后触发 <code>proxy</code> 的 <code>setter</code></li></ol><p>摒弃掉之前熟悉的 <code>reactiv</code>，我们从<code>watch</code> 函数开始追踪</p><h3 id="watch-函数" tabindex="-1"><a class="header-anchor" href="#watch-函数" aria-hidden="true">#</a> watch 函数</h3><ol><li><p>在 <code>packages/runtime-core/src/apiWatch.ts</code> 中找到<code>watch</code> 函数，开始 <code>debugger</code></p></li><li><p>执行 <code>doWatch</code> 函数:</p><ol><li><p>进入 <code>doWatch</code> 函数</p></li><li><p>因为 <code>source</code> 为 <code>reactive</code> 类型数据，所以 <code>getter = ()=&gt; source</code>, 目前 <code>source</code> 为 <code>proxy</code> 实例，即</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Proxy<span class="token punctuation">{</span> name <span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>紧接着，指定 <code>deep = true</code> 即 <strong>source 为 reactive 时，默认添加 options.deep = true</strong></p></li><li><p>执行 <code>if(cb &amp;&amp; deep)</code>条件满足：</p><ol><li>创建新的常量 <code>baseGetter = getter</code></li><li>执行 <code>let oldValue = isMultiSource ? [ ] : ININIAL_WATCHER_VALUE</code></li><li>其中 <code>isMultiSource</code> 表示是否有多个源，我们当前只有一个源，所以 <code>oldValue = ININIAL_WATCHER_VALUE</code></li><li><code>ININIAL_WATCHER_VALUE = []</code></li></ol></li><li><p>执行 <code>const obj: SchedulerJob = { ... }</code> 我们知道 <code>Scheduler</code> 是一个调度器，<code>SchedulerJob</code> 其实就是一个调度器的处理函数，在之前我们接触了一下 <code>Scheduler</code> 调度器，但是并没有进行深入了解，那么这里设计到的调度器的比较负责的一些概念，所以后面我们想要实现 watch, 还需要<strong>深入的了解下调度器的概念</strong>，现在我们暂时先不需要管它</p></li><li><p>接下来还是<strong>调度器</strong>概念，直接执行：<code>let scheduler: EffectScheduler = () =&gt; queuePreFulushCb(job)</code></p></li><li><p>6.7 结合，将得到一个完整的调度器函数 <code>scheduler </code>，该函数被触发时，会返回 <code>queuePreFlushCb(job)</code> 函数执行的结果</p></li><li><p>代码继续执行得到一个 <code>ReactiveEffect</code>的实例，<strong>注意</strong>：该实例包含一个完美的调度器<code>scheduler</code></p></li><li><p>代码继续执行，进入如下判断逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// cb是 watch 第二个参数</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// immediate 是 options  的 immediate  ，表示: watch 是否立即执行</span>
  <span class="token comment">// 那么根据这个概念和代码，可以猜测：job 触发，表示 watch  被立即执行了一次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 不包含 immedidate  则通过 effect.run 获取旧值</span>
      <span class="token comment">// 根据我们前面创建 effect  的代码可知，run()的执行其实就是 getteer 的执行</span>
      <span class="token comment">// 所以我们此处可以理解为 getter 被触发，则获取了 oldValue</span>
      <span class="token comment">// 我们的代码将执行 else </span>
     oldValue <span class="token operator">=</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>
      effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">,</span>
      instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>suspense
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后 <code>return</code> 了一个函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">remove</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>effects<span class="token operator">!</span><span class="token punctuation">,</span> effect<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>回调函数中的代码我们无需深究，但是根据语义代码 <code>stop 停止</code>、<code>remove删除</code>，可以猜测：<strong>该函数被触发 watch 将停止监听，并删除依赖</strong></p></li></ol></li></ol><p>那么至此 <code>watch</code> 函数的逻辑执行完成</p><p>由此以上代码可知</p><ol><li><code>watch</code> 函数的代码很长，但是逻辑还算清晰</li><li>调度器 <code>scheduler</code> 在<code>watch</code>中很关键</li><li><code>scheduler</code>、<code>ReactiveEffect</code> 两者之间存在互相作用的关系，一旦 <code>effect</code> 触发了 <code>scheduler</code> 那么会导致 <code>queuePreFulshCb(job)</code> 执行</li><li>只要 <code>job()</code> 触发，那么就表示\`\`watch\`触发了一次</li></ol><h3 id="reactive-触发-setter" tabindex="-1"><a class="header-anchor" href="#reactive-触发-setter" aria-hidden="true">#</a> reactive 触发 setter</h3><p>等待 2s，reactive 实例将触发 setter 行为，setter行为的触发将会导致 trigger 函数的触发，所以我们可以直接在 trigger中进行debugger</p><ol><li><p>在trigger 中进行 debugger</p></li><li><p>根据我们之前的经验可知，trigger 最终会触发 triggerEffect,所以我们可以<strong>省略中间</strong>步骤，直接进入 triggerEffect 中</p><ol><li><p>进入 triggerEffect</p></li><li><p>此时 effect 为</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4650044666cd40d784f954edd742fd80~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>关键其中两个比较重要的变量</p><ol><li><code>fn</code>：值为 <code>traverse(baseGetter())</code><ol><li>根据2-4-1 可知 <code>baseGetter = getter</code></li><li>根据 2-2 可知：<code>getter = () =&gt; Proxy{name:&quot;xx&quot;}</code></li><li>所以 <code>fn = traverse(() =&gt; Proxy { name: xxx })</code></li></ol></li><li><code>scheduler</code>: 值为<code>()=&gt; queuePreFlushCb(job)</code><ol><li>目前已经知道 <code>job() </code>触发表示<code> watch</code> 回调一次</li></ol></li></ol></li><li><p>因为 <code>scheduler </code> 存在，所以会直接执行 <code>scheduler</code>,即等同于<strong>直接执行 queuePreFlushCb(job)</strong></p></li><li><p>所以我们接下里进入 <code>queuePreFlushCb</code>函数，看看<code> queuePreFlushCb</code> 做了什么</p><ol><li>进入 <code>queueFlushCb</code></li><li>触发 <code>queueCb(cb,...,pendingPreFlushCbs,...)</code>函数，此时 <code>cb = job</code>,即：<strong>cb()触发一次，意味着 watch 触发一次</strong><ol><li>进入 <code>queueCb</code> 函数</li><li>执行 <code>pendingQueue.push(cb)</code>，<code>pendingQueue</code> 从语义中看出表示<strong>队列</strong>，为一个<strong>数组</strong></li><li>执行 <code>queuseFlush()</code> 函数 <ol><li>进入 <code>queueFlush()</code>函数</li><li>执行 <code>isFlushingPending = true</code></li><li>执行 <code>currentFlushPromise = resolvedPromise.then(flushJobs)</code><ol><li>查看 <code>resolvedPromise</code> 可知：<code>const resolvePromise = Promise.resolve()</code> 即：<strong>Promise的成功状态</strong></li><li>我们知道 <code>Promise</code> 存在三种状态</li><li>待定<code> pending</code>: 初始化状态，既没有兑现，也没有被拒绝</li><li>已兑现 <code>fulfilled</code>: 意味着操作成功完成</li><li>已拒绝 <code>rejected</code>: 意味着操作失败</li><li>结合语义，其实可知：<code>isFlushPending = true</code> 应该是一个标记，表示 <code>Promise</code> 进入 <code>pending</code> 状态</li><li>而同时我们知道 <code>Promise.resolve()</code>是一个<strong>已兑现</strong>状态的状态切换函数，它是一个<strong>异步的微任务</strong>，即：<strong>它是一个优先于 setTimeout(() =&gt;{},0) 的异步任务</strong></li></ol></li><li>而 <code>flushJobs</code> 是将一个 <code>.then</code> 中的回调，即<strong>异步执行函数</strong>，它会等到<strong>同步任务执行完成之后</strong>再触发</li><li>我们可以给<strong>flushJobs 函数内部增加一个断点</strong></li></ol></li></ol></li><li>至此整个<code>trigger</code> 函数执行完成</li></ol></li></ol></li></ol><p>由此以上代码可知</p><ol><li><code>job</code> 函数的主要作用其实就是有两个 <ol><li>拿到 <code>newValue</code> 和 <code>OldValue</code></li><li>触发 <code>fn 函数</code>执行</li></ol></li></ol><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p>到目前为止，整个 <code>watch</code> 的逻辑就已经全部理清楚了。整体分为了 4 大块</p><ol><li><code>watch</code> 函数本身</li><li><code>reactive</code> 中的 <code>setter</code></li><li><code>flushJobs</code></li><li><code>job</code></li></ol><p>整个 <code>watch</code> 还是比较复杂的，主要是因为 <code>vue</code> 内部做了很多的<strong>兼容处理</strong>，使代码的复杂度上升了好几个台阶，我们自己去实现的时候<strong>就会简单很多的</strong></p><h2 id="_08-框架实现-深入-scheduler-调度系统实现机制" tabindex="-1"><a class="header-anchor" href="#_08-框架实现-深入-scheduler-调度系统实现机制" aria-hidden="true">#</a> 08：框架实现：深入 scheduler 调度系统实现机制</h2><p>经过了 <code>computed</code> 的代码和 <code>watch</code> 的代码之后，其实我们可以发现，在这两块代码中包含了同样的一个概念：<strong>调度器scheduler</strong>.完整的说，我们应该叫他：<strong>调度系统</strong></p><p>整个调度系统其实包含两个部分来实现</p><ol><li><code>lazy: 懒执行</code></li><li><code>scheduler:调度器</code></li></ol><h3 id="懒执行" tabindex="-1"><a class="header-anchor" href="#懒执行" aria-hidden="true">#</a> 懒执行</h3><p>懒执行相对比较简单，我们来看<code>packages/reactivity/src/effect.ts</code>中第 183-185的代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">{</span>
  _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码比较简单，其实就是如果存在 <code>options.lazy</code> 则<strong>不立即</strong>执行 <code>run 函数</code></p><p>修改<code>packages/reactivity/src/effect.ts</code>文件（vue-next-mini项目中），修改 effect 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ReactiveEffectOptions</span> <span class="token punctuation">{</span>
  lazy<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  scheduler<span class="token operator">?</span><span class="token operator">:</span> EffectScheduler
<span class="token punctuation">}</span>
<span class="token comment">// 增加第二个参数，判断如果传入的 lazy  有值并且为 true  就不立即执行</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">effect</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> ReactiveEffectOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>vue-next-mini/packages/vue/example/reactive/effect-lazy.html</code>测试用例，代码如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">effect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;代码结束&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行浏览器可以看到，只有 <code>代码结束</code> 被打印出来,说明 是懒执行的</p><h3 id="调度器-1" tabindex="-1"><a class="header-anchor" href="#调度器-1" aria-hidden="true">#</a> 调度器</h3><p>调度器比懒执行要稍微复杂一些，整体的作用分为两块</p><ol><li><strong>控制执行顺序</strong></li><li><strong>控制执行规则</strong></li></ol><h4 id="控制执行顺序" tabindex="-1"><a class="header-anchor" href="#控制执行顺序" aria-hidden="true">#</a> 控制执行顺序</h4><p>我们先来看一个 <code>vue3</code> 的官网的例子，创建测试实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;代码结束&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果是：<strong>1、2、打印结束</strong></p><p>如果我们修改<code>effect.ts</code>文件如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> extend <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">effect</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> ReactiveEffectOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">extend</span><span class="token punctuation">(</span>_effect<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment">// 增加合并代码</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// @vue/shared</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> extend <span class="token operator">=</span> Object<span class="token punctuation">.</span>assign
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改参数实例代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">effect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// lazy: true</span>
      <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;代码结束&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们加了一个调度器，并且内部增加了一个定时器任务，我们知道他会等主线程执行完毕后，在执行</p><p>此时的打印顺序是：<strong>1，代码结束， 2</strong></p><h4 id="控制执行规则" tabindex="-1"><a class="header-anchor" href="#控制执行规则" aria-hidden="true">#</a> 控制执行规则</h4><p>修改测试实例，如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">effect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
  obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到打印结果是 <code>1 2 3</code></p><p>其实 2 完全可以省略，有没有这个可能呢？</p><p>我们在<code>vue-next-mini-mine/packages/runtime-core/src</code>下新建文件<code>scheduler.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> pendingPreFlushCbs<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> resolvedPromise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>
<span class="token keyword">let</span> currentFlushPromise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">queueCb</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> pendingPreFlushCbs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">queueCb</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> pendingQueue<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pendingQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
  <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushPending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isFlushPending <span class="token operator">=</span> <span class="token boolean">true</span>
    currentFlushPromise <span class="token operator">=</span> resolvedPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushJobs<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">flushJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token function">flushPreFlushCbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flushPreFlushCbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPreFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> activePreFlushCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>pendingPreFlushCbs<span class="token punctuation">)</span><span class="token punctuation">]</span>
    pendingPreFlushCbs<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> activePreFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      activePreFlushCbs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改我们的测试实例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> queuePreFlushCb <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">effect</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
    obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候再次运行测试实例，打印效果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/840d5105b67d4d4bbb0c89f04f2687f5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_09-框架实现-初步实现-watch-数据监听器" tabindex="-1"><a class="header-anchor" href="#_09-框架实现-初步实现-watch-数据监听器" aria-hidden="true">#</a> 09：框架实现：初步实现 watch 数据监听器</h2><p>那么在上一小节完成了我们的调度器后呢，接下来就可以基于这个调度器来实现我们的 watch 数据监听器</p><ol><li><p>新建文件<code>vue-next-mini-mine/packages/compiler-core/src/apiWatch.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> queuePreFlushCb <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/runtime-core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span> hasChanged <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/reactivity/src/effect&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isReactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/reactivity/src/reactive&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WatchOptions<span class="token operator">&lt;</span>immedidate <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  immediate<span class="token operator">?</span><span class="token operator">:</span> immedidate<span class="token punctuation">,</span>
  deep<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> cb<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> cb<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> immediate<span class="token punctuation">,</span> deep <span class="token punctuation">}</span><span class="token operator">:</span> WatchOptions <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> source
    deep <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">&amp;&amp;</span> deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
    <span class="token keyword">const</span> baseGetter <span class="token operator">=</span> getter
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">baseGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">job</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">||</span> <span class="token function">hasChanged</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
        oldValue <span class="token operator">=</span> newValue
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>
  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> scheduler<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      oldValue <span class="token operator">=</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// /packages/reactivity/src/effect.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  computed<span class="token operator">?</span><span class="token operator">:</span> ComputedRelImpl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">public</span> scheduler<span class="token operator">:</span> EffectScheduler <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token punctuation">}</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 新增加</span>
  <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;TODO ReactiveEffect.stop&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// reactivity/src/reactive.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ReactiveFlags <span class="token punctuation">{</span>
  <span class="token constant">IS_REACTIVE</span> <span class="token operator">=</span> <span class="token string">&quot;__v_isReactive&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createReactiveOject</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> baseHandlers<span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> proxyMap<span class="token operator">:</span> WeakMap<span class="token operator">&lt;</span>object<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> existingProxy
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">)</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
  proxy<span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 增加这一行代码标识</span>
  <span class="token keyword">return</span> proxy
<span class="token punctuation">}</span>
<span class="token comment">// packages/shared/src/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">EMPTY_OBJ</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>导出函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/runtime-core/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./apiWatch&quot;</span>

<span class="token comment">// packages/vue/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/runtime-core&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改测试实例，代码如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> watch<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">watch</span><span class="token punctuation">(</span>
    obj<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watch监听被触发&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newValue&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;oldValue&#39;</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打印效果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aab004440c7046469bd8c9d9e24bce76~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>但是 2s 后，<code>watch</code> 函数并没有被触发，这是为什么呢？</p></li></ol><h2 id="_10-问题分析-watch-下的依赖收集原则" tabindex="-1"><a class="header-anchor" href="#_10-问题分析-watch-下的依赖收集原则" aria-hidden="true">#</a> 10：问题分析：watch 下的依赖收集原则</h2><p>上一节中我们成功的创建出了 <code>watch</code> 函数，但是并没有响应式，因为我们并没有对对象属性进行依赖收集，自然触发依赖时候是触发不成功的。</p><p>在上一小节中的 <code>todo</code> 部分增加如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">&amp;&amp;</span> deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
    <span class="token keyword">const</span> baseGetter <span class="token operator">=</span> getter
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token function">baseGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>


<span class="token comment">// 如果是对象，就循环触发依赖收集</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value <span class="token keyword">as</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token keyword">as</span> Object<span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样情况下，依赖就会触发收集，重新运行测试实例，就会发现2s后函数重新运行了。</p><h2 id="_11-框架实现-完成-watch-数据监听器的依赖收集" tabindex="-1"><a class="header-anchor" href="#_11-框架实现-完成-watch-数据监听器的依赖收集" aria-hidden="true">#</a> 11：框架实现：完成 watch 数据监听器的依赖收集</h2><p>参考上节</p><h2 id="_12-总结-watch-数据侦听器" tabindex="-1"><a class="header-anchor" href="#_12-总结-watch-数据侦听器" aria-hidden="true">#</a> 12：总结：watch 数据侦听器</h2><h2 id="_13-总结" tabindex="-1"><a class="header-anchor" href="#_13-总结" aria-hidden="true">#</a> 13：总结</h2>`,75);function k(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("我们可以点击"),s("a",r,[n("这里"),l(e)]),n("来查看watch 的官方文档")]),d])}const f=t(i,[["render",k],["__file","index-06.html.vue"]]);export{f as default};
