import{_ as c,M as e,p as i,q as l,N as a,R as n,t as s,a1 as t}from"./framework-e8cb8151.js";const u={},r=n("h1",{id:"_16-工程化脚手架-进阶实战——工程化脚手架构建服务实战",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_16-工程化脚手架-进阶实战——工程化脚手架构建服务实战","aria-hidden":"true"},"#"),s(" 16-工程化脚手架：进阶实战——工程化脚手架构建服务实战")],-1),k=n("h2",{id:"_01-脚手架运行流程图绘制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01-脚手架运行流程图绘制","aria-hidden":"true"},"#"),s(" 01：脚手架运行流程图绘制")],-1),d=t(`<h2 id="_02-重要-工程化脚手架核心服务架构设计" tabindex="-1"><a class="header-anchor" href="#_02-重要-工程化脚手架核心服务架构设计" aria-hidden="true">#</a> 02: 重要：工程化脚手架核心服务架构设计</h2><p>如上</p><h2 id="_03-创建工程化脚手架配套配置文件" tabindex="-1"><a class="header-anchor" href="#_03-创建工程化脚手架配套配置文件" aria-hidden="true">#</a> 03：创建工程化脚手架配套配置文件</h2><h3 id="基本框架雏形构建" tabindex="-1"><a class="header-anchor" href="#基本框架雏形构建" aria-hidden="true">#</a> 基本框架雏形构建</h3><ol><li><p>修改<code>service/Service.js</code>，增加解析流程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULT_CONFIG_NAME</span> <span class="token operator">=</span> <span class="token string">&#39;imooc-build.config.json&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> opts
    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动服务&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 解析配置文件</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，可以输出以下日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> imooc-build start
start server
端口号8080被占用，建议使用新端口号8081
? <span class="token number">8080</span>已被占用，是否启用新端口号8081? Yes
启动服务
解析配置文件

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="新建测试实例" tabindex="-1"><a class="header-anchor" href="#新建测试实例" aria-hidden="true">#</a> 新建测试实例</h3><ol><li><p>接下来我们新建测试实例，新建<code>samples</code>文件夹，终端运行初始化</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>package.json</code>,增加运行脚本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建配置文件<code>samples/imooc-build.config.json</code>,内容如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/inedx.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>samples/src/inedx.js</code>内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello imooc-build test project&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_04-配置文件解析功能开发" tabindex="-1"><a class="header-anchor" href="#_04-配置文件解析功能开发" aria-hidden="true">#</a> 04：配置文件解析功能开发</h2><blockquote><p>我们还可以需要支持通过 --config 来指定配置文件</p></blockquote><h3 id="获取参数流程" tabindex="-1"><a class="header-anchor" href="#获取参数流程" aria-hidden="true">#</a> 获取参数流程</h3><ol><li><p>修改<code>lib/imooc-build.js</code>文件，增加<code>--config</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c --config &lt;config&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;配置文件路径&#39;</span><span class="token punctuation">)</span>

program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c --config &lt;config&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;配置文件路径&#39;</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>startServer.js</code>,接收参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token parameter">args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 接收参数，注意这里后续参数解析会变为字符串，</span>
  <span class="token comment">// 如果不存在时，就会变为字符串的 undefinded, &quot;undefined&quot;</span>
  <span class="token comment">// 需要给个默认值</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> args
  <span class="token keyword">const</span> srciprtPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 运行脚本时也要增加参数</span>
  <span class="token keyword">const</span> configParams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;--port 8080&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--config &#39;</span> <span class="token operator">+</span> config<span class="token punctuation">]</span>
  child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> configParams<span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  child<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 这里增加参数传入</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着修改<code>devService.js</code>文件，处理参数</p><blockquote><p>这里之前我们通过 <strong>const</strong> params = process.argv.slice(2) 来处理参数，并最终放在了 paramObj 中</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> defaultPort <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token constant">DEFAUL_PORT</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// 增加如下代码</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> paramObj<span class="token punctuation">.</span>config <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> newPort<span class="token punctuation">,</span>
    <span class="token comment">// 这里增加参数传递</span>
    config<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着修改<code>/lib/service/Service.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解析配置文件</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，最终可以看到如下效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start <span class="token parameter variable">--config</span> build.config.js
解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8081</span>, config: <span class="token string">&#39;build.config.js&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这个获取配置参数的流程就此完成了。</p></li></ol><h3 id="完善路径解析功能" tabindex="-1"><a class="header-anchor" href="#完善路径解析功能" aria-hidden="true">#</a> 完善路径解析功能</h3><ol><li><p>修改<code>Service.js</code>，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token comment">// 增加是否是绝对路径的判断处理</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args
    <span class="token keyword">let</span> configPath <span class="token operator">=</span> config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configPath <span class="token operator">=</span> config
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意：这里不要加__dirname: 可以用来动态获取当前文件所属目录的绝对路径</span>
        configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>samples/package.json</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start --config ./imooc-build.config.json&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>samples</code>文件夹下运行终端，结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev
<span class="token operator">&gt;</span> imooc-build start <span class="token parameter variable">--config</span> ./imooc-build.config.json
启动服务
/Users/yuangao/Desktop/imooc-build/samples/imooc-build.config.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_05-fast-glob实现文件遍历功能" tabindex="-1"><a class="header-anchor" href="#_05-fast-glob实现文件遍历功能" aria-hidden="true">#</a> 05: fast-glob实现文件遍历功能</h2><h3 id="查找默认配置文件路径" tabindex="-1"><a class="header-anchor" href="#查找默认配置文件路径" aria-hidden="true">#</a> 查找默认配置文件路径</h3>`,15),v=n("p",null,"上一小节中，只处理了 config 存在的时候，如果没有存在呢？我们就需要进行一个全局的搜索，有两种形式一种是 imooc-build.config.js 还有一种是 imooc-build.config.json",-1),m={href:"https://www.npmjs.com/package/fast-glob",target:"_blank",rel:"noopener noreferrer"},b=t(`<ol><li><p>安装<code>fast-glob</code>依赖库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> fast-glob <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>Service.js</code>，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认文件配置名字</span>
<span class="token keyword">const</span> <span class="token constant">DEFAULT_CONFIG_NAME</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;imooc-build.config.(json|js)&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fast-glob&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 设置绝对路径文件夹</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dir <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token comment">// 如果没有获取到配置文件的参数，就开始查询默认的文件是否存在</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>configFile<span class="token punctuation">]</span> <span class="token operator">=</span> fg<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CONFIG_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">cwd</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">,</span>
        <span class="token literal-property property">absolute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      configPath <span class="token operator">=</span> configFile
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果<code>samples</code>文件夹下有这个文件<code>imooc-build.config.json</code>或者<code>imooc-build.config.js</code></p></li><li><p>修改<code>package.json</code>中的配置脚本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start --config imooc-build.config.json&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev:noconfig&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，就会有如下效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
/Users/gaoyuan/Desktop/imooc-build/samples/imooc-build.config.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="没有找到默认文件逻辑处理" tabindex="-1"><a class="header-anchor" href="#没有找到默认文件逻辑处理" aria-hidden="true">#</a> 没有找到默认文件逻辑处理</h3><blockquote><p>如果没有找到默认文件，我们就直接退出程序</p></blockquote><ol><li><p>修改<code>Service.js</code>，文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里增加配置文件判断逻辑，</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>samples</code>文件夹下的配置文件名字，比如: <code>imooc-build.config.json</code>改为<code>imooc-build.config.json1</code>,</p></li><li><p>重新终端运行<code>npm run dev:noconfig</code>,效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
配置文件不存在，终止执行 // 直接退出了

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_06-多类型配置文件结构解析" tabindex="-1"><a class="header-anchor" href="#_06-多类型配置文件结构解析" aria-hidden="true">#</a> 06：多类型配置文件结构解析</h2><blockquote><ul><li>如果文件是 json 文件，我们就直接 require 进来，获取各个参数</li><li>如果是 js 文件，我们也可以通过 require 进来 <ul><li>如果内部文件采用 cjs 方式引入依赖，那就会解析正常</li><li>如果内部文件采用 esModule 方式引入依赖，那就会造成解析错误</li></ul></li><li>node 目前是支持运行 .mjs 类型的采用 esModule 标准书写的代码的</li></ul></blockquote><h3 id="文件是-json-类型" tabindex="-1"><a class="header-anchor" href="#文件是-json-类型" aria-hidden="true">#</a> 文件是 json 类型</h3><ol><li><p>配置文件名字修改为<code>imooc-build.config.json</code>，内容如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/inedx.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>Service.js</code>中的代码，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里增加配置文件判断逻辑，</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token comment">// 这里增加 json 文件处理逻辑</span>
      <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
/Users/gaoyuan/Desktop/imooc-build/samples/imooc-build.config.json
<span class="token punctuation">{</span> entry: <span class="token string">&#39;src/inedx.js&#39;</span>, plugins: <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> // 这是文件内容，获取成功
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="文件是-js-类型" tabindex="-1"><a class="header-anchor" href="#文件是-js-类型" aria-hidden="true">#</a> 文件是 js 类型</h3><ol><li><p>配置文件名字修改为<code>imooc-build.config.js</code>，修改内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;src/inedx.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>Service.js</code>中的代码，增加处理<code>.js</code>文件逻辑，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 增加 isJs 文件逻辑判断</span>
      <span class="token keyword">const</span> isJs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isJs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下(这里正常解析，没问题)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> entry: <span class="token string">&#39;src/inedx.js&#39;</span>, plugins: <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>imooc-build.config.js</code>，内容如下(用 cjs 形式引入代码)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下(这里也会正常解析，没问题)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  entry: <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/samples/src/index.js&#39;</span>,
  plugins: <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>但是如果代码中含有 esModule 标准的代码，修改<code>imooc-build.config.js</code>如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下(这里就会解析报错)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> path from <span class="token string">&#39;path&#39;</span>
^^^^^^

SyntaxError: Cannot use <span class="token function">import</span> statement outside a module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="文件是-mjs-类型" tabindex="-1"><a class="header-anchor" href="#文件是-mjs-类型" aria-hidden="true">#</a> 文件是 mjs 类型</h3><ol><li><p>新建测试代码<code>src/test.mjs</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端命令，效果如下（运行正常）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> src/test.mjs 
<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置文件名字修改为<code>imooc-build.config.mjs</code>，修改内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当然，这里需要修改<code>service/Service.js</code>，修改地方如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULT_CONFIG_NAME</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;imooc-build.config.(json|mjs|js)&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 增加 mjs 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>Service.js</code>中的代码，增加处理<code>.mjs</code>文件逻辑，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 增加 isMJs 文件逻辑判断</span>
      <span class="token keyword">const</span> isMjs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.mjs&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isJs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isMjs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下(报错)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Error <span class="token punctuation">[</span>ERR_REQUIRE_ESM<span class="token punctuation">]</span>: require<span class="token punctuation">(</span><span class="token punctuation">)</span> of ES Module /Users/gaoyuan/Desktop/imooc-build/samples/imooc-build.config.mjs not supported.
Instead change the require of /Users/gaoyuan/Desktop/imooc-build/samples/imooc-build.config.mjs to a dynamic import<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">which</span> is available <span class="token keyword">in</span> all CommonJS modules.
    at Service.resolveConfig <span class="token punctuation">(</span>/Users/gaoyuan/Desktop/imooc-build/lib/service/Service.js:47:24<span class="token punctuation">)</span>
    at Service.start <span class="token punctuation">(</span>/Users/gaoyuan/Desktop/imooc-build/lib/service/Service.js:15:10<span class="token punctuation">)</span>
    at /Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js:50:13 <span class="token punctuation">{</span>
  code: <span class="token string">&#39;ERR_REQUIRE_ESM&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里和视频教程有出入，需要修改<code>Service.js</code>中的代码，修改处理<code>.mjs</code>文件逻辑，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token comment">// 需要支持异步</span>
  <span class="token keyword">async</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> isMjs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.mjs&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isJs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isMjs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 修改 isMjs 文件类型逻辑处理</span>
        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>default<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>并且修改<code>imooc-build.config.mjs</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下(解析正常)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  entry: <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/samples/src/index.js&#39;</span>,
  plugins: <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="总体代码整合" tabindex="-1"><a class="header-anchor" href="#总体代码整合" aria-hidden="true">#</a> 总体代码整合</h3><ol><li><p><code>Service.js</code>中的代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULT_CONFIG_NAME</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;imooc-build.config.(json|mjs|js)&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fast-glob&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> opts
    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dir <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动服务&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 解析配置文件</span>
  <span class="token keyword">async</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args
    <span class="token keyword">let</span> configPath <span class="token operator">=</span> config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configPath <span class="token operator">=</span> config
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果没有配置，就查找默认文件</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>configFile<span class="token punctuation">]</span> <span class="token operator">=</span> fg<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CONFIG_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">cwd</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">,</span>
        <span class="token literal-property property">absolute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      configPath <span class="token operator">=</span> configFile
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> configParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> isJs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> isMjs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.mjs&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configParams <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isJs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configParams <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isMjs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configParams <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
        configParams <span class="token operator">=</span> configParams<span class="token punctuation">.</span>default
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configParams<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;配置文件不存在，终止执行&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:noconfig
解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  entry: <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/samples/src/index.js&#39;</span>,
  plugins: <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意：</h3><ul><li>从上面可以看出，如果配置文件是 json 类型，可以正常 require 加载</li><li>如果文件是 js 类型且内部没有 esmodule 形式的代码，也可以正常通过 require 来加载</li><li>如果文件是 js 类型且内部代码符合 esmodule 形式，那就要变为 mjs 文件后缀，且导出采用 export default 形式。外部导入使用 import</li></ul><h2 id="_07-基于npmlog的公共日志类封装" tabindex="-1"><a class="header-anchor" href="#_07-基于npmlog的公共日志类封装" aria-hidden="true">#</a> 07：基于npmlog的公共日志类封装</h2>`,17),g=n("p",null,"我们目前的日志都是基于 console.log 但是某些是测试日志，这样我们就可以通过 npmlog 这个库来进行处理",-1),f={href:"https://www.npmjs.com/package/npmlog",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"举例：下述方法是不同 level 的打印",-1),y=n("ul",null,[n("li",null,"log.silly(prefix, message, ...)"),n("li",null,"log.verbose(prefix, message, ...)"),n("li",null,"log.info(prefix, message, ...)"),n("li",null,"log.http(prefix, message, ...)"),n("li",null,"log.warn(prefix, message, ...)"),n("li",null,"log.error(prefix, message, ...)")],-1),w=t(`<h3 id="初步了解-npmlog-库" tabindex="-1"><a class="header-anchor" href="#初步了解-npmlog-库" aria-hidden="true">#</a> 初步了解 npmlog 库</h3><ol><li><p>安装依赖库（在脚手架中）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> npmlog <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建<code>utils/log.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> npmlog <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;npmlog&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">LOG_LEVELS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;verbose&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token constant">LOG_LEVEL</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span>
npmlog<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token constant">LOG_LEVELS</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token constant">LOG_LEVEL</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">?</span> <span class="token constant">LOG_LEVEL</span> <span class="token operator">:</span> <span class="token string">&#39;info&#39;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> npmlog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们修改<code>Service.js</code>,增加如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../utils/log&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析配置文件</span>
  <span class="token keyword">async</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;解析配置文件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时我们在<code>samples</code>文件夹下，重新运行终端命令（效果如下，并且是有不同颜色的区别）</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6208a08896a142088dfd2c28c48e1acd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>由上图可以看到我们的日志输出，只输出了<code>info</code>类型的日志，<code>verbose</code>类型的日志并没有输出</p></li><li><p>如果更改<code>utils/log.js</code>文件，改变<code>level</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> npmlog <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;npmlog&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">LOG_LEVELS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;verbose&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// npmlog.level = LOG_LEVELS.indexOf(LOG_LEVEL) &gt; 0 ? LOG_LEVEL : &#39;info&#39;</span>
npmlog<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token string">&#39;verbose&#39;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> npmlog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次运行终端命令（效果如下）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73be3f8e462742a08e17c58d97122aa4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="完善代码" tabindex="-1"><a class="header-anchor" href="#完善代码" aria-hidden="true">#</a> 完善代码</h3><ol><li><p>修改<code>utils/log.js</code>，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> npmlog <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;npmlog&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">LOG_LEVELS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;verbose&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token constant">LOG_LEVEL</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span>
npmlog<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token constant">LOG_LEVELS</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token constant">LOG_LEVEL</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token constant">LOG_LEVEL</span> <span class="token operator">:</span> <span class="token string">&#39;info&#39;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> npmlog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这个时候我们可以在脚手架中增加一个<code>-d</code>的全局 option 来表示正在调试阶段，并且利用前置钩子，修改<code>bin/imooc-build.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 增加一个全局的 -d 表示 debug 模式</span>
program<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d --debug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;开启调试模式&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">&#39;preAction&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">thisCommand<span class="token punctuation">,</span> actionCommand</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> debug <span class="token punctuation">}</span> <span class="token operator">=</span> actionCommand<span class="token punctuation">.</span><span class="token function">optsWithGlobals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span> <span class="token operator">=</span> <span class="token string">&#39;verbose&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们在<code>samples/package.json</code>中新建一个脚本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;dev:debug&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start -d&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样我们在<code>samples</code>文件夹下的终端运行</p></li><li><p>运行<code>npm run dev:noconfig</code>时效果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e524ff91dcb74a05be33df70b055ce5c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>运行<code>npm run dev:debug</code>时效果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47ff40e2623945e6b736631be7df03f8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_08-配置文件修改时自动重启服务逻辑优化" tabindex="-1"><a class="header-anchor" href="#_08-配置文件修改时自动重启服务逻辑优化" aria-hidden="true">#</a> 08：配置文件修改时自动重启服务逻辑优化</h2><h3 id="抽离配置文件获取逻辑" tabindex="-1"><a class="header-anchor" href="#抽离配置文件获取逻辑" aria-hidden="true">#</a> 抽离配置文件获取逻辑</h3><blockquote><p>目前我们的脚手架是再监听<code>start/config.js</code>这个临时配置文件，我们需要改为监听实际运行项目中的测试文件，这里有两个部分都使用了</p><ul><li>一个是 <strong>startServer.js</strong> 中的 <strong>runWatcher</strong> 函数</li><li>一个是 <strong>service/Service.js</strong> 中的读取配置文件部分</li></ul></blockquote><ol><li><p>新建<code>utils/index.js</code>,里面导出<code>getConfigFile</code>功能的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULT_CONFIG_NAME</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;imooc-build.config.+(json|mjs|js)&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> fg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fast-glob&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> fg<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CONFIG_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    cwd<span class="token punctuation">,</span>
    <span class="token literal-property property">absolute</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 这里返回数组的最后一项，因为如果有多个匹配了,优先使用 .json 文件</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> getConfigFile <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>中的部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getConfigFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../utils&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     	<span class="token comment">// 修改为根据方式获取</span>
      configPath <span class="token operator">=</span> <span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>start/StartServer.js</code>中的<code>runWatcher</code>函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getConfigFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../utils&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../utils/log&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 定义全局参数，重启时候需要记得上一次命令时候传递的参数</span>
<span class="token keyword">let</span> serverArgs

<span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;config file changed&#39;</span><span class="token punctuation">)</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;config fill changed-----&#39;</span><span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span>serverArgs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 启动配置监听服务</span>
  <span class="token comment">// 通过公共方法进行获取配置文件</span>
  <span class="token keyword">let</span> configPath
  <span class="token comment">// 如果当前配置参数里面有 config 就进行监听，如果没有就是用默认文件地址</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token operator">?</span> args<span class="token punctuation">.</span>config <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>config<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    configPath <span class="token operator">=</span> <span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  chokidar
    <span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;erro&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;file watch error!&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 接收参数</span>
  serverArgs <span class="token operator">=</span> args
  <span class="token function">runServer</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token comment">// 配置文件这里要传递参数</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时我们重新运行终端，效果正常（运行命令：<code>npm run dev:debug</code>，此时全部日志均被打印出来，如下图）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/061f5bcab63f4b7093dd76e5e9cd3efb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>并且此时我们监听配置文件是<code>samples</code>文件夹下的<code>imooc-build.config.mjs</code>，修改文件，比如增加<code>output: path.resolve(&#39;dist&#39;)</code> 效果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee2b7f9d39464649951c0c43cd11e02f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>这里明显有问题：因为我们在<code>onChange</code>事件中打印了<strong>两个console</strong>，而上图中只有一个，下面就来解决,很显然是<code>npmlog.level</code>被重置了</p></li></ol><h3 id="重启服务后问题的解决" tabindex="-1"><a class="header-anchor" href="#重启服务后问题的解决" aria-hidden="true">#</a> 重启服务后问题的解决</h3><ol><li><p>此时我们在<code>onChange</code>、<code>startServer</code>函数中查看两个值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里我们查看 p<wbr>rocess.env.LOG_LEVEL、log.level</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>level<span class="token punctuation">)</span>
  log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;config file changed&#39;</span><span class="token punctuation">)</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;config fill changed-----&#39;</span><span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span>serverArgs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里我们也进行一个查看</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>level<span class="token punctuation">)</span>
  serverArgs <span class="token operator">=</span> args
  <span class="token comment">// 1. 通过子进程启动一个 webpack-dev-server 服务</span>
  <span class="token comment">// 1.1 子进程启动可以避免主进程收到影响</span>
  <span class="token comment">// 1.2 子进程启动可以方便重启，解决修改配置后无法重启的问题</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token comment">// 2. 监听配置修改</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新更改配置文件，查看终端结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>verbose info
verbose info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里可以看到<code>p<wbr>rocess.env.LOG_LEVEL</code>已经发生了更改，但是<code>log.level</code>并没有，因为这里并不是数据绑定，在钩子执行时候，<code>startServer.js</code>中的<code>log</code>已经完成了引用，后续的更改，所以重点是，在引入前进行更改</p></li><li><p>可以在<code>StartServer.js</code>函数中进行更改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里进行更改</span>
  log<span class="token punctuation">.</span>level <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">LOG_LEVEL</span>
  serverArgs <span class="token operator">=</span> args
  <span class="token function">runServer</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从新更改配置文件，就可以看到如下打印日志</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b890fd3895474c708486eda9d21802de~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_09-高级特性-生命周期函数hooks注册" tabindex="-1"><a class="header-anchor" href="#_09-高级特性-生命周期函数hooks注册" aria-hidden="true">#</a> 09：高级特性：生命周期函数hooks注册</h2><blockquote><p>目前这个脚手架我们支持，在配置文件中注册钩子函数，数据格式如下</p><p>hooks: [</p><p>​ [ &#39;created&#39;, <strong>function</strong> () {},],</p><p>​ [ &#39;configResolved&#39;, <strong>function</strong> () { },],</p><p>]</p></blockquote><ol><li><p>修改<code>samples</code>文件夹下的配置文件<code>samples/imooc-build.config.mjs</code>,添加钩子配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token literal-property property">hooks</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span> <span class="token string">&#39;configResolved&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configResolved&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>中的代码，注册钩子函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里需要增加改为同步代码，解析配置后需要赋值给 this 上</span>
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configPath <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token comment">// 最后加上赋值</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> configParams
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    
  <span class="token punctuation">}</span>
    
  <span class="token comment">// 注册钩子函数</span>
  <span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;解析hooks&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// hooks 数据结构 [[&quot;int&quot;, function()],&quot;success&quot;, function(){}]</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> hooks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    hooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">hook</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">]</span> <span class="token operator">=</span> hook
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;&amp;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> key <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> existHook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>existHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;hooks&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新再<code>samples</code>终端内部运行命令<code>npm run dev:debug</code>，效果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a7c9f6171ee4706b4f0152d4446991b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_10-实现自定义hooks的触发逻辑" tabindex="-1"><a class="header-anchor" href="#_10-实现自定义hooks的触发逻辑" aria-hidden="true">#</a> 10: 实现自定义hooks的触发逻辑</h2><ol><li><p>新建<code>service/const.js</code>文件，在这里定义所有的钩子类型，初步代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">HOOK_START</span> <span class="token operator">=</span> <span class="token string">&#39;start&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">HOOK_START</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">HOOK_START</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./const&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">HOOKSARR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">HOOK_START</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 在这里我们进行触发钩子函数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
	
  <span class="token comment">// 注册钩子函数中，我们过滤掉不符合定义钩子的 key</span>
  <span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;解析hooks&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// hooks 数据结构 [[&quot;int&quot;, function()],&quot;success&quot;, function(){}]</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> hooks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    hooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">hook</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">]</span> <span class="token operator">=</span> hook
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        key <span class="token operator">&amp;&amp;</span>
        <span class="token constant">HOOKSARR</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 增加折行代码，过滤掉不属于我们定义的钩子</span>
        fn <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">typeof</span> key <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> existHook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>existHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;hooks&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 触发钩子函数</span>
  <span class="token keyword">async</span> <span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> fn <span class="token keyword">of</span> hook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// 使用 for of 实现同步执行，并传入参数 this，根据自己需要来</span>
          <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端命令<code>npm run dev:debug</code>，内容如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e40457f919694fcf8ff2a3183beef9ae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_11-高级特性-json-配置支持-function-传入" tabindex="-1"><a class="header-anchor" href="#_11-高级特性-json-配置支持-function-传入" aria-hidden="true">#</a> 11: 高级特性：json 配置支持 function 传入</h2><blockquote><p>上小节中的配置文件类型是 .mjs, 内部可以直接使用 函数，可以是对于 json 配置文件呢？他应该是支持输入文件路径，如</p><p>{ &quot;hooks&quot;: [[ &quot;start&quot;, &quot;xxx/xxx/文件1.js&quot;], [ &quot;start&quot;, &quot;xxx/xxx/文件2.js&quot;]] }</p><p>或者后面这个函数直接在 node_modules 中，这样写</p><p>{ &quot;hooks&quot;: [[ &quot;start&quot;, &quot;文件1.js&quot;], [ &quot;start&quot;, &quot;文件2.js&quot;]] }</p></blockquote><h3 id="json配置-hooks中加载非node-modules的文件" tabindex="-1"><a class="header-anchor" href="#json配置-hooks中加载非node-modules的文件" aria-hidden="true">#</a> json配置 hooks中加载非node_modules的文件</h3><ol><li><p>修改<code>imooc-build.config.mjs</code>为<code>imooc-build.config.json</code>文件如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.js&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.second.mjs&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>plugins/start.hook.js</code>以及<code>plugins/start.hook.second.mjs</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// start.hook.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startHookOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-hooks-one&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// start.hook.second.mjs</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">startHookTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-hooks-two&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>utils/index.js</code>中增加<code>loadMoudle</code>方法用来处理加载模块(包括是 json、js、mjs的处理),内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span> <span class="token operator">?</span> modulePath <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isJson <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.json&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> isJs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> isMjs <span class="token operator">=</span> configPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.mjs&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> configParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      configParams <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isJs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 注意这里 使用了 require 方式加载，所以 js 中需要使用 cjs 标准</span>
      configParams <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isMjs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// mjs 类型就代表内部使用了 esModule 标准</span>
      configParams <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> configParams
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> loadMoudle <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>Service.js</code>中的代码,修改部分如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> loadMoudle <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../utils&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 注册函数需要使用 同步，因为内部有使用 mjs 同步加载的可能</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 注册钩子函数</span>
  <span class="token keyword">async</span> <span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;解析hooks&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> hooks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token comment">// 修改 forEach 为 for...of</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> hook <span class="token keyword">of</span> hooks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">]</span> <span class="token operator">=</span> hook
      <span class="token keyword">if</span> <span class="token punctuation">(</span> key <span class="token operator">&amp;&amp;</span> <span class="token constant">HOOKSARR</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> key <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       	<span class="token keyword">const</span> existHook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>existHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果是函数类型，直接添加</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果是字符串类型，默认是一个文件路径，就需要进行加载调用</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;hooks&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>samples</code>终端重新运行<code>npm run dev:debug</code>,结果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bedde8585ec44cf9f9f6fd6cb424d11~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="json配置-hooks中加载node-modules的文件" tabindex="-1"><a class="header-anchor" href="#json配置-hooks中加载node-modules的文件" aria-hidden="true">#</a> json配置 hooks中加载node_modules的文件</h3><ol><li><p>修改<code>imooc-build.config.json</code>文件如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.js&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.second.mjs&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;imooc-build-start-hook&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着新建文件<code>samples/node_modules/imooc-build-start-hook/index.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token function">startHookThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-hooks-three&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时如果执行终端，发现会报错</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa8e2bf846f84a95b03dcedc131d4cca~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>查看上图我们得知，最后一个<code>hooks</code>配置后获得是空字符串<code>&quot;&quot;</code>,分析原因可知是如下代码的问题<code>utils/index.js</code>中的<code>loadModule</code>函数中，根据路径判断是否为绝对路径后，然后又判断了路径是否存在，如果把路径进行打印，更改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span> <span class="token operator">?</span> modulePath <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configPath&#39;</span><span class="token punctuation">,</span> configPath<span class="token punctuation">)</span> <span class="token comment">// 增加这一行</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到如下结果（显然第三个路径代码路径与我们的<code>node_modules</code>下的文件路径不一致）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>configPath /Users/yuangao/Desktop/imooc-build/samples/plugins/start.hook.js
configPath /Users/yuangao/Desktop/imooc-build/samples/plugins/start.hook.second.mjs
configPath /Users/yuangao/Desktop/imooc-build/samples/imooc-build-start-hook // 显然这个文件路径下没有该文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们要对<code>loadModule</code>函数进行处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// aaa.js ./src/aaa.js</span>
  <span class="token keyword">let</span> configPath
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modulePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> modulePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明他是一个路径</span>
    configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span> <span class="token operator">?</span> modulePath <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 它是一个包, 需要借助 require.resolve 来加载 运行命令目录下的 node_modules下的文件或者一层层往上找</span>
    configPath <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configPath&#39;</span><span class="token punctuation">,</span> configPath<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到如下结果（这里就加载成功了。钩子函数也执行成功）</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4700afd91ed7452fafe724a7a99dacd8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>接着我们继续修改<code>imooc-build.config.json</code>文件如下（因为默认不值 .mjs 后缀，如果是 .mjs类型我们需要配置时加上）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.js&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;./plugins/start.hook.second.mjs&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;imooc-build-start-hook&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;imooc-build-start-hook-second/index.mjs&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>samples/node_modules/imooc-build-start-hook-second/index.mjs</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">startHookFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-hooks-four&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们要对<code>loadModule</code>函数进行处理（因为 <code>index.mjs</code> 中含有 <code>/</code>,但是他是一个包）,当然我觉得这里有很多种方法解决，需要根据具体的业务场景来进行处理，此处方案不一定是最好的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ./src/aaa.js</span>
  <span class="token keyword">let</span> configPath
  <span class="token comment">// 如果文件路径不是以 / 或者 . 开头我就认为你是一个包</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modulePath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> modulePath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明他是一个路径</span>
    configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
      <span class="token operator">?</span> modulePath
      <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 它是一个包</span>
    configPath <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;configPath&#39;</span><span class="token punctuation">,</span> configPath<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到如下结果（这里就加载成功了。钩子函数也执行成功）</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d4a64a500a34cee82a2da17fd1cf5bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_12-模块加载问题修复和模块加载原理解析" tabindex="-1"><a class="header-anchor" href="#_12-模块加载问题修复和模块加载原理解析" aria-hidden="true">#</a> 12：模块加载问题修复和模块加载原理解析</h2><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>`,23),j={href:"https://juejin.cn/post/6844904055806885895",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/7040728919967793160",target:"_blank",rel:"noopener noreferrer"},q=t(`<blockquote><p>见上节</p><p>require.resolve：这里查找模块时，中间会调用 Module._resolveLookupPaths，如果为模块路径时，返回<code>parent.paths</code>，后续在这些模块文件夹里查找。</p></blockquote><p>主要点是上一小节中的如下代码，使用<code>require.resolve</code>加载模块时候，重新指定目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>configPath <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-插件注册逻辑开发" tabindex="-1"><a class="header-anchor" href="#_13-插件注册逻辑开发" aria-hidden="true">#</a> 13: 插件注册逻辑开发</h2><p>对于插件逻辑，我们支持以下几种形式</p><ul><li>数组形式：<strong>[[xxx, { xx: xxx}], &quot;xxx&quot;, [&#39;xxx&#39;, function(){ }], function(){ } ]</strong>, <ul><li>数组内部支持字符串形式，</li><li>也支持数组形式：第一个参数是库包，第二个是一个对象配置参数</li><li>也支持数组形式：第一个参数是字符串，第二个参数是函数</li><li>也支持直接是一个参数形式</li></ul></li><li>函数形式</li></ul><h3 id="支持字符串形式" tabindex="-1"><a class="header-anchor" href="#支持字符串形式" aria-hidden="true">#</a> 支持字符串形式</h3><ol><li><p>修改<code>samples/imooc-build.config.json</code>文件，增加<code>plugins</code>属性，增加代码如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;imooc-build-test&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>samples/node_modules</code>文件夹下，新建<code>imooc-build-test/index.js</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">pluginFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a imooc-build-test plugin&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>service/Service.js</code>中增加<strong>注册插件</strong>和<strong>执行插件</strong>函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 增加插件属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
 	<span class="token operator">...</span>
 
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 触发钩子函数使用 await 改为同步</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
    <span class="token comment">// 增加注册插件、运行插件函数</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 注册插件</span>
  <span class="token comment">// 支持的插件形式繁多</span>
  <span class="token comment">// 1. 数组形式：[[xxx, { xx: xxx}], &quot;xxx&quot;]</span>
  <span class="token comment">// 2. 也支持 前面是函数名，后面是具体的函数实现：[[&#39;xxx&#39;, function(){ }]]</span>
  <span class="token comment">// 3. 就是一个函数 [ function(){ }, ]</span>
  <span class="token keyword">async</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> plugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这里先判断是字符串形式的情况下</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 运行插件</span>
  <span class="token keyword">async</span> <span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;run plugins&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到如下结果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6eb424e9edd34aa2b0cf5b7021bce7ae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="支持字符串-入参形式" tabindex="-1"><a class="header-anchor" href="#支持字符串-入参形式" aria-hidden="true">#</a> 支持字符串+入参形式</h3><ol><li><p>修改<code>samples/imooc-build.config.json</code>文件，增加代码如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;imooc-build-test&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 增加数组形式的</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;imooc-build-test-two&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>samples/node_modules/imooc-build-test-two/index.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">pluginTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a imooc-build-two plugin&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>service/Service.js</code>增加处理代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">async</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> plugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>
            <span class="token comment">// 这里我们修改为 对象形式</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mod</span><span class="token operator">:</span> module <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是数组形式，就进行解构，然后加载，添加</span>
            <span class="token keyword">const</span> <span class="token punctuation">[</span>pluginPath<span class="token punctuation">,</span> pluginParams<span class="token punctuation">]</span> <span class="token operator">=</span> plugin
            <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadMoudle</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              <span class="token literal-property property">mod</span><span class="token operator">:</span> module<span class="token punctuation">,</span>
              <span class="token literal-property property">params</span><span class="token operator">:</span> pluginParams<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，可以看到如下结果</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/492a8a6c1ecf489fb0d28de18527ab93~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="支持文件形式-参数" tabindex="-1"><a class="header-anchor" href="#支持文件形式-参数" aria-hidden="true">#</a> 支持文件形式+（参数）</h3><ol><li><p>修改<code>samples/imooc-build.config.json</code>文件，增加代码如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;imooc-build-test&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;imooc-build-test-two&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
   	<span class="token comment">// 这里我们增加一个文件</span>
    <span class="token string">&quot;./plugins/imooc-build-plugin-one.js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 然后在执行一个文件形式，+ 配置参数</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;./plugins/imooc-build-plugin-one.js&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token property">&quot;c&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>samples/plugins/imooc-build-plugin-one.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startPluginFirst</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-plugins-one&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其实目前的代码我们是支持这种形式的，运行终端，效果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15a7a7dad9744db7aeeddc36f3597df0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="支持函数形式" tabindex="-1"><a class="header-anchor" href="#支持函数形式" aria-hidden="true">#</a> 支持函数形式</h3><ol><li><p>这时候我们不能用<code>json</code>形式了，修改<code>samples/imooc-build.config.json</code>文件为<code>samples/imooc-build.config.mjs</code>，代码如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>const entry = &#39;src/index.js&#39;
import path from &#39;path&#39;
export default <span class="token punctuation">{</span>
  entry<span class="token operator">:</span> path.isAbsolute(entry) ? entry <span class="token operator">:</span> path.resolve(entry)<span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    &#39;imooc-build-test&#39;<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      &#39;imooc-build-test-two&#39;<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    &#39;./plugins/imooc-build-plugin-one.js&#39;<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      &#39;./plugins/imooc-build-plugin-one.js&#39;<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 注意注意：这里我们有一个函数形式的插件形式</span>
    function pluginInner() <span class="token punctuation">{</span>
      console.log(&#39;this is a plugin inner func&#39;)
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  hooks<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      &#39;start&#39;<span class="token punctuation">,</span>
      function () <span class="token punctuation">{</span>
        console.log(&#39;start&#39;)
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>文件内容，支持函数形式，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">async</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> plugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果参数为函数，我们直接 push 即可</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mod</span><span class="token operator">:</span> plugin <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端命令，效果如下(可以看到函数形式的参数，我们也正常添加了)</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25b46529914149d691aa300142026d57~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="plugins-属性是一个函数形式" tabindex="-1"><a class="header-anchor" href="#plugins-属性是一个函数形式" aria-hidden="true">#</a> plugins 属性是一个函数形式</h2><p>配置文件中的 plugins 属性返回一个数组，返回的数组参数形式跟上述形式一致</p><ol><li><p>修改<code>samples/imooc-build.config.mjs</code>,代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// plugins 属性变为一个函数</span>
  <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;imooc-build-test&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;imooc-build-test-two&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">pluginInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is a plugin inner func&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hooks</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>文件内容，支持函数形式，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">async</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  	<span class="token comment">// 这里 const 修改为 let</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> plugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在最开始就行是否是函数判断</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugins <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是函数，就执行函数并返回</span>
        plugins <span class="token operator">=</span> <span class="token function">plugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 以下逻辑和之前一样不变</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下（可以看到正常运行）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39d2c87e9c3148629c111612d150265b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_14-高级特性-webpack-chain详细讲解" tabindex="-1"><a class="header-anchor" href="#_14-高级特性-webpack-chain详细讲解" aria-hidden="true">#</a> 14：高级特性：webpack-chain详细讲解</h2>`,18),P={href:"https://www.npmjs.com/package/webpack-chain",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[s("我们经常使用的 "),n("strong",null,"vue-cli"),s(" 中配置webpack 就有两种方式，一种是")],-1),S={href:"https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"configureWebpack 官方文档",-1),O={href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"},E={href:"https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"Vue CLI",-1),L={href:"https://github.com/mozilla-neutrino/webpack-chain",target:"_blank",rel:"noopener noreferrer"},W=t(`<ol><li><p>安装依赖库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> webpack-chain <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>中增加<code>webpack-chain</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-chain&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 在解析配置项后，进行注册 webpack 配置</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 注册webpack 配置</span>
  <span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// entry: { inedx: &quot;index.js&quot; }</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig
      <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;webpack config&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">toConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到如下效果（注意查看这里都是 webpack的配置相关，只不过它让我们可以用链式调用的方式来进行操作，方便了很多）</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54582fc4d1c541428d52a60ec42d538d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>我们可以点击其中一个方法，比如<code>.entry</code>进入到内部查看它有哪些方式，如下图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d08bf8d23c6f4276af4f734a0a4e4194~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>当然还有其他用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 清空所有的</span>
entry<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// entry 添加 src/main.js src/bundle.js</span>
entry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/bundle.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// entry 是一个 chainset 类型的解构，根据官网他还有以下方式：add(value)、prepend(value)、clear()、delete(value)、has(value)、values()、merge(arr)、batch(handler)、when(condition, whenTruthy, whenFalsy) 等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_15-webpack-chain支持-loader-和-plugin" tabindex="-1"><a class="header-anchor" href="#_15-webpack-chain支持-loader-和-plugin" aria-hidden="true">#</a> 15：webpack-chain支持 loader 和 plugin</h2><h3 id="支持-loader" tabindex="-1"><a class="header-anchor" href="#支持-loader" aria-hidden="true">#</a> 支持 loader</h3><ol><li><p>修改<code>service/Service.js</code>，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
   <span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// entry: { inedx: &quot;index.js&quot; }</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig
      <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
    entry<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    entry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      entry<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// module 中 rule 添加处理 js </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;lint&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;/.js$/&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;eslint&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;eslint-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;webpack config&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">toConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时运行终端，效果如下(这里我们就可以看到如下配置)</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcee74b767c461f88779b3e49f7024d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>这上面我们就添加了部分<code>loader</code>,我们还可以使用如下代码进行继续处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lintRule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;lit&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 注意这个名字和前面一致</span>
lintRule<span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
lintRule<span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
lintRule<span class="token punctuation">.</span>uses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="支持-plugin" tabindex="-1"><a class="header-anchor" href="#支持-plugin" aria-hidden="true">#</a> 支持 plugin</h3><ol><li><p>修改<code>service/Service.js</code>，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
   <span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// entry: { inedx: &quot;index.js&quot; }</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig
      <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
    entry<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    entry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      entry<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;lint&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;/.js$/&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;eslint&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;eslint-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 添加 plugin 处理,这里的包会实时加载判断，不能为假,否则会报错</span>
   	<span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">&#39;clean&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-chain&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;/dir&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;webpack config&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">toConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下（其中的 <strong>pluigins</strong> 就是）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bb9be4277314586ac9a66e6e71d3a70~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_16-插件运行功能开发" tabindex="-1"><a class="header-anchor" href="#_16-插件运行功能开发" aria-hidden="true">#</a> 16：插件运行功能开发</h2><ol><li><p>修改<code>service/Service.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 增加</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>internalValue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token operator">...</span>
  <span class="token comment">// 运行插件</span>
  <span class="token keyword">async</span> <span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">getWebpackConfig</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getWebpackConfig<span class="token punctuation">,</span>
        <span class="token literal-property property">emitHooks</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emitHooks<span class="token punctuation">,</span>
        <span class="token literal-property property">setValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setValue<span class="token punctuation">,</span>
        <span class="token literal-property property">getValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getValue<span class="token punctuation">,</span>
        log<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> mod<span class="token punctuation">,</span> params <span class="token punctuation">}</span> <span class="token operator">=</span> plugin
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>params<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">await</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token constant">API</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
	
  <span class="token comment">// 获取配置</span>
  <span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig
  <span class="token punctuation">}</span>

  <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>internalValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span>

  <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>internalValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>记者我们修改配置文件中的插件运行时候的代码，因为插件函数接收了两个参数，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /samples/imooc-build.config.mjs</span>
<span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token string">&#39;src/index.js&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">?</span> entry <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;imooc-build-test&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;imooc-build-test-two&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token comment">// 增加参数</span>
      <span class="token keyword">function</span> <span class="token function">pluginInner</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is a plugin inner func&#39;</span><span class="token punctuation">,</span> api<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hooks</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// samples/plugins/imooc-build-plugin-one.js</span>
<span class="token comment">// 增加接受参数</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startPluginFirst</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start-plugins-one&#39;</span><span class="token punctuation">,</span> api<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gaoyuan@gaoyuandeMac samples % <span class="token function">npm</span> run dev:debug

<span class="token operator">&gt;</span> samples@1.0.0 dev:debug
<span class="token operator">&gt;</span> imooc-build start <span class="token parameter variable">-d</span>

info 开始监听文件: /Users/gaoyuan/Documents/Code/learn/MyGithub/Vue-Related/imooc-build/samples/imooc-build.config.mjs 
端口号8080可以使用
verb 解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
info 解析配置文件 <span class="token punctuation">{</span> port: <span class="token number">8080</span>, config: <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
verb 解析hooks 
verb hooks <span class="token punctuation">{</span> start: <span class="token punctuation">[</span> <span class="token punctuation">[</span>Function <span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
start
this is a imooc-build-test plugin
this is a imooc-build-two plugin
start-plugins-one <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
start-plugins-one <span class="token punctuation">{</span>
  chainWebpack: <span class="token operator">&lt;</span>ref *<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span>. <span class="token punctuation">}</span> <span class="token punctuation">{</span> a: <span class="token number">1</span>, b: <span class="token number">2</span>, c: <span class="token number">3</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_17-imooc-build插件实现-webpack-配置修改" tabindex="-1"><a class="header-anchor" href="#_17-imooc-build插件实现-webpack-配置修改" aria-hidden="true">#</a> 17：imooc-build插件实现 webpack 配置修改</h2><p>接下来我们可以在某个插件中使用上一节传递的参数来修改 webpack 配置</p><ol><li><p>比如我们修改<code>samples/plugins/imooc-build-plugin-one.js</code>文件内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startPluginFirst</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getWebpackConfig <span class="token punctuation">}</span> <span class="token operator">=</span> api
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  config
    <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/index2.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行发现报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/Users/gaoyuan/Documents/Code/learn/MyGithub/Vue-Related/imooc-build/lib/service/Service.js:201
    <span class="token builtin class-name">return</span> this.webpackConfig
                ^

TypeError: Cannot <span class="token builtin class-name">read</span> properties of undefined <span class="token punctuation">(</span>reading <span class="token string">&#39;webpackConfig&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>经过梳理我们发现，实际调用函数时候，是在 <code>imooc-build-plugin-one.js</code>中，此时自然 <code>this</code> 就是 <code>undefined</code>,所以会报错</p></li><li><p>知道了错误，我们对<code>Service.js</code>做如下更改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;查看最后的webpackConfig&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webpackConfig<span class="token punctuation">.</span><span class="token function">toConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
   <span class="token comment">// 运行插件</span>
  <span class="token keyword">async</span> <span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里我们把各个方法通过 bind 来该表内部 this,</span>
      <span class="token comment">// 也可以把各个方法改为 箭头函数。两种方式任选其一即可</span>
      <span class="token keyword">const</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">getWebpackConfig</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emitHooks</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">setValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">getValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        log<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次运行终端，得到如下效果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed87395f813a4880a7a5eda5d14df462~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_18-插件间状态共享-自定义hook功能实现" tabindex="-1"><a class="header-anchor" href="#_18-插件间状态共享-自定义hook功能实现" aria-hidden="true">#</a> 18: 插件间状态共享+自定义hook功能实现</h2><h3 id="插件间状态共享" tabindex="-1"><a class="header-anchor" href="#插件间状态共享" aria-hidden="true">#</a> 插件间状态共享</h3><ol><li><p>我们查看配置<code>samples</code>下的配置文件中的<code>plugins</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;imooc-build-test&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;imooc-build-test-two&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token comment">// 增加参数</span>
      <span class="token keyword">function</span> <span class="token function">pluginInner</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is a plugin inner func&#39;</span><span class="token punctuation">,</span> api<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们修改<code>plugins/imooc-build-plugin-one.js</code>中的代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startPluginFirst</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 引入 setValue 函数</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getWebpackConfig<span class="token punctuation">,</span> setValue <span class="token punctuation">}</span> <span class="token operator">=</span> api
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  config
    <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;index2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;src/index2.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 增加一个值</span>
  <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;test&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着修改<code>samples/imooc-build.config.mjs</code>配置文件中的最后一个函数，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;imooc-build-test&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;imooc-build-test-two&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span> <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">pluginInner</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 导出 getValue, 并获取响应key值的value</span>
       	<span class="token keyword">const</span> <span class="token punctuation">{</span> getValue <span class="token punctuation">}</span> <span class="token operator">=</span> api
        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，效果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb8bea8aff134699a4419dc4c6bf8eec~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="自定义hook功能实现" tabindex="-1"><a class="header-anchor" href="#自定义hook功能实现" aria-hidden="true">#</a> 自定义hook功能实现</h3><ol><li><p>修改<code>service/const.js</code>文件内容，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">HOOK_START</span> <span class="token operator">=</span> <span class="token string">&#39;start&#39;</span>
<span class="token comment">// 增加 PLUGIN_HOOK 变量</span>
<span class="token keyword">const</span> <span class="token constant">PLUGIN_HOOK</span> <span class="token operator">=</span> <span class="token string">&#39;pluginHook&#39;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">HOOK_START</span><span class="token punctuation">,</span>
  <span class="token constant">PLUGIN_HOOK</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>文件内容，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">HOOK_START</span><span class="token punctuation">,</span> <span class="token constant">PLUGIN_HOOK</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./const&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">HOOKSARR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">HOOK_START</span><span class="token punctuation">,</span> <span class="token constant">PLUGIN_HOOK</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 增加 log 属性挂载</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>log <span class="token operator">=</span> log
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>samples/imooc-build.config.mjs</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;imooc-build-test&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;imooc-build-test-two&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;./plugins/imooc-build-plugin-one.js&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">pluginInner</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> 
      	<span class="token comment">// 解构出 emitHooks log  值</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> getValue<span class="token punctuation">,</span> emitHooks<span class="token punctuation">,</span> log <span class="token punctuation">}</span> <span class="token operator">=</span> api
        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    		<span class="token comment">// 这里使用 emitHooks 触发 pluginHook</span>
        <span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token string">&#39;pluginHook&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hooks</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 注册 pluginHook 插件，接受 new Service 实例作为参数</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;pluginHook&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> log<span class="token punctuation">,</span> webpackConfig <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;this is plugin hook&#39;</span><span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;pluginHook&#39;</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">.</span><span class="token function">toConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，结果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/565e538dfe3e4d4b946f3f504107ab47~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_19-自定义-webpack-路径功能支持" tabindex="-1"><a class="header-anchor" href="#_19-自定义-webpack-路径功能支持" aria-hidden="true">#</a> 19：自定义 webpack 路径功能支持</h2><ol><li><p>修改<code>bin/imooc-build.js</code>中的代码，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  program
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c --config &lt;config&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;配置文件路径&#39;</span><span class="token punctuation">)</span>
		<span class="token comment">// 增加 custom-webpack-path 选项，以支持自定义 webpack 路径配置选型</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--custom-webpack-path &lt;customeWebpackPath&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;自定义webpack路径&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;start server by imooc-build &#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">allowUnknownOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>startServer<span class="token punctuation">)</span>
  program
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c --config &lt;config&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;配置文件路径&#39;</span><span class="token punctuation">)</span>
		<span class="token comment">// 增加 custom-webpack-path 选项，以支持自定义 webpack 路径配置选型</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--custom-webpack-path &lt;customeWebpackPath&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;自定义webpack路径&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;build server by imooc-build&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">allowUnknownOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们需要全局安装<code>webpack webpack-cli</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> npm install webpack webpack-cli -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行如下命令，找到<code>webpack</code>安装目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">which</span> webpack 
/usr/local/bin/webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>package.json</code>中增加脚本命令,增加指定 <code>webpack</code> 路径功能（这个路径具体根据自己的实际路径来）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev:debug_custome_webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imooc-build start -d --custom-webpack-path /usr/local/bin/webpack&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>startServer.js</code>代码，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token parameter">args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 增加 customWebpackPath 参数解构</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> customWebpackPath <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> args
  <span class="token keyword">const</span> srciprtPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> configParams <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;--port 8080&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;--config &#39;</span> <span class="token operator">+</span> config<span class="token punctuation">,</span>
    <span class="token comment">// 增加 customWebpackPath 传递</span>
    <span class="token string">&#39;--customWebpackPath &#39;</span> <span class="token operator">+</span> customWebpackPath<span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
  child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> configParams<span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 子进程退出时，主进程也进行关闭，比如：端口号被占用时选择了拒绝使用新端口号</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>代码，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> newPort<span class="token punctuation">,</span>
  config<span class="token punctuation">,</span>
  <span class="token comment">// 增加 customWebpackPath 参数</span>
  <span class="token literal-property property">customWebpackPath</span><span class="token operator">:</span> paramObj<span class="token punctuation">.</span>customWebpackPath <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>中的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">initWebpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 config 中获取 CustomeWebpackPath 属性</span>
    <span class="token comment">// CustomeWebpackPath存在shi，则使用改地址应用 webpack</span>
    <span class="token comment">// 否则则使用 node_modules 中的 webapack</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> customWebpackPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args
    <span class="token keyword">if</span> <span class="token punctuation">(</span>customWebpackPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>customWebpackPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> customWebpackPath
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>webpack <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 默认没有的话我们就从当前运行项目中查找，比如 samples 文件夹中查找</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>webpack <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端命令，我们先看脚本命令中指定<code>webapck</code>位置的时候的效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:debug_custome_webpack

<span class="token operator">&gt;</span> samples@1.0.0 dev:debug_custome_webpack
<span class="token operator">&gt;</span> imooc-build start <span class="token parameter variable">-d</span> --custom-webpack-path /usr/local/bin/webpack
// 最后输出的 webpack 路径
verb this.webpack /usr/local/lib/node_modules/webpack/bin/webpack.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们需要再<code>samples</code>文件夹中安装<code>webpack</code>，命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> webpack <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>我们运行不指定<code>webpack</code>文件路径时候的效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run dev:debug    
// 此路径具体跟自己使用的工具以及文件路径命名有关
verb this.webpack /Users/yuangao/Code/Learn/MyGithub/Vue-Related/imooc-build/samples/node_modules/.pnpm/webpack@5.81.0/node_modules/webpack/lib/index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_20-内置插件功能实现" tabindex="-1"><a class="header-anchor" href="#_20-内置插件功能实现" aria-hidden="true">#</a> 20：内置插件功能实现</h2><ol><li><p>新建<code>imooc-build/plugins/initPlugin/index.js</code>，这里我们在项目中新建<code>plugins</code>目录，用来存放内置插件,这里增加<code>initPlugins/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// initPlugins/index.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">initPlugin</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;init plugin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>service/Service.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> InitPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../plugins/initPlugin/index&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitHooks</span><span class="token punctuation">(</span><span class="token constant">HOOK_START</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token comment">//完成 webpack 配置（借助plugin webpack.config.js）</span>
    <span class="token comment">// 完成 webpack-dev-server 的启动</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> plugins <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config
    <span class="token comment">// 这里我们声明 buildInPlugins 用来存储内置的 plugins</span>
    <span class="token keyword">const</span> buildInPlugins <span class="token operator">=</span> <span class="token punctuation">[</span> InitPlugin <span class="token punctuation">]</span>
    <span class="token comment">// 然后遍历 buildPlugins, 并一一添加到 this.plugins 中</span>
    buildInPlugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">buildPlugin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">mod</span><span class="token operator">:</span> buildPlugin<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们重新运行终端，命令及结果如下（这里我们看到内置的<code>plugins</code>先执行）</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e247ec6f21c4940bf54791dcebdd9a3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol>`,20);function H(V,M){const o=e("FlowChart"),p=e("ExternalLinkIcon");return i(),l("div",null,[r,k,a(o,{id:"flowchart-6",code:"eJx1VU1T2kAYvu+v4NhOjVM9tc6QU8+99NAjE8MKGUPCJEGmN6cdPxGJX0ynWq21VjpaoONMKaXIn8km8C+62d2Q3RAvKO8+7/N+P9iOYjlZmfxZyqB/6+imBtQiVFdzhpmHWVk1jbzmaKaxlPGv1v2L69fYHOxs+2d3/scOcr/L2RfzL+efA61kmqq0XNH0fFYuK5ai61CnlG7HP6uj3UsALFjQbAdaORbXLENLYez3LbS5R+zoYOgNvsVgRjoDJnYGriqOWkyhpc/jmyv/3JVAcHqA3Ds+CPWbjZDmx8fT7CgY3yHSEfzJR8BIRp+G5DmJV66sCv1zO2i3hX6649Fp0KqB8cgdX+69gmtvoLWmqTDuEmZf0Qo5tagYBTw4rhaa/WSjHgzbfnPLG/z2Rm3/uM+mQluQcJ/JFTUOguML6ghWNV3HieYsONvx8C3Od7JV95vdZBW4PhvmwipLtuBMG44a7/2TLihA3A0zQT/e76FGMzQzFN1WiuOyRoO/wW3NUcuTowd//xrQ7Q1uO6hxhRo9WtT46y2qfwmOW6AS5pOM5Q1H+C00e8Mz7w8mZN7hUEMPA1ZnI7N+uR3si2uPnZR8fjYG6m6GtmcLICSz6VSFDWifew81tNdkb6jTH/+6ZMsyxfMd6n7AkdnLPMEB1YKKA9mQxfjbp7hVilWwGTGDVhxNF2eD2p+8/g7qXaONnt/s+/cnbI4prHSO0cpx2LJeKWhG2tD9xiHeTMAAOatiiCdPnun6g6Jprs5CJoc/8IqhrSFeCwaM6i4qmlGFy2UFr0pKuniz/W2XoN5SFE2dzCT2K5U1HVqJprDpVGEIkiIQaybvn4drZF6PMxAcu21ocSNOupBzYucLDSwt+ANXMTjyP18A6ifJsYxziv7kHbSfSjKn1k/KilNcmFs2Hccs4SdRoyWZU1bsx2SPZzRM7IUT4H8CCOninKUVig7PSR4jTvYlEsipprIcIzlkCWZ0uCJwCYoVcQrGNGlj5AkFS0WSwtJohcwW5zLT3vG6JsmRfkWjCP/n5CoahSglSWlhqEg7BK4kdDoJPgoxRvImyZzKsMZGQxIUJaqFFj6tjB4n/hpfqSRPrzG+S5zmo5dHc0helWiNb4XPC99EMv3FeHEFjZt+JToGwH9Czwbv",preset:"vue"}),d,n("blockquote",null,[v,n("p",null,[n("a",m,[s("npm库：fast-glob: https://www.npmjs.com/package/fast-glob"),a(p)])])]),b,n("blockquote",null,[g,n("p",null,[n("a",f,[s("npmlog库代码: https://www.npmjs.com/package/npmlog"),a(p)])]),h,y]),w,n("p",null,[n("a",j,[s("node的路径解析require.resolve: https://juejin.cn/post/6844904055806885895"),a(p)])]),n("p",null,[n("a",x,[s("Node.js模块路径解析方法: https://juejin.cn/post/7040728919967793160"),a(p)])]),q,n("blockquote",null,[n("p",null,[n("a",P,[s("webpack-chain npm文档地址: https://www.npmjs.com/package/webpack-chain"),a(p)])])]),_,n("ul",null,[n("li",null,[s("简单的配置方式: "),n("a",S,[C,a(p)]),n("ul",null,[n("li",null,[s("该对象将会被 "),n("a",O,[s("webpack-merge"),a(p)]),s(" 合并入最终的 webpack 配置。")])])]),n("li",null,[s("链式操作 (高级)："),n("a",E,[s("点击打开：官方地址"),a(p)]),n("ul",null,[n("li",null,[A,s(" 内部的 webpack 配置是通过 "),n("a",L,[s("webpack-chain"),a(p)]),s(" 维护的。")])])])]),W])}const T=c(u,[["render",H],["__file","index-16.html.vue"]]);export{T as default};
