import{_ as e,M as o,p as c,q as i,R as n,t as a,N as t,a1 as p}from"./framework-e8cb8151.js";const l="/assets/performance-9ba02df4.png",r="/assets/sourcemap1-2206aaad.png",u="/assets/H5编辑器-e05a207e.png",d="/assets/RBAC1-864c2875.png",k="/assets/RBAC2-22855795.png",v="/assets/hybrid1-9c4356c8.png",h="/assets/hybrid2-1911344f.png",m="/assets/抽奖-d49f5e0a.png",b="/assets/抽奖-流程-265184bc.png",g="/assets/rect-660a8e54.png",y={},f=p(`<h1 id="_10-项目设计-能否成为项目负责人" tabindex="-1"><a class="header-anchor" href="#_10-项目设计-能否成为项目负责人" aria-hidden="true">#</a> 10- 项目设计 - 能否成为项目负责人</h1><h2 id="_01-开始" tabindex="-1"><a class="header-anchor" href="#_01-开始" aria-hidden="true">#</a> 01: 开始</h2><p>面试官给出一个项目需求或者功能，让候选人做技术方案设计，考察综合能力。 本章将通过多个面试题，讲解如何进行项目设计，包括抽象数据模型，总结功能和流程，制定技术方案等</p><h3 id="为何要考察" tabindex="-1"><a class="header-anchor" href="#为何要考察" aria-hidden="true">#</a> 为何要考察</h3><p>面试官给出一个项目需求或者功能，让候选人做技术方案设计，考察综合能力。</p><h3 id="考察重点" tabindex="-1"><a class="header-anchor" href="#考察重点" aria-hidden="true">#</a> 考察重点</h3><ul><li>识别需求，转化为功能</li><li>功能模块拆分</li><li>数据结构设计</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p>看整体设计，不要追求细节</p><h3 id="看几个问题" tabindex="-1"><a class="header-anchor" href="#看几个问题" aria-hidden="true">#</a> 看几个问题</h3><ul><li>要你开发一个前端统计 SDK, 你会如何设计</li><li>一个 H5 编辑器（低代码），提交到服务器的数据格式怎么样设计？</li></ul><h2 id="_02-项目负责人的职责" tabindex="-1"><a class="header-anchor" href="#_02-项目负责人的职责" aria-hidden="true">#</a> 02: 项目负责人的职责</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>作为项目前端技术负责人，主要的职责是什么？</p><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>项目前端技术负责人，将负责和项目前端开发相关的所有事情，不仅仅是前端范围内的，也不仅仅是开发的事宜。</p><p>目标：保证项目按时、按质量的交付上线，以及上线之后的安全稳定运行。</p><h3 id="职责" tabindex="-1"><a class="header-anchor" href="#职责" aria-hidden="true">#</a> 职责</h3><h4 id="把控需求" tabindex="-1"><a class="header-anchor" href="#把控需求" aria-hidden="true">#</a> 把控需求</h4><p>新项目开始、或者新功能模块开始时要参与需求评审，认真审阅需求的详细内容，给出评审意见，提出问题。自己已经同意的需求要能保证按时、按质量的完成。</p><p>评审需求需要你能深入理解项目的业务，不仅仅是自己负责的功能，还有上下游全局的串联。所以，一入职的新人无论技术能力多好，都无法立刻作为项目技术负责人，他还需要一段时间的业务积累和熟练。PS：除非他在其他公司已经是这个方面的业务专家。</p><p>需求评审之后，还可能有 UI 设计图的评审，也要参与，提出自己的意见和问题。保证评审通过的 UI 设计图都能保质保量的开发出来。</p><p>需求和 UI 设计图评审完之后，还要给出开发的排期。此时要全面考虑，不仅仅要考虑开发时间，还有内部测试、单元测试的时间，以及考虑一些延期的风险，多加几天的缓冲期。</p><p>最后，在项目进行过程中，老板或者 PM 有可能中途插入新需求。此时要积极沟通，重新评估，还要争取延长项目开发周期。需求增加了，肯定周期也要延长一些。</p><h4 id="技术方案设计" tabindex="-1"><a class="header-anchor" href="#技术方案设计" aria-hidden="true">#</a> 技术方案设计</h4><blockquote><p>需求指导设计，设计指导开发。</p></blockquote><p>需求和 UI 设计图确定之后，要先进行技术方案设计，写设计文档，评审，通过之后再开发。技术方案设计应该包含核心数据结构的设计，核心流程的设计，核心功能模块的组织和实现。评审时看看这些有没有不合理、隐患、或者和别人开发重复了。</p><p>技术方案设计还要包括和其他对接方的，如和服务端、客户端的接口格式。也要叫他们一起参与评审，待他们同意之后再开发。</p><h4 id="开发" tabindex="-1"><a class="header-anchor" href="#开发" aria-hidden="true">#</a> 开发</h4><p>作为技术负责人，不应该把自己的主要精力放在代码开发上，但也不能完全不写代码。 应该去写一些通用能力，核心功能，底层逻辑的代码。其他比较简单的业务代码，可以交给项目成员来完成。</p><h4 id="监督代码质量" tabindex="-1"><a class="header-anchor" href="#监督代码质量" aria-hidden="true">#</a> 监督代码质量</h4><p>技术负责人，可能会带领好多人一起编写代码，但他要把控整个项目的代码质量。例如：</p><ul><li>制定代码规范</li><li>定期组织代码审核</li><li>CI 时使用自动化单元测试</li></ul><h4 id="跟踪进度" tabindex="-1"><a class="header-anchor" href="#跟踪进度" aria-hidden="true">#</a> 跟踪进度</h4><p>每天都组织 10 分钟站会，收集当前的进度、风险和问题。如有延期风险，要及时汇报。</p><p>不仅仅要关心前端开发的进度，还要关心上下游。例如上游的 UI 设计图延期，将会导致前端开发时间不够，进而导致测试时间不够，甚至整个项目延期。</p><h4 id="稳定安全的运行" tabindex="-1"><a class="header-anchor" href="#稳定安全的运行" aria-hidden="true">#</a> 稳定安全的运行</h4><p>上线之后，要能实时把控项目运行状态，是否稳定、安全的运行。万一遇到问题，要第一时间报警。</p><p>所以，项目中要增加各种统计和监控功能，例如流量统计、性能统计、错误监控，还有及时报警的机制。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>把控需求</li><li>技术方案设计</li><li>开发</li><li>监督代码质量</li><li>跟踪进度</li><li>稳定安全的运行</li></ul><h2 id="_03-如何设计一个前端统计-sdk" tabindex="-1"><a class="header-anchor" href="#_03-如何设计一个前端统计-sdk" aria-hidden="true">#</a> 03:如何设计一个前端统计 SDK</h2><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>前端统计的范围</p><ul><li>访问量 PV</li><li>自定义事件（如统计一个按钮被点击了多少次）</li><li>性能</li><li>错误</li></ul><p>统计数据的流程 （只做前端 SDK ，但是要了解全局）</p><ul><li>前端发送统计数据给服务端</li><li>服务端接受，并处理统计数据</li><li>查看统计结果</li></ul><h3 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构" aria-hidden="true">#</a> 代码结构</h3><p>SDK 要用于多个不同的产品，所以初始化要传入 <code>productId</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyStatistic</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token literal-property property">productId</span><span class="token operator">:</span> number

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">productId</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>productId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;productId is invalid&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>productId <span class="token operator">=</span> productId <span class="token comment">// 产品 id （SDK 会被用于多个产品）</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initPerformance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 性能统计</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 监听错误</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">paramObj</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 发送统计数据</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">initPerformance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 性能统计</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token function">initError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 监听全局错误（有些错误需要主动传递过来，如 Vue React try-catch 的）</span>
  <span class="token punctuation">}</span>
  <span class="token function">pv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 访问量 PV 统计</span>
  <span class="token punctuation">}</span>
  <span class="token function">event</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 自定义事件</span>
  <span class="token punctuation">}</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 错误统计</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myStatistic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStatistic</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="发送数据" tabindex="-1"><a class="header-anchor" href="#发送数据" aria-hidden="true">#</a> 发送数据</h3><p>发送统计数据，用 <code>&lt;img&gt;</code> —— 浏览器兼容性好，没有跨域限制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">private</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">paramObj</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 追加 productId</span>
  paramObj<span class="token punctuation">.</span>productId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>productId

  <span class="token comment">// params 参数拼接为字符串</span>
  <span class="token keyword">const</span> paramArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> paramObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> paramObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    paramArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 用 img 发送，1. 可跨域，2. 兼容性极好</span>
  <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paramArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再精细一点的优化，<code>send</code> 中可以使用 <code>requestIdleCallback</code> （兼容使用 <code>setTimeout</code>）</p><h3 id="自定义事件统计" tabindex="-1"><a class="header-anchor" href="#自定义事件统计" aria-hidden="true">#</a> 自定义事件统计</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">event</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span> <span class="token comment">// 接受自定义事件的 API</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 发送</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如需要统计“同意” “不同意” “取消” 三个按钮的点击量，即可使用自定义事件统计</span>
$agreeBtn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...业务逻辑...</span>
  <span class="token comment">// 其他不同的按钮，传递不同的 value (如 &#39;refuse&#39; &#39;cancel&#39;)</span>
  myStatistic<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;some-button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;agree&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问量-pv" tabindex="-1"><a class="header-anchor" href="#访问量-pv" aria-hidden="true">#</a> 访问量 PV</h3><p>PV 可以通过自定义事件的方式。但是为了避免用户重复发送，需要加一个判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个全局的 Set ，记录已经发送 pv 的 url</span>
<span class="token keyword">const</span> <span class="token constant">PV_URL_SET</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">pv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> href <span class="token operator">=</span> location<span class="token punctuation">.</span>href
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PV_URL_SET</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;pv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 发送 pv</span>

  <span class="token constant">PV_URL_SET</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myStatistic<span class="token punctuation">.</span><span class="token function">pv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【注意】PV 统计需要让用户自己发送吗，能不能在 DOMContentLoaded 时自动发送？—— 最好让用户发送，因为 SPA 中切换路由也可能发送 PV</p><h3 id="性能统计" tabindex="-1"><a class="header-anchor" href="#性能统计" aria-hidden="true">#</a> 性能统计</h3><p>通过 <code>console.table( performance.timing )</code> 可以看到网页的各个性能</p><p><img src="`+l+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">private</span> <span class="token function">initPerformance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;yyy&#39;</span> <span class="token comment">// 接受性能统计的 API</span>
  <span class="token comment">// 全部传给服务端，让服务端去计算结果 —— 统计尽量要最原始数据，不要加工处理</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：想要得到全面的性能数据，要在网页加载完成之后（ DOMContentLoaded 或 onload ）去初始化 <code>myStatistic</code></p><h3 id="错误统计" tabindex="-1"><a class="header-anchor" href="#错误统计" aria-hidden="true">#</a> 错误统计</h3><p>监听全局操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">private</span> <span class="token function">initError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 全局操作</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno <span class="token punctuation">}</span> <span class="token operator">=</span> event
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> lineno<span class="token punctuation">,</span> colno <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// Promise 未 catch 的报错 （ 参考 unhandledrejection.html ）</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unhandledrejection&quot;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被开发这主动收集的错误，需要调用 API 来统计</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> Error<span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// error 结构 { message, stack }</span>
  <span class="token comment">// info 是附加信息</span>

  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;zzz&#39;</span> <span class="token comment">// 接受错误统计的 API</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// try catch</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token number">100</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myStatistic<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Vue 错误监听</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  myStatistic<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> info <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// React 错误监听</span>
<span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> errorInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myStatistic<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">info</span><span class="token operator">:</span> errorInfo <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><ul><li>统计的范围</li><li>发送数据使用 img</li><li>报错统计要结合 Vue React 报错</li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><ul><li>自定义事件（包括 PV）</li><li>性能统计</li><li>报错统计</li></ul><p>PS：以上是一个统计 SDK 的基本估计，可以应对面试，实际工作中还可能需要进一步完善很多细节。</p><h2 id="_04-连环问-sourcemap-有什么作用-该如何配置" tabindex="-1"><a class="header-anchor" href="#_04-连环问-sourcemap-有什么作用-该如何配置" aria-hidden="true">#</a> 04: 连环问：sourcemap 有什么作用？该如何配置</h2><p>遇到 JS 报错的问题，就离不开 sourcemap</p><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3>`,87),x={href:"https://www.bootcdn.cn/jquery/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"压缩之后，一旦线上有报错，通过行、列根本找不到源代码的位置，不好定位错误",-1),q={href:"https://www.jsdelivr.com/package/npm/jquery?path=dist",target:"_blank",rel:"noopener noreferrer"},S=p('<h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>一个网页中引用了 CDN jquery.min.js ，通过 chrome Sources 即可看到之前源码的样子。<br> 寻找 sourcemap 有两种方式：1. 同目录下的同名文件；2. js 文件最后一样指定（如 wangEditor js）</p><p><img src="'+r+'" alt=""></p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3>',4),j=n("code",null,"js-code",-1),_=n("br",null,null,-1),P=n("code",null,"devtool",-1),C={href:"https://webpack.docschina.org/configuration/devtool/#devtool",target:"_blank",rel:"noopener noreferrer"},A=p(`<ul><li>不用 <code>devtool</code> - 正常打包，不会生成 sourcemap 文件</li><li><code>eval</code> - 所有代码都放在 <code>eval(...)</code> 中执行，不生成 sourcemap 文件</li><li><code>source-map</code> - 生成单独的 sourcemap 文件，并在 js 文件最后指定</li><li><code>eval-source-map</code> - 代码都放在 <code>eval(...)</code> 中执行，sourcemap 内嵌到 js 代码中，不生成独立的文件</li><li><code>inline-source-map</code> - sourcemap 以 base64 格式插入到 js 末尾，不生成单独的文件</li><li><code>cheap-source-map</code> - sourcemap 只包含行信息，没有列信息（文件体积更小，生成更快）</li><li><code>eval-cheap-source-map</code> - 同上，但是所有代码都放在 <code>eval(...)</code> 中执行</li></ul><p>推荐</p><ul><li>开发和测试 <code>eval</code> <code>eval-source-map</code> <code>eval-cheap-source-map</code> —— 追求效率</li><li>生产环境 <code>source-map</code> 或者不产出 sourcemap —— 看个人需求</li></ul><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>开源醒目，也要开源 sourcemap</li><li>非开源项目，不要泄露 sourcemap !!!</li><li>了解 sourcemap 的作用和配置即可, 编码原理不必深究</li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>公司实际项目的 sourcemap 可用于内部反查 bug ，但不要泄漏。否则等于源码泄漏了。<br> 开源项目的 sourcemap 文件也是开源的。</p><p>只需要了解 sourcemap 的作用和配置即可，原理不用掌握。</p><h2 id="_05-spa-和-mpa-应该如何选择" tabindex="-1"><a class="header-anchor" href="#_05-spa-和-mpa-应该如何选择" aria-hidden="true">#</a> 05: SPA 和 MPA 应该如何选择</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>何时用 SPA 何时用 MPA ？</p><h3 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1" aria-hidden="true">#</a> 分析</h3><ul><li>SPA - Single-page Application 单页面应用，只有一个 html 文件，用前端路由切换功能</li><li>MPA - Multi-page Application 多页面应用，每个页面是单独的 html 文件</li></ul><p>现在基于 React Vue 开发时，大部分产出的都是 SPA ，很少会产出 MPA 。<br> 但并不是所有的场景都适用于 SPA ，项目设计时要确定好，否则后面不好改。</p><h3 id="spa-适用于一个综合应用" tabindex="-1"><a class="header-anchor" href="#spa-适用于一个综合应用" aria-hidden="true">#</a> SPA 适用于一个综合应用</h3><p>特点</p><ul><li>功能较多，一个界面展示不完</li><li>以操作为主，不是以展示为主</li></ul><p>举例</p><ul><li>大型的后台管理系统（阿里云的管理后台）</li><li>知识库（语雀、腾讯文档）</li><li>功能较复杂的 WebApp（外卖）</li></ul><h3 id="mpa-适用于孤立的页面" tabindex="-1"><a class="header-anchor" href="#mpa-适用于孤立的页面" aria-hidden="true">#</a> MPA 适用于孤立的页面</h3><p>特点</p><ul><li>功能较少，一个页面展示得开</li><li>以展示为主，而非操作</li></ul><p>举例</p><ul><li>分享页（微信公众号文章）</li><li>新闻 App 里的落地页（有可能是用 H5 + hybrid 开发的）</li></ul><h3 id="webpack-打包" tabindex="-1"><a class="header-anchor" href="#webpack-打包" aria-hidden="true">#</a> Webpack 打包</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 多入口</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;./src/home/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">product</span><span class="token operator">:</span> <span class="token string">&#39;./src/product/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">about</span><span class="token operator">:</span> <span class="token string">&#39;./src/about/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;js/[name].[contentHash].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// name 即 entry 的 key</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// 三个页面</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./template/index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;home.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;产品&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./template/product.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;product.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;product&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;关于&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./template/about.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;about.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;about&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-技术是一回事-怎么做是另外的事儿" tabindex="-1"><a class="header-anchor" href="#扩展-技术是一回事-怎么做是另外的事儿" aria-hidden="true">#</a> 扩展：技术是一回事，怎么做是另外的事儿</h3><p>讲一个故事，说明这个问题，请大家注意。</p><p>我之前的一个同事，他技术很好。 我就问他一个问题：你觉得在项目发布之前，最需要做的是什么？<br> 他回复是：1. 扩展性还不太好，得增强一下；2. 解决当前的 bug 。</p><p>然后我继续追问：1. 你觉得扩展性不好用，是扩展什么功能不好用，举个例子来说明？2. 目前记录的这些 bug ，那几个是高优的？<br> 然后他没有回答出来。</p><p>技术人员有这个想法很正常，我之前也是。<br> 我刚毕业那 2 年，对自己维护的一个系统提出了很多升级意见，都是自己从书上、竞品参考的。但领导问：这些如何实际应用到我们的项目？<br> 我就回答不上来了。</p><h2 id="_06-设计一个-h5-编辑器的数据模型和核心功能-错误答案展示" tabindex="-1"><a class="header-anchor" href="#_06-设计一个-h5-编辑器的数据模型和核心功能-错误答案展示" aria-hidden="true">#</a> 06: 设计一个 H5 编辑器的数据模型和核心功能-错误答案展示</h2><p>低代码，现在流行</p><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p><img src="`+u+`" alt=""></p><p>这是一个 H5 编辑器，用 vue + Vuex 来实现，几个问题：</p><ul><li>在点“保存”按钮的时候，往服务端传递的<strong>数据结构</strong>是什么样子的？</li><li>如何保证画布和属性面板是同步更新的？</li><li>如果在扩展一个“图层”面板，数据结构该怎么设计？</li></ul><h3 id="大家的答案" tabindex="-1"><a class="header-anchor" href="#大家的答案" aria-hidden="true">#</a> 大家的答案</h3><p>第一个问题，大家的答案往往都是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;text1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;文本1&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;text2&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;文本2&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;16px&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;img1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;xxx.png&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个问题，大家觉得数据存到 vuex 中，就可以同步更新了 —— 这没错，但具体如何做到呢？很多同学想不出来，或者到这里就懵了。</p><p>第三个问题，很多同学觉得应该在 vuex store 中新增一个属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">layer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;text1&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 对应到 components 的 key</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文本1&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;text2&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文本2&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题" aria-hidden="true">#</a> 存在的问题</h3><ul><li>组件应该是<strong>有序</strong>结构，属性应该参考 vnode 设计</li><li>使用 Vuex 同步，但是如何确定当前画布选中的组件的？</li><li>图层，仅仅是一个索引，应该用 computed 这种形式</li></ul><p>基于以上回答，总结一下：</p><ul><li>node 结构，不是规范的 vnode 形式</li><li>组件应该用数组，而不是对象。数组是有序结构</li><li>都知道存储到 vuex 中即可同步数据，但问题是如何用 vuex 表示当前选中的组件</li><li>图层，应该是一个 computed 计算出来的索引，而不是一个单独的数据</li></ul><h3 id="正确的设计思路" tabindex="-1"><a class="header-anchor" href="#正确的设计思路" aria-hidden="true">#</a> 正确的设计思路</h3><p>vuex store</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token comment">// 作品</span>
  <span class="token literal-property property">work</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;作品标题&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">setting</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 一些可能的配置项，用不到就先预留 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 页面 body 的一些设置，如背景色 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// components 要用数组，有序结构</span>

      <span class="token comment">// 单个 node 要符合常见的 vnode 格式</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 每个组件都有 id ，不重复</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文本1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;20px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// 文本内容，有时候放在 children ，有时候放在 attrs 或者 props ，没有标准，看实际情况来确定</span>
          <span class="token string">&#39;文本1&#39;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;yyy&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;图片1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;xxx.png&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 画布当前选中的组件，记录 id 即可</span>
  <span class="token literal-property property">activeComponentId</span><span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vuex getter</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token function">layers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span>work<span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> c<span class="token punctuation">.</span>name
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，基本思路就是：</p><ul><li>每个组件尽量符合 vnode 规范</li><li>用数组来组织数据，有序</li><li>尽量使用引用关系，不要冗余</li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><p>项目技术方案设计时，数据结构的设计是非常重要的。</p><p>不要纠细节，看主要设计</p><p>要参考现有标准，而非自造标准 —— 这需要自己有基础知识，有识别能力</p><hr><p>联想到富文本编辑器的数据结构设计：text 摊平，而不是嵌套。</p><h2 id="_07-设计一个-用户-角色-权限-的模型和功能" tabindex="-1"><a class="header-anchor" href="#_07-设计一个-用户-角色-权限-的模型和功能" aria-hidden="true">#</a> 07: 设计一个“用户-角色-权限”的模型和功能</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>如何设计一个基础的 用户-角色-权限 模型？<br> 例如，一个博客管理后台，可以添加很多用户，分配不同的角色，不同角色具有不同权限</p><ul><li>普通用户：查看博客，审核通过博客，下架博客</li><li>管理员：修改博客，删除博客 + 普通用户的权限</li><li>超级管理员：添加用户，删除用户，绑定用户和角色 + 管理员的权限</li></ul><h3 id="分析-2" tabindex="-1"><a class="header-anchor" href="#分析-2" aria-hidden="true">#</a> 分析</h3><p>很多公司招聘前端工程师来开发、维护后台管理系统，toB 的系统。角色权限管理是最基本的模块。<br> 要想成为项目技术负责人，必须要熟知这部分内容的设计。</p><h3 id="rbac-模型" tabindex="-1"><a class="header-anchor" href="#rbac-模型" aria-hidden="true">#</a> RBAC 模型</h3><p>RBAC - Role-based access control 基于角色的访问控制。它可以满足我们绝大部分管理系统的管理权限控制。</p><ul><li>三个模型 <ul><li>用户</li><li>角色</li><li>权限</li></ul></li><li>两个关系（以角色为“轴”） <ul><li>角色 - 用户</li><li>角色 - 权限</li></ul></li></ul><p><img src="`+d+'" alt=""></p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><p><img src="'+k+'" alt=""></p><h3 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h3><h4 id="用户管理" tabindex="-1"><a class="header-anchor" href="#用户管理" aria-hidden="true">#</a> 用户管理</h4><ul><li>增删改查</li><li>绑定角色</li></ul><h4 id="角色管理" tabindex="-1"><a class="header-anchor" href="#角色管理" aria-hidden="true">#</a> 角色管理</h4><ul><li>增删改查</li><li>绑定权限</li></ul><h4 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理" aria-hidden="true">#</a> 权限管理</h4><ul><li>增删改查</li></ul><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>RBAC 模型</li><li>尽量参考现有标准，谨慎创新</li><li>“设计”就是<strong>数据模型（关系） + 如何操作数据</strong></li></ul><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><p>RBAC 模型</p><ul><li>数据结构</li><li>功能</li></ul><h3 id="扩展-1" tabindex="-1"><a class="header-anchor" href="#扩展-1" aria-hidden="true">#</a> 扩展</h3><p>我刚毕业时，开发一个企业项目管理系统，里面会加很多大家临时想出来的功能。后来我考了 PMP ，才发现很多事情都是已经有了既定解决方案的，不需要自己创新。</p><h2 id="_08-何时使用-ssr" tabindex="-1"><a class="header-anchor" href="#_08-何时使用-ssr" aria-hidden="true">#</a> 08: 何时使用 SSR</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>何时使用 SSR ，何时不用？</p><h3 id="分析-3" tabindex="-1"><a class="header-anchor" href="#分析-3" aria-hidden="true">#</a> 分析</h3><p>SSR - Server-side render 服务端渲染</p><p>SSR 历史悠久，之前的 ASP JSP PHP 就是 SSR 。</p><p>之前面试过一个候选人，问他：SSR 有何优点？他回答：SSR 好！ —— 这是完全没有技术思维的回复。<br> 那即便你能回答出 SSR 的优势，我再继续问：SSR 有什么劣势？再继续问：SSR 适用于哪些场景？</p><p>借此说明：技术要有合适的应用场景才会有价值。</p><h3 id="ssr-的优势" tabindex="-1"><a class="header-anchor" href="#ssr-的优势" aria-hidden="true">#</a> SSR 的优势</h3><p>服务端直出 html</p><ul><li>性能好</li><li>对 SEO 优化</li></ul><h3 id="ssr-的劣势" tabindex="-1"><a class="header-anchor" href="#ssr-的劣势" aria-hidden="true">#</a> SSR 的劣势</h3><p>前后端同构，开发成本高（学习、调试、运维等）</p><h3 id="是否需要-ssr" tabindex="-1"><a class="header-anchor" href="#是否需要-ssr" aria-hidden="true">#</a> 是否需要 SSR</h3><p>是否能利用 SSR 的优势</p><ul><li>你的项目是否需要 SEO ？—— 管理后台就不需要</li><li>你的项目是否在意极致的性能优化，或者会否有可能处于弱网环境（网络好，速度不会太慢的）—— 管理后台就不需要</li></ul><p>如果急需要 SSR 的优势和价值，那就去承担 SSR 的成本。如果不需要这些优势，那 SSR 就成了一个累赘。</p><h3 id="ssr-的应用场景" tabindex="-1"><a class="header-anchor" href="#ssr-的应用场景" aria-hidden="true">#</a> SSR 的应用场景</h3><p>C 端，以阅读为主的单页面，如新闻页，运营宣传广告页面，官网等。1. 需要快；2. 需要 SEO</p><h2 id="_09-hybrid-更新机制" tabindex="-1"><a class="header-anchor" href="#_09-hybrid-更新机制" aria-hidden="true">#</a> 09: hybrid 更新机制</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p>请设计一个 hybrid 包的更新流程</p><h3 id="hybrid-运作流程" tabindex="-1"><a class="header-anchor" href="#hybrid-运作流程" aria-hidden="true">#</a> hybrid 运作流程</h3><p><img src="'+v+'" alt=""></p><p>小提示：hybrid html 中 ajax 请求的 url 不能省略协议名称（如 <code>//xxx.com/api/getInfo</code>），否则会默认以 <code>file</code> 协议请求。必须明确协议名称 <code>http</code> 或者 <code>https</code>。</p><h3 id="上传新版本的-hybrid-包" tabindex="-1"><a class="header-anchor" href="#上传新版本的-hybrid-包" aria-hidden="true">#</a> 上传新版本的 hybrid 包</h3><p>hybrid 包是需要实时更新的，就跟 H5 网上上线一样。更新之后，App 要下载、使用最新版本的 hybrid 包。</p><p><img src="'+h+'" alt=""></p><p>何时触发检查、下载最新版本呢？有两种选择</p><ul><li>App 启动时检查、下载</li><li>实时检查、下载（如每隔 5min）</li></ul><h3 id="延迟使用" tabindex="-1"><a class="header-anchor" href="#延迟使用" aria-hidden="true">#</a> 延迟使用</h3><p>以上两种时机，都会遇到一个问题：如果检查到最新版本，立刻下载使用，可能会影响的性能。 为了避免这个影响，可以考虑“延迟使用”。</p><ul><li>检测到新版本，先后台下载，目前先使用旧版本</li><li>待现在完成，再替换为新版本使用</li></ul><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>hybrid 基本概念，和基本流程</li><li>最新包的延迟使用</li></ul><h2 id="_10-开发一个-h5-抽奖页-需要后端提供哪些接口" tabindex="-1"><a class="header-anchor" href="#_10-开发一个-h5-抽奖页-需要后端提供哪些接口" aria-hidden="true">#</a> 10: 开发一个 H5 抽奖页，需要后端提供哪些接口</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p><img src="'+m+'" alt=""></p><p>你作为前端负责人，来开发一个 h5 页，某个抽奖功能的运营活动，如上图。假定 PM 和后端 RD 都是实习生，技术和业务都不熟练。</p><p>你要从 0 开发这个页面，你会要求 server 端给你哪些接口和能力？</p><h3 id="多数人的答案" tabindex="-1"><a class="header-anchor" href="#多数人的答案" aria-hidden="true">#</a> 多数人的答案</h3><p>所有人都能想到，需要一个<strong>抽奖接口</strong>。否则，他就不是一个合格的程序员了。</p><p>很少一部分人能想到，需要一个<strong>用户信息接口</strong>，否则都不知道奖品给谁，总得登录一下。或者直接输入手机号抽奖也行，但需求没说这里有手机号。</p><p>还有，假如刚刚抽了奖，再重新进入界面，是否要禁用抽奖？是否要限制每个人抽奖一次？—— 这些需求没说，但这些很重要，这些可都需要后端支持。</p><h3 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h3><p>我预期的答案当然是比较全面的，但是很遗憾，我曾经面试过这么多人，没有一个人能答全。</p><ul><li>获取用户信息（同时判断是否登录）</li><li>如果登录，判断该用户是否已经抽奖，以判断他是否还能继续抽奖</li><li>抽奖接口 <ul><li>可能还需要调用登录接口</li><li>当然也可以直接输入手机号抽奖，需明确需求</li></ul></li><li>埋点统计 <ul><li>pv</li><li>自定义事件</li></ul></li><li>微信分享(需要和 PM 确定)</li></ul><p>由此可见，一个看似简单的功能，其背后并不一定简单。</p><p><img src="'+b+`" alt=""></p><h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>让页面动起来，分析业务流程</li><li>技术人员要去熟悉业务，技术永远是为业务服务的</li></ul><h3 id="扩展-2" tabindex="-1"><a class="header-anchor" href="#扩展-2" aria-hidden="true">#</a> 扩展</h3><p>这个面试题不是考察知识点和技术能力的，完全就是在考察你对一个业务的理解能力。</p><p>由此你就可以看出，程序员对于需求和业务理解能力有多么重要！直接会影响到你的 API 接口设计，进而影响到你的开发。</p><p>有些时候，PM 和 RD 比较靠谱，他们能考虑清楚整个流程，你也就顺利的完成了，这很幸运。</p><p>但大部分情况下，你都会遇到一些不靠谱的人，或者太忙没空理你的人。这个时候就要靠你去承担起来，而你有没有这种能力呢？</p><p>在你抱怨别人不靠谱，抱怨需求频繁改动的时候，你有没有从自己的身上找一找原因。</p><p>如果你是老板，你如何看待这件事？你是否希望你的员工都深入了解业务？</p><p>能联想到的还有很多很多……</p><h2 id="_11-如果你是前端技术负责人-将如何做技术选型" tabindex="-1"><a class="header-anchor" href="#_11-如果你是前端技术负责人-将如何做技术选型" aria-hidden="true">#</a> 11: 如果你是前端技术负责人，将如何做技术选型</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> 题目</h3><p>如何做技术选型？</p><h3 id="选什么" tabindex="-1"><a class="header-anchor" href="#选什么" aria-hidden="true">#</a> 选什么</h3><p>制定项目技术方案，技术选型是非常重要的一个环节。</p><ul><li>前端框架（vue react Nuxt.js Next.js 或者 node.js 框架）</li><li>语言：JS vs TS</li><li>其他：构建工具、CI/CD 等</li></ul><h3 id="技术没有好坏之分-要看是否适合自己和团队成员" tabindex="-1"><a class="header-anchor" href="#技术没有好坏之分-要看是否适合自己和团队成员" aria-hidden="true">#</a> 技术没有好坏之分，要看是否适合自己和团队成员</h3><p>不要用自己的意识形态来评价技术的好坏，例如</p><ul><li>React 就是比 Vue 好，用 Vue 的都是 JS 小白</li><li>Svelte 是新出的框架，我们要提前拥抱未来</li><li>Vue3 发布了，我们赶紧用，体验新技术</li><li>TS 比 JS 好，大家都说好</li></ul><p>以上这些想法都是不对的，不能因此而做技术选型。<br> 我很清晰的记得，去年有一个同事，在没有评审的情况下，私自用 Svelte 搭建了一个项目，结果被领导强烈拒绝。</p><p>这就好比很多人说：xxx 车就是好，这儿好，那儿好 —— 结果，看看大街上，没几个人买。</p><h3 id="技术选型的依据" tabindex="-1"><a class="header-anchor" href="#技术选型的依据" aria-hidden="true">#</a> 技术选型的依据</h3><p>第一，选择社区已经成熟的，用户已经足够多的 —— 经受了大量用户的验证，出了问题也好找人讨论</p><ul><li>Vue React TS 都具备这个条件，而 Angular 至少在国内没有</li><li>Vue3 Svelte 等新发布的，等等再用</li></ul><p>第二，选择你公司已经有技术沉淀的，甚至已经有了很多第三方的可用组件，节省开发成本</p><p>第三，要考虑团队成员的学习成本，不要只考虑自己 —— 什么，你想带领大家一起学习？省省吧，用不着你去拯救别人</p><p>第四，考虑它的价值，能否抵消它的成本。例如</p><ul><li>你们做的是一个大型系统，用 TS 确实能减少很多 bug ，那就用 —— 你要考虑 TS 的<strong>学习成本</strong>，以及<strong>维护成本</strong>（规避各种 <code>any</code>）</li><li>你们做的是一个小型系统，用 TS 提升也不太大，那就别用</li></ul><p>总之，不要为了技术而技术，也不要只考虑自己而是全局考虑。要达到这个境界，你就需要去学习各种框架和技术，而不是只会某一个框架。</p><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> 划重点</h3><ul><li>初期选型是关键，所谓：“一将无能，三军受累”</li><li>技术选项能很好的体现一个人的技术 “修养”</li><li>要站在团队的角度，而非个人的角度</li></ul><h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><ul><li>考虑社区成熟度</li><li>考虑公司的技术积累</li><li>考虑团队成员的学习成本</li><li>考虑它的价值是否真的被利用</li></ul><h2 id="_12-设计实现一个-h5-图片懒加载-sdk" tabindex="-1"><a class="header-anchor" href="#_12-设计实现一个-h5-图片懒加载-sdk" aria-hidden="true">#</a> 12: 设计实现一个 H5 图片懒加载 SDK</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>设计一个 H5 页面的图片懒加载功能</p><h3 id="分析-4" tabindex="-1"><a class="header-anchor" href="#分析-4" aria-hidden="true">#</a> 分析</h3><ul><li>定义 <code>&lt;img src=&quot;./img/loading.gif&quot; data-src=&quot;xxx.jpeg&quot; /&gt;</code></li><li>页面滚动，图片露出时，将 <code>data-src</code> 赋值给 <code>src</code></li><li>滚动要<strong>节流</strong></li></ul><h3 id="获取图片定位" tabindex="-1"><a class="header-anchor" href="#获取图片定位" aria-hidden="true">#</a> 获取图片定位</h3><ul><li>可以使用 <code>Element.getBoundingClientRect()</code> 来判断当前元素的位置</li><li>图片的 top 和 window.innerHeight</li></ul><h3 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h3><p>第一，<code>&lt;img&gt;</code> 要使用 <code>data-src</code>（或其他属性）记录 src 。还有，loading.gif 要自定义，要配合实际图片的尺寸。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal1.jpeg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二，可以使用 <code>Element.getBoundingClientRect()</code> 来判断当前元素的位置</p><p><img src="`+g+`" alt=""></p><p>第三，页面滚动实时计算，注意<strong>节流</strong></p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>代码参考 img-lazy-load.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>img lazy load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">.item-container</span> <span class="token punctuation">{</span>
        <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector">.item-container img</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>img lazy load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal1.jpeg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal2.webp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal3.jpeg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal4.webp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal5.webp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>新闻标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./img/animal6.webp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">mapImagesAndTryLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img[data-src]&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

        images<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> rect <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>rect<span class="token punctuation">.</span>top <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 漏出来</span>
            <span class="token comment">// console.info(&#39;loading img&#39;, img.dataset.src)</span>
            img<span class="token punctuation">.</span>src <span class="token operator">=</span> img<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src
            img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-src&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 移除 data-src 属性，为了下次执行时减少计算成本</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
        <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>
        _<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">mapImagesAndTryLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>

      <span class="token function">mapImagesAndTryLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-扩展知识补充-我们常说的-b-端和-c-端-有什么区别" tabindex="-1"><a class="header-anchor" href="#_13-扩展知识补充-我们常说的-b-端和-c-端-有什么区别" aria-hidden="true">#</a> 13: 扩展知识补充：我们常说的 B 端和 C 端，有什么区别</h2><h3 id="题目-9" tabindex="-1"><a class="header-anchor" href="#题目-9" aria-hidden="true">#</a> 题目</h3><p>B 端和 C 端有和区别</p><h3 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h3><ul><li>B 端，即 toB - to Business 面向商业、生产者</li><li>C 端，即 toC - to Customer 面向消费者、终端用户</li></ul><h3 id="b-端" tabindex="-1"><a class="header-anchor" href="#b-端" aria-hidden="true">#</a> B 端</h3><p>B 端一般是对内的管理系统。<br> 大厂会自研很多内部管理平台、运营平台，供自己人使用。还有一些公司是专门为企业提供内部管理系统的，如 OA CMS ERP 财务软件等。</p><p>管理系统一般用于专业的业务领域，所以功能都非常复杂。这就需要复杂的组件设计，拆分和抽离，要深入熟悉业务才能更好的制作技术方案。 所以，B 端系统一般都是业务驱动的，业务运营人员的话语权更重。</p><p>但它的流量不会太大，一般后台一个服务器、一个数据库即可满足。而且用户环境比较单一，网络情况好，不用考虑极致的性能优化、浏览器兼容性等。</p><h3 id="c-端" tabindex="-1"><a class="header-anchor" href="#c-端" aria-hidden="true">#</a> C 端</h3><p>C 端一般是对外的落地页，就是我们日常消费的各种新闻、小视频页面。<br> 这代表着这个公司对外的核心业务，也是公司最核心的产品，一般都会自研、不会购买或者外包。</p><p>C 端系统一般都是民用级别的，不会有什么复杂专业的功能。<br> 但它的流量一般很大，后台可能需要很多服务器集群，需要各种 CDN 和缓存。而且，它的用户群体很不固定，手机、浏览器、网络等都不确定，需要全面的性能优化和统计、监控。<br> 所以，C 端一般是技术驱动的，技术人员话语权很重。</p><p>大型互联网公司内部的企业文化，技术人员话语权大，也是因为他们 C 端产品比较多，而且 C 端是核心产品。</p><h3 id="saas" tabindex="-1"><a class="header-anchor" href="#saas" aria-hidden="true">#</a> SaaS</h3><p>SaaS - Software as a service 软件即服务，它集合了 B 端和 C 端。</p><p>例如常见的腾讯文档、在线画图软件、在线 PS 等。他们既有 B 端的复杂功能，又有 C 端面向终端用户的特点。SaaS 的研发成本是非常高的。</p><h3 id="前端工程师更多服务于-b-端" tabindex="-1"><a class="header-anchor" href="#前端工程师更多服务于-b-端" aria-hidden="true">#</a> 前端工程师更多服务于 B 端</h3><p>C 端产品，即我们日常使用的产品，其实数量并不多，而且需求变化也不会太快。所以并不需要大量的人来维护。像百度的搜索页面，2-3 个前端团队即可以维护。<br> 但是我还是推荐大家有机会一定要去做一下 C 端产品，体验一下大流量、大用户的情况下，暴露出来的各种问题，以及解决方案。</p><p>而 B 端产品，业务非常多，业务天天变，新的需求每天都会产生。也因为复杂度高，bug 就一直断不了。所以，B 端会需要更多的前端人员来开发和维护。</p><p>我本人很有幸，既做过 C 端又做过 B 端，所以了解比较多。</p><h2 id="_14-总结" tabindex="-1"><a class="header-anchor" href="#_14-总结" aria-hidden="true">#</a> 14: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解项目设计相关的面试题。面试官给出一个项目需求或者功能，让候选人做技术方案设计，考察综合能力。</p><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><ul><li>要能识别需求，转换为技术方案</li><li>技术方案 = 数据模型 + 功能</li><li>数据结构设计很重要，决定了设计的下限</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li>看整体设计，不要追求细节</li></ul>`,211);function R(I,B){const s=o("ExternalLinkIcon");return c(),i("div",null,[f,n("ul",null,[n("li",null,[a("JS 上线之前要合并、混淆和压缩。例如 jquery 的线上代码 "),n("a",x,[a("https://www.bootcdn.cn/jquery/"),t(s)])]),w,n("li",null,[a("sourcemap 就是用于解决这个问题。可以看 jquery 的 sourcemap 文件 "),n("a",q,[a("https://www.jsdelivr.com/package/npm/jquery?path=dist"),t(s)])])]),S,n("p",null,[a("sourcemap 是在打包、压缩 js 时生成，通过 webpack 的打包工具即可配置。（可以在 "),j,a(" 代码环境中测试）"),_,a(" webpack 通过 "),P,a(" 来配置 sourcemap ，有多种选择 "),n("a",C,[a("https://webpack.docschina.org/configuration/devtool/#devtool"),t(s)])]),A])}const O=e(y,[["render",R],["__file","index-10.html.vue"]]);export{O as default};
