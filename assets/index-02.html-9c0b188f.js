import{_ as n,M as d,p as a,q as p,R as e,t as o,N as c,a1 as s}from"./framework-e8cb8151.js";const i="/assets/cdeb002f45ad4a188983e435151b3967~tplv-k3u1fbpfcp-zoom-1-49b12547.jpeg",r="/assets/1de13af895c64954acec35c282505e8f~tplv-k3u1fbpfcp-zoom-1-f26c6e5e.jpeg",l="/assets/25f58e85cf3545a69a4b7e0da0b3dde1~tplv-k3u1fbpfcp-zoom-1-26aaab05.jpeg",g="/assets/52c710846e504b5390bda406de0149b9~tplv-k3u1fbpfcp-zoom-1-7784f62f.jpeg",b="/assets/1fa96422579f4ebba966a04a3046c860~tplv-k3u1fbpfcp-zoom-1-f72b3185.jpeg",m="/assets/d46de45a34cb4982a4512afd9e8de5c8~tplv-k3u1fbpfcp-zoom-1-664c157a.jpeg",f="/assets/29035d923f5341289fb3c0527dca42d4~tplv-k3u1fbpfcp-watermark-cca93e4d.jpeg",u="/assets/ac2e7f9fb85644bba2eb64740984ea60~tplv-k3u1fbpfcp-zoom-1-37a29c6e.png",h="/assets/1f03b42bd971488db2132556d5b7102b~tplv-k3u1fbpfcp-watermark-7d83563b.png",_="/assets/c4c37c1f5cce489a81ce5e56521dc128~tplv-k3u1fbpfcp-zoom-1-1e20edda.jpeg",S="/assets/9be439c2389c4c03afdb1b6d26e8a249~tplv-k3u1fbpfcp-zoom-1-b4e59081.jpeg",k="/assets/3f0042bf96b940c3a29b1adb7c6210d2~tplv-k3u1fbpfcp-zoom-1-ec6b2269.jpeg",v="/assets/b6d6adba3fbb47aaaf154bebf4e3f770~tplv-k3u1fbpfcp-zoom-1-2caff112.jpeg",x="/assets/0ffbb85f59be433d921d03a031188398~tplv-k3u1fbpfcp-zoom-1-639ea29e.jpeg",C="/assets/eb0c5f7661b94655a798afc7b22169c2~tplv-k3u1fbpfcp-zoom-1-10a45959.png",W="/assets/d7aa755e28f84cc795fd21245db2609d~tplv-k3u1fbpfcp-zoom-1-53e4bda9.jpeg",z="/assets/fe03b3367a9d4aba91f4c1e49b8415d9~tplv-k3u1fbpfcp-zoom-1-5874f9b5.png",w="/assets/c2a1d5e7540249699d91e3f19fe73b0f~tplv-k3u1fbpfcp-zoom-1-42a352e6.png",j="/assets/2f128a6f27e746548793726ac7c0f1be~tplv-k3u1fbpfcp-zoom-1-f13f6945.jpeg",B="/assets/bd102861221c42cca2f900a2aad60c34~tplv-k3u1fbpfcp-zoom-1-308c5ce3.jpeg",y="/assets/ea763a01c628466f8cdf938c72117d0b~tplv-k3u1fbpfcp-zoom-1-8016efbd.jpeg",A="/assets/561d5783ec354850ae689d61e86ab6fb~tplv-k3u1fbpfcp-zoom-1-ad999924.png",L="/assets/e171d25a3145466bb16a812e4af3bd2c~tplv-k3u1fbpfcp-watermark-dfd4f87a.png",q="/assets/ee89006d8eb946a2b9bf5cc24c88752b~tplv-k3u1fbpfcp-zoom-1-e617cd16.jpeg",T="/assets/9d194cbe7fc845f8be3a6671cfa7fad5~tplv-k3u1fbpfcp-zoom-1-4ed72726.png",F="/assets/a964cea745874ab18339f42497116af9~tplv-k3u1fbpfcp-zoom-1-c19c66c6.jpeg",I={},E=s('<h1 id="_02-现代-web-布局技术术语" tabindex="-1"><a class="header-anchor" href="#_02-现代-web-布局技术术语" aria-hidden="true">#</a> 02-现代 Web 布局技术术语</h1><p>Web 发展的每个不同时期都有新的技术为 Web 布局提供支持，但不管是哪个时期，Web 布局相关的概念和术语都是相同的。如果你想彻底或者更好地掌握 Web 布局，那么首先需要对 Web 布局相关的技术术语有所了解。</p><p>在这一节中，我们一起来探讨 Web 布局相关的术语。</p><h2 id="web-坐标轴" tabindex="-1"><a class="header-anchor" href="#web-坐标轴" aria-hidden="true">#</a> Web 坐标轴</h2><p>坐标轴不只是存在于数学中，它同样存在于 Web 世界中。在 Web 中，我们常称之为 <strong>Web</strong> <strong>坐标轴</strong> 或 <strong>CSS</strong> <strong>坐标系统</strong> 。</p><p>在 Web 中，默认原点是给定上下文的左上角，也就是元素盒子的左上角，它分为 <code>x</code> 轴（也称为水平轴），向右为正值，向左为负值；<code>y</code> 轴（垂直轴），向上为负值，向下为正值：</p><p><img src="'+i+'" alt="img"></p><blockquote><p>请注意，这与大多数数学模型不同，其中原点位于<em>左下角</em>，正 <code>y</code> 坐标值位于原点上方。</p></blockquote><p>事实上，除了大家熟悉的平面画布中的 <code>x</code> 和 <code>y</code> 轴之外，还有控制第三维度的 <code>z</code> 轴。比如使用 CSS 的 <code>transform</code> 绘制 3D 图形或使用第三维度从前往后对对象进行分层：</p><p><img src="'+r+'" alt="img"></p><p>也会在定位元素（显式使用<code>position</code> 属性值为非 <code>static</code> 的元素）上使用 <code>z-index</code> 控制其层叠的顺序（<code>z</code> 轴上的层叠顺序），它表示的是用户与屏幕的这条看不见的垂直线：</p><p><img src="'+l+'" alt="img"></p><p>上面我们看到的 CSS 坐标系，只是最初的坐标系的定义。随着 CSS 的逻辑属性出现，CSS 的坐标系也随之改变。它分为 <strong>内联轴</strong> （Inline Axis）和 <strong>块轴</strong> （Block Axis）。</p><p>众所周知，在 CSS 中，每个元素都是一个盒子，默认情况之下，盒子会根据元素类型分为块盒子（比如块元素 <code>div</code> ）和 内联盒子（比如<code>span</code>）。其中块盒会在垂直方向从上往下堆叠，内联盒子将会按照书写方式从左往右排列：</p><p><img src="'+g+'" alt="img"></p><p>当我们的书写方式改变时，块盒子和内联盒子也会有相应的变化，就拿内联盒子为例，书写模式改变之后，它的方向也会随之改变：</p><p><img src="'+b+'" alt="img"></p><p>简而言之，<strong>块元素遵循流方向，内联元素遵循写入方向</strong>：</p><p><img src="'+m+'" alt="img"></p><p>也就是说，随着 CSS 的逻辑属性的出现，CSS 的坐标系就不再以 <code>x</code> 轴 和 <code>y</code> 轴来定义，而是以 <strong>内联</strong> （Inline）和 <strong>块</strong> （Block）来区分，并且内联方向的称之为 <strong>内联轴</strong> （Inline Axis），也就是书写模式的方向；块方向的称之为 <strong>块轴</strong> （Block Axis），也就是块盒子自然流的方向。它们随着 CSS 的书写模式改变，如下图所示：</p><p><img src="'+f+'" alt="fig-02-07.jpg"></p><p>如此一来，在 CSS 中就有<strong>物理坐标系</strong> 和 <strong>逻辑坐标系</strong> 之分，它们的对应关系如下：</p><table><thead><tr><th><strong>物理属性</strong></th><th><strong>逻辑属性(<code>horizontal-tb</code>)</strong></th><th><strong>逻辑属性(<code>vertical-lr</code>)</strong></th><th><strong>逻辑属性(<code>vertical-rl</code>)</strong></th></tr></thead><tbody><tr><td><code>x</code> 轴（水平轴）</td><td>Inline 轴（内联轴）</td><td>Block 轴（块轴）</td><td>Block 轴（块轴）</td></tr><tr><td><code>y</code> 轴（垂直轴）</td><td>Block 轴（块轴）</td><td>Inline 轴（内联轴）</td><td>Inline 轴（内联轴）</td></tr></tbody></table><blockquote><p><strong>注意</strong> ，不管是在物理坐标系还是逻辑坐标系中，<code>z</code> 轴是不变的！</p></blockquote><h2 id="容器和容器空间" tabindex="-1"><a class="header-anchor" href="#容器和容器空间" aria-hidden="true">#</a> 容器和容器空间</h2><p>容器这个概念很简单。熟悉 CSS 的同学都知道，HTML 的每一个元素在 CSS 中都是一个盒子，这个盒子又被称为 <strong>容器</strong> 。只不过，这个容器会随着盒子的类型不同，容器的称呼也会有不同。它主要由 CSS 的 <code>display</code> 属性的值来决定，比如：</p><ul><li><p><code>block</code> 时称为块容器；</p></li><li><p><code>inline</code> 时称为内联容器；</p></li><li><p><code>flex</code> 或 <code>inline-flex</code> 时称为Flexbox容器；</p></li><li><p><code>grid</code> 或 <code>inline-grid</code> 时称为 Grid 容器（网格容器）。</p></li></ul><p>每个容器就像生活中的器皿一样，不管是什么类型的容器，它都有空间。只不过这个空间的大小是由 CSS 盒模型相关的属性来决定的：</p><p><img src="'+u+'" alt="img"></p><p>只不过，Web 开发者习惯性以 <code>width</code> 、<code>height</code> 、 <code>min-*</code> 或 <code>max-*</code> 以及它们对应的逻辑属性来显式指定一个容器空间的大小：</p><p><img src="'+h+'" alt="fig-02-09.png"></p><p>而且容器大小计算方式也会受 CSS 的 <code>box-sizing</code> 属性的值影响：</p><p><img src="'+_+'" alt="img"></p><p>每个容器中都有可能会放置内容（文本内容或其他元素），随着容器中放置的内容多少，可能会造成指定大小的容器无法容纳嵌套的内容，造成内容溢出（超出指定容器的大小）；也有可能放置的内容较少，无法填充满整个容器。</p><p>按此呈现模式，每个容器的大小（空间）又有<strong>可用空间</strong> （也称为 <strong>剩余空间</strong> ）和 <strong>不可用空间</strong> （也称为 <strong>不足空间</strong> ）：</p><p><img src="'+S+'" alt="img"></p><h2 id="间距" tabindex="-1"><a class="header-anchor" href="#间距" aria-hidden="true">#</a> 间距</h2><p>Web 是由很多个元素堆叠而成的，为了让 Web 页面给用户提供更好的体验，Web 设计师在设计时，会根据美学相关的理论来设计元素与元素之间，元素内容与元素盒子边缘之间的间距：</p><p><img src="'+k+'" alt="img"></p><p>只不过，在 Web 布局中，我们常常是使用 CSS 的 <code>margin</code> 、<code>padding</code> 和 <code>gap</code> 三个属性来设置间距。不同的是：</p><ul><li><p>框与框（也就是元素与元素）之间的间距一般采用 <code>margin</code> 或 <code>gap</code> 属性来设置，也常称为 <strong>外距</strong> ；</p></li><li><p>内容与框的边缘（元素内容与元素框边缘）之间的间距一般采用 <code>padding</code> 来设置，也常称为 <strong>内距</strong>。</p></li></ul><p>如下图所示：</p><p><img src="'+v+'" alt="img"></p><p>特别要提出来的是，CSS 中的 <code>margin</code> 和 <code>gap</code> 表现形式是有较大差异的，它们之间的差异用下图来阐述：</p><p><img src="'+x+'" alt="img"></p><h2 id="书写模式" tabindex="-1"><a class="header-anchor" href="#书写模式" aria-hidden="true">#</a> 书写模式</h2>',46),G={href:"https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},R=s('<p><img src="'+C+'" alt="img"></p><p>不同的语系，它们的书写模式（阅读模式）是有差异的：</p><ul><li><p><strong>拉丁语体系</strong> 是从左往右，比如英语、西班牙语、德语、法语等；</p></li><li><p><strong>阿拉伯语体系</strong> 是从右往左，比如阿拉伯语、希伯来语等；</p></li><li><p><strong>汉语体系</strong> 有两种方式，有可能是从左往右，也有从上向往下，比如中文、日文、韩文等。</p></li></ul><p>正因为语言的书写方式不同，在 Web 中呈现不同语系时，CSS 中的块（Block）和 内联（Inline）表现的方式也会不同。</p><p><img src="'+W+'" alt="img"></p><p>在 Web 布局中，尤其是针对多语言的 Web 布局，我们可以通过 HTML 元素的 <code>dir</code> 属性或 CSS 的 <code>direction</code> 属性来控制书写模式，比如 <code>ltr</code> （Left-To-Right，也就是从左往右的书写方式），<code>rtl</code> （Right-To-Left，也就是从右往左的书写方式）。除此之外，还可以使用 CSS 的 <code>writing-mode</code> 属性来控制：</p><p><img src="'+z+'" alt="img"></p><p>正因为语系不同书写模式不同，也将造成 CSS 中布局相关属性最终呈现给用户的效果有所差异，比如 Flexbox 中的 <code>flex-direction</code> 属性，CSS Box Alignment 模块中的属性以及 Grid 布局等。</p><h2 id="逻辑属性" tabindex="-1"><a class="header-anchor" href="#逻辑属性" aria-hidden="true">#</a> 逻辑属性</h2><p>我们构建的 Web 页面不仅是局限于单语种中，你负责的业务有可能是国际业务。这样一来，你构建的 Web 页面是一个多语种的 Web 页面，那么你的布局会因为语种不同有所差异。比如 Facebook 的登录页面：</p><p><img src="'+w+'" alt="img"></p><blockquote><p>上图中左侧是汉语体系的布局效果，右侧是阿拉伯语体系的布局效果。</p></blockquote><p>众所周知，CSS 中有很多属性和值是遵循 <strong>TRBL</strong> (Top、Right、Bottom 和 Left ) 模式的：</p><p><img src="'+j+`" alt="img"></p><p>比如，我们熟悉的元素位置会映射到 <code>top</code> 、<code>right</code>、<code>bottom</code> 和 <code>left</code>，除此之外，像 <code>border</code> 、 <code>margin</code> 、<code>padding</code> 和 <code>border-radius</code>等属性的子属性也会映射到 TRBL 上，如 <code>margin-top</code> 、<code>margin-right</code> 、<code>margin-bottom</code> 和 <code>margin-left</code> 。它们带有明确的方向性。只不过，针对多语言布局时，它给布局带来很大的局限性，比如下面这个简单地示例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.thumb</span> <span class="token punctuation">{</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>ltr</code> 模式（比如英文）和 <code>rtl</code> 模式（比如阿拉伯文），效果将会是像下图一样：</p><p><img src="`+B+`" alt="img"></p><p>这个效果并不是我们所期待的，如果希望达到预期的效果，在以往编码的时候，需要做额外的处理：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.thumb</span> <span class="token punctuation">{</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">[dir=&quot;rtl&quot;] .thumb</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+'" alt="img"></p>',21),P={href:"https://www.w3.org/TR/css-logical-1/#intro",target:"_blank",rel:"noopener noreferrer"},N=s('<p>在这个模块中并没有方向性的概念，只有开始（<code>start</code> ）、结束（<code>end</code>）、块（<code>block</code>）和 内联（<code>inline</code> ）的概念。这样一来，在从左到右的（<code>ltr</code>）中，<code>start</code> 对应的是 <code>left</code> ，但在从右到左（<code>rtl</code>）中，<code>start</code> 对应的是 <code>right</code> 。也就是说，逻辑属性更易于适应不同的书写模式。</p><p>当然，逻辑属性出现之后，很多 CSS 属性和属性值也随之有了变化，在原有的物理属性的基础上映射了一份逻辑属性。尤其是 CSS 的盒模型相关的属性（比如 <code>width</code>、<code>height</code> 、<code>min-*</code> 、<code>max-*</code> 、<code>border</code> 、<code>margin</code> 、<code>padding</code>）、定位位移相关的属性（比如 <code>top</code> 、<code>right</code> 、<code>bottom</code> 和 <code>left</code>）、排版方面的（比如<code>float</code> 属性的值 <code>left</code> 和 <code>right</code>）以及圆角 <code>border-radius</code> 等：</p><p><img src="'+A+'" alt="img"></p><p>而且映射关系与 CSS 的 <code>writing-mode</code> 属性值也有关系，对应关系如下图所示：</p><p><img src="'+L+`" alt="fig-02-23.png"></p><p>有了逻辑属性之后，构建多语言 Web 的布局就要方便得多：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.thumb</span> <span class="token punctuation">{</span>
    margin-inline-end<span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+'" alt="img"></p><h2 id="对齐方式" tabindex="-1"><a class="header-anchor" href="#对齐方式" aria-hidden="true">#</a> 对齐方式</h2>',9),V={href:"https://www.w3.org/TR/css-align-3/",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"text-align",-1),D=e("code",null,"vertical-align",-1),H=e("code",null,"float",-1),J=s("<p>庆幸的是，随着 CSS Flexbox 特性出现之后，CSS 新增了像 <code>justify-content</code> 、<code>align-content</code> 、<code>align-items</code> 、<code>justify-items</code> 和 <code>justify-self</code> 以及 <code>align-self</code> 等属性，用来控制 Web 布局上的对齐方式。最初这些属性是在 Flexbox 相关规范中定义的，但随着 CSS Grid 布局出现之后，W3C 的 CSS 工作组将这些属性单独划分到一个模块中，即 CSS Box Alignment 模块。</p>",1),K={href:"https://twitter.com/Prathkum",target:"_blank",rel:"noopener noreferrer"},O={href:"https://twitter.com/prathkum/status/1388118908326928392?lang=gl",target:"_blank",rel:"noopener noreferrer"},Q=e("blockquote",null,[e("p",null,"CSS Box Alignment 模块是 Web 布局不可或缺的部分，而且其中有很多概念是极易于混淆的。")],-1),U=e("p",null,[e("img",{src:T,alt:"img"})],-1),X=e("p",null,"CSS Box Alignment 模块中，取不同的值时，能得到不同的对齐结果，比如靠左（开始）、靠右（结束）、中间对齐、两端对齐等：",-1),Y=e("p",null,[e("img",{src:F,alt:"img"})],-1),Z={href:"https://twitter.com/Prathkum",target:"_blank",rel:"noopener noreferrer"},$=e("p",null,"需要注意的是， CSS Box Alignment 模块中的属性同时可以运用于 CSS Flexbox 和 CSS Grid 布局中，在运用于 CSS Flexbox 和 CSS Grid 布局中时略有差异，具体我们会在后面介绍 Flexbox 和 Grid 布局中会提到，在这里不详细阐述，大家只要知道，在现代 Web 布局技术中，对齐方式新增了该模块！",-1),ee=e("h2",{id:"小结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),o(" 小结")],-1),oe=e("p",null,"在这篇文章中，我们主要和大家一起探讨了 Web 布局相关的概念和术语。从我们最为熟悉的坐标系统开始，到我们熟悉的容器以及容器空间，再到新增的书写模式、逻辑属性以及对齐方式等。我们花一个节课来介绍这方面，主要是为了和大家把布局相关的概念统一起来，为后续布局打下基础。",-1),te=e("p",null,"有了这些基础和认识之后，就可以开启现代布局中的 Flexbox 布局了 ！Let's Go! (^_^)",-1);function ce(se,ne){const t=d("ExternalLinkIcon");return a(),p("div",null,[E,e("p",null,[o("世界上有很多种语言（简称"),e("a",G,[o("世界语言"),c(t)]),o("），比如汉语、英语、印度斯坦语、西班牙语、阿拉伯语、俄语、葡萄牙语、德语和法语等。在互联中也有一些常用语言，比如英语、汉语、西班牙语、葡萄牙语、印尼语（马来语）、法语、日语、俄语和德语等。")]),R,e("p",null,[o("为了解决类似上图这样的问题，2017 年 5 月 18 日，W3C 的 CSS 工作组（CSS Working Group） 发布了 "),e("a",P,[o("CSS逻辑属性和值"),c(t)]),o("（CSS Logical Properties and Values Level 1） 的首份工作草案（First Public Working Draft）。")]),N,e("p",null,[o("这里所说的对齐方式指的是 "),e("a",V,[o("CSS Box Alignment 模块"),c(t)]),o("，该模块的出现可以说改善了 CSS 中非常有限的对齐能力。在以往，我们控制对齐方式主要是依赖于 CSS 的 "),M,o(" （水平方向文本对齐）和 "),D,o(" （垂直方向文本对齐）两个属性，对于块的对齐方式主要依赖于 "),H,o(" 属性。它们是无法满足 Web 布局中的对齐控制。")]),J,e("p",null,[o("正如 "),e("a",K,[o("@Pratham"),c(t)]),o(" 发的 "),e("a",O,[o("Twitter 信息上所说"),c(t)]),o("：")]),Q,U,X,Y,e("blockquote",null,[e("p",null,[o("注意，上图由 "),e("a",Z,[o("@Pratham"),c(t)]),o(" 绘制！")])]),$,ee,oe,te])}const ae=n(I,[["render",ce],["__file","index-02.html.vue"]]);export{ae as default};
