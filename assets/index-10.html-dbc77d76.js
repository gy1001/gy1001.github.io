import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const p={},t=e(`<h1 id="_10-【练兵场-typescript快速进阶】掌握企业级开发的" tabindex="-1"><a class="header-anchor" href="#_10-【练兵场-typescript快速进阶】掌握企业级开发的" aria-hidden="true">#</a> 10-【练兵场-TypeScript快速进阶】掌握企业级开发的</h1><h2 id="_01-typescript-介绍和优势" tabindex="-1"><a class="header-anchor" href="#_01-typescript-介绍和优势" aria-hidden="true">#</a> 01: TypeScript 介绍和优势</h2><ul><li>JS 的超集，JS 有的TS都有，能运行jS 的就能运行 TS</li><li>强大的类型系统提升了代码的阅读星、可维护性</li><li>类型推断、类型检查、代码提示</li><li>有助于在团队中推动严格的代码检查</li></ul><h2 id="_02-ts-的安装和项目配置" tabindex="-1"><a class="header-anchor" href="#_02-ts-的安装和项目配置" aria-hidden="true">#</a> 02: TS 的安装和项目配置</h2><ul><li><p>安装TS</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生成 tsconfig.json</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装类型声明（众多）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/react @types/react-native
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_03-number、string、boolean三大基础类型" tabindex="-1"><a class="header-anchor" href="#_03-number、string、boolean三大基础类型" aria-hidden="true">#</a> 03: number、string、boolean三大基础类型</h2><ul><li>数值类型：number</li><li>字符串类型：string</li><li>布尔类型：boolean</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> floatNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-数组、元组、枚举类型的使用" tabindex="-1"><a class="header-anchor" href="#_04-数组、元组、枚举类型的使用" aria-hidden="true">#</a> 04: 数组、元组、枚举类型的使用</h2><ul><li>数组类型：Array</li><li>元组类型</li><li>枚举类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> numbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 

<span class="token keyword">const</span> person<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 

<span class="token keyword">enum</span> Color <span class="token punctuation">{</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token punctuation">}</span> 
<span class="token keyword">const</span> color<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-函数类型" tabindex="-1"><a class="header-anchor" href="#_05-函数类型" aria-hidden="true">#</a> 05: 函数类型</h2><ul><li>基础的函数声明</li><li>函数的参数类型和返回值类型声明</li><li>函数的可选参数和默认参数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AddFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> add<span class="token operator">:</span> <span class="token function-variable function">AddFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add_numbers</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 可选参数</span>
<span class="token keyword">function</span> <span class="token function">printMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> optionalParam<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>optionalParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>optionalParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 默认参数</span>
<span class="token keyword">function</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> sumWithDefaultValue <span class="token operator">=</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-类型文件和命名空间" tabindex="-1"><a class="header-anchor" href="#_06-类型文件和命名空间" aria-hidden="true">#</a> 06: 类型文件和命名空间</h2><blockquote><p>TypeScript 类型文件是以 <code>.ts</code> 扩展名结尾的文件，其中包含 TypeScript 代码。类型文件可以包含类、接口、函数、变量等类型定义，以及对这些类型的使用。</p><ol><li><p>类型文件的主要目的是定义和声明代码中的类型，以便在其他地方可以使用这些类型。通过将类型定义放在单独的类型文件中，可以更好地组织和管理代码，并提供更好的可读性和可维护性。</p><p>例如，你可以创建一个名为 <code>math.ts</code> 的类型文件，其中定义了一些数学相关的类型和函数。</p></li><li><p>命名空间（Namespaces）：</p><p>命名空间是一种用于组织代码的方式，它将相关的类型、函数和变量组合在一起，并通过命名行访问和引用。</p><p>在 TypeScript 中，你可以使用命名空间来创建一个上下文或范围，以便更好地组织和管理代码。命名空间可以通过使用 <code>namespace</code> 和 <code>export</code> 关键字来定义。</p><p>例如，你可以创建一个名为 <code>MyNamespace</code> 的命名空间，并在其中定义一些相关的类型和函数。</p></li></ol></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型文件 比如 math.ts</span>
<span class="token keyword">namespace</span> Math <span class="token punctuation">{</span>
 <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Vector2</span> <span class="token punctuation">{</span>
   x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
   y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addVectors</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Vector2<span class="token punctuation">,</span> b<span class="token operator">:</span> Vector2<span class="token punctuation">)</span><span class="token operator">:</span> Vector2 <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
     x<span class="token operator">:</span> a<span class="token punctuation">.</span>x <span class="token operator">+</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
     y<span class="token operator">:</span> a<span class="token punctuation">.</span>y <span class="token operator">+</span> b<span class="token punctuation">.</span>y
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index-10.html.vue"]]);export{r as default};
