import{_ as s,M as e,p as t,q as i,R as n,t as l,N as o,a1 as c}from"./framework-e8cb8151.js";const p="/assets/5f16ca070001d66206400429-e6cf3886.jpg",r={},d=c('<h1 id="_06-葵花宝典-docker-操作参数详解" tabindex="-1"><a class="header-anchor" href="#_06-葵花宝典-docker-操作参数详解" aria-hidden="true">#</a> 06-葵花宝典：Docker 操作参数详解</h1><p><img src="'+p+`" alt="img"></p><blockquote><p>受苦的人，没有悲观的权利。——尼采</p></blockquote><p>本篇文章介绍 Docker 的操作参数，包括针对容器（container）、镜像（image）和镜像仓库中心（registry）的操作命令。</p><h2 id="_1-容器操作" tabindex="-1"><a class="header-anchor" href="#_1-容器操作" aria-hidden="true">#</a> 1. 容器操作</h2><p>Docker 和容器相关的常用的操作命令如下：</p><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p>docker run 用来通过镜像启动一个容器。这个可以算是操作 docker 容器的核心命令了，参数及其丰富，多达 91 个参数，使用手册如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker run --help</span>

Usage:	<span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a new container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们启动一个 centos 的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti centos:latest /bin/bash</span>
<span class="token punctuation">[</span>root@b16716790a3f /<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 centos:latest 就是 Usage 中的 IMAGE，COMMAND 就是 /bin/bash，然后 -ti 分配一个终端用于交互式输入。</p><p>我们下面主要介绍几个重要的参数。</p><p><em><strong>--interactive</strong></em> 等同于 <em><strong>-i</strong></em> ，接受 stdin 的输入；</p><p><em><strong>--tty</strong></em> 等同于 <em><strong>-t</strong></em>，分配一个 tty，一般和 i 一起使用；</p><p><em><strong>--name</strong></em> 给容器设置一个名字；</p><p><em><strong>--add-host</strong></em> 给容器设置 hosts 文件，格式 host:ip；</p><p><em><strong>--env</strong></em> 环境变量设置；</p><p><em><strong>--expose</strong></em> 暴露端口；</p><p><em><strong>--hostname</strong></em> 设置容器的主机名；</p><p><em><strong>--link</strong></em> 容器网络相关，和其他的 container 连接；</p><p><em><strong>--cpu-quota</strong></em> 设置 CPU 限制；</p><p><em><strong>--memory</strong></em> 设置容器可以使用的内存限制。</p><h3 id="attach" tabindex="-1"><a class="header-anchor" href="#attach" aria-hidden="true">#</a> attach</h3><p>docker attach 让我们可以进入到一个运行着的容器的内部，这个命令的原理是给一个正在运行的容器分配一个 stdin、stdout 和 stderr。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker attach --help</span>

Usage:	<span class="token function">docker</span> attach <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER

Attach <span class="token builtin class-name">local</span> standard input, output, and error streams to a running container

Options:
      --detach-keys string   Override the key sequence <span class="token keyword">for</span> detaching a container
      --no-stdin             Do not attach STDIN
      --sig-proxy            Proxy all received signals to the process <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，如果 docker attach 之后要退出的话，不能使用 exit，使用 exit 原容器也会退出。我们可以使用 Ctrl + C 的方式退出。</p><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec</h3><p>docker exec 命令也可以达到 attach 的目的。exec 命令的用处是在一个运行着的容器里面执行一个命令。关于这个命令的原理其实很简单，在 Linux 内核层面，相当于 fork 了一个进程，然后这个进程设置和容器相同的 NameSpace。如果我们 OPTIONS 指定 -ti ，那么我们就可以进入到一个运行着的容器里面执行命令了。因为这个是一个 fork 出来的进程，所以可以 exit。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker exec --help</span>

Usage:	<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container

Options:
  -d, <span class="token parameter variable">--detach</span>               Detached mode: run <span class="token builtin class-name">command</span> <span class="token keyword">in</span> the background
      --detach-keys string   Override the key sequence <span class="token keyword">for</span> detaching a container
  -e, <span class="token parameter variable">--env</span> list             Set environment variables
  -i, <span class="token parameter variable">--interactive</span>          Keep STDIN <span class="token function">open</span> even <span class="token keyword">if</span> not attached
      <span class="token parameter variable">--privileged</span>           Give extended privileges to the <span class="token builtin class-name">command</span>
  -t, <span class="token parameter variable">--tty</span>                  Allocate a pseudo-TTY
  -u, <span class="token parameter variable">--user</span> string          Username or <span class="token environment constant">UID</span> <span class="token punctuation">(</span>format: <span class="token operator">&lt;</span>name<span class="token operator">|</span>uid<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>group<span class="token operator">|</span>gid<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  -w, <span class="token parameter variable">--workdir</span> string       Working directory inside the container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h4><p>docker ps 可以用来列出所有在运行的容器的信息，同时支持一些类似 filter 的参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker ps --help</span>

Usage:	<span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>

List containers

Options:
  -a, <span class="token parameter variable">--all</span>             Show all containers <span class="token punctuation">(</span>default shows just running<span class="token punctuation">)</span>
  -f, <span class="token parameter variable">--filter</span> filter   Filter output based on conditions provided
      <span class="token parameter variable">--format</span> string   Pretty-print containers using a Go template
  -n, <span class="token parameter variable">--last</span> int        Show n last created containers <span class="token punctuation">(</span>includes all states<span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span>
  -l, <span class="token parameter variable">--latest</span>          Show the latest created container <span class="token punctuation">(</span>includes all states<span class="token punctuation">)</span>
      --no-trunc        Don&#39;t truncate output
  -q, <span class="token parameter variable">--quiet</span>           Only display numeric IDs
  -s, <span class="token parameter variable">--size</span>            Display total <span class="token function">file</span> sizes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill</h4><p>docker kill 用来 kill 一个或者一组 container。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker kill --help</span>

Usage:	<span class="token function">docker</span> <span class="token function">kill</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Kill one or <span class="token function">more</span> running containers

Options:
  -s, <span class="token parameter variable">--signal</span> string   Signal to send to the container <span class="token punctuation">(</span>default <span class="token string">&quot;KILL&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logs" tabindex="-1"><a class="header-anchor" href="#logs" aria-hidden="true">#</a> logs</h4><p>docker logs 用来获取 docker 的 log。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker logs --help</span>

Usage:	<span class="token function">docker</span> logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER

Fetch the logs of a container

Options:
      <span class="token parameter variable">--details</span>        Show extra details provided to logs
  -f, <span class="token parameter variable">--follow</span>         Follow log output
      <span class="token parameter variable">--since</span> string   Show logs since timestamp <span class="token punctuation">(</span>e.g. <span class="token number">2013</span>-01-02T13:23:37<span class="token punctuation">)</span> or relative <span class="token punctuation">(</span>e.g. 42m <span class="token keyword">for</span> <span class="token number">42</span> minutes<span class="token punctuation">)</span>
      <span class="token parameter variable">--tail</span> string    Number of lines to show from the end of the logs <span class="token punctuation">(</span>default <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
  -t, <span class="token parameter variable">--timestamps</span>     Show timestamps
      <span class="token parameter variable">--until</span> string   Show logs before a timestamp <span class="token punctuation">(</span>e.g. <span class="token number">2013</span>-01-02T13:23:37<span class="token punctuation">)</span> or relative <span class="token punctuation">(</span>e.g. 42m <span class="token keyword">for</span> <span class="token number">42</span> minutes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h4><p>docker top 这个命令有时候比较有用，我们想看一下运行这个容器在宿主机上面是那个进程就可以使用这个命令，毕竟 container 的本质就是一个进程，这个我们后面会细说。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker top --help</span>

Usage:	<span class="token function">docker</span> <span class="token function">top</span> CONTAINER <span class="token punctuation">[</span>ps OPTIONS<span class="token punctuation">]</span>

Display the running processes of a container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-镜像操作" aria-hidden="true">#</a> 2. 镜像操作</h2><p>和镜像相关的常用的操作命令如下：</p><ul><li>images：列出本地所有的镜像；</li><li>build：通过 Dockerfile build 出镜像；</li><li>commit：将容器中的所有改动生成新的镜像；</li><li>history：查看镜像的历史；</li><li>save：将镜像保存成 tar 包；</li><li>import：通过 tar 包导入新的镜像；</li><li>load：通过 tar 包或者标志输入导入镜像；</li><li>rmi：删除本地镜像；</li><li>tag：给镜像打 tag。</li></ul><h4 id="images" tabindex="-1"><a class="header-anchor" href="#images" aria-hidden="true">#</a> images</h4><p>docker images 会显示本地所有的非隐藏镜像，默认会将中间依赖镜像进行隐藏。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
busybox             <span class="token number">1</span>-musl              ff04c2bddacb        <span class="token number">3</span> days ago          <span class="token number">1</span>.44MB
busybox             <span class="token number">1</span>-glibc             ad06ec8ab37b        <span class="token number">3</span> days ago          <span class="token number">5</span>.2MB
busybox             <span class="token number">1</span>-uclibc            b534869c81f0        <span class="token number">3</span> days ago          <span class="token number">1</span>.22MB
busybox             latest              b534869c81f0        <span class="token number">3</span> days ago          <span class="token number">1</span>.22MB
busybox             <span class="token number">1.24</span>-glibc          54df49495ae4        <span class="token number">3</span> years ago         <span class="token number">4</span>.18MB
busybox             <span class="token number">1</span>-ubuntu            d34ea343a882        <span class="token number">3</span> years ago         <span class="token number">4</span>.35MB
busybox             <span class="token number">1.21</span>-ubuntu         d34ea343a882        <span class="token number">3</span> years ago         <span class="token number">4</span>.35MB
busybox             <span class="token number">1.21</span>.0-ubuntu       d34ea343a882        <span class="token number">3</span> years ago         <span class="token number">4</span>.35MB
busybox             <span class="token number">1.23</span>                a84c36ecc374        <span class="token number">4</span> years ago         <span class="token number">1</span>.1MB
busybox             <span class="token number">1.23</span>.2              a84c36ecc374        <span class="token number">4</span> years ago         <span class="token number">1</span>.1MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 docker images 的默认显示，但是有时候我们需要显示更多的信息比如 Digest，或者过滤掉一些镜像，那么我们可以通过添加参数来实现。我们看一下 docker images 的完整的功能。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker images --help</span>

Usage:	<span class="token function">docker</span> images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

List images

Options:
  -a, <span class="token parameter variable">--all</span>             Show all images <span class="token punctuation">(</span>default hides intermediate images<span class="token punctuation">)</span>
      <span class="token parameter variable">--digests</span>         Show digests
  -f, <span class="token parameter variable">--filter</span> filter   Filter output based on conditions provided
      <span class="token parameter variable">--format</span> string   Pretty-print images using a Go template
      --no-trunc        Don&#39;t truncate output
  -q, <span class="token parameter variable">--quiet</span>           Only show numeric IDs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><em><strong>all</strong></em> 参数显示所有镜像，包括中间依赖镜像；</li><li><em><strong>digest</strong></em> 显示 digest；</li><li><em><strong>filter</strong></em> 对镜像进行过滤；</li><li><em><strong>no-trunc</strong></em> 默认会对某些输出列进行截断展示，该参数将全量展示。</li><li><em><strong>quiet</strong></em> 只展示镜像的数字 ID。</li><li><em><strong>format</strong></em> 参数使用一种 Go 模板的形式输出，简单来说就是指定输出的列。这么描述不太直观，我们可以看一个简单的例子如下，其中的 ID 和 Repository 就是指定的输出的列。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker images --format &quot;{{.ID}}: {{.Repository}}&quot;</span>
ff04c2bddacb: busybox
ad06ec8ab37b: busybox
b534869c81f0: busybox
b534869c81f0: busybox
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 ID 和 Repository，Docker 支持的全部的列如下：</p><table><thead><tr><th style="text-align:left;">Placeholder</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>.ID</code></td><td style="text-align:left;">镜像 ID</td></tr><tr><td style="text-align:left;"><code>.Repository</code></td><td style="text-align:left;">镜像 repo，其实就是镜像名称</td></tr><tr><td style="text-align:left;"><code>.Tag</code></td><td style="text-align:left;">镜像 tag</td></tr><tr><td style="text-align:left;"><code>.Digest</code></td><td style="text-align:left;">镜像 digest</td></tr><tr><td style="text-align:left;"><code>.CreatedSince</code></td><td style="text-align:left;">镜像创建之后多长时间</td></tr><tr><td style="text-align:left;"><code>.CreatedAt</code></td><td style="text-align:left;">镜像的创建时间</td></tr><tr><td style="text-align:left;"><code>.Size</code></td><td style="text-align:left;">镜像的磁盘大小</td></tr></tbody></table><h4 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build</h4><p>在 Docker 中我们可以通过一个 Dockerfile，使用 docker build 构建出镜像。这一块我们后面将会有专门的小节来展开，这里暂时先略过。</p><h4 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> commit</h4><p>上面说到我们可以通过一个 Dockerfile 构建出镜像，但是有时候我们在使用过程中对容器（container）做了一些改动，比如安装了一些依赖包。我们想把这些改动保存下来形成新的镜像，同时不想再去编写 Dockerfile，或者之前的 Dockerfile 我们没有。那么这时候我们就可以通过 docker commit 将一个 container 的环境持久成镜像。我们首先看一下 docker commit 的使用规范说明。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker commit --help</span>

Usage:	<span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

Create a new image from a container&#39;s changes

Options:
  -a, <span class="token parameter variable">--author</span> string    Author <span class="token punctuation">(</span>e.g., <span class="token string">&quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;</span><span class="token punctuation">)</span>
  -c, <span class="token parameter variable">--change</span> list      Apply Dockerfile instruction to the created image
  -m, <span class="token parameter variable">--message</span> string   Commit message
  -p, <span class="token parameter variable">--pause</span>            Pause container during commit <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要对现在的一个 container 进行 commit 操作，我们首先可以通过 docker ps 找到我们要执行 commit 操作的 container 的 id。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES
d7bb841d9811        legendtkl:v2.1   <span class="token string">&quot;/bin/bash&quot;</span>         About a minute ago   Up About a minute   <span class="token number">22</span>/tcp              vigorous_chaplygin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行 commit 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker commit d7bb841d9811 legendtkl:v2.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再执行 docker images 就可以看到我们新 commit 出来的镜像了。</p><h4 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h4><p>使用 docker history 可以查看镜像的历史，举个例子。后面的命令我们在 Dockerfile 那一节在详细说。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker history a84c36ecc374</span>
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
a84c36ecc374        <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) CMD [&quot;sh&quot;]                    0B</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) ADD file:6cccb5f0a3b394711…   1.1MB</span>
<span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker history 243b193cdf70</span>
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
243b193cdf70        <span class="token number">3</span> hours ago                                                         0B
e104690ec93c        <span class="token number">2</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD []                       0B</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">2</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  ENTRYPOINT [&quot;/legendtkl…   0B</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">2</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) WORKDIR /app                  0B</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">2</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) COPY file:cede62805de63bfa…   30kB</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">2</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) COPY file:c95d0f15f9cd8538…   18.6MB</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">5</span> weeks ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /app                        0B
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) CMD [&quot;/sbin/init&quot;]            1.05MB</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) EXPOSE 22/tcp                 1.05MB</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token function">sh</span> /tmp/install/run.sh               260MB
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) ADD dir:31ce6fc92887bd109f…   1.05MB</span>
<span class="token operator">&lt;</span>missing<span class="token operator">&gt;</span>           <span class="token number">4</span> years ago                                                         <span class="token number">2</span>.31GB              Imported from http://10.137.67.190/download/os/AliOS5U7-x86-64.tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="save" tabindex="-1"><a class="header-anchor" href="#save" aria-hidden="true">#</a> save</h4><p>有这么一种场景，有时候我们要<strong>将一台机器的本地镜像导入到另外一台机器</strong>，当然你可以将镜像先 push 到镜像仓库中心，然后另外一个机器再进行 pull。但是有的时候由于镜像的安全性或者镜像比较大，不是很适合这种先 push 再 pull 的场景，那么我们就<strong>可以将镜像先导出成压缩文件，然后再将压缩文件导入到另外一个机器</strong>。其中镜像导出成压缩文件，就是 docker save 做的事情。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker save --help</span>

Usage:	<span class="token function">docker</span> save <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Save one or <span class="token function">more</span> images to a <span class="token function">tar</span> archive <span class="token punctuation">(</span>streamed to STDOUT by default<span class="token punctuation">)</span>

Options:
  -o, <span class="token parameter variable">--output</span> string   Write to a file, instead of STDOUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认是输出到 stdout，当然也可以通过 -o 参数指定输出的文件。那么我们可以通过如下两个方式进行导出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save busybox:latest <span class="token operator">&gt;</span> busybox-latest.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save busybox:latest <span class="token parameter variable">-o</span> busybox-latest.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h4><p>docker import 以及下面的 load 都是用来从压缩中导入镜像。使用方式也比较简单。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker import --help</span>

Usage:	<span class="token function">docker</span> <span class="token function">import</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token function">file</span><span class="token operator">|</span>URL<span class="token operator">|</span>- <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

Import the contents from a tarball to create a filesystem image

Options:
  -c, <span class="token parameter variable">--change</span> list      Apply Dockerfile instruction to the created image
  -m, <span class="token parameter variable">--message</span> string   Set commit message <span class="token keyword">for</span> imported image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们导入上面导出的镜像 tar 包，可以使用下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker import busybox-latest.tar</span>
sha256:1278080eee0524c6ca5c1de63ea439deb0e6d62035549cca9dbd4d9129e38655
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="load" tabindex="-1"><a class="header-anchor" href="#load" aria-hidden="true">#</a> load</h4><p>通过 tar 包导入镜像，使用方式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker load --help</span>

Usage:	<span class="token function">docker</span> load <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>

Load an image from a <span class="token function">tar</span> archive or STDIN

Options:
  -i, <span class="token parameter variable">--input</span> string   Read from <span class="token function">tar</span> archive file, instead of STDIN
  -q, <span class="token parameter variable">--quiet</span>          Suppress the load output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我要将上面导出的镜像压缩包导入，可以通过下面的命令完成。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker load -i busybox-latest.tar</span>
Loaded image: busybox:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rmi" tabindex="-1"><a class="header-anchor" href="#rmi" aria-hidden="true">#</a> rmi</h4><p>docker rmi 可以用来删除镜像。使用方式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker rmi --help</span>

Usage:	<span class="token function">docker</span> rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>IMAGE<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Remove one or <span class="token function">more</span> images

Options:
  -f, <span class="token parameter variable">--force</span>      Force removal of the image
      --no-prune   Do not delete untagged parents
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 IMAGE 我们可以直接使用镜像名称 + tag 或者镜像 ID 的方式来知道，上面的说明文档我们看到还支持两个参数：</p><ul><li>force：强制删除；</li><li>no-prune：不要删除未带标签的父镜像。</li></ul><h4 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> tag</h4><p>docker tag 可以用来给镜像打 tag，目标镜像可以使用镜像名称 + tag 或者镜像 ID 的方式，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag busybox:v1 busybox:v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag <span class="token operator">&lt;</span>image_id<span class="token operator">&gt;</span> busybox:v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-镜像仓库操作" tabindex="-1"><a class="header-anchor" href="#_3-镜像仓库操作" aria-hidden="true">#</a> 3. 镜像仓库操作</h2><p>和镜像仓库（registry）相关的操作重要有 4 个操作命令：</p><ul><li>login: 登录镜像仓库；</li><li>logout: 登出镜像仓库；</li><li>pull: 从镜像仓库拉取镜像 ；</li><li>push: 向镜像仓库 push 镜像，需要先 login。</li></ul><h4 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h4><p>login 的使用比较简单，我们可以直接通过 help 看一下使用说明，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@xxx <span class="token comment"># docker login --help</span>

Usage:	<span class="token function">docker</span> login <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>SERVER<span class="token punctuation">]</span>

Log <span class="token keyword">in</span> to a Docker registry

Options:
  -p, <span class="token parameter variable">--password</span> string   Password
      --password-stdin    Take the password from stdin
  -u, <span class="token parameter variable">--username</span> string   Username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示 <code>docker login [OPTION] [SERVER]</code> ，其中 SERVER 就是仓库地址，OPTION 是用户名密码，比如我要登入阿里云杭州的镜像仓库，可以像如下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> login <span class="token parameter variable">-u</span> legendtkl <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span> registry.cn-hangzhou.aliyuncs.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是一般我们不太建议将密码直接展示在命令行中，这样别的用户可以通过 history 直接看到，所以我们一般都是省略 -p 参数，由键盘输入密码，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> login <span class="token parameter variable">-u</span> legendtkl registry.cn-hangzhou.aliyuncs.com
Password: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logout" tabindex="-1"><a class="header-anchor" href="#logout" aria-hidden="true">#</a> logout</h4><p>logout 就比较简单了，不需要任何参数，直接接仓库地址即可，如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@xxx <span class="token comment"># docker logout --help</span>

Usage:	<span class="token function">docker</span> <span class="token builtin class-name">logout</span> <span class="token punctuation">[</span>SERVER<span class="token punctuation">]</span>

Log out from a Docker registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pull" tabindex="-1"><a class="header-anchor" href="#pull" aria-hidden="true">#</a> pull</h4><p>拉取镜像也比较简单，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@xxx <span class="token comment"># docker pull --help</span>

Usage:	<span class="token function">docker</span> pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span>

Pull an image or a repository from a registry

Options:
  -a, --all-tags                Download all tagged images <span class="token keyword">in</span> the repository
      --disable-content-trust   Skip image verification <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们<strong>可以通过镜像名称后面加 Tag 或者 Digest 来拉取指定版本的镜像</strong>，如果不指定则拉取 latest 这个标签的。那么什么是 Tag 和 Digest 呢？</p><p>我们可以这样理解，Tag 和 Digest 都是镜像版本的一种唯一性标识。Tag 可以理解成 Git 里面的 Tag，Digest 是镜像文件的摘要，一般是 sha256 散列计算出来的值。当然我们正常 pull 的时候都是指定 Tag，很少会指定 Digest，举个例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull busybox:1.23
<span class="token function">docker</span> pull busybox@sha256:2824fe048727a69da66cf1be00cebd3bb9cfe1f238473693aa9358b411208527
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有一种情况需要注意的是，<strong>尽量不要使用 latest 这个 Tag</strong>。顾名思义，latest 这个标签表示最新的镜像，换言之，也就是<strong>会进行变化的</strong>，这种情况是万万不能用于生产环境的。</p><p>我们看到拉取的镜像的时候还有两个参数： all-tags 和 disable-content-trust。第一个参数会下载镜像的全部标签，一般不会这么用。第二个参数是用来跳过镜像的校验。</p><h4 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h4><p>向仓库 push 镜像，参数和 pull 类似。有一点需要注意的是，如果 push 的镜像在仓库中已经存在，则会覆盖已经存在的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@xxx <span class="token comment"># docker push --help</span>

Usage:	<span class="token function">docker</span> push <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>

Push an image or a repository to a registry

Options:
      --disable-content-trust   Skip image signing <span class="token punctuation">(</span>default <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>本篇文章介绍了 docker 的常用命令，涉及到容器、镜像和镜像仓库中心。掌握了上面的命令，基本使用 docker 不会有什么问题。当然由于 docker 的命令及其参数之多，这里并不能完全展示出来，关于更多信息，大家可以参考下面的参考链接。</p><h2 id="_5-参考" tabindex="-1"><a class="header-anchor" href="#_5-参考" aria-hidden="true">#</a> 5. 参考</h2>`,121),u={href:"https://docs.docker.com/engine/reference/commandline/cli/",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=e("ExternalLinkIcon");return t(),i("div",null,[d,n("ol",null,[n("li",null,[n("a",u,[l("docker commandline refer"),o(a)])])])])}const g=s(r,[["render",m],["__file","index-06.html.vue"]]);export{g as default};
