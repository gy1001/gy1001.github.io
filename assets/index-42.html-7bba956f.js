import{_ as t,M as p,p as o,q as l,R as s,t as n,N as c,a1 as a}from"./framework-e8cb8151.js";const i="/assets/5f9f672000012bc306400426-a87c5752.jpg",r={},u=a('<h1 id="_42-kubernetes-service-类型" tabindex="-1"><a class="header-anchor" href="#_42-kubernetes-service-类型" aria-hidden="true">#</a> 42-<strong>Kubernetes Service 类型</strong></h1><p><img src="'+i+`" alt="img"></p><blockquote><p>衡量一个人的真正品格，是看他在知道没人看见的时候干些什么。——孟德斯鸠</p></blockquote><h1 id="kubernetes-service-类型" tabindex="-1"><a class="header-anchor" href="#kubernetes-service-类型" aria-hidden="true">#</a> Kubernetes Service 类型</h1><p>我们上一篇文章简单介绍了 Kubernetes Service 的使用，默认使用了 ClusterIP 的 Service 类型，实际上 Kubernetes 支持的 Service 类型有多种：</p><ul><li><strong>ClusterIP</strong>：默认的 Service Type，通过集群的内部 IP 暴露服务，只能在集群内部进行访问；</li><li><strong>NodePort</strong>：通过每个 Node 上面的某个端口 （NodePort）暴露服务。通过该端口的请求会自动路由到后端的 ClusterIP 服务，这个 ClusterIP 服务是自动创建的。通过 NodePort，我们可以在集群外部访问我们的服务，但是，在生产环境上面并不建议使用 NodePort；</li><li><strong>LoadBalancer</strong>：使用云厂商提供的负载均衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 和 ClusterIP 服务；</li><li><strong>ExternalName</strong>：通过返回 CNAME 将服务映射到 externalName 字段中的内容；</li><li><strong>Ingress</strong>：严格来说，Ingress 不是一种服务类型，而是用来充当集群的服务的入口点。Ingress 可以将路由规则整合到一个资源中，然后通过同一个 IP 地址暴露多个服务。</li></ul><h2 id="_1-clusterip" tabindex="-1"><a class="header-anchor" href="#_1-clusterip" aria-hidden="true">#</a> 1. ClusterIP</h2><p>ClusterIP 模式是 Kubernetes Service 的默认类型，ClusterIP 类型的 Service 一个重要特点就是只能在集群内部访问。</p><h2 id="_2-nodeport" tabindex="-1"><a class="header-anchor" href="#_2-nodeport" aria-hidden="true">#</a> 2. NodePort</h2><p>使用 NodePort 类型的 Serive 只需要在 spec 中将 type 中指定为 NodePort 即可，下面是一个简单的例子。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>nodeport
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30001</span>
      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的我们通过 <code>kubectl apply</code> 创建 Service 对象。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl apply <span class="token parameter variable">-f</span> nginx-service-nodeport.yaml <span class="token parameter variable">-n</span> imooc
service/nginx-service-nodeport created
$ kubectl get <span class="token function">service</span> <span class="token parameter variable">-n</span> imooc
NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGE
nginx-service            ClusterIP   <span class="token number">10.0</span>.213.149   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">80</span>/TCP         7h26m
nginx-service-nodeport   NodePort    <span class="token number">10.0</span>.8.178     <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">30001</span>:31633/TCP   1s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的 nginx-service-nodeport 就是我们刚刚创建的 NodePort 类型的 Service，我们可以看到 TYPE 显示为了 NodePort。并且 CLUSTER-IP 字段也分配了一个 IP，这个是怎么回事呢？其实这个是 NodePort 类型的 Service 自动创建的 ClusterIP，也就是说 NodePort 类型的 Service 后端还是通过 ClusterIP 来实现的。</p><p>然后是 PORT(S) 字段域有两个端口值，前面表示 ClusterIP 对应的端口，也就是 30001；后面的表示 Node 本地对应的端口，是 31633。那么可能有人会问了，我们定义 Service 的时候并没有指定 Node 的本地端口是多少啊？这个端口值是随机的吗？</p><p>是的，没错，确实是随机的，只不过是在一个区间内随机。这个区间是在 kubernetes 的 ApiServer 启动的时候，启动参数里面通过指定参数 <code>--service-node-port-range</code> 来指定的，默认为 30000 - 32767。</p><p>下面是我在阿里云的 ACK 上购买的 Kubernetes 集群内的 ApiServer 的启动参数，我们可以看到参数 <code>--service-node-port-range</code> 指定的值为 30000 - 32767，和默认值一样，对于我们启动的 NodePort 的 Service 系统分配的端口值为 31633，也是落在这个区间。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> service-node-port
root      <span class="token number">6351</span>  <span class="token number">2.0</span>  <span class="token number">2.9</span> <span class="token number">477832</span> <span class="token number">235040</span> ?       Ssl   <span class="token number">2019</span> <span class="token number">5018</span>:00 kube-apiserver --audit-log-maxbackup<span class="token operator">=</span><span class="token number">10</span> --audit-log-maxsize<span class="token operator">=</span><span class="token number">100</span> --audit-log-path<span class="token operator">=</span>/var/log/kubernetes/kubernetes.audit --audit-log-maxage<span class="token operator">=</span><span class="token number">7</span> --audit-policy-file<span class="token operator">=</span>/etc/kubernetes/audit-policy.yml --apiserver-count<span class="token operator">=</span><span class="token number">500</span> --endpoint-reconciler-type<span class="token operator">=</span>lease --enable-aggregator-routing<span class="token operator">=</span>true --runtime-config<span class="token operator">=</span>admissionregistration.k8s.io/v1beta1 <span class="token parameter variable">--profiling</span><span class="token operator">=</span>false --advertise-address<span class="token operator">=</span><span class="token number">172.16</span>.60.185 --allow-privileged<span class="token operator">=</span>true --authorization-mode<span class="token operator">=</span>Node,RBAC --client-ca-file<span class="token operator">=</span>/etc/kubernetes/pki/apiserver-ca.crt --cloud-provider<span class="token operator">=</span>external --enable-admission-plugins<span class="token operator">=</span>NodeRestriction --enable-bootstrap-token-auth<span class="token operator">=</span>true --etcd-cafile<span class="token operator">=</span>/etc/kubernetes/pki/etcd/ca.pem --etcd-certfile<span class="token operator">=</span>/etc/kubernetes/pki/etcd/etcd-client.pem --etcd-keyfile<span class="token operator">=</span>/etc/kubernetes/pki/etcd/etcd-client-key.pem --etcd-servers<span class="token operator">=</span>https://172.16.60.183:2379,https://172.16.60.184:2379,https://172.16.60.185:2379 --feature-gates<span class="token operator">=</span>VolumeSnapshotDataSource<span class="token operator">=</span>true,CSINodeInfo<span class="token operator">=</span>true,CSIDriverRegistry<span class="token operator">=</span>true --insecure-port<span class="token operator">=</span><span class="token number">0</span> --kubelet-client-certificate<span class="token operator">=</span>/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key<span class="token operator">=</span>/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types<span class="token operator">=</span>InternalIP,ExternalIP,Hostname --proxy-client-cert-file<span class="token operator">=</span>/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file<span class="token operator">=</span>/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names<span class="token operator">=</span>front-proxy-client --requestheader-client-ca-file<span class="token operator">=</span>/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix<span class="token operator">=</span>X-Remote-Extra- --requestheader-group-headers<span class="token operator">=</span>X-Remote-Group --requestheader-username-headers<span class="token operator">=</span>X-Remote-User --secure-port<span class="token operator">=</span><span class="token number">6443</span> --service-account-key-file<span class="token operator">=</span>/etc/kubernetes/pki/sa.pub --service-cluster-ip-range<span class="token operator">=</span><span class="token number">10.0</span>.0.0/16 --service-node-port-range<span class="token operator">=</span><span class="token number">30000</span>-32767 --tls-cert-file<span class="token operator">=</span>/etc/kubernetes/pki/apiserver.crt --tls-private-key-file<span class="token operator">=</span>/etc/kube
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>NodePort 的值实际上是可以我们自己指定的，指定的时候需要注意的是，一定要保证指定的值处于参数 <code>--service-node-port-range</code> 指定的区间内，不然可能会导致 Service 创建失败。下面是指定 NodePort 的示例 yaml。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>nodeport
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30001</span>
      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还是通过 <code>kubectl describe</code> 来看一下 NodePort 的 Service 对象。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl describe <span class="token function">service</span> nginx-service-nodeport <span class="token parameter variable">-n</span> imooc
Name:                     nginx-service-nodeport
Namespace:                imooc
Labels:                   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Annotations:              kubectl.kubernetes.io/last-applied-configuration:
                            <span class="token punctuation">{</span><span class="token string">&quot;apiVersion&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;v1&quot;</span>,<span class="token string">&quot;kind&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Service&quot;</span>,<span class="token string">&quot;metadata&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;annotations&quot;</span>:<span class="token punctuation">{</span><span class="token punctuation">}</span>,<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;nginx-service-nodeport&quot;</span>,<span class="token string">&quot;namespace&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;imooc&quot;</span><span class="token punctuation">}</span>,<span class="token string">&quot;spec&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;ports&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span>&quot;p<span class="token punctuation">..</span>.
Selector:                 <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx
Type:                     NodePort
IP:                       <span class="token number">10.0</span>.8.178
Port:                     <span class="token operator">&lt;</span>unset<span class="token operator">&gt;</span>  <span class="token number">30001</span>/TCP
TargetPort:               <span class="token number">80</span>/TCP
NodePort:                 <span class="token operator">&lt;</span>unset<span class="token operator">&gt;</span>  <span class="token number">31633</span>/TCP
Endpoints:                <span class="token number">10.1</span>.1.154:80,10.1.2.159:80,10.1.2.31:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 ClusterIP 类型的 Service 对象简单对比一下不难发现， NodePort 类型的 Service 对象除了 Type 为 NodePort 外，只多个了一个 NodePort 字段，总结一下 NodePort 类型的 Service 的几种端口：</p><ul><li>NodePort：Node 节点本地启动的用来监听和转发请求的端口，每个节点上都会启动；</li><li>Port：NodePort 类型的 Service 自动创建的 ClusterIP 的端口；</li><li>TargetPort：ClusterIP 转发的目标端口。</li></ul><p>所以对于 NodePort 类型的 Service，外部的请求顺序是：<strong>NodePort -&gt; Port -&gt; TargetPort</strong>。</p><h2 id="_3-loadbalancer" tabindex="-1"><a class="header-anchor" href="#_3-loadbalancer" aria-hidden="true">#</a> 3. LoadBalancer</h2><p>LoadBalancer 类型的 Service 只需要在 Service 的 spec 中将 type 指定为 LoadBalancer 即可，然后将会异步的创建负载均衡器。这样外部流量将向请求到外部的负载均衡器上，然后转发到后端的真正提供服务的 Pod 上，但是 LoadBalancer 的具体实现要依赖于云提供厂商。下面我们以阿里云的容器服务为例，创建一个 LoadBalancer 类型的 Service，描述文件如下。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>lb
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30005</span>
      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过 <code>kubectl apply</code> 创建该 Service。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl apply <span class="token parameter variable">-f</span> nginx-service-lb.yaml <span class="token parameter variable">-n</span> imooc
service/nginx-service-lb configured
$ kubectl get <span class="token function">service</span> <span class="token parameter variable">-n</span> imooc
NAME                     TYPE           CLUSTER-IP     EXTERNAL-IP      PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>           AGE
nginx-service            ClusterIP      <span class="token number">10.0</span>.213.149   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token number">80</span>/TCP            11h
nginx-service-lb         LoadBalancer   <span class="token number">10.0</span>.13.63     <span class="token number">39.102</span>.158.120   <span class="token number">30005</span>:30423/TCP   64m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 EXTERNAL-IP 就是外部的负载均衡器的 IP，对应的端口是 30005，同时我们可以看到在 PORT(S) 字段域还起了一个本地的 NodePort 端口 30423。</p><p>我们下面用 curl 请求一个外部的负载均衡器，返回的信息确实是 nginx 服务器，也就是后端的 Pod 返回的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token number">39.102</span>.158.120:30005
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
    body <span class="token punctuation">{</span>
        width: 35em<span class="token punctuation">;</span>
        margin: <span class="token number">0</span> auto<span class="token punctuation">;</span>
        font-family: Tahoma, Verdana, Arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span>/style<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>For online documentation and support please refer to
<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">&quot;http://nginx.org/&quot;</span><span class="token operator">&gt;</span>nginx.org<span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
Commercial support is available at
<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">&quot;http://nginx.com/&quot;</span><span class="token operator">&gt;</span>nginx.com<span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>em<span class="token operator">&gt;</span>Thank you <span class="token keyword">for</span> using nginx.<span class="token operator">&lt;</span>/em<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过 <code>kubectl describe</code> 查看一下 LoadBalancer 类型的 Service 的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl describe <span class="token function">service</span> nginx-service-lb <span class="token parameter variable">-n</span> imooc
Name:                     nginx-service-lb
Namespace:                imooc
Labels:                   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Annotations:              kubectl.kubernetes.io/last-applied-configuration:
                            <span class="token punctuation">{</span><span class="token string">&quot;apiVersion&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;v1&quot;</span>,<span class="token string">&quot;kind&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Service&quot;</span>,<span class="token string">&quot;metadata&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;annotations&quot;</span>:<span class="token punctuation">{</span><span class="token punctuation">}</span>,<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;nginx-service-lb&quot;</span>,<span class="token string">&quot;namespace&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;imooc&quot;</span><span class="token punctuation">}</span>,<span class="token string">&quot;spec&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;ports&quot;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;port&quot;</span>:3<span class="token punctuation">..</span>.
Selector:                 <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx
Type:                     LoadBalancer
IP:                       <span class="token number">10.0</span>.13.63
LoadBalancer Ingress:     <span class="token number">39.102</span>.158.120
Port:                     <span class="token operator">&lt;</span>unset<span class="token operator">&gt;</span>  <span class="token number">30005</span>/TCP
TargetPort:               <span class="token number">80</span>/TCP
NodePort:                 <span class="token operator">&lt;</span>unset<span class="token operator">&gt;</span>  <span class="token number">30423</span>/TCP
Endpoints:                <span class="token number">10.1</span>.1.154:80,10.1.2.159:80,10.1.2.31:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到除了 Type 变成 LoadBalancer 类型之外，还多了一个 LoadBalancer Ingress，其实就是外部的负载均衡器的 IP。</p><h2 id="_4-externalname" tabindex="-1"><a class="header-anchor" href="#_4-externalname" aria-hidden="true">#</a> 4. ExternalName</h2>`,37),d=s("code",null,"spec.externalName",-1),k={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ExternalName
  <span class="token key atrule">externalName</span><span class="token punctuation">:</span> www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还是通过 <code>kubectl apply</code> 来创建 Service</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>$ kubectl apply <span class="token punctuation">-</span>f nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>ename.yaml <span class="token punctuation">-</span>n imooc
service/nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name created
$ kubectl get service nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name <span class="token punctuation">-</span>n imooc
NAME                          TYPE           CLUSTER<span class="token punctuation">-</span>IP   EXTERNAL<span class="token punctuation">-</span>IP     PORT(S)   AGE
nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name   ExternalName   &lt;none<span class="token punctuation">&gt;</span>       www.baidu.com   &lt;none<span class="token punctuation">&gt;</span>    17s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 Service <code>nginx-service-external-name</code> 显示的 TYPE 为 ExternalName，EXTERNAL-IP 为我们的 <code>spec.externalName</code> 字段定义的值。当查找服务 <code>nginx-service-external-name.imooc.svc.cluster.local</code> 时，集群 DNS 服务将返回 CNAME 记录，也就是 <code>www.baidu.com</code> 。访问该 Service 的方式与其他服务的方式相同，但主要区别在于重定向发生在 DNS 级别，而不是通过代理和转发。</p><p>当然也可以通过 <code>kubectl describe</code> 来看一下 Service 的详情信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>$ kubectl describe service nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name <span class="token punctuation">-</span>n imooc
<span class="token key atrule">Name</span><span class="token punctuation">:</span>              nginx<span class="token punctuation">-</span>service<span class="token punctuation">-</span>external<span class="token punctuation">-</span>name
<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>         imooc
<span class="token key atrule">Labels</span><span class="token punctuation">:</span>            &lt;none<span class="token punctuation">&gt;</span>
<span class="token key atrule">Annotations</span><span class="token punctuation">:</span>       <span class="token key atrule">kubectl.kubernetes.io/last-applied-configuration</span><span class="token punctuation">:</span>
                     <span class="token punctuation">{</span>&quot;apiVersion&quot;<span class="token punctuation">:</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span>&quot;kind&quot;<span class="token punctuation">:</span><span class="token string">&quot;Service&quot;</span><span class="token punctuation">,</span>&quot;metadata&quot;<span class="token punctuation">:</span><span class="token punctuation">{</span>&quot;annotations&quot;<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>&quot;name&quot;<span class="token punctuation">:</span><span class="token string">&quot;nginx-service-external-name&quot;</span><span class="token punctuation">,</span>&quot;namespace&quot;<span class="token punctuation">:</span><span class="token string">&quot;imooc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>&quot;spec&quot;<span class="token punctuation">:</span><span class="token punctuation">{</span>&quot;extern<span class="token punctuation">...</span>
<span class="token key atrule">Selector</span><span class="token punctuation">:</span>          &lt;none<span class="token punctuation">&gt;</span>
<span class="token key atrule">Type</span><span class="token punctuation">:</span>              ExternalName
<span class="token key atrule">IP</span><span class="token punctuation">:</span>
<span class="token key atrule">External Name</span><span class="token punctuation">:</span>     www.baidu.com
<span class="token key atrule">Session Affinity</span><span class="token punctuation">:</span>  None
<span class="token key atrule">Events</span><span class="token punctuation">:</span>            &lt;none<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-ingress" tabindex="-1"><a class="header-anchor" href="#_5-ingress" aria-hidden="true">#</a> 5. Ingress</h2><p>Ingress 严格来说并不是一种 Service 类型，而是 Kubernetes 官方提供的用于对外暴露服务的方式。下面是一个简单的 Ingress 的声明。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>ingress
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> www.example.com
    <span class="token key atrule">http</span><span class="token punctuation">:</span>
      <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /foo
        <span class="token key atrule">backend</span><span class="token punctuation">:</span>
          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service
          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ingress 中的最核心的地方是 <code>spec.rules</code>，可以在 rule 中定一个多个规则，每个规则下面包含以下信息：</p><ul><li>host：服务暴露的域名；</li><li>http：路由转发协议，可以是 http 或者 https，协议下面包含： <ul><li>path：路由 router；</li><li>backend：后端服务，主要包括服务名称和服务端口。</li></ul></li></ul><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h2><p>本文简单介绍了 Kubernetes 提供的几种服务类型：</p><ul><li>ClusterIP 是一种默认的服务类型，具有较多限制；</li><li>NodePort 是一种可以快速暴露服务的服务类型，一般用来快速调试；</li><li>LoadBalancer 有时候会用于生产环境；</li><li>ExternalName 很少使用；</li><li>Ingress 目前 kubernetes 集群向外暴露服务的最长使用的方式。</li></ul>`,14);function m(b,g){const e=p("ExternalLinkIcon");return o(),l("div",null,[u,s("p",null,[n("类型为 ExternalName 的 Service 将服务映射到 DNS 名称，而不是通过 selector 选择器。可以使用 "),d,n(" 参数指定 DNS 名称。例如，如下 Service 定义将服务 nginx-service-external-name 服务映射为 "),s("a",k,[n("www.baidu.com"),c(e)]),n(" 。")]),v])}const h=t(r,[["render",m],["__file","index-42.html.vue"]]);export{h as default};
