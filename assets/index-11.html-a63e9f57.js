import{_ as e,M as o,p as c,q as l,R as s,t as n,N as t,a1 as a}from"./framework-e8cb8151.js";const i={},u=a(`<h1 id="_11-runtime-运行时-diff-算法核心实现" tabindex="-1"><a class="header-anchor" href="#_11-runtime-运行时-diff-算法核心实现" aria-hidden="true">#</a> 11-runtime 运行时-diff 算法核心实现</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01:前言</h2><p>我们之前完成过一个<code>patchChldren</code>的方法，该方法的主要作用是为了<strong>更新子节点</strong>，即：<strong>为子节点打补丁</strong></p><p>子节点的类型多种多样，如果两个<code>ELEMENT</code>的子节点都是<code>TEXT_CHILDREN</code>的话，那么直接通过<code>setText</code>赋值新值即可</p><p>但是如果<strong>新旧 ELEMENT 的子节点都为 ARRAY_CHILDREN</strong>的话，那么想要完成一个<strong>高效</strong>的更新就会比较复杂了。这个时候，我们就需要，<strong>比较两组子节点</strong>，以达到一个高效的更新功能。这种<strong>比较的算法</strong>就是<strong>diff 算法</strong></p><p><code>vue</code>中对<code>diff</code>算法的描述在<code>packages/runtime-core/src/renderer.ts</code>的<code>patchKeyedChildren（1759行）</code>方法中</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bf49fea8b8849599b6b3d2fb47299e3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="image.png"></p><p>观察该方法，可以发现该方法内部被分为了<code>5</code>块（5 种场景）</p><ol><li><code>sync from start</code>：自前行后的对比</li><li><code>sync from end</code>：自后向前的对比</li><li><code>common sequence + mount</code>：新节点多余旧节点，需要挂载</li><li><code>common sequence + unmount</code>：旧节点多于新节点，需要挂载</li><li><code>unknown sequence</code>：乱序</li></ol><p>这<code>5</code>块就是<code>diff</code>的<strong>核心逻辑</strong>。我们本章就是围绕这 5 种场景进行<strong>分析</strong>和<strong>实现</strong>。现在，就让我们开始循序渐进的解开<code>diff</code>算法的神秘面纱吧~~</p><h2 id="_02-前置知识-vnode-虚拟节点-key-属性的作用" tabindex="-1"><a class="header-anchor" href="#_02-前置知识-vnode-虚拟节点-key-属性的作用" aria-hidden="true">#</a> 02：前置知识：VNode 虚拟节点 Key 属性的作用</h2><p>在学习<code>diff</code>算法前，有一个属性我们必须先了解一下,那就是<code>key</code></p><p>我们知道在<code>v-for</code>循环的时候，我们就必须要指定一个<code>key</code>值，那么这个<code>key</code>值的作用是什么呢？</p><p>如果大家有看过我前几篇关于渲染器的文章，应该还记得我们写过一个方法：在<code>packages/runtime-core/src/vnode.ts</code>中的<code>isSameNodeType</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 根据 key || type 判断是否为相同类型节点
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token operator">:</span> VNode<span class="token punctuation">,</span> n2<span class="token operator">:</span> VNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n1<span class="token punctuation">.</span>type <span class="token operator">===</span> n2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>key <span class="token operator">===</span> n2<span class="token punctuation">.</span>key
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>type</code>和<code>key</code>都是<code>vnode</code>的<code>props</code></p><p>可以看出<code>vue</code>是通过两个<code>vnode</code>的<code>type</code>和<code>key</code>这两个属性是否相同来判断两个<code>vnode</code>是否是<strong>相同</strong>的<code>vnode</code></p><p>这个概念在<code>diff</code>中非常重要，它决定了<code>ELEMENT</code>的<strong>复用</strong>逻辑。因为我们目前的代码并没有<code>key</code>这个属性，我们现在就来把<code>key</code>加一下</p><ol><li><p>在<code>packages/runtime-core/src/vnode.ts</code>的<code>createBaseVNode</code>中，增加<code>key</code>属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  type<span class="token punctuation">,</span>
  props<span class="token punctuation">,</span>
  shapeFlag<span class="token punctuation">,</span>
  key<span class="token operator">:</span> props<span class="token operator">?.</span>key <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 增加</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> VNode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们的<code>vnode</code>就可以具备<code>key</code>属性了</p></li></ol><h2 id="_03-源码阅读-场景一-自前向后的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_03-源码阅读-场景一-自前向后的-diff-对比" aria-hidden="true">#</a> 03：源码阅读：场景一：自前向后的 diff 对比</h2><p>我们创建如下测试示例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的测试示例中，我们利用<code>vnode2</code>更新<code>vnode</code>节点</p><p>它们的子节点都是可以<code>ARRAY_CHILDREN</code>，需要注意的是它们的<strong>子节点具备相同顺序下的相同<code>vnode</code>(type、key 相等)</strong>。唯一不同的地方在于**第三个<code>li</code>**标签显示的内容不同</p><p>那么我们来看一下这种情况下<code>vue</code>是如何来处理对应的<code>diff</code>的</p><ol><li><p>在<code>patchKeyedChildren</code>中，进行<code>debugger</code>，等待<code>2s</code>，进入<code>debugger</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eeb3a6798ea0458496332ecf2bcb46a0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>由上图中所示，在<code>patchKeyedChildren</code>方法中程序会进入<code>while (i &lt;= e1 &amp;&amp; i &lt;= e2)</code>而在<strong>第一次循环</strong>中，因为 <code>n1</code>和<code>n2</code>的<code>key</code>和<code>type</code>都相同，所以会进入<code>if</code>执行<code>patch</code>方法，进行打补丁。最后<code>i++</code>变为<code>1</code>。因为此时仍然满足<code>i&lt;=e1 &amp;&amp; i&lt;=e2</code>，所以会<strong>第二次进入循环</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7cc79e98b59453aac3c807d3fae63a3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>因为第二次的<code>n1</code>和<code>n2</code>的<code>type</code>和<code>key</code>仍然相同，所以仍然会进入<code>if</code>和第一步执行相同操作，接着<code>i++</code>变为<code>2</code>，此时<strong>会进入第三次循环</strong>。而第三次的<code>n1</code>和<code>n2</code>也是相同的<code>vnode</code>，所以与前两次一样执行<code>patch</code></p></li><li><p>三次循环全部完成，此时我们查看浏览器，可以看到<code>children</code>的<strong>更新</strong>操作<strong>已经完成</strong></p></li><li><p>后续的代码无需关心</p></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>由以上过程代码可知：</p><ol><li><code>diff</code>所面临的第一个场景就是：<strong>自前向后的 diff 对比</strong></li><li>在这样的一个比对中，会**依次获取相同下标的 <code>oldChild</code>和<code>newChild</code></li><li>如果<code>oldChild</code>和<code>newChild</code>为相同的<code>VNode</code>，则直接通过<code>patch</code>进行打补丁即可</li><li>如果<code>oldChild</code>和<code>newChild</code>为不相同的<code>VNode</code>，则会跳出循环</li><li>每次处理成功，则会自增加<code>i</code>标记，表示：<strong>自前向后已经处理过的节点数量</strong></li></ol><h2 id="_04-框架实现-场景一-自前向后的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_04-框架实现-场景一-自前向后的-diff-对比" aria-hidden="true">#</a> 04：框架实现：场景一：自前向后的 diff 对比</h2><p>根据上一小节的原码阅读，我们实现对应逻辑</p><ol><li><p>首先想让我们的代码支持<code>ARRAY_CHILDREN</code>的渲染，在<code>packages/runtime-core/src/render.ts</code>中触发<code>mountElement</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> vnode

    <span class="token comment">//  2. 设置文本</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">mountChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> el<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token comment">// 新增加，我们之前已经实现过了 mountChildren 方法</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接下来，我们处理<code>diff</code>函数，在<code>packages/runtime-core/src/renderer.ts</code>中，创建<code>patchKeyedChildren</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patchChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c1 <span class="token operator">=</span> oldVNode <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> prevShapeFlag <span class="token operator">=</span> oldVNode <span class="token operator">?</span> oldVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">:</span> <span class="token number">0</span>
    <span class="token keyword">const</span> c2 <span class="token operator">=</span> newVNode <span class="token operator">&amp;&amp;</span> newVNode<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> <span class="token punctuation">{</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO 卸载旧子节点</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c2 <span class="token operator">!==</span> c1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 挂在新子节点的文本即可</span>
        <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// ----------------------------------这里实现 Diff --------------</span>
          <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO 卸载式操作</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 删除纠结点的text</span>
          <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO 单独新子节点的挂载</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// diff</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patchKeyedChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    oldChildren<span class="token punctuation">,</span>
    newChildren<span class="token punctuation">,</span>
    container<span class="token punctuation">,</span>
    parentAnchor
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 索引</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// 新的子节点的长度</span>
    <span class="token keyword">const</span> newChildrenLength <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length
    <span class="token comment">// 旧的子节点最大（最后一个）下标</span>
    <span class="token keyword">let</span> oldChildrenEnd <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token comment">// 新的子节点最大（最后一个）下标</span>
    <span class="token keyword">let</span> newChildrenEnd <span class="token operator">=</span> newChildrenLength <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> oldChildrenEnd <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">const</span> newVNode <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token comment">// 如果 oldVNode 和 newVNode 被认为是同一个 vnode，则直接patch 即可</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果 不认为同一个 vnode,则直接跳出循环</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 下标自增</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后，创建对应测试示例<code>packages/vue/examples/runtime/render-element-diff-1.html</code>，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_05-源码阅读-场景二-自后向前的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_05-源码阅读-场景二-自后向前的-diff-对比" aria-hidden="true">#</a> 05：源码阅读：场景二：自后向前的 diff 对比</h2><ol><li><p>我们新建测试示例:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>vnode2</code>的第一个节点的<code>key=4</code>,这就会导致一个情况：<strong>如果我们从前往后进行对比 diff,那么第一个<code>child</code>无法满足<code>isSameVNodeType</code>,就会直接跳出循环</strong></p><p>我们去调试，看下源码中是怎么处理的</p></li><li><p>进入<code>patchKeyedChildren</code>方法，因为前面的赋值都是一样的我们直接来到第一个<code>while</code>循环</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13a8799db04546f88794fb5b192eff1f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>当进入第一个<code>while</code>的第一次循环时，此时<code>n1</code>的<code>key</code>为 <code>1</code>，<code>n2</code>的<code>key</code>为<code>4</code>,所以，<code>isSameVNodeType(n1, n2)</code>为<code>false</code>,会执行<code>else</code>中的<code>break</code>跳出当前<code>while</code>.第一个<code>while</code>结束，来到第二个<code>while</code>开始<strong>第一次循环</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb06ae7a0e3d49cda4acd818a37c1999~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>由上图可知，第二个<code>while</code>循环是从后往前遍历的，且第一次进入循环会比较两个列表的最后一个<code>vnode</code>节点，因为此时两个节点不相同所以会进行<code>patch</code>打补丁，完成第三个节点的更新后,<code>e1 -e2</code>,<code>e1</code>和<code>e2</code>此时都是<code>1</code>，所以会进入<strong>第二次循环</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ea2d27c645b460db493f27cf9384c89~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>由于第二次进入循环<code>n1</code>和<code>n2</code>的<code>type</code>和<code>key</code>还是相同的，所以会再次执行<code>patch</code>操作，此时<code>e1</code>和<code>e2</code>都为<code>0</code>,满足<code>i&lt;=e1 &amp;&amp; i&lt;=e2</code>，所以会进行<strong>第三次循环</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09620a8056d346ca8613d106de3d897f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>此时 <code>n1.key = 1</code> <code>n2.key = 4</code> 所以会执行 <code>break</code> 跳出循环。</p></li><li><p>此时，各变量的值为：<code>e1 = 0</code> <code>e2 = 0</code> <code>i = 0</code> <code>l2 = 3</code></p></li><li><p>三次循环全部完成，此时，我们查看浏览器，可以发现<code>children</code>的<strong>更新</strong>操作已经完成。后续的代码无需关心</p></li></ol><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>由以上代码可知，</p><ol><li><code>vue</code>的<code>diff</code>首先会<strong>自前向后</strong>和<strong>自后向前</strong>，处理所有的<strong>相同的</strong><code>VNode</code>节点</li><li>每次处理成功之后，会自减<code>e1</code>和<code>e2</code>,表示<strong>新、旧节点中已经处理完成的节点（自后向前）</strong></li></ol><h2 id="_06-框架实现-场景二-自后向前的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_06-框架实现-场景二-自后向前的-diff-对比" aria-hidden="true">#</a> 06：框架实现：场景二：自后向前的 diff 对比</h2><p>明确好了自后向前的<code>diff</code>对比之后，接下来我们就可以直接进行对应的实现了</p><ol><li><p>在<code>patchKeyedChildren</code>方法中，处理自后向前的场景</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 2. 自后向前的 diff 对比，经过循环之后，从后开始的相同 vnode 将被处理</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> oldChildrenEnd <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldChildrenEnd<span class="token punctuation">]</span>
  <span class="token keyword">const</span> newVNode <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>newChildrenEnd<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
  oldChildrenEnd<span class="token operator">--</span>
  newChildrenEnd<span class="token operator">--</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建测试示例<code>packages/vue/examples/runtime/render-element-diff-2.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_07-源码阅读-场景三-新节点多于旧节点的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_07-源码阅读-场景三-新节点多于旧节点的-diff-对比" aria-hidden="true">#</a> 07: 源码阅读：场景三：新节点多于旧节点的 diff 对比</h2><p>以上两种场景，新节点数量和旧节点数量都是完全一致的</p><p>但是我们也知道一旦产生更新，那么新旧节点的数量是可能会存在不一致的抢矿，具体的不一致情况分为以下两种：</p><ol><li>新节点的数量多于旧节点的数量</li><li>旧节点的数量多于新节点的数量</li></ol><p>本小节我们先来研究一下<strong>新节点的数量多于旧节点的数量</strong>的抢矿</p><p>新节点的数量多于旧节点的数量的场景下，依然可以被细分为两种具体的场景</p><ol><li>多出的新节点位于<strong>头部</strong></li><li>多出的新节点位于<strong>尾部</strong></li></ol><p>明确好了以上内容之后，我们来看如下测试示例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据以上代码进入<code>debugger</code>,忽略掉前两种场景，直接从第三种场景开始</p><p>代码进入场景三: <code>3. common sequence + mount</code>，以下图示逻辑为：多出的新节点位于<strong>尾部</strong>的场景</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f6fb10d5fff4df7a871a4480210bc92~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>那么接下来我们来看：多出的新节点位于<strong>头部</strong>的场景</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据以上代码，再次进入场景三：<code>3. common sequence + mount</code>:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94857afe9b25445fac85dd272007e7ef~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p>由以上代码可知</p><ol><li>对于新节点多于旧节点的场景具体可以再细分为以下两种情况 <ol><li>多出的新节点位于<strong>尾部</strong></li><li>多出的新节点位于<strong>头部</strong></li></ol></li><li>这两种情况下的区别在于：<strong>插入的位置不同</strong></li><li>明确好插入的位置之后，直接通过<code>patch</code>进行打补丁即可</li></ol><h2 id="_08-框架实现-场景三-新节点多于旧节点的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_08-框架实现-场景三-新节点多于旧节点的-diff-对比" aria-hidden="true">#</a> 08：框架实现：场景三：新节点多于旧节点的 diff 对比</h2><p>根据上一小节的分析，我们可以直接在<code>packages/runtime-core/src/renderer.ts</code>中的<code>patchKeyedChildren</code>方法下，实现如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 3. 新节点多余旧节点时的 diff 比对。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> oldChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nextPos <span class="token operator">=</span> newChildrenEnd <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">const</span> anchor <span class="token operator">=</span>
      nextPos <span class="token operator">&lt;</span> newChildrenLength <span class="token operator">?</span> newChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> parentAnchor
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建对应测试示例<code>packages/vue/examples/runtime/render-element-diff-3.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试成功</p><h2 id="_09-源码阅读-场景四-旧节点多于新节点时的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_09-源码阅读-场景四-旧节点多于新节点时的-diff-对比" aria-hidden="true">#</a> 09：源码阅读：场景四：旧节点多于新节点时的 diff 对比</h2><p>接下来我们来看场景四<strong>旧节点多于新节点</strong>时，根据场景三的经验，其实我们也可以明确，对于旧节点多于新节点时，对应的场景也可以细分为两种</p><ol><li>多出的旧节点位于<strong>尾部</strong></li><li>多出的旧节点位于<strong>头部</strong></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟踪代码，直接进入场景四，即可</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11f5f6ba0da945cd84c65dcdf3800829~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li>因为<code>i=2,e1=0,e2=1</code>，所以最后会执行<code>unmount</code>方法<strong>卸载</strong>多余出来的第三个<code>vnode</code></li><li>以上代码比较简单，对于多出的旧节点位于<strong>头部</strong>的场景，同样执行该逻辑</li></ol><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h3><p>由以上代码可知</p><p>旧节点多于新节点时，整体的处理比较简单，只需要<strong>卸载旧节点</strong>即可</p><h2 id="_10-框架实现-场景四-旧节点多于新节点的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_10-框架实现-场景四-旧节点多于新节点的-diff-对比" aria-hidden="true">#</a> 10：框架实现：场景四：旧节点多于新节点的 diff 对比</h2><p>根据上一小节的分析，我们可以直接在<code>packages/runtime-core/src/renderer.ts</code>中的<code>patchKeyedChildren</code>方法，实现如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 4. 旧节点多与新节点时的 diff 比对。</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> newChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> oldChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    i<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建如下测试示例<code>packages/vue/examples/runtime/render-element-diff-4.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试成功</p><h2 id="_11-局部总结-前四种-diff-场景的总结与乱序场景" tabindex="-1"><a class="header-anchor" href="#_11-局部总结-前四种-diff-场景的总结与乱序场景" aria-hidden="true">#</a> 11：局部总结：前四种 diff 场景的总结与乱序场景</h2><p>那么到目前为止，我们已经实现了 <code>4</code> 种 <code>diff</code> 场景对应的处理，经过前面的学习我们可以知道，对于前四中 <code>diff</code> 场景而言，<code>diff</code> 处理本质上是比较简单的</p><ol><li>自前向后的 <code>diff</code> 对比：主要处理从前到后的相同<code>VNode</code>。例如:<code>(a b) c</code> 对应 <code>(a b) d e</code></li><li>自后向前的 <code>diff</code> 对比：主要处理从后到前的相同<code>VNode</code>。例如：<code>a (b c)</code> 对应 <code>d e (b c)</code></li><li>新节点多于旧节点的<code>diff</code>对比：主要处理新增节点</li><li>旧节点多于新节点的<code>diff</code>对比：主要处理删除节点</li></ol><p>但是仅靠前四种场景的话，那么是无法满足实际开发中的所有逻辑的。所以我们还需要最关键的一种场景需要处理，那就是<strong>乱序场景</strong></p><p>那么什么情况下我们需要乱序场景呢？</p><p>我们来看以下的<code>diff</code>场景</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该测试示例经过前四个<code>while</code>的过程为</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b51d01e1e0948429454c1f6899a6599~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li><p>初始状态：索引<code>i = 0</code>。旧节点结束索引<code>e1 = 4</code>。新节点索引<code>e2 = 4</code></p></li><li><p>自前向后的索引：索引<code>i = 1</code>。旧节点结束索引<code>e1 = 4</code>。新节点索引<code>e2 = 4</code></p></li><li><p>自后向前的索引：索引<code>i = 1</code>。旧节点结束索引<code>e1 = 3</code>。新节点索引<code>e2 = 3</code></p></li><li><p>增加新节点：无任何变化</p></li><li><p>删除旧节点：无任何变化</p></li><li><p>此时中间还剩下三对节点没有处理，该怎么办呢？</p></li></ol><h2 id="_12-前置知识-场景五-最长递增子序列" tabindex="-1"><a class="header-anchor" href="#_12-前置知识-场景五-最长递增子序列" aria-hidden="true">#</a> 12：前置知识：场景五：最长递增子序列</h2><p>在场景 5 的<code>diff</code>中，<code>vue</code>使用了<strong>最长递增子序列</strong>这样的一个概念，所以想要更好的理解场景 5，那么我们需要先搞明白，两个问题</p><ol><li>什么是最长递增子序列？</li><li>最长递增子序列在<code>diff</code>中的作用是什么？</li></ol><h3 id="什么是最长递增子序列" tabindex="-1"><a class="header-anchor" href="#什么是最长递增子序列" aria-hidden="true">#</a> 什么是最长递增子序列</h3>`,95),r={href:"https://zh.m.wikipedia.org/zh-hans/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>只看概念可能难以理解，我们来看一个具体的例子</p><p>假设，我们现在有一个这样的两组节点</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>旧节点：<span class="token number">1</span>、<span class="token number">2</span>、<span class="token number">3</span>、<span class="token number">4</span>、<span class="token number">5</span>、<span class="token number">6</span>
新节点：<span class="token number">1</span>、<span class="token number">3</span>、<span class="token number">2</span>、<span class="token number">4</span>、<span class="token number">6</span>、<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以根据<strong>新节点</strong>生成<strong>递增子序列（非最长）（注意：并不是唯一的）</strong>，其结果为</p><ol><li><code>1、3、6</code></li><li><code>1、2、4、6</code></li><li>...</li></ol><h3 id="最长递增子序列在diff中的作用是什么" tabindex="-1"><a class="header-anchor" href="#最长递增子序列在diff中的作用是什么" aria-hidden="true">#</a> 最长递增子序列在<code>diff</code>中的作用是什么</h3><p>那么现在我们成功得到了 递增子序列，那么下面我们来看，这两个递增子序列在我们接下来的 diff 中起到了什么作用？</p><p>根据我们之前的四中场景可知，所谓的<code>diff</code>，其实说白了就是对<strong>一组节点</strong>进行<strong>添加、删除、打补丁</strong>的对应操作。但是除了以上三种操作之外，其实还有最后一种操作方式，那就是<strong>移动</strong></p><p>我们来看下面这个例子</p><p>那么接下来，我们来分析一下移动的策略，整个移动根据递增子序列的不同，将拥有两种移动策略</p><ol><li><code>1、3、6</code>递增序列下 <ol><li>因为<code>1、3、6</code>的递增已确认，所以它们三个是不需要移动的，那么我们所需要移动的节点无非就是三个<code>2、4、5</code></li><li>所以我们需要经过<strong>三次</strong>移动</li></ol></li><li><code>1、2、4、6</code>递增如下 <ol><li>因为<code>1、2、4、6</code>的递增已经确认，所以他们四个是不需要移动的，那么我们所需要移动的节点无非就是来<strong>两个</strong><code>3、5</code></li><li>所以我们需要讲过<strong>两次</strong>移动</li></ol></li></ol><p>所以由以上分析，我们可知：<strong>最长递增自序列的确定，可以帮助我们减少移动的次数</strong></p><p>所以，当我们需要进行节点移动时，移动需要事先构建出最长递增子序列，以保证我们的移动方案</p><h2 id="_13-源码逻辑-场景五-求解最长递增子序列" tabindex="-1"><a class="header-anchor" href="#_13-源码逻辑-场景五-求解最长递增子序列" aria-hidden="true">#</a> 13：源码逻辑：场景五：求解最长递增子序列</h2><p><code>vue</code>中关于求<strong>求解最长递增子序列</strong>的代码在<code>packages/runtime-core/src/render.ts</code>中的第<code>2410</code>行代码，可以看到存在一个<code>getSequence</code>的函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 获取最长递增子序列下标
 * 维基百科：https://en.wikipedia.org/wiki/Longest_increasing_subsequence
 * 百度百科：https://baike.baidu.com/item/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/22828111
 */</span>
<span class="token keyword">function</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取一个数组浅拷贝。注意 p 的元素改变并不会影响 arr</span>
  <span class="token comment">// p 是一个最终的回溯数组，它会在最终的 result 回溯中被使用</span>
  <span class="token comment">// 它会在每次 result 发生变化时，记录 result 更新前最后一个索引的值</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 定义返回值（最长递增子序列下标），因为下标从 0 开始，所以它的初始值为 0</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c
  <span class="token comment">// 当前数组的长度</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token comment">// 对数组中所有的元素进行 for 循环处理，i = 下标</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据下标获取当前对应元素</span>
    <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">//</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取 result 中的最后一个元素，即：当前 result 中保存的最大值的下标</span>
      j <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token comment">// arr[j] = 当前 result 中所保存的最大值</span>
      <span class="token comment">// arrI = 当前值</span>
      <span class="token comment">// 如果 arr[j] &lt; arrI 。那么就证明，当前存在更大的序列，那么该下标就需要被放入到 result 的最后位置</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
        <span class="token comment">// 把当前的下标 i 放入到 result 的最后位置</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 不满足 arr[j] &lt; arrI 的条件，就证明目前 result 中的最后位置保存着更大的数值的下标。</span>
      <span class="token comment">// 但是这个下标并不一定是一个递增的序列，比如： [1, 3] 和 [1, 2]</span>
      <span class="token comment">// 所以我们还需要确定当前的序列是递增的。</span>
      <span class="token comment">// 计算方式就是通过：二分查找来进行的</span>

      <span class="token comment">// 初始下标</span>
      u <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token comment">// 最终下标</span>
      v <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
      <span class="token comment">// 只有初始下标 &lt; 最终下标时才需要计算</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// (u + v) 转化为 32 位 2 进制，右移 1 位 === 取中间位置（向下取整）例如：8 &gt;&gt; 1 = 4;  9 &gt;&gt; 1 = 4; 5 &gt;&gt; 1 = 2</span>
        <span class="token comment">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift</span>
        <span class="token comment">// c 表示中间位。即：初始下标 + 最终下标 / 2 （向下取整）</span>
        c <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token comment">// 从 result 中根据 c（中间位），取出中间位的下标。</span>
        <span class="token comment">// 然后利用中间位的下标，从 arr 中取出对应的值。</span>
        <span class="token comment">// 即：arr[result[c]] = result 中间位的值</span>
        <span class="token comment">// 如果：result 中间位的值 &lt; arrI，则 u（初始下标）= 中间位 + 1。即：从中间向右移动一位，作为初始下标。 （下次直接从中间开始，往后计算即可）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          u <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 否则，则 v（最终下标） = 中间位。即：下次直接从 0 开始，计算到中间位置 即可。</span>
          v <span class="token operator">=</span> c
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 最终，经过 while 的二分运算可以计算出：目标下标位 u</span>
      <span class="token comment">// 利用 u 从 result 中获取下标，然后拿到 arr 中对应的值：arr[result[u]]</span>
      <span class="token comment">// 如果：arr[result[u]] &gt; arrI 的，则证明当前  result 中存在的下标 《不是》 递增序列，则需要进行替换</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 进行替换，替换为递增序列</span>
        result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 重新定义 u。此时：u = result 的长度</span>
  u <span class="token operator">=</span> result<span class="token punctuation">.</span>length
  <span class="token comment">// 重新定义 v。此时 v = result 的最后一个元素</span>
  v <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token comment">// 自后向前处理 result，利用 p 中所保存的索引值，进行最后的一次回溯</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v
    v <span class="token operator">=</span> p<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),d=s("code",null,"贪心 + 二分查找",-1),v={href:"https://link.juejin.cn/?target=https%3A%2F%2Fleetcode.cn%2Fproblems%2Flongest-increasing-subsequence%2F",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="_14-源码阅读-场景五-乱序下的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_14-源码阅读-场景五-乱序下的-diff-对比" aria-hidden="true">#</a> 14：源码阅读：场景五：乱序下的 diff 对比</h2><p>到目前为止，我们已经明确了：</p><ol><li><code>diff</code>指的就是：<strong>添加、删除、打补丁、移动</strong>四个行为</li><li><strong>最长子序列</strong>是什么，以及在<code>diff</code>中的作用</li><li>场景五的乱序，是最复杂的场景，将会涉及到<strong>添加、删除、打补丁、移动</strong>这些所有场景</li></ol><p>那么明确好了以上内容之后，我们先来看对应<strong>场景五</strong>的测试示例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 延迟两秒，生成新的 vnode，进行更新操作</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;new-e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该测试示例经过前四个<code>while</code>的过程为</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b51d01e1e0948429454c1f6899a6599~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li><p>初始状态：索引<code>i = 0</code>。旧节点结束索引<code>e1 = 4</code>。新节点索引<code>e2 = 4</code></p></li><li><p>自前向后的索引：索引<code>i = 1</code>。旧节点结束索引<code>e1 = 4</code>。新节点索引<code>e2 = 4</code></p></li><li><p>自后向前的索引：索引<code>i = 1</code>。旧节点结束索引<code>e1 = 3</code>。新节点索引<code>e2 = 3</code></p></li><li><p>增加新节点：无任何变化</p></li><li><p>删除旧节点：无任何变化</p></li><li><p>此时中间还剩下三对节点没有处理，该怎么办呢？</p></li></ol><p>运行该测试实例，我们来跟踪场景五的逻辑</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/348d740d17a94346981105ceb82ed9a7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li><p>在上图<code>5.1</code>中，创建了一个<code>MAP: key(新节点的key): index(新节点的位置)</code>的<code>Map</code>对象<code>keyToNewIndexMap</code>。通过该对象可知：新的<code>child</code>（根据<code>key</code>判断指定<code>child</code>）更新后的位置（根据对应的<code>index</code>判断）在哪里。接下来看<code>5.2</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d256baff7bb84cb9bd2dcc3ceb25fc99~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p><code>5.2</code>中主要做的就是循环<code>oldChildren</code>,并尝试进行<code>patch</code>（打补丁）或者<code>unmount</code>（删除）旧节点。接下来看<code>5.3</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a21f89f50b342489b1c3d31e5f2fe36~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>以上是图<code>5.3</code>，主要针对的是移动和挂载的处理</p></li></ol><p>由以上代码可以</p><ol><li>乱序下的<code>diff</code>事<strong>最复杂</strong>的一种场景</li><li>它的主要逻辑分为三大步 <ol><li>创建一个<code>&lt;Key(新节点的key): index(新节点的位置)&gt;</code>的<code>Map</code>对象<code>keyToNewIndexMap</code>。通过该对象可知：新的<code>child</code>(根据<code>key</code>判断指定<code>child</code>)更新后的位置(根据对应的<code>index</code>判断)在哪里</li><li>循环<code>oldChildren</code>并尝试进行<code>patch</code>(打补丁)或者<code>unmount</code>(删除)旧节点</li><li>处理 <strong>移动和挂载</strong></li></ol></li></ol><h2 id="_15-框架实现-场景五-乱序下的-diff-对比" tabindex="-1"><a class="header-anchor" href="#_15-框架实现-场景五-乱序下的-diff-对比" aria-hidden="true">#</a> 15：框架实现：场景五：乱序下的 diff 对比</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token function-variable function">patchKeyedChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    oldChildren<span class="token punctuation">,</span>
    newChildren<span class="token punctuation">,</span>
    container<span class="token punctuation">,</span>
    parentAnchor
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 索引</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// 新的子节点的长度</span>
    <span class="token keyword">const</span> newChildrenLength <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length
    <span class="token comment">// 旧的子节点最大（最后一个）下标</span>
    <span class="token keyword">let</span> oldChildrenEnd <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token comment">// 新的子节点最大（最后一个）下标</span>
    <span class="token keyword">let</span> newChildrenEnd <span class="token operator">=</span> newChildrenLength <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token comment">// 1. 自前向后的 diff</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> oldChildrenEnd <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 自后向前的 diff，经过循环之后，从后开始的相同 vnode 将被处理</span>
   	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> oldChildrenEnd <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 新节点多于旧节点的 diff 对比</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> oldChildrenEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> newChildrenEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 4. 旧节点过于新节点的 diff</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;需要乱序处理了&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> oldChildrenEnd<span class="token punctuation">,</span> newChildrenEnd<span class="token punctuation">)</span>
      <span class="token comment">// 旧子节点的开始索引：oldChildrenStart</span>
      <span class="token keyword">const</span> oldStartIndex <span class="token operator">=</span> i
      <span class="token comment">// 新子节点的开始索引：newChildrenStart</span>
      <span class="token keyword">const</span> newStartIndex <span class="token operator">=</span> i
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">)</span>
      <span class="token keyword">const</span> keyToNewIndexMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newChildrenEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> nextChild <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>keyToNewIndexMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Duplicate keys found during update:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
              <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Make sure keys are unique.</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 把 key 和 对应的索引，放到 keyToNewIndexMap 对象中</span>
          keyToNewIndexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> j
      <span class="token comment">// 记录已经修复的新节点数量</span>
      <span class="token keyword">let</span> patched <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token comment">// 新节点待修补的数量 = newChildrenEnd - newStartIndex + 1</span>
      <span class="token keyword">let</span> toBePatched <span class="token operator">=</span> newChildrenEnd <span class="token operator">-</span> newStartIndex <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token comment">// 标记位：节点是否需要移动</span>
      <span class="token keyword">let</span> moved <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token comment">// 配合 moved 进行使用，它始终保存当前最大的 index 值</span>
      <span class="token keyword">let</span> maxNewIndexSoFar <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">const</span> newIndexToOldIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>toBePatched<span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toBePatched<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newIndexToOldIndexMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldChildrenEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> prevChild <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>patched <span class="token operator">&gt;=</span> toBePatched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;patched 大于 toBePatched&#39;</span><span class="token punctuation">)</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> newIndex
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>key <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          newIndex <span class="token operator">=</span> keyToNewIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 旧节点的 key 不存在（无 key 节点）</span>
          <span class="token comment">// 那么我们就遍历所有的新节点（s2 = newChildrenStart; e2 = newChildrenEnd），找到《没有找到对应旧节点的新节点，并且该新节点可以和旧节点匹配》（s2 = newChildrenStart; c2 = newChildren），如果能找到，那么 newIndex = 该新节点索引</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> newChildrenEnd<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>
              newIndexToOldIndexMap<span class="token punctuation">[</span>j <span class="token operator">-</span> newStartIndex<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
              <span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 如果可以找到，那么 newIndex = 该节点索引</span>
              newIndex <span class="token operator">=</span> j
              <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果就旧节点的key在新节点组成的keyToNewIndexMap 中没找到，说明这个节点移除了，需要卸载</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndex <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">unmount</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 否则旧节点的key在新节点组成的keyToNewIndexMap中有找到</span>
          <span class="token comment">// maxNewIndexSoFar 会存储当前最大的 newIndex 它应该是一个递增的，如果没有递增,则说明有节点需要移动</span>
          newIndexToOldIndexMap<span class="token punctuation">[</span>newIndex <span class="token operator">-</span> newStartIndex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndex <span class="token operator">&gt;=</span> maxNewIndexSoFar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 最大索引，持续递增</span>
            maxNewIndexSoFar <span class="token operator">=</span> newIndex
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有递增，说明需要移动，moved = true</span>
            moved <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 打补丁</span>
          <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
          <span class="token comment">// 已经处理的节点数量进行递增，进行下一个处理</span>
          patched<span class="token operator">++</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> increasingNewIndexSequence <span class="token operator">=</span> moved
        <span class="token operator">?</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>newIndexToOldIndexMap<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token comment">// j &gt;= 0 表示：初始值为 最长递增子序列的最后下标</span>
      <span class="token comment">// j &lt; 0 表示：《不存在》最长递增子序列。</span>
      j <span class="token operator">=</span> increasingNewIndexSequence<span class="token punctuation">.</span>length
      <span class="token comment">// 倒序处理，以便我们可以使用最后修补的节点作为辅助点</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&#39;这里处理 移动和挂载&#39;</span><span class="token punctuation">,</span>
        toBePatched<span class="token punctuation">,</span>
        increasingNewIndexSequence
      <span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> toBePatched <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//   // nextIndex 需要更新的新节点下标</span>
        <span class="token keyword">const</span> nextIndex <span class="token operator">=</span> newStartIndex <span class="token operator">+</span> i
        <span class="token keyword">const</span> nextChild <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span>
        <span class="token keyword">const</span> anchor <span class="token operator">=</span>
          nextIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> newChildrenLength
            <span class="token operator">?</span> newChildren<span class="token punctuation">[</span>nextIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el
            <span class="token operator">:</span> parentAnchor
        <span class="token comment">// 如果 newIndexToOldIndexMap  中保存的 value == 0 表示：新节点没有用对应的旧节点，此时需要挂载新节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndexToOldIndexMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>moved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前节点&#39;</span><span class="token punctuation">)</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">)</span>
          <span class="token comment">// moved 为 true 表示需要移动</span>
          <span class="token comment">// j&lt;0表示：不存在最长递增子序列</span>
          <span class="token comment">// i !== increasingNewIndexSequence[j] 表示：当前节点不在最后位置，最后一位不需要移动</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">!==</span> increasingNewIndexSequence<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">move</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// j 随着循环地减，上面的 if 就会走往前一位的判断</span>
            j<span class="token operator">--</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el
    <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token operator">!</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 获取最长递增子序列函数如下</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getSequence</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取一个数组浅拷贝。注意 p 的元素改变并不会影响 arr</span>
    <span class="token comment">// p 是一个最终的回溯数组，它会在最终的 result 回溯中被使用</span>
    <span class="token comment">// 它会在每次 result 发生变化时，记录 result 更新前最后一个索引的值</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 定义返回值（最长递增子序列下标），因为下标从 0 开始，所以它的初始值为 0</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c
    <span class="token comment">// 当前数组的长度</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
    <span class="token comment">// 对数组中所有的元素进行 for 循环处理，i = 下标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 根据下标获取当前对应元素</span>
      <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token comment">//</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 result 中的最后一个元素，即：当前 result 中保存的最大值的下标</span>
        j <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment">// arr[j] = 当前 result 中所保存的最大值</span>
        <span class="token comment">// arrI = 当前值</span>
        <span class="token comment">// 如果 arr[j] &lt; arrI 。那么就证明，当前存在更大的序列，那么该下标就需要被放入到 result 的最后位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
          <span class="token comment">// 把当前的下标 i 放入到 result 的最后位置</span>
          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 不满足 arr[j] &lt; arrI 的条件，就证明目前 result 中的最后位置保存着更大的数值的下标。</span>
        <span class="token comment">// 但是这个下标并不一定是一个递增的序列，比如： [1, 3] 和 [1, 2]</span>
        <span class="token comment">// 所以我们还需要确定当前的序列是递增的。</span>
        <span class="token comment">// 计算方式就是通过：二分查找来进行的</span>

        <span class="token comment">// 初始下标</span>
        u <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment">// 最终下标</span>
        v <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token comment">// 只有初始下标 &lt; 最终下标时才需要计算</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// (u + v) 转化为 32 位 2 进制，右移 1 位 === 取中间位置（向下取整）例如：8 &gt;&gt; 1 = 4;  9 &gt;&gt; 1 = 4; 5 &gt;&gt; 1 = 2</span>
          <span class="token comment">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift</span>
          <span class="token comment">// c 表示中间位。即：初始下标 + 最终下标 / 2 （向下取整）</span>
          c <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
          <span class="token comment">// 从 result 中根据 c（中间位），取出中间位的下标。</span>
          <span class="token comment">// 然后利用中间位的下标，从 arr 中取出对应的值。</span>
          <span class="token comment">// 即：arr[result[c]] = result 中间位的值</span>
          <span class="token comment">// 如果：result 中间位的值 &lt; arrI，则 u（初始下标）= 中间位 + 1。即：从中间向右移动一位，作为初始下标。 （下次直接从中间开始，往后计算即可）</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            u <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 否则，则 v（最终下标） = 中间位。即：下次直接从 0 开始，计算到中间位置 即可。</span>
            v <span class="token operator">=</span> c
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 最终，经过 while 的二分运算可以计算出：目标下标位 u</span>
        <span class="token comment">// 利用 u 从 result 中获取下标，然后拿到 arr 中对应的值：arr[result[u]]</span>
        <span class="token comment">// 如果：arr[result[u]] &gt; arrI 的，则证明当前  result 中存在的下标 《不是》 递增序列，则需要进行替换</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 进行替换，替换为递增序列</span>
          result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重新定义 u。此时：u = result 的长度</span>
    u <span class="token operator">=</span> result<span class="token punctuation">.</span>length
    <span class="token comment">// 重新定义 v。此时 v = result 的最后一个元素</span>
    v <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token comment">// 自后向前处理 result，利用 p 中所保存的索引值，进行最后的一次回溯</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v
      v <span class="token operator">=</span> p<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-总结" tabindex="-1"><a class="header-anchor" href="#_16-总结" aria-hidden="true">#</a> 16: 总结</h2><p>整个的<code>diff</code>就分为 5 种场景，前四种场景相对而言，还比较简单。最复杂的就是第 5 种，乱序的场景</p><p>整个的<code>diff</code>种，涉及到了很多的算法，比如：最长递增子序列</p><h3 id="总结runtime模块-对于runtime而言" tabindex="-1"><a class="header-anchor" href="#总结runtime模块-对于runtime而言" aria-hidden="true">#</a> 总结<code>runtime</code>模块，对于<code>runtime</code>而言</h3><ol><li>我们首先是了解了<code>dom</code>、节点、节点树和<strong>虚拟 DOM</strong>，虚拟节点之间的概念</li><li>然后知道了<code>render</code>函数和<code>h</code>函数各自的作用。<code>h</code>函数可以得到一个<code>vnode</code>，而<code>render</code>函数可以渲染为一个<code>vnode</code></li><li>接着就是<strong>挂载、更新、卸载</strong>这三组概念。知道了针对不同的<code>vnode</code>节点，他们的<strong>挂载、更新、卸载</strong>方式也是不同的</li><li>之后又深入了组件，我们知道组件本质上就是一个对象（或者函数），组件的挂载本质上是<code>render</code>函数的挂载</li><li>组件内部维护了一个<code>effect</code>对象，已达到响应性渲染的效果</li><li>针对于<code>setup</code>函数而言，他在实际上反而更加简单，因为不需要改变<code>this</code>指向了</li><li>结合所学，新旧节点的所有挂载和更新情况，可以被分为九种场景 <ol><li>旧节点为纯文本时 <ol><li>新节点为纯文本：执行文本替换操作</li><li>新节点为空：删除旧节点</li><li>新节点数组：清空文本，添加多个节点</li></ol></li><li>旧节点为空时： <ol><li>新节点为纯文本：添加新节点</li><li>新节点为空：不做任何事情</li><li>新节点为数组时：添加过个节点</li></ol></li><li>旧节点是数组时： <ol><li>新节点为纯文本：删除所有旧节点，添加新节点</li><li>新节点为空：删除所有旧节点</li><li>新节点为数组时：进行<code>diff</code>操作</li></ol></li></ol></li><li>最后的<code>diff</code>分为<code>5</code>种场景，最后一种场景还是比较复杂的</li></ol>`,20);function b(g,h){const p=o("ExternalLinkIcon");return c(),l("div",null,[u,s("blockquote",null,[s("p",null,[s("a",r,[n("维基百科-最长递增子序列"),t(p)]),n("：在一个给定的数组序列中，找到一个子序列，使得这个子序列元素的数值依次递增，并且这个子序列的长度尽可能地大")])]),k,s("p",null,[n("这个解法的原理就是通过 "),d,n("，有兴趣的同学可以去 "),s("a",v,[n("Leetcode"),t(p)]),n(" 上做些相关的算法题，这里就不详细展开了。。。")]),m])}const y=e(i,[["render",b],["__file","index-11.html.vue"]]);export{y as default};
