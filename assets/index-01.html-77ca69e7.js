import{_ as a,M as t,p as i,q as r,R as e,t as o,N as c,a1 as n}from"./framework-e8cb8151.js";const h="/assets/image-20230728093644240-bf21ac9b.png",s="/assets/image-20230728093732192-e153b699.png",p="/assets/image-20230728093757929-1cf3d4bf.png",l={},_=n('<h1 id="_01-版本控制系统介绍-为什么要使用-git" tabindex="-1"><a class="header-anchor" href="#_01-版本控制系统介绍-为什么要使用-git" aria-hidden="true">#</a> 01- 版本控制系统介绍：为什么要使用 git？</h1><p><img src="https://img4.mukewang.com/5d8981390001836a06400360.jpg" alt="img"></p><blockquote><p>才能一旦让懒惰支配，它就一无可为。——克雷洛夫</p></blockquote><h2 id="一、为什么要学习-git" tabindex="-1"><a class="header-anchor" href="#一、为什么要学习-git" aria-hidden="true">#</a> 一、为什么要学习 Git？</h2><p>在开发项目的时候，我们可能会不断地去修改代码，但是有时候会遇到，想查看某一时间的代码这种情况，如果没有版本控制器，你可能需要不断地定时备份代码，但这样显然是很麻烦的，而且备份也不一定好用，比如某个时间点并没有修改代码，那么备份就重复了；再比如虽然备份了代码，但你并不知道两个版本有什么区别。</p><h3 id="_1-1-版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1-1-版本控制系统" aria-hidden="true">#</a> 1.1 版本控制系统</h3><p>为了解决上面的一些问题，一些工程师便尝试开发代码版本控制器系统；每次当你修改完代码想进行备份时，只需要输入简单的命令，版本控制系统便会帮你完成备份操作；</p><p>在完成这个备份时候，大体会做这几件事情，首先把当前代码哈希一下，得到一个哈希 (hash) 值，同时把这个哈希值分配一个版本号，比如上一次的版本号是 <code>2</code>，那么这次的版本号便会是 <code>3</code>，用来保证它的顺序性；接着会比较当前的版本与上次版本的一些差异，包括文件差异，和文件里面的内容差异，并且会把这些差异单独存储起来，当你之后想看某一刻的修改时，可以非常方便地查看。</p><p>上面提到的是版本控制系统的最基本功能，应用因为实际需求不同，所以版本控制器也有不同的类型，最为常见的就是分布式版本控制系统和中央版本控制系统。</p><h3 id="_1-2-中央版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1-2-中央版本控制系统" aria-hidden="true">#</a> 1.2 中央版本控制系统</h3><p>中央版本控制系统必须存在两个端，服务端和客户端，当进行代码备份时，客户端会向服务端发出请求，并将此次修改的内容发送到服务器当中去；服务端收到请求后，会将代码存储在服务器当中；同样当客户端想查看某一个版本的修改内容或者想恢复到某一个版本之时，客户端也会发送请求到服务端，服务端再与之相应的响应。</p><img src="'+h+'" alt="image-20230728093644240"><p>从图中可以看到当提交代码时候，两个客户端都是把数据推送服务器当中去，拉取的时候代码也都是从服务器中获取，可以看出这是非常典型的 C/S 机制；张三和李四的交互都必须通过中央服务器，不能私下直接访问。</p><h3 id="_1-3-分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1-3-分布式版本控制系统" aria-hidden="true">#</a> 1.3 分布式版本控制系统</h3><p>分布式版本控制器，主要是将备份的代码以及记录完全独立在本地存储，比如说上面提到，当你想将代码恢复到某一个版本的时候，本地版本控制器，不需要依赖网络便可以完成此操作，因为本地版本控制器拥有完整独立的控制系统。</p><img src="'+s+'" alt="image-20230728093732192"><p>从图中可以看出，张三和李四不仅仅可以向服务器推送代码，服务器也可以向客户端推送代码；并且张三和李四还可以互相推送代码，同样拉取代码也可以从任意一个节点中拉取，而不必须从服务器中拉取。</p><p>所以从分布式版本控制系统本身的功能来说，它们是完全平等的，每一个系统都拥有全部的功能；但在实际的工作中我们为了更好地管理代码版本，会人为设置一些规则来限制代码推送，所以在图中的红色线条通常是不会使用的，另外服务端通常也不会去主动向客户端推送和拉取代码。</p><h3 id="_1-4-git-和-svn" tabindex="-1"><a class="header-anchor" href="#_1-4-git-和-svn" aria-hidden="true">#</a> 1.4 GIT 和 SVN</h3><p>前面提到版本控制系统的区别，我估计不少人会纠结该怎么去选择版本控制系统，这里我提一下我的一些看法：目前主流的版本控制系统主要有 <code>Git</code> 和 <code>SVN</code>，各自分别代表分布式版本控制系统和中央版本控制系统，两个工具各有优势。为了在后面的文章当中方便大家理解，后面将直接使用 <code>Git</code> 和 <code>SVN</code> 来表述分布式版本控制系统和中央版本控制系统，下面我主要从功能、热度、难度上来进行分析 <code>Git</code> 与 <code>SVN</code> 的优势与劣势。</p><h4 id="_1-4-1-功能丰富" tabindex="-1"><a class="header-anchor" href="#_1-4-1-功能丰富" aria-hidden="true">#</a> 1.4.1 功能丰富</h4><p><code>Git</code> 最大的优势在于功能更加丰富，虽然大部分功能在 <code>SVN</code> 上也都有，但是却极不方便，比如说分支功能。在 <code>Git</code> 中每个客户端都可以自由创建分支，而 <code>SVN</code> 中必须由服务端创建，客户端才能拉取，但实际工作中很少会在服务端执行 <code>SVN</code> 命令的；再比如说，在没有网络的情况下，<code>Git</code> 依然可以提交代码，而 <code>SVN</code> 则不行，因为必须连接服务器才可以提交。当然功能上还有很多区别，这里只是举了两个简单的例子，在实际操作中 <code>Git</code> 的功能远远多于 <code>SVN</code>。</p><h4 id="_1-4-2-流行热度" tabindex="-1"><a class="header-anchor" href="#_1-4-2-流行热度" aria-hidden="true">#</a> 1.4.2 流行热度</h4><p>在选择一个软件的时候，我觉得很多人也会看流行度怎么样。在 5 年以前，可能 <code>SVN</code> 占了大部分市场。不过随着这些年 <code>Git</code> 的优势和越来越多的人对 <code>Git</code> 的熟悉，<code>Git</code> 已经占据了主流市场，并且 <code>Git</code> 的生态也越来越比 <code>SVN</code> 好，这个结论可以从 GitHub 和国内的代码托管平台码云默认只支持 <code>Git</code> 中看出。另外从身边的朋友中我得到一个观点，在一线城市 <code>Git</code> 使用得较多，在二三线城市使用 <code>SVN</code> 的公司较多，我猜测是这个原因主要是操作复杂度导致。</p><h4 id="_1-4-3-学习难度" tabindex="-1"><a class="header-anchor" href="#_1-4-3-学习难度" aria-hidden="true">#</a> 1.4.3 学习难度</h4><p>可能看起来本地版本控制器比中央版本控制系统简单，潜意识会觉得操作也比较方便；但实际上恰恰相反，中央版本控制系统在操作上会相对简单，复杂的只是搭建过程；而本地版本控制系统则是安装简单，操作相对复杂一些。</p><img src="'+p+'" alt="image-20230728093757929"><p>因为开发者在使用中央版本控制系统时候，只需要提交代码和拉取代码即可，所能操作的项并不多，理解起来也相对简单；而本地版本控制系统则不同，除了提交代码到版本控制系统中，还需要将修改的记录同步给其他开发者，理解起来也相对复杂，所以结论是：<strong>常规操作时候中央版本控制系统操作较为简单。</strong></p><h3 id="_1-5-本章小结" tabindex="-1"><a class="header-anchor" href="#_1-5-本章小结" aria-hidden="true">#</a> 1.5 本章小结</h3><p>通过前面的介绍，我想大家对版本控制器，有了一定的认识，下面简单归纳概括一下：</p><ol><li>版本控制系统分为<code>分布式版本控制系统</code>和<code>中央版本控制系统</code>。<code>分布式版本控制系统</code>每一个节点都是独立的系统，中央版本控制系统是典型的 <code>C/S</code> 架构，后面的内容分别以 <code>GIT</code> 和 <code>SVN</code> 来表述两个版本控制系统；</li><li>从存储空间来说 <code>Git</code> 比 <code>SVN</code> 更加占用空间，因为 <code>Git</code> 在每个端都保留了所有的版本历史，而 <code>SVN</code> 只在服务器中保存了历史版本记录，在客户端是没有保存本地版本历史的；</li><li><code>Git</code> 在流行程度、功能丰富方面比 SVN 有优势，在学习难度上， SVN 更占据优势。</li></ol>',31),g={href:"https://zhuanlan.zhihu.com/p/396875968",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/96631135",target:"_blank",rel:"noopener noreferrer"};function u(f,G){const d=t("ExternalLinkIcon");return i(),r("div",null,[_,e("p",null,[e("a",g,[o("【每日面试】git 和 svn 的区别？git 相对于 svn 的好处？"),c(d)])]),e("p",null,[e("a",m,[o("这才是真正的 Git——Git 内部原理揭秘！"),c(d)])])])}const V=a(l,[["render",u],["__file","index-01.html.vue"]]);export{V as default};
