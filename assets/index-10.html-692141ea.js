import{_ as t,M as l,p as o,q as i,R as n,t as s,N as e,Q as c,a1 as p}from"./framework-e8cb8151.js";const r={},u=n("h1",{id:"_10-webpack-和-babel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-webpack-和-babel","aria-hidden":"true"},"#"),s(" 10-webpack 和 babel")],-1),d={href:"http://webpack.wuhaolin.cn/",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="_01-webpack-考点梳理" tabindex="-1"><a class="header-anchor" href="#_01-webpack-考点梳理" aria-hidden="true">#</a> 01:webpack 考点梳理</h2><h3 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h3><ul><li>webpack 已是前端项目构建的不二选择</li><li>每日必用，面试必考</li><li>成熟的工具，重点在于配置和使用，原理并不高优</li></ul><h3 id="讲解配置" tabindex="-1"><a class="header-anchor" href="#讲解配置" aria-hidden="true">#</a> 讲解配置</h3><ul><li>基本配置</li><li>高级配置</li><li>优化打包效率</li><li>优化产出代码</li><li>构建流程概述</li><li>babel</li></ul><h3 id="webpack-和-babel-相关知识点" tabindex="-1"><a class="header-anchor" href="#webpack-和-babel-相关知识点" aria-hidden="true">#</a> webpack 和 babel 相关知识点</h3><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h4><ul><li>安装配置</li><li>dev-server</li><li>解析 ES6</li><li>解析样式</li><li>解析图片文件</li><li>常见 loader 和 plugin</li></ul><h4 id="高级特性" tabindex="-1"><a class="header-anchor" href="#高级特性" aria-hidden="true">#</a> 高级特性</h4><ul><li>多入口</li><li>抽离和 压缩 css</li><li>抽离公共代码</li><li>懒加载</li><li>处理 React 和 Vue</li></ul><h4 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h4><h5 id="优化构建速度" tabindex="-1"><a class="header-anchor" href="#优化构建速度" aria-hidden="true">#</a> 优化构建速度</h5><ul><li>优化 babel-loader</li><li>IngorePlugin</li><li>noParse</li><li>happyPack</li><li>paralleluglifyplugin</li><li>自动刷新</li><li>热更新</li><li>DllPlugin</li></ul><h5 id="优化产出代码" tabindex="-1"><a class="header-anchor" href="#优化产出代码" aria-hidden="true">#</a> 优化产出代码</h5><ul><li>使用生产 1 环境</li><li>小图片 base64 环境</li><li>bundle 加 hash</li><li>使用 CDN</li><li>提取公共代码</li><li>懒加载</li><li>scope hosting</li></ul><h5 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> babel</h5><ul><li>polyfill</li><li>runtime</li></ul><h3 id="回顾之前的-webpack-面试题" tabindex="-1"><a class="header-anchor" href="#回顾之前的-webpack-面试题" aria-hidden="true">#</a> 回顾之前的 webpack 面试题</h3><ul><li>前端代码为何要进行构建和打包？</li><li>module chunk bundle 分别是什么意思，有何区别？</li><li>loader 和 plugin 的区别</li><li>webpack 如何实现懒加载？</li><li>webpack 常见性能优化</li><li>babel-runtime 和 babel-polyfill 的区别</li></ul><h2 id="_02-使用-webpack5" tabindex="-1"><a class="header-anchor" href="#_02-使用-webpack5" aria-hidden="true">#</a> 02: 使用 webpack5</h2><ul><li>webpack5 主要是内部效率的优化</li><li>对比 webpack4, 没有太多使用上的改动</li><li>你可以直接使用 webpack5 来学习课程</li></ul><h3 id="webpack4-demo" tabindex="-1"><a class="header-anchor" href="#webpack4-demo" aria-hidden="true">#</a> webpack4 demo</h3><p>升级 webpack5 以及周边插件后，代码需要做出的调整：</p><ul><li>package.json 的 dev-server 命令改了 <code>&quot;dev&quot;: &quot;webpack serve --config build/webpack.dev.js&quot;,</code></li><li>升级新版本 <code>const { merge } = require(&#39;webpack-merge&#39;)</code></li><li>升级新版本 <code>const { CleanWebpackPlugin } = require(&#39;clean-webpack-plugin&#39;)</code></li><li><code>module.rules</code> 中 <code>loader: [&#39;xxx-loader&#39;]</code> 换成 <code>use: [&#39;xxx-loader&#39;]</code></li><li><code>filename: &#39;bundle.[contenthash:8].js&#39;</code> 其中 <code>h</code> 小写，不能大写</li></ul><h2 id="_03-webpack-基本配置串讲" tabindex="-1"><a class="header-anchor" href="#_03-webpack-基本配置串讲" aria-hidden="true">#</a> 03: webpack 基本配置串讲</h2><ul><li>vue-cli create-react-app</li><li>常用上述脚手架，而不会自己配置 webpack??</li><li>则面试不会通过</li></ul><h3 id="webpack-基本配置" tabindex="-1"><a class="header-anchor" href="#webpack-基本配置" aria-hidden="true">#</a> webpack 基本配置</h3><ul><li>拆分配置 和 merge <ul><li>webpack.common.js</li><li>webpack.dev.js</li><li>webpack.prod.js</li></ul></li><li>启动本地服务</li><li>处理 ES6</li><li>处理样式</li><li>模块化</li><li>懒加载</li><li>处理 JSX</li><li>处理 vue</li></ul><h2 id="_04-webpack-如何配置多入口" tabindex="-1"><a class="header-anchor" href="#_04-webpack-如何配置多入口" aria-hidden="true">#</a> 04: webpack 如何配置多入口</h2><h3 id="webpack-高级配置" tabindex="-1"><a class="header-anchor" href="#webpack-高级配置" aria-hidden="true">#</a> webpack 高级配置</h3><ul><li>基本配置只能做 demo, 不能做线上项目</li><li>面试考察基本配置，只是为了快读判断是否用过 webpack</li><li>以下高级配置，也是通过面试的必备条件</li></ul><h3 id="webpack-高阶配置特性" tabindex="-1"><a class="header-anchor" href="#webpack-高阶配置特性" aria-hidden="true">#</a> webpack 高阶配置特性</h3><ul><li>多入口</li><li>抽离压缩 css 文件</li><li>抽离公共代码</li></ul><h3 id="配置如下" tabindex="-1"><a class="header-anchor" href="#配置如下" aria-hidden="true">#</a> 配置如下</h3><ul><li>entry 添加多入口</li><li>output 的 filename 进行名字的配置 <code>filename: &#39;[name].[contentHash:8].js&#39;</code></li><li>HtmlWebpackPlugin 使用不同入口的 <code>xxx.html</code> 文件, 并配置 <code>chunks</code> 使用对应入口的 文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.common.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// entry 是多入口的</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">other</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> srcPath<span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// {</span>
      <span class="token comment">//     test: /\\.css$/,</span>
      <span class="token comment">//     // loader 的执行顺序是：从后往前</span>
      <span class="token comment">//     loader: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span>
      <span class="token comment">// },</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">// loader 的执行顺序是：从后往前</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 加了 postcss</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">// 增加 &#39;less-loader&#39; ，注意顺序</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// new HtmlWebpackPlugin({</span>
    <span class="token comment">//     template: path.join(srcPath, &#39;index.html&#39;),</span>
    <span class="token comment">//     filename: &#39;index.html&#39;</span>
    <span class="token comment">// })</span>

    <span class="token comment">// 多入口 - 生成 index.html</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 只引用 index.js</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 多入口 - 生成 other.html</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 只引用 other.js</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.prod.js: output 的 filename 进行更改</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpackCommonConf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> smart <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">smart</span><span class="token punctuation">(</span>webpackCommonConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// filename: &#39;bundle.[contentHash:8].js&#39;,  // 打包代码时，加上 hash 戳</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[contentHash:8].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// name 即多入口时 entry 的 key</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span>
    <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 图片 - 考虑 base64 编码的情况</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 小于 5kb 的图片用 base64 格式产出</span>
            <span class="token comment">// 否则，依然延用 file-loader 的形式，产出 url 格式</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
            <span class="token comment">// 打包到 img 目录下</span>
            <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;/img1/&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span>
            <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 会默认清空 output.path 文件夹</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// window.ENV = &#39;production&#39;</span>
      <span class="token constant">ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-webpack-如何抽离压缩-css-文件" tabindex="-1"><a class="header-anchor" href="#_05-webpack-如何抽离压缩-css-文件" aria-hidden="true">#</a> 05: webpack 如何抽离压缩 css 文件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 配置代码如下</span>
<span class="token comment">// webpack.dev.js 我们使用 不抽离 css 文件没有问题</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpackCommonConf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> smart <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">smart</span><span class="token punctuation">(</span>webpackCommonConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 直接引入图片 url</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// {</span>
      <span class="token comment">//     test: /\\.css$/,</span>
      <span class="token comment">//     // loader 的执行顺序是：从后往前</span>
      <span class="token comment">//     loader: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span>
      <span class="token comment">// },</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">// loader 的执行顺序是：从后往前</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 加了 postcss</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">// 增加 &#39;less-loader&#39; ，注意顺序</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// window.ENV = &#39;production&#39;</span>
      <span class="token constant">ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
    <span class="token literal-property property">progress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 显示打包的进度条</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span> <span class="token comment">// 根目录</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动打开浏览器</span>
    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启动 gzip 压缩</span>

    <span class="token comment">// 设置代理</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>

      <span class="token comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span>
      <span class="token string-property property">&#39;/api2&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;/api2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包生产配置时，就需要进行抽离了，配置如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.prod.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> smart <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> TerserJSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpackCommonConf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">smart</span><span class="token punctuation">(</span>webpackCommonConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// filename: &#39;bundle.[contentHash:8].js&#39;,  // 打包代码时，加上 hash 戳</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[contentHash:8].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// name 即多入口时 entry 的 key</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span>
    <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 图片 - 考虑 base64 编码的情况</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 小于 5kb 的图片用 base64 格式产出</span>
            <span class="token comment">// 否则，依然延用 file-loader 的形式，产出 url 格式</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>

            <span class="token comment">// 打包到 img 目录下</span>
            <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;/img1/&#39;</span><span class="token punctuation">,</span>

            <span class="token comment">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span>
            <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 抽离 css</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment">// 注意，这里不再用 style-loader</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 抽离 less --&gt; css</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment">// 注意，这里不再用 style-loader</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 会默认清空 output.path 文件夹</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// window.ENV = &#39;production&#39;</span>
      <span class="token constant">ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// 抽离 css 文件</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;css/main.[contentHash:8].css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 压缩 css</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserJSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-webpack-如何抽离公共代码和第三方代码" tabindex="-1"><a class="header-anchor" href="#_06-webpack-如何抽离公共代码和第三方代码" aria-hidden="true">#</a> 06: webpack 如何抽离公共代码和第三方代码</h2><blockquote><p>注意代码中的 splitChunks 配置</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.prod.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> smart <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> TerserJSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpackCommonConf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.common.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">smart</span><span class="token punctuation">(</span>webpackCommonConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// filename: &#39;bundle.[contentHash:8].js&#39;,  // 打包代码时，加上 hash 戳</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[contentHash:8].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// name 即多入口时 entry 的 key</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span>
    <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;  // 修改所有静态文件 url 的前缀（如 cdn 域名），这里暂时用不到</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 图片 - 考虑 base64 编码的情况</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 小于 5kb 的图片用 base64 格式产出</span>
            <span class="token comment">// 否则，依然延用 file-loader 的形式，产出 url 格式</span>
            <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>

            <span class="token comment">// 打包到 img 目录下</span>
            <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">&#39;/img1/&#39;</span><span class="token punctuation">,</span>

            <span class="token comment">// 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）</span>
            <span class="token comment">// publicPath: &#39;http://cdn.abc.com&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 抽离 css</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment">// 注意，这里不再用 style-loader</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 抽离 less</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token comment">// 注意，这里不再用 style-loader</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 会默认清空 output.path 文件夹</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// window.ENV = &#39;production&#39;</span>
      <span class="token constant">ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// 抽离 css 文件</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;css/main.[contentHash:8].css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 压缩 css</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserJSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">// 分割代码块</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
      <span class="token doc-comment comment">/**
        initial 入口 chunk，对于异步导入的文件不处理
        async 异步 chunk，只对异步导入的文件处理
        all 全部 chunk
      */</span>

      <span class="token comment">// 缓存分组</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第三方模块</span>
        <span class="token literal-property property">vendor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">,</span> <span class="token comment">// chunk 名称</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 权限更高，优先抽离，重要！！！</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 大小限制</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 最少复用过几次</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment">// 公共的模块</span>
        <span class="token literal-property property">common</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">,</span> <span class="token comment">// chunk 名称</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 优先级</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 公共模块的大小限制</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 公共模块最少复用过几次</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-webpack-如何实现异步加载-js" tabindex="-1"><a class="header-anchor" href="#_07-webpack-如何实现异步加载-js" aria-hidden="true">#</a> 07: webpack 如何实现异步加载 JS</h2><h3 id="异步加载-js" tabindex="-1"><a class="header-anchor" href="#异步加载-js" aria-hidden="true">#</a> 异步加载 js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 回顾下 vue react 的 异步加载方式</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dynamic-data.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意这里的 default</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>default<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理-jsx" tabindex="-1"><a class="header-anchor" href="#处理-jsx" aria-hidden="true">#</a> 处理 jsx</h3><blockquote><p>使用 babel</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/preset-react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>webpack 配置文件: 使用 babel-loader 解析 js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> srcPath<span class="token punctuation">,</span> distPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paths&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">other</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> srcPath<span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// new HtmlWebpackPlugin({</span>
    <span class="token comment">//     template: path.join(srcPath, &#39;index.html&#39;),</span>
    <span class="token comment">//     filename: &#39;index.html&#39;</span>
    <span class="token comment">// })</span>

    <span class="token comment">// 多入口 - 生成 index.html</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 要考虑代码分割</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 多入口 - 生成 other.html</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;other.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;other&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 考虑代码分割</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>babel 配置文件如下:</p><ul><li><p>不带参数</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-react&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>带参数</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-react&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;pragma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 React.createElement（仅在经典的运行时中）</span>
        <span class="token property">&quot;pragmaFrag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DomFrag&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 React.Fragment（仅在经典的运行时中）</span>
        <span class="token property">&quot;throwIfNamespace&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 true</span>
        <span class="token property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;classic&quot;</span> <span class="token comment">// 默认是 classic</span>
        <span class="token comment">// &quot;importSource&quot;: &quot;custom-jsx-library&quot; // 默认是 react（仅在经典的运行时中）</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="处理-vue" tabindex="-1"><a class="header-anchor" href="#处理-vue" aria-hidden="true">#</a> 处理 vue</h3><blockquote><p>使用 vue-loader, 配置同上道理</p></blockquote><h2 id="_08-module-chunk-bundle-的区别" tabindex="-1"><a class="header-anchor" href="#_08-module-chunk-bundle-的区别" aria-hidden="true">#</a> 08: module chunk bundle 的区别</h2><ul><li>module: 各个源码文件，webpack 中一切皆模块</li><li>chunk: 多模块的合成，如 entry import splitChunk</li><li>bundle: 最终的输出文件</li></ul><p>综上所述，Module 是 Webpack 中最小的单元，它们组成了 Chunk，而 Chunk 则最终被合并成 Bundle。Bundle 是最终生成的文件，可以被直接加载到浏览器中运行。</p><p>用一句话说明三者之间的关系：</p><p>module，chunk 和 bundle 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：</p><p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。 <img src="https://img-blog.csdnimg.cn/65e7fbf7dddb4821a1c32c8cb7d754c9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE3MTc1MDEz,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="_09-webpack-优化构建速度-知识点串讲" tabindex="-1"><a class="header-anchor" href="#_09-webpack-优化构建速度-知识点串讲" aria-hidden="true">#</a> 09: webpack 优化构建速度-知识点串讲</h2>`,64),m={href:"https://juejin.cn/post/6996816316875161637#heading-16",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"大厂必考，社区热议话题"),n("li",null,"优化打包构建速度 --- 开发体验和效率"),n("li",null,"优化产出代码 --- 产品性能")],-1),b=n("h3",{id:"优化打包构建速度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#优化打包构建速度","aria-hidden":"true"},"#"),s(" 优化打包构建速度")],-1),h={href:"https://zhuanlan.zhihu.com/p/118397517",target:"_blank",rel:"noopener noreferrer"},g=p(`<li><p>优化 babel-loader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader?cacheDirectory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 开启缓存</span>
  <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 明确范围</span>
  <span class="token comment">// 排除范围： include 和 exclude 两者选一个即可</span>
  <span class="token comment">// exclude: path.resolve(__dirname, /node_modules/) ,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>IgnorePlugin</p></li><li><p>noParse</p></li>`,3),y=n("p",null,"happyPack",-1),w=n("p",null,"因为 happyPack 作者目前很少从事 JavaScript 工作，所以不维护了，推荐使用 thread-loader。",-1),f={href:"https://juejin.cn/post/7052240512593428494",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"ParallelUglifyPlugin",-1),_=n("p",null,"你可能有听过 ParallelUglifyPlugin 插件，它可以帮助我们多进程压缩 JS，webpack5 的 TerserWebpackPlugin 默认就开启了多进程和缓存，无需再引入 ParallelUglifyPlugin。",-1),j={href:"https://webpack.docschina.org/plugins/terser-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,[n("p",null,"自动刷新")],-1),q=n("li",null,[n("p",null,"热更新")],-1),C=n("li",null,[n("p",null,[s("DllPlugin: "),n("a",{href:"#_13-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8-dllplugin"},"何时使用-dllplugin")]),n("blockquote",null,[n("p",null,"Vue 和 React 官方 2018 都不再使用 dll 了，")])],-1),S=p(`<h2 id="_10-用-ignoreplugin-忽略无用文件" tabindex="-1"><a class="header-anchor" href="#_10-用-ignoreplugin-忽略无用文件" aria-hidden="true">#</a> 10: 用 IgnorePlugin 忽略无用文件</h2><p>避免引入无用模块</p><p>IgnorePlugin 是一个 webpack 内置的插件，可以直接使用 webpack.IgnorePlugin 来获取。</p><p>这个插件用于忽略某些特定的模块，让 webpack 不把这些指定的模块打包进去。例如我们使用 moment.js，直接引用后，里边有大量的 i18n 的代码，导致最后打包出来的文件比较大，而实际场景并不需要这些 i18n 的代码，这时我们可以使用 IgnorePlugin 来忽略掉这些代码文件，配置如下：</p><ul><li><p>比如使用 <code>moment</code> ，使用这种方式引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>
<span class="token comment">//设置语言</span>
moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">&#39;zh-cn&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>默认会引入所有语言 js 代码，代码过大</p></li><li><p>如何只引入中文 ？？</p></li></ul><p>修改配置如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码演示</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 配置的参数第一个是匹配引入模块路径的正则表达式，第二个是匹配模块的对应上下文即所在目录名。</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题存在与解决</p><blockquote><p>我们虽然按照上面的方法忽略了包含’./locale/&#39;该字段路径的文件目录,但是也使得我们使用的时候不能显示中文语言了，所以这个时候可以手动引入中文语言的目录</p></blockquote><p>更改代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>
<span class="token comment">//设置语言</span>
<span class="token comment">//手动引入所需要的语言包</span>
<span class="token keyword">import</span> <span class="token string">&#39;moment/locale/zh-cn&#39;</span>
moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">&#39;zh-cn&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="noparse-避免重复打包" tabindex="-1"><a class="header-anchor" href="#noparse-避免重复打包" aria-hidden="true">#</a> noParse 避免重复打包</h3><p>防止 webpack 解析那些任何与给定正则表达式相匹配的文件。对于一些不需要解析依赖（即无依赖）的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度。module.noParse 可以告诉 Webpack 忽略未采用模块系统文件的处理，可以有效地提高性能。比如常见的 jQuery 非常大，又没有采用模块系统，让 Webpack 解析这类型文件完全是浪费性能。</p><p>module.noParse 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析和处理，这样做的好处是能提高构建性能。注：这里一定要确定被排除出去的模块代码中不能包含 import、require、define 等内容，以保证 webpack 的打包包含了所有的模块，不然会导致打包出来的 js 因为缺少模块而报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">react\\.min\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 完整的\`react.min.js\`文件就没有采用模块化</span>
    <span class="token comment">// 忽略对\`react.min.js\`文件的递归解析处理</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="noparse-vs-ignoreplugin" tabindex="-1"><a class="header-anchor" href="#noparse-vs-ignoreplugin" aria-hidden="true">#</a> noParse VS IgnorePlugin：</h3><ul><li>IgnorePlugin 直接不引入，代码里没有;</li><li>noParse 引入，但不打包(不进行编译不进行模块化分析)</li></ul><h2 id="_11-happypack-是什么" tabindex="-1"><a class="header-anchor" href="#_11-happypack-是什么" aria-hidden="true">#</a> 11: happyPack 是什么</h2>`,18),E={href:"https://juejin.cn/post/7052240512593428494",target:"_blank",rel:"noopener noreferrer"},W=p('<blockquote><p>因为 happyPack 作者目前很少从事 JavaScript 工作，所以不维护了，推荐使用 thread-loader。</p></blockquote><p>运行在 node.js 之上的 Webpack 是单线程模型的，也就是说 Webpack 需要处理的任务需要一件件挨着做，无法多个时间并行，当有大量文件需要读写和处理时尤其是当文件数量变多后，Webpack 构建慢的问题就会尤为严重。由于 JavaScript 是单线程模型，要想发挥多核 CPU 的能力只能通过多进程去实现，而无法通过多线程实现。HappyPack 能发挥多核 CPU 电脑的性能优势让 Webpack 同一时刻处理多个任务，它把任务分解成多个子进程去并发执行，子进程处理完毕后再将结果发送给主进程。</p><h3 id="关于开启多进程" tabindex="-1"><a class="header-anchor" href="#关于开启多进程" aria-hidden="true">#</a> 关于开启多进程</h3><ul><li>项目较大，打包较慢，开启多进程能提高速度</li><li>项目较小，打包很快，开启多进程会降低速度（进程开销）</li><li>按需使用</li></ul><h2 id="_12-webpack-如何配置热更新" tabindex="-1"><a class="header-anchor" href="#_12-webpack-如何配置热更新" aria-hidden="true">#</a> 12: webpack 如何配置热更新</h2>',5),H={href:"https://juejin.cn/post/7160939003212988424",target:"_blank",rel:"noopener noreferrer"},D=p(`<h3 id="自动刷新" tabindex="-1"><a class="header-anchor" href="#自动刷新" aria-hidden="true">#</a> 自动刷新</h3><p>要用 webpack-devserver：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启监听，默认为false</span>
  <span class="token comment">// 注意：开启监听后，webpack-dev-server会自动开启刷新浏览器</span>

  <span class="token comment">// 监听配置：</span>
  <span class="token literal-property property">watchOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ignored</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 忽略哪些文件</span>
    <span class="token comment">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高</span>
    <span class="token comment">// 判断文件是否发生变化是通过不停地去询问系统指定文件有没有变化实现的</span>
    <span class="token literal-property property">poll</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 默认每隔1000毫秒询问一次</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="热更新" tabindex="-1"><a class="header-anchor" href="#热更新" aria-hidden="true">#</a> 热更新</h3><ul><li>自动刷新： 整个网页全部刷新，速度较慢</li><li>自动刷新：这个那个网页全部刷新啊，转态丢失</li><li>热更新：新代码生效，网页不刷新，状态不丢失</li></ul><blockquote><p>模块热替换（Hot Module Replacement）的好处是只替换更新的部分，而不是整个页面都重新加载。</p></blockquote><p>模块热替换能做到在不重新加载整个网页的情况下，通过将被更新过的模块替换老的模块，再重新执行一次来实现实时预览。 模块热替换相对于默认的刷新机制能提供更快的响应和更好的开发体验。 模块热替换默认是关闭的，要开启模块热替换，你只需在启动 DevServer 时带上--hot 参数，重启 DevServer 后再去更新文件就能体验到模块热替换了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HotModuleReplacementPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack/lib/HotModuleReplacementPlugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">smart</span><span class="token punctuation">(</span>webpackCommonConf<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;webpack-dev-server/client?http://localhost:8080/&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;webpack/hot/dev-server&#39;</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">other</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> <span class="token string">&#39;other.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
    <span class="token literal-property property">progress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 显示打包的进度条</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span> <span class="token comment">// 根目录</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动打开浏览器</span>
    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启动 gzip 压缩</span>

    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js要开启</span>
<span class="token comment">// 增加，开启热更新之后的代码逻辑</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./library.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用更新过的 library 模块执行某些操作...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-何时使用-dllplugin" tabindex="-1"><a class="header-anchor" href="#_13-何时使用-dllplugin" aria-hidden="true">#</a> 13: 何时使用 DllPlugin</h2><ul><li>前端框架如 vue react 体积大，构建慢</li><li>较稳定，不常升级版本</li><li>同一个版本只构建一次即可，不用每次都重新构建</li><li>webpack 已内置了 DllPlugin 支持, 不用额外 npm install</li><li>DllPlugin - 打包出 dll 文件</li><li>DllReferencePlugin - 使用 dll 文件</li></ul>`,11),M={href:"https://www.cnblogs.com/skychx/p/webpack-dllplugin.html",target:"_blank",rel:"noopener noreferrer"},N=p(`<blockquote><p>抛弃 DLL：Vue &amp; React 官方的共同选择: 所以说，如果项目上了 webpack 4，再使用 dll 收益并不大。我拿实际项目的代码试了一下，加入 dll 可能会有 1-2 s 的速度提升，对于整体打包时间可以说可以忽略不计。</p><p>Vue 和 React 官方 2018 都不再使用 dll 了，现在 2019 年都快过去了，所以说我上面说的都没用了，都不用学了，是不是感觉松了一口气（疯狂暗示点赞）？</p></blockquote><h3 id="比-dll-更优秀的插件-hardsourcewebpackplugin" tabindex="-1"><a class="header-anchor" href="#比-dll-更优秀的插件-hardsourcewebpackplugin" aria-hidden="true">#</a> 比 DLL 更优秀的插件 HardSourceWebpackPlugin</h3><blockquote><p>貌似这个技术直接放到了 webpack 5 里</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HardSourceWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;hard-source-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ......</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HardSourceWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 直接加入这行代码就行</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-webpack-优化构建速度-可用于生产环境-考点总结和复习" tabindex="-1"><a class="header-anchor" href="#_14-webpack-优化构建速度-可用于生产环境-考点总结和复习" aria-hidden="true">#</a> 14: webpack 优化构建速度(可用于生产环境)-考点总结和复习</h2><h3 id="可用于生产环境" tabindex="-1"><a class="header-anchor" href="#可用于生产环境" aria-hidden="true">#</a> 可用于生产环境</h3><ul><li>优化 babel-loader</li><li>IgnorePlugin</li><li>noParse</li><li>happyPack</li><li>ParallelUglifyPlugin</li></ul><h3 id="不可用于生产环境" tabindex="-1"><a class="header-anchor" href="#不可用于生产环境" aria-hidden="true">#</a> 不可用于生产环境</h3><ul><li>自动刷新</li><li>热更新</li><li>DllPlugin <blockquote><p>双越： 生产环境要考虑打包的体积，和加载的性能。DllPlugin 解决的是打包的速度。这两者不一个目的。如果生产环境用了 DllPlugin ，可能会和打包体积、打包合并的逻辑，产生冲突</p></blockquote></li></ul><h2 id="_15-webpack-优化产出代码-考点串讲" tabindex="-1"><a class="header-anchor" href="#_15-webpack-优化产出代码-考点串讲" aria-hidden="true">#</a> 15: webpack 优化产出代码-考点串讲</h2><ul><li>体积更小</li><li>合理分包，不重复加载</li><li>速度更快，内存使用更小</li></ul><h3 id="webpack-性能优化-产出代码" tabindex="-1"><a class="header-anchor" href="#webpack-性能优化-产出代码" aria-hidden="true">#</a> webpack 性能优化-产出代码</h3><ul><li>小图片 base64 编码</li><li>bundle 加 hash</li><li>懒加载</li><li>提取公共代码</li><li>IgnorePlugin</li><li>使用 CDN 加速</li><li>使用 production</li><li>Scope Hosting</li></ul><h3 id="使用-production" tabindex="-1"><a class="header-anchor" href="#使用-production" aria-hidden="true">#</a> 使用 production</h3><ul><li>自动开启压缩代码</li><li>Vue React 等会自动删除调试代码（如开发环境的 warning）</li><li>启动 Tree-Shaking</li></ul><h2 id="_16-什么是-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_16-什么是-tree-shaking" aria-hidden="true">#</a> 16: 什么是 Tree-Shaking</h2><blockquote><p>按照 webpack 官网的解释，tree shaking 通常用于描述移除 JavaScript 上下文中的未引用代码（dead-code）。它依赖于 ESM 的静态分析能力，例如 import 和 export。用大白话解释就是，如果是使用模块化开发的话，就可以删除那些引入某个模块中用不到的函数。</p><p>为什么叫 tree shaking， 我个人觉得这个名次叫的很形象呀。你可以将应用程序想象成一棵树。绿色表示实际用到的源码和 library，是树上活的树叶。灰色表示无用的代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p></blockquote><h2 id="_17-es-module-和-commonjs" tabindex="-1"><a class="header-anchor" href="#_17-es-module-和-commonjs" aria-hidden="true">#</a> 17: ES Module 和 Commonjs</h2><ul><li>ES6 module 是静态引入，编译时引入</li><li>Commonjs 是动态引入，执行时引入</li><li>只有 ES6 Module 才能静态分析，实现 Tree-Shaking</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> apiList <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config/api.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以动态引入，执行时引入</span>
  apiList <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config/api_dev.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> apiList <span class="token keyword">from</span> <span class="token string">&#39;../config/api.js&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 编译时报错，只能静态引入</span>
  <span class="token keyword">import</span> apiList <span class="token keyword">from</span> <span class="token string">&#39;../config/api_dev.js&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-什么是-scope-hosting" tabindex="-1"><a class="header-anchor" href="#_18-什么是-scope-hosting" aria-hidden="true">#</a> 18: 什么是 Scope Hosting?</h2><blockquote><p>Scope Hoisting 它可以让 webpack 打包出来的代码文件更小，运行更快，它可以被称作为 &quot;作用域提升&quot;。 是在 webpack3 中提出来的，当然现在 webpack4 也是支持的。</p></blockquote><p>scope hoisting 原理</p><p>原理：将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突</p><p>对比：通过 scope hoisting 可以减少函数声明代码和内存开销</p><p>简单理 scope hoisting 就是把多个作用域用一个作用域取代，以减少内存消耗并减少包裹块代码，从每个模块有一个包裹函数变成只有一个包裹函数包裹所有的模块，但是有一个前提就是，当模块的引用次数大于 1 时，比如被引用了两次或以上，那么这个效果会无效，也就是被引用多次的模块在被 webpack 处理后，会被独立的包裹函数所包裹</p><p><strong>注意</strong>：但 scope hoisting 的启用是有前提的，如果遇到某些模块多次被其他模块引用，或者使用了动态导入的模块，或者是非 ESM 的模块，都不会有 scope hoisting。</p><h3 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;hello 双越&#39;</span>

<span class="token comment">// main.js</span>
<span class="token keyword">import</span> str <span class="token keyword">from</span> <span class="token string">&#39;./hello.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认打包结果如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__util_js__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__WEBPACK_IMPORTED_MODULE_0__util_js__<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    __webpack_exports__<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello 双越&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 Scope Hoisting 之后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token string">&#39;Hello,Webpack&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 针对 Npm 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件</span>
    <span class="token literal-property property">mainFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jsnext:main&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;browser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 开启 Scope Hoisting 功能</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-babel-基本概念串讲" tabindex="-1"><a class="header-anchor" href="#_19-babel-基本概念串讲" aria-hidden="true">#</a> 19: babel 基本概念串讲</h2><ul><li>前端开发环境必备工具</li><li>同 webpack，需要了解基本的配置和使用</li><li>面试考察概率不高，但要求必会</li></ul><h3 id="babel-1" tabindex="-1"><a class="header-anchor" href="#babel-1" aria-hidden="true">#</a> babel</h3>`,39),z={href:"https://www.jiangruitao.com/babel/introduction/",target:"_blank",rel:"noopener noreferrer"},I=n("ul",null,[n("li",null,"环境搭建 & 基本配置"),n("li",null,"babel-polyfill"),n("li",null,"babel-runtime")],-1),V=n("h3",{id:"babel-环境搭建和基本配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#babel-环境搭建和基本配置","aria-hidden":"true"},"#"),s(" babel 环境搭建和基本配置")],-1),R={href:"https://github.com/gy1001/Javascript/tree/main/frame-project-interview/babel-demo",target:"_blank",rel:"noopener noreferrer"},$=n("ul",null,[n("li",null,"环境搭建"),n("li",null,".babelrc 配置"),n("li",null,"presets 和 plugins")],-1),B=n("h2",{id:"_20-babel-polyfill-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-babel-polyfill-是什么","aria-hidden":"true"},"#"),s(" 20: babel-polyfill 是什么?")],-1),J={href:"https://juejin.cn/post/7062621128229355528",target:"_blank",rel:"noopener noreferrer"},O=p(`<blockquote><p>babel 只转化语法，不转换新的 API</p></blockquote><ul><li><p>什么是 polyfill</p><blockquote><p>Polyfill 的准确意思为： 用于实现浏览器并不支持的原生 API 的代码。</p></blockquote></li><li><p>什么是 core-js 和 regenerator</p></li><li><p>babel-polyfill 即两者的集合</p><blockquote><p>从 babel7.4 开始，官方不推荐再使用@babel/polyfill 了，因为@babel/polyfill 本身其实就是两个 npm 包的集合：core-js 与 regenerator-runtime。</p><p>官方推荐直接使用这两个 npm 包。虽然 @babel/polyfill 还在进行版本升级，但其使用的 core-js 包为 2.x.x 版本，而 core-js 这个包本身已经发布到了 3.x.x 版本了，@babel/polyfill 以后也不会使用 3.x.x 版本的包了。新版本的 core-js 实现了许多新的功能，例如数组的 includes 方法。</p></blockquote></li></ul><h3 id="babel-polyfill-现在已被弃用" tabindex="-1"><a class="header-anchor" href="#babel-polyfill-现在已被弃用" aria-hidden="true">#</a> babel-polyfill 现在已被弃用</h3><ul><li>Babel 7.4 以后弃用 babel-polyfill</li><li>推荐直接使用 core-js 和 regenerator</li><li>但是不影响面试会考察它</li></ul><h2 id="_21-babel-polyfill-如何按需引入" tabindex="-1"><a class="header-anchor" href="#_21-babel-polyfill-如何按需引入" aria-hidden="true">#</a> 21: babel-polyfill 如何按需引入?</h2><ul><li>babel-polyfill 文件较大</li><li>实际中只用到了一部分功能, 无需全量引入</li><li>配置按需引入</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel-polyfill-的问题" tabindex="-1"><a class="header-anchor" href="#babel-polyfill-的问题" aria-hidden="true">#</a> babel-polyfill 的问题</h3><ul><li>污染全局变量 <blockquote><p>babel-polyfill 通过向全局对象和内置对象的 prototype 上添加方法来实现的。所以这会造成全局空间污染。</p></blockquote></li><li>如果做一个独立的 web 系统，则无所谓</li><li>如果做一个第三方 lib，就会有问题（引用这个库的项目中的全局变量被污染了，也有可能会有版本的冲突）</li></ul><p>那么有没有一种办法,根据实际代码中用到的 ES6 新增 API ,来使用对应的垫片,而不是全部加载进去呢? 是的，有的。那就是 babel-runtime &amp; babel-plugin-transform-runtime，他们可以实现按需加载。</p><h2 id="_22-babel-runtime-是什么" tabindex="-1"><a class="header-anchor" href="#_22-babel-runtime-是什么" aria-hidden="true">#</a> 22: babel-runtime 是什么?</h2>`,11),L={href:"https://juejin.cn/post/6844904063402770439",target:"_blank",rel:"noopener noreferrer"},T=p(`<h3 id="babel-runtime" tabindex="-1"><a class="header-anchor" href="#babel-runtime" aria-hidden="true">#</a> babel-runtime</h3><p>简单说 babel-runtime 更像是一种按需加载的实现，比如你哪里需要使用 Promise，只要在这个文件头部引入即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Promise <span class="token keyword">from</span> <span class="token string">&#39;babel-runtime/core-js/promise&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过如果你许多文件都要使用 Promise，难道每个文件都要 import 一下吗？当然不是，Babel 官方已考虑这种情况，只需要使用 babel-plugin-transform-runtime 就可以解决手动 import 的苦恼了。</p><h3 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> babel-plugin-transform-runtime</h3><p>babel-plugin-transform-runtime 装了就不需要装 babel-runtime 了，因为前者依赖后者。 总的来说，babel-plugin-transform-runtime 就是可以在我们使用新 API 时 自动 import babel-runtime 里面的 polyfill，具体插件做了以下三件事情：</p><ul><li>当我们使用 async/await 时，自动引入 babel-runtime/regenerator</li><li>当我们使用 ES6 的静态事件或内置对象时，自动引入 babel-runtime/core-js</li><li>移除内联 babel helpers 并替换使用 babel-runtime/helpers 来替换</li></ul><p>babel-plugin-transform-runtime 优点：</p><ul><li>不会污染全局变量</li><li>多次使用只会打包一次</li><li>依赖统一按需引入,无重复引入,无多余引入</li><li>避免 babel</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;tranform-runtime&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),A={href:"https://www.jiangruitao.com/babel/transform-runtime/",target:"_blank",rel:"noopener noreferrer"},F=p('<h2 id="_24-webpack-面试真题-前端代码为何要打包和构建" tabindex="-1"><a class="header-anchor" href="#_24-webpack-面试真题-前端代码为何要打包和构建" aria-hidden="true">#</a> 24: webpack 面试真题-前端代码为何要打包和构建</h2><h3 id="代码层面" tabindex="-1"><a class="header-anchor" href="#代码层面" aria-hidden="true">#</a> 代码层面</h3><ul><li>体积更小（tree-shaking、压缩、合并），加载更快</li><li>编译高级语言或者语法（TS、ES6+、模块化、scss 等）</li><li>兼容性和检查错误（polyfill、postcss、eslint）</li></ul><h3 id="研发流程" tabindex="-1"><a class="header-anchor" href="#研发流程" aria-hidden="true">#</a> 研发流程</h3><ul><li>统一、高效的开发环境</li><li>统一的构建流程和产出标准</li><li>集成公司构建规范（提测、上线等）</li></ul><h3 id="其他面试题" tabindex="-1"><a class="header-anchor" href="#其他面试题" aria-hidden="true">#</a> 其他面试题</h3><h4 id="module-chunk-bundle-的区别" tabindex="-1"><a class="header-anchor" href="#module-chunk-bundle-的区别" aria-hidden="true">#</a> module chunk bundle 的区别:</h4><p><a href="#_08-module-chunk-bundle-%E7%9A%84%E5%8C%BA%E5%88%AB">答案</a></p><h4 id="loader-和-plugin-的区别" tabindex="-1"><a class="header-anchor" href="#loader-和-plugin-的区别" aria-hidden="true">#</a> loader 和 Plugin 的区别</h4><ul><li>loader 模块转换器：如 less-loader</li><li>plugin 扩展插件 如 HtmlWebpackPlugin</li></ul><h4 id="常见的-loader-和-plugin-有哪些" tabindex="-1"><a class="header-anchor" href="#常见的-loader-和-plugin-有哪些" aria-hidden="true">#</a> 常见的 loader 和 plugin 有哪些</h4>',11),U={href:"https://www.webpackjs.com/loaders/",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,[n("a",{href:""},"https://www.webpackjs.com/plugins/")],-1),Z=p(`<h4 id="babel-和-webpack-的区别" tabindex="-1"><a class="header-anchor" href="#babel-和-webpack-的区别" aria-hidden="true">#</a> babel 和 webpack 的区别</h4><ul><li>babel- JS 新语法编译工具，不关系模块化</li><li>webpack - 打包构建工具，是多个 loader plugin 的集合</li></ul><h4 id="如何产出一个-lib" tabindex="-1"><a class="header-anchor" href="#如何产出一个-lib" aria-hidden="true">#</a> 如何产出一个 lib</h4><ul><li>参考 webpack.dll.js</li><li>output.library</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// lib 的文件名</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;lodash.js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 输出 lib 到 dist 目录下</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> distPath<span class="token punctuation">,</span>
    <span class="token comment">// lib 的全局变量名</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="babel-polyfill-和-babel-runtime-的区别" tabindex="-1"><a class="header-anchor" href="#babel-polyfill-和-babel-runtime-的区别" aria-hidden="true">#</a> babel-polyfill 和 babel-runtime 的区别</h4><ul><li>bebel-polyfill 会污染全局</li><li>babel-runtime 不会污染全局</li><li>产生第三方 lib 要用 babel-runtime</li></ul><h4 id="webpack-如何实现懒加载" tabindex="-1"><a class="header-anchor" href="#webpack-如何实现懒加载" aria-hidden="true">#</a> webpack 如何实现懒加载</h4><ul><li>import</li><li>结合 Vue React 异步组件</li><li>结合 Vue-router React-Router 异步加载路由</li></ul><h2 id="_25-webpack-面试真题-为何-proxy-不能被-polyfill" tabindex="-1"><a class="header-anchor" href="#_25-webpack-面试真题-为何-proxy-不能被-polyfill" aria-hidden="true">#</a> 25: webpack 面试真题-为何 Proxy 不能被 Polyfill</h2><ul><li>如 Class 可以用 function 模拟</li><li>如 Promise 可以用 callback 来模拟</li><li>但是 Proxy 的功能用 Object.defineProperty 无法模拟</li></ul><h2 id="_26-webpack-面试真题-常见性能优化方法" tabindex="-1"><a class="header-anchor" href="#_26-webpack-面试真题-常见性能优化方法" aria-hidden="true">#</a> 26: webpack 面试真题-常见性能优化方法</h2><h3 id="可用于生产环境的" tabindex="-1"><a class="header-anchor" href="#可用于生产环境的" aria-hidden="true">#</a> 可用于生产环境的</h3><ul><li>优化 babel-loader</li><li>IgnorePlugin</li><li>noParse</li><li>happyPack</li><li>ParallelUglifyPlugin</li></ul><h3 id="不可用于生产环境的" tabindex="-1"><a class="header-anchor" href="#不可用于生产环境的" aria-hidden="true">#</a> 不可用于生产环境的</h3><ul><li>自动刷新</li><li>热更新</li><li>DllPlugin</li></ul><h3 id="webpack-优化产出代码" tabindex="-1"><a class="header-anchor" href="#webpack-优化产出代码" aria-hidden="true">#</a> webpack 优化产出代码</h3><ul><li>小图片 base64 编码</li><li>bundle 加 hash</li><li>懒加载</li><li>提供公共代码</li><li>使用 CDN 加速</li><li>IgnorePlugin</li><li>使用 production</li><li>Scope Hosting</li></ul><h2 id="_27-【任务】从-0-配置-webpack5-开发环境" tabindex="-1"><a class="header-anchor" href="#_27-【任务】从-0-配置-webpack5-开发环境" aria-hidden="true">#</a> 27:【任务】从 0 配置 webpack5 开发环境</h2>`,19);function K(Q,X){const a=l("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[n("a",d,[s("深入浅出 Webpack"),e(a)])]),k,n("p",null,[n("a",m,[s("学习 Webpack5 之路（优化篇）- 近 7k 字"),e(a)])]),v,b,n("p",null,[n("a",h,[s("webpack 高级配置-优化构建速度"),e(a)])]),n("ul",null,[g,n("li",null,[y,n("blockquote",null,[w,n("p",null,[n("a",f,[s("【实操】使用 thread-load 替换 happyPack 实现 loader 多线程"),e(a)])])])]),n("li",null,[x,n("blockquote",null,[_,n("p",null,[n("a",j,[s("官方文档：TerserWebpackPlugin"),e(a)])])])]),P,q,C]),c(" ### 优化产出代码 "),S,n("p",null,[n("a",E,[s("【实操】使用 thread-load 替换 happyPack 实现 loader 多线程"),e(a)])]),W,n("p",null,[n("a",H,[s("webpack 热更新原理(面试大概率会问)"),e(a)])]),D,n("p",null,[n("a",M,[s("你真的需要 Webpack DllPlugin 吗？"),e(a)])]),N,n("p",null,[n("a",z,[s("姜瑞涛的个人网站：Babel 简介"),e(a)])]),I,V,n("p",null,[n("a",R,[s("https://github.com/gy1001/Javascript/tree/main/frame-project-interview/babel-demo"),e(a)])]),$,B,n("blockquote",null,[n("p",null,[n("a",J,[s("一文搞懂 core-js@3、@babel/polyfill、@babel/runtime、@babel/runtime-corejs3 的作用与区别"),e(a)])])]),O,n("p",null,[n("a",L,[s("掘金：babel polyfill 到底怎么用？"),e(a)])]),T,n("p",null,[n("a",A,[s("详细讲解：姜瑞涛-大佬的文章"),e(a)])]),F,n("ul",null,[n("li",null,[n("a",U,[s("https://www.webpackjs.com/loaders/"),e(a)])]),G]),Z])}const nn=t(r,[["render",K],["__file","index-10.html.vue"]]);export{nn as default};
