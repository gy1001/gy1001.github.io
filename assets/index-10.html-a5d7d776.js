import{_ as s,p as n,q as a,a1 as e}from"./framework-e8cb8151.js";const t={},o=e(`<h1 id="_10-ts-声明文件-ts-模块" tabindex="-1"><a class="header-anchor" href="#_10-ts-声明文件-ts-模块" aria-hidden="true">#</a> 10: TS 声明文件，TS 模块</h1><h2 id="_01-为什么要用声明文件" tabindex="-1"><a class="header-anchor" href="#_01-为什么要用声明文件" aria-hidden="true">#</a> 01: 为什么要用声明文件？</h2><h3 id="为什么要使用声明文件" tabindex="-1"><a class="header-anchor" href="#为什么要使用声明文件" aria-hidden="true">#</a> 为什么要使用声明文件</h3><ol><li>如果文件使用 TS 编写，在编译成 JS 文件时可以自动生成声明文件，并在发布的时候将 .d.ts 文件一起发布，我们无需编写声明文件</li><li>当我们在 TS 文件中引入使用第三方库的类型或者使用集成库时，比如 axios 库，ES6 的 Map 类型，这些库用 JS 开发，不能获取 TS 一样的类型提示，需要一个声明文件来帮助库的使用者来获取库的类型提示</li></ol><p><strong>声明文件只针对类型定义，不能进行赋值和实现</strong></p><h2 id="_02-如何感知声明文件存在的意义" tabindex="-1"><a class="header-anchor" href="#_02-如何感知声明文件存在的意义" aria-hidden="true">#</a> 02：如何感知声明文件存在的意义</h2><h2 id="_03-声明文件实现-作业" tabindex="-1"><a class="header-anchor" href="#_03-声明文件实现-作业" aria-hidden="true">#</a> 03: 声明文件实现+作业</h2><p>定义和使用声明文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义 declare 表示 声明的意思，我们可以用它做出各种声明</span>
<span class="token keyword">declare</span> <span class="token keyword">let</span> <span class="token operator">/</span> <span class="token keyword">const</span> <span class="token comment">// 声明全局变量</span>
<span class="token keyword">declare</span> funciton  <span class="token comment">// 声明全局方法</span>
<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token comment">// 声明全局类</span>
<span class="token keyword">declare</span> <span class="token keyword">enum</span> <span class="token comment">// 声明全局枚举变量</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token comment">// 声明全局命名空间（可含有子属性）</span>
<span class="token keyword">interface</span><span class="token operator">/</span><span class="token keyword">type</span> <span class="token comment">// 声明全局类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// jquery.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token function-variable function">ready</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> CssSelector
<span class="token keyword">type</span> <span class="token class-name">CssSelector</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">css</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token comment">// xx.ts</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;border&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1px red solid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-一个很重要的细节问题" tabindex="-1"><a class="header-anchor" href="#_04-一个很重要的细节问题" aria-hidden="true">#</a> 04：一个很重要的细节问题</h2><h2 id="_05-正确理解-declare-和相关细节" tabindex="-1"><a class="header-anchor" href="#_05-正确理解-declare-和相关细节" aria-hidden="true">#</a> 05：正确理解 declare 和相关细节</h2><ul><li><strong>declare</strong> 可以去掉，可以不去掉，但是 <strong>tsconfig.json</strong> 中的配置 <strong>skipLibCheck</strong> 默认是 <strong>true</strong>. 如果改为<strong>false</strong>,就会报错：<strong>d.ts</strong> 文件中的顶级声明必须以 <strong>declare</strong> 或者 <strong>export</strong> 修饰符开头（export 后面的函数就<strong>不支持</strong>函数重载了）</li><li><strong>type、interface</strong> 也是可以使用 <strong>declare</strong> 的，也可以不加，建议不用加</li></ul><h2 id="_06-命名空间和嵌套命名空间在声明文件中的使用" tabindex="-1"><a class="header-anchor" href="#_06-命名空间和嵌套命名空间在声明文件中的使用" aria-hidden="true">#</a> 06：命名空间和嵌套命名空间在声明文件中的使用</h2><blockquote><p>使用命名空间，防止重名</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_07-用模块声明定义声明文件-理解优势" tabindex="-1"><a class="header-anchor" href="#_07-用模块声明定义声明文件-理解优势" aria-hidden="true">#</a> 07：用模块声明定义声明文件，理解优势</h2><h2 id="_08-如何在-ts-中引入-js-文件" tabindex="-1"><a class="header-anchor" href="#_08-如何在-ts-中引入-js-文件" aria-hidden="true">#</a> 08：如何在 TS 中引入 js 文件</h2>`,18),p=[o];function c(i,r){return n(),a("div",null,p)}const d=s(t,[["render",c],["__file","index-10.html.vue"]]);export{d as default};
