import{_ as c,M as t,p,q as i,R as s,t as n,N as a,a1 as o}from"./framework-e8cb8151.js";const l="/assets/5cd96312000163ce06400359-2e36a733.jpg",d="/assets/image-20230902113134072-37e5e7c6.png",r="/assets/image-20230902113145229-4189224a.png",u="/assets/image-20230902113155948-8f038ea5.png",k="/assets/image-20230902113204908-d87ce96a.png",m={},v=o('<h1 id="_07-webpack-中的模块化开发" tabindex="-1"><a class="header-anchor" href="#_07-webpack-中的模块化开发" aria-hidden="true">#</a> 07-Webpack 中的模块化开发</h1><p><img src="'+l+'" alt="img"></p><blockquote><p>要成就一件大事业，必须从小事做起。 ——列宁</p></blockquote><p><strong>模块</strong>是指为了完成某功能所需的程序或者子程序，模块是系统中「职责单一」且「可替换」的部分。</p><p>所谓的模块化就是指把系统代码分为一系列职责单一且可替换的模块。</p><p>模块化开发是指如何开发新的模块和复用已有的模块来实现应用的功能。</p><p><code>Webpack</code> 作为 <code>JavaScript</code> 模块化打包工具，自然对 <code>JavaScript</code> 的模块化做了不少工作，本文将从模块规范说起，逐渐介绍 <code>Webpack</code> 中对模块化的一些增强处理。</p><p>我们先来认识下三大 <code>JavaScript</code> 主流模块规范：<code>CommonJS</code>、<code>AMD</code> 和 <code>ES6 Module</code>。</p><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2>',9),h={href:"https://nodejs.org/docs/latest/api/modules.html",target:"_blank",rel:"noopener noreferrer"},b=o(`<p>通过 <strong>ServerJS</strong> 这个名字就可以知道，<code>CommonJS</code> 主要是服务端用的模块规范。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// sayhi.js</span>
<span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> hi
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sayHi

<span class="token comment">// index.js</span>
<span class="token keyword">var</span> sayHi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./sayhi.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就是 <code>CommonJS</code> 语法，使用了<code>require</code>来导入一个模块，<code>module.exports</code>导出模块。</p>`,3),g=s("code",null,"Node.js",-1),_={href:"https://nodejs.org/docs/latest/api/modules.html#modules_the_module_wrapper",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 模块的代码在这里</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="commonjs-的问题" tabindex="-1"><a class="header-anchor" href="#commonjs-的问题" aria-hidden="true">#</a> CommonJS 的问题</h4><p><code>CommonJS</code> 规范是 <code>JavaScript</code> 中最常见的模块格式规范，这一标准的设计初衷是为了让 <code>JavaScript</code> 在多个环境下都实现模块化。</p><p>起先主要应用在 <code>Node.js</code> 服务端中，但是 <code>Node.js</code> 中的实现依赖了 <code>Node.js</code> 本身功能的实现，包括了 <code>Node.js</code> 的文件系统等，这个规范在浏览器环境是没法使用的。</p>`,4),j={href:"http://browserify.org/",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"Webpack",-1),w=s("code",null,"CommonJS",-1),q=s("h2",{id:"amd",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#amd","aria-hidden":"true"},"#"),n(" AMD")],-1),S={href:"https://requirejs.org/docs/whyamd.html",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"CommonJS",-1),M=s("code",null,"JavaScript",-1),J=s("code",null,"CommonJS",-1),C=s("strong",null,"浏览器内支持、实现简单、并且支持异步加载",-1),W=s("code",null,"AMD 规范",-1),N={href:"https://requirejs.org/docs/api.html",target:"_blank",rel:"noopener noreferrer"},E=o(`<ul><li><code>require()</code>：引入其他模块；</li><li><code>define()</code>：定义新的模块。</li></ul><p>基本语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// sayhi.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> hi
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// index.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./sayhi.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sayHi</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z=s("code",null,"AMD",-1),D={href:"https://seajs.github.io/seajs/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/cmdjs/specification/blob/master/draft/module.md",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/umdjs/umd",target:"_blank",rel:"noopener noreferrer"},I=o(`<p>虽然 AMD 的模式很适合浏览器端的开发，但是随着 npm 包管理的机制越来越流行，这种方式可能会逐步的被淘汰掉。</p><h3 id="amd-规范的问题" tabindex="-1"><a class="header-anchor" href="#amd-规范的问题" aria-hidden="true">#</a> AMD 规范的问题</h3><p>在 AMD 规范中，我们要声明一个模块，那么需要指定该模块用到的所有依赖项，这些依赖项会被当做形参传到 <code>factory</code>（<code>define</code>方法传入的函数叫做<code>factory</code>）中，对于依赖的模块会提前执行，这种做法叫做 <strong>依赖前置</strong>。</p><p>依赖前置加大了开发的难度，无论我们在阅读代码还是编写代码的时，都会导致引入的模块内容是条件性执行的。</p><p><strong>而且不管 AMD 还是 CommonJS 都没有统一浏览器和客户端的模块化规范。</strong></p><h2 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module" aria-hidden="true">#</a> ES6 Module</h2><p>ES6 Module，又称为 ES2015 modules，是 ES2015 标准提出来的一种模块加载方式，也是 ECMAScript 官方提出的方案，作为 ES 标准，不仅仅在 Web 现代浏览器（例如 Chrome）上面得到实现，而且在 Node.js 9+ 版本也得到原生支持（需要加上<code>--experimental-modules</code>使用）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// sayhi.js</span>
<span class="token keyword">const</span> hi <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> hi
<span class="token punctuation">}</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> sayHi <span class="token keyword">from</span> <span class="token string">&#39;./sayhi&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于前端项目，可以通过 Babel 或者 Typescript 进行提前体验。</p><blockquote><p>Tips：</p><p>随着主流浏览器逐步开始支持 ES Modules（ESM） 标准，越来越多的目光投注于 Node.js 对于 ESM 的支持实现上；</p><p>目前 Node.js 使用 CommonJS 作为官方的模块解决方案，虽然内置的模块方案促进了 Node.js 的流行，但是也为引入新的 ES Modules 造成了一定的阻碍。</p><p>不过 Node.js 9.0+ 已经支持 ESM 语法，需要添加 flag <code>-experimental-modules</code> 来启动 ESM 语法支持，文件则必须使用 <code>.mjs</code> 后缀：</p><p><code>node --experimental-modules some-esm-file.mjs</code> 。</p></blockquote><h2 id="webpack-中一切皆模块" tabindex="-1"><a class="header-anchor" href="#webpack-中一切皆模块" aria-hidden="true">#</a> Webpack 中一切皆模块</h2><p>在 Web 前端，我们不仅仅只有 JavaScript，还有 CSS、HTML、图片、字体、富媒体等众多资源，还有一些资源是以类似「方言」的方式存在着，比如 less、sass、各种 js 模板库等，这些资源并不能被直接用在 JavaScript 中，</p><p>如果在 JavaScript 中像使用模块一样使用，那么可以极大的提高我们的开发体验：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./img/webpack.png&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./css/style.css&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./template.ejs&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，我们就需要 Webpack 了！在 Webpack 中，一切皆模块！</p><p>在 Webpack 编译的过程中，Webpack 会要对整个代码进行<strong>静态分析</strong>，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给对应的加载器（loader）来处理。</p><p>比如一个用 Less 写的样式，可以先用 <code>less-loader</code> 将它转成一个 CSS 模块，然后再通过 <code>css-loader</code> 把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行，甚至还可以通过插件将这部分 CSS 导出为 CSS 文件，使用<code>link</code>标签引入到页面中。</p><h2 id="webpack-对-module-的增强" tabindex="-1"><a class="header-anchor" href="#webpack-对-module-的增强" aria-hidden="true">#</a> Webpack 对 Module 的增强</h2><p>在 Webpack 中，我们不仅可以为所欲为的使用 CommonJS 、AMD 和 ES6 Module 三大规范（比如一个文件中混合使用三种规范），还可以使用 Webpack 对 Module 的增强方法和属性。</p><p>下面介绍下 Webpack 中特有的一些属性和方法。</p><h3 id="import-和神奇注释" tabindex="-1"><a class="header-anchor" href="#import-和神奇注释" aria-hidden="true">#</a> <code>import()</code>和神奇注释</h3>`,21),P=s("code",null,"import",-1),T=s("code",null,"require",-1),R={href:"https://whatwg.github.io/loader/",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"import('path/to/module')",-1),B=s("code",null,"import()",-1),V=s("code",null,"Promise",-1),$=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;path/to/module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看看使用<code>import()</code>和 import 的打包有什么区别：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// lazy.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;lazy module&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">&#39;./hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./lazy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">lazy</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lazy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--mode</span> development：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20230902113134072"></p><p>通过打包后的 log 和<code>dist</code>文件夹内容发现，我们的代码被分割成了两个文件，一个是<code>main.js</code>一个是<code>0.js</code>，这是因为相对于<code>import from</code>的静态分析打包语法，<code>import()</code>是动态打包语法，即我们的内容不是第一时间打进<code>main.js</code>的，而是通过异步的方式加载进来的。</p><p><strong>代码分割是 webpack 进行代码结构组织，实现动态优化的一个重要功能</strong></p><blockquote><p>Tips：</p><p>与<code>import()</code>用法一样的是<code>require.ensure</code>的方法，这个方法已经被<code>import()</code>方式替换掉；</p><p>针对<code>import()</code>打包产物跟普通的静态分析打包的实现不同之处，后面原理篇讲解打包产出物的时候会详细介绍。</p></blockquote><p>下面我们再来看下<code>import()</code>的<strong>神奇注释</strong>特性，上面<code>index.js</code>的代码修改成下面这样，增加注释<code>webpackChunkName: &#39;lazy-name&#39;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">&#39;./hello&#39;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span>
  <span class="token comment">/* webpackChunkName: &#39;lazy-name&#39;*/</span>
  <span class="token string">&#39;./lazy&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lazy</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lazy<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则打包后的结果，<code>0.js</code>变成了<code>lazy-name.js</code>了，这个文件的名字就是在<code>import()</code>注释里面指定的<code>webpackChunkName</code>，这就是<strong>神奇注释（Magic Comments）</strong>。</p><p><img src="`+r+`" alt="image-20230902113145229"></p><p>目前支持的注释有：</p><ul><li><code>webpackInclude</code>：如果是 import 的一个目录，则可以指定需要引入的文件特性，例如只加载 json 文件：<code>/\\.json$/</code>；</li><li><code>webpackExclude</code>：如果是 import 的一个目录，则可以指定需要过滤的文件，例如 <code>/\\.noimport\\.json$/</code>；</li><li><code>webpackChunkName</code>：这是 chunk 文件的名称，例如 <code>lazy-name</code>；</li><li><code>webpackPrefetch</code>: 是否预取模块，及其优先级，可选值<code>true</code>、或者整数优先级别，0 相当于 true，webpack 4.6+支持；</li><li><code>webpackPreload</code>: 是否预加载模块，及其优先级，可选值<code>true</code>、或者整数优先级别，0 相当于 true，webpack 4.6+支持；</li><li><code>webpackMode</code>: 可选值<code>lazy</code>/<code>lazy-once</code>/<code>eager</code>/<code>weak</code>。</li></ul><p>这里最复杂的是<code>webpackMode</code>：</p><ul><li><code>lazy</code>：是默认的模式，为每个 <code>import()</code> 导入的模块，生成一个可延迟加载 chunk；</li><li><code>lazy-once</code>：生成一个可以满足所有 <code>import()</code> 调用的<strong>单个</strong>可延迟加载 chunk，此 chunk 将在第一次 import() 调用时获取，随后的 import() 调用将使用相同的网络响应；注意，这种模式仅在部分动态语句中有意义，例如 import(<code>./locales/\${language}.json</code>)，其中可能含有多个被请求的模块路径；</li><li><code>eager</code>：不会生成额外的 chunk，所有模块都被当前 chunk 引入，并且没有额外的网络请求。仍然会返回 Promise，但是是 resolved 状态。和静态导入相对比，在调用 <code>import()</code> 完成之前，该模块不会被执行。</li><li><code>weak</code>：尝试加载模块，如果该模块函数已经以其他方式加载（即，另一个 chunk 导入过此模块，或包含模块的脚本被加载）。仍然会返回 Promise，但是只有在客户端上已经有该 chunk 时才成功解析。如果该模块不可用，Promise 将会是 rejected 状态，并且网络请求永远不会执行。当需要的 chunks 始终在（嵌入在页面中的）初始请求中手动提供，而不是在应用程序导航在最初没有提供的模块导入的情况触发，这对于 Server 端渲染（SSR，Server-Side Render）是非常有用的。</li></ul><p>通过上面的神奇注释，<code>import()</code>不再是简单的 JavaScript 异步加载器，还是任意模块资源的加载器，</p><p>举例说明：如果我们页面用到的图片都放在<code>src/assets/img</code>文件夹下，你们可以通过下面方式将用到的图片打包到一起：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span>
  <span class="token comment">/* webpackChunkName: &quot;image&quot;, webpackInclude: /\\.(png|jpg|gif)/ */</span> <span class="token string">&#39;./assets/img&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：prefetch 优先级低于 preload，</p><p>preload 会并行或者加载完主文件之后立即加载；</p><p>prefetch 则会在主文件之后、空闲时在加载。</p><p>prefetch 和 preload 可以用于提前加载图片、样式等资源的功能。</p></blockquote><h3 id="require-resolve-和-require-resolveweak" tabindex="-1"><a class="header-anchor" href="#require-resolve-和-require-resolveweak" aria-hidden="true">#</a> <code>require.resolve()</code> 和 <code>require.resolveWeak()</code></h3><p><code>require.resolve()</code> 和 <code>require.resolveWeak()</code>都可以获取模块的唯一 ID（moduleId），</p><p>区别在于<code>require.resolve()</code>会把模块真实引入进 bundle，而<code>require.resolveWeak()</code>则不会，</p><p>配合<code>require.cache</code>和 <code>__webpack_modules__</code>可以用于判断模块是否加载成功或者是否可用。</p><h3 id="require-context" tabindex="-1"><a class="header-anchor" href="#require-context" aria-hidden="true">#</a> <code>require.context()</code></h3><p><code>require.context(directory, includeSubdirs, filter)</code>可以批量将<code>directory</code>内的文件全部引入进文件，并且返回一个具有<code>resolve</code>的 context 对象，使用<code>context.resolve(moduleId)</code>则返回对应的模块。</p><ul><li><code>directory</code>：目录 <code>string</code></li><li><code>includeSubdirs</code>：是否包含子目录，可选，默认值是 <code>true</code></li><li><code>filter</code>：过滤正则规则，可选项</li></ul><blockquote><p>Tips：注意 <code>require.context()</code> 会将所有的文件都引入进 <code>bundle</code></p></blockquote><h3 id="require-include" tabindex="-1"><a class="header-anchor" href="#require-include" aria-hidden="true">#</a> <code>require.include()</code></h3><p><code>require.include(dependency)</code>顾名思义为引入某个依赖，但是并不执行它，可以用于优化 chunk，例如下面示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>require<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&#39;./hello.js&#39;</span><span class="token punctuation">)</span>
require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./hello.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./weak.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./hello.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./lazy.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码打包之后结果：</p><p><img src="`+u+'" alt="image-20230902113155948"></p><ul><li>main 包含了 hello 和 index；</li><li>weak 和 lazy 分别被打包到 1，0 两个文件。</li></ul><p>这实际上使用了<code>require.include()</code>直接优化了代码分割，如果不用<code>require.include(&#39;./hello.js&#39;);</code>则<code>hello.js</code>会分别和<code>weak</code>、<code>lazy</code>打包，</p><p>注意下面打包 log 的<code>[./src/hello.js] 24 bytes {0} {1} [built]</code> 说明<code>hello.js</code>被打包进了 0，1 两个文件。</p><p><img src="'+k+`" alt="image-20230902113204908"></p><h3 id="resourcequery" tabindex="-1"><a class="header-anchor" href="#resourcequery" aria-hidden="true">#</a> <code>__resourceQuery</code></h3><p>当前模块的资源查询（resource query），即当前模块引入时传入的 query 信息，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./component-loader?commponent=demo&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// component-loader.js</span>
<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>__resourceQuery<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 去掉?</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token comment">// {component: demo}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li><p><strong>webpack_public_path</strong>：等同于 <code>output.publicPath</code> 配置选项；</p></li><li><p><strong>webpack_require</strong>：原始 <code>require</code> 函数。这个表达式不会被解析器解析为依赖。</p></li><li><p>webpack_chunk_load ：内部<code>chunk</code>载入函数，用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">__webpack_chunk_load__</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>chunkId ：需要载入的 chunk id</li><li>callback(require)： chunk 载入后调用的回调函数。</li></ul></li><li><p><strong>webpack_modules</strong>：所有模块的内部对象，可以通过传入 moduleId 来获取对应的模块；<code>require.resolve()</code> 和 <code>require.resolveWeak()</code>获取<code>moduleId</code>；</p></li><li><p><code>module.hot</code>：用于判断是否在 <code>hotModuleReplace</code> 模式下，一般可以用于 loader 编写中判断在 HMR 模式下增加 reload 逻辑代码等；</p></li><li><p><strong>webpack_hash</strong>：这个变量只有在启用 <code>HotModuleReplacementPlugin</code> 或者 <code>ExtendedAPIPlugin</code> 时才生效。这个变量提供对编译过程中(compilation)的 hash 信息的获取。</p></li><li><p><strong>non_webpack_require</strong>：生成一个不会被 webpack 解析的 <code>require</code> 函数</p></li></ul><h3 id="webpack-对-node-js-模块的-polyfill" tabindex="-1"><a class="header-anchor" href="#webpack-对-node-js-模块的-polyfill" aria-hidden="true">#</a> Webpack 对 Node.js 模块的 polyfill</h3><p>Webpack 还对一些常用的 Node.js 模块和属性进行了 mock，</p>`,45),Q=s("code",null,"querystring",-1),U={href:"https://github.com/webpack/node-libs-browser",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/webpack/node-libs-browser",target:"_blank",rel:"noopener noreferrer"},F=o(`<blockquote><p>polyfill：英文原意为一种用于衣物、床具等的聚酯填充材料，例如装修时候的腻子，作用是抹平坑坑洼洼的墙面；在 JavaScript 中表示一些可以抹平浏览器实现差异的代码，</p><p>比如某浏览器不支持 Promise，可以引入<code>es6-promise-polyfill</code>等库来解决。</p></blockquote><h2 id="webpack-对资源的模块化处理" tabindex="-1"><a class="header-anchor" href="#webpack-对资源的模块化处理" aria-hidden="true">#</a> Webpack 对资源的模块化处理</h2><p>下面在讲解下 Webpack 对其他资源的模块化处理方案。</p><h3 id="样式文件的-import-和-javascript-中的import" tabindex="-1"><a class="header-anchor" href="#样式文件的-import-和-javascript-中的import" aria-hidden="true">#</a> 样式文件的<code>@import</code> 和 JavaScript 中的<code>import</code></h3><p>在 Webpack 中的 css （包括其预处理语言，例如 Less、Sass）等，都可以在内部通过<code>@import</code>语法直接引入使用：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&#39;vars.less&#39;</span><span class="token punctuation">;</span></span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@bg-color</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了样式文件中的<code>@import</code>，在 JavaScript 文件中，还支持直接使用 ES6 Module 的<code>import</code>（包括 <code>require</code>）直接引入样式文件，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./style.css&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),G={href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},O=o(`<blockquote><p>Tips：后面讲解 CSS 样式配置的时候会更加详细的讲解 CSS Modules。</p></blockquote><h3 id="使用-loader-把资源作为模块引入" tabindex="-1"><a class="header-anchor" href="#使用-loader-把资源作为模块引入" aria-hidden="true">#</a> 使用 loader 把资源作为模块引入</h3><p>在 Webpack 中，除了 CSS 可以直接使用<code>import</code>语法引入，类似 HTML 和页面模板等，可以直接使用对应的 loader ，通过下面的语法来引入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-loader!./loader.html&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码得到<code>html</code>变量实际为引入的<code>loader.html</code>的 string 片段。</p>`,5),X={href:"https://www.npmjs.com/package/ejs-loader",target:"_blank",rel:"noopener noreferrer"},Y=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ejs!./file.ejs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; 得到 ejs 编译后的 render 函数</span>
<span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 传入 data，直接返回的是 html 片段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：原理篇将动手手写一个 <code>markdown-loader</code> ，更深入的了解其功能和原理实现。</p></blockquote><h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5><p>本小节从 JavaScript 的模块化发展史讲起，逐渐介绍了应用到服务端的 CommonJS 规范、浏览端的 AMD 规范和 ES6 Modules 规范。</p><p>在 Webpack 中一切皆模块，任何资源都可以被当做模块引入进来，不仅仅是 JavaScript 模块和 Node.js 的模块，甚至 CSS、Less、JavaScript 模板、图片等任何资源，只需要配合对应的 loader 就可以实现资源的引入。</p><p>本小节介绍的按需加载和神奇注释，在日常项目优化中经常使用。</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li><p>什么是 JavaScript 的模块化开发？有哪些可以遵循的规范？</p></li><li><p>在 js 文件中怎么调用 loader 来处理一个模块？</p></li><li><p>Webpack 中怎么获取一个模块引用另外一个模块是传入的 query？</p></li><li><p>怎么实现 Webpack 的按需加载？什么是神奇注释？</p></li></ol></blockquote>`,7),Z={href:"https://github.com/ksky521/webpack-tutorial",target:"_blank",rel:"noopener noreferrer"};function nn(sn,en){const e=t("ExternalLinkIcon");return p(),i("div",null,[v,s("p",null,[s("a",h,[n("CommonJS"),a(e)]),n(" 规范是 2009 年一名来自 Mozilla 团队的工程师 Kevin Dangoor 开始设计一个叫 ServerJS 的项目提出来的，随着 Node.js 的广泛应用，被广泛接受。")]),b,s("p",null,[n("在 "),g,n(" 中"),s("a",_,[n("实际代码"),a(e)]),n("会被处理成下面代码而被应用：")]),f,s("p",null,[n("后来随着 "),s("a",j,[n("Browserify"),a(e)]),n(" 和 "),y,n(" 等打包工具的崛起，通过处理的 "),w,n(" 前端代码也可以在浏览器中使用。")]),q,s("p",null,[s("a",S,[n("AMD 规范"),a(e)]),n("是在 "),x,n(" 规范之后推出的一个解决 web 页面动态异步加载 "),M,n(" 的规范，相对于 "),J,n(" 规范，它最大特点是"),C]),s("p",null,[W,n("最早是随着"),s("a",N,[n("RequireJS"),a(e)]),n("发展而提出来的，它最核心的是两个方法：")]),E,s("p",null,[z,n(" 提出来之后，也有很多变种的规范提出来，比如国内 "),s("a",D,[n("Sea.js"),a(e)]),n(" 的 "),s("a",A,[n("CMD"),a(e)]),n("，还有兼容 CommonJS 和 AMD 的 "),s("a",H,[n("UMD 规范"),a(e)]),n("（Universal Module Definition）。")]),I,s("p",null,[n("在 Webpack 中，"),P,n("不仅仅是 ES6 Module 的模块导入方式，还是一个类似"),T,n("的函数（其实这是 "),s("a",R,[n("ES2015 loader 规范"),a(e)]),n("的实现），我们可以通过"),L,n("的方式引入一个模块，"),B,n("返回的是一个"),V,n("对象：")]),$,s("p",null,[n("例如在 web 的 js 文件中可以直接引入 Node.js 的"),Q,n("模块，这个模块实际引入的是"),s("a",U,[n("node-libs-browser"),a(e)]),n("来对 Node.js 核心库 polyfill，")]),s("p",null,[n("详细在 web 页面中可以用的 Node.js 模块，可以参考"),s("a",K,[n("node-libs-browser"),a(e)]),n(" Readme 文件的表格。")]),F,s("p",null,[n("JavaScript 的这种语法其实是 "),s("a",G,[n("CSS Modules 语法"),a(e)]),n("，目前浏览器支持程度有限，但是在 Webpack 中，我们可以通过配置 loader 优先使用这种方式！")]),O,s("p",null,[n("除了 html，类似模板文件，还可以直接转换为对应的 render 函数，例如下面代码使用了"),s("a",X,[n("ejs-loader"),a(e)]),n("：")]),Y,s("p",null,[n("专栏代码已经整理好给大家共享出来："),s("a",Z,[n("https://github.com/ksky521/webpack-tutorial"),a(e)])])])}const on=c(m,[["render",nn],["__file","index-07.html.vue"]]);export{on as default};
