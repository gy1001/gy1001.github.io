import{_ as t,M as e,p as o,q as c,R as n,t as a,N as p,a1 as l}from"./framework-e8cb8151.js";const u="/assets/3a49c53ba1b44955862aea163cd11c9f~tplv-k3u1fbpfcp-watermark-7dc942e6.png",i="/assets/9fc49a55d1fc4a3c82e67aa898340298~tplv-k3u1fbpfcp-watermark-b39790d8.png",k="/assets/7861cb5149894ed3af4281f637105879~tplv-k3u1fbpfcp-watermark-81eab539.png",r={},d=l(`<h1 id="算法相关" tabindex="-1"><a class="header-anchor" href="#算法相关" aria-hidden="true">#</a> 算法相关</h1><h2 id="异步并发控制" tabindex="-1"><a class="header-anchor" href="#异步并发控制" aria-hidden="true">#</a> 异步并发控制</h2><h3 id="请实现以下函数" tabindex="-1"><a class="header-anchor" href="#请实现以下函数" aria-hidden="true">#</a> 请实现以下函数</h3><ol><li>可以批量请求数据，所有的 url 地址均在 urls 参数中，</li><li>同时，可以通过 max 参数控制请求的并发数</li><li>当所有请求结束之后，要执行 callback 回调函数</li><li>发请求的函数可以直接使用 fetch 即可</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;start-------&#39;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;end--------&#39;</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> n<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 限制并发数，items 是异步任务队列</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> limit<span class="token punctuation">,</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">currentItem</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> <span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    pool<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pool<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>
    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>clean<span class="token punctuation">,</span> clean<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;吃饭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;睡觉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;打游戏&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token string">&#39;学习算法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;学习vue和react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行代码，就可以看到控制台以此执行打印效果</p><h2 id="vue-中的最长递增子序列" tabindex="-1"><a class="header-anchor" href="#vue-中的最长递增子序列" aria-hidden="true">#</a> Vue 中的最长递增子序列</h2><p>给你一个整数数组<code>nums</code>,找出其中最长严格递增子序列的长度</p><p>示例：</p><blockquote><p>输入：nums = [10, 9, 2, 5, 3, 7, 101, 18]</p><p>输出：4</p><p>解释：最长递增子序列为[2, 3, 7, 101], 因此长度为 4</p></blockquote><h3 id="动态规划-o-n2" tabindex="-1"><a class="header-anchor" href="#动态规划-o-n2" aria-hidden="true">#</a> 动态规划：O(n²)</h3><p>定义: <code>de[i]</code>代表以<code>num[i]</code>为结尾的最长子序列的长度</p><p>思路</p><ol><li><p>双层遍历：对比<code>num[i]</code>和<code>num[i]</code>之前的数据</p></li><li><p>当<code>num[i] &gt; num[j]</code> 时，<code>num[i]</code>就可以拼接在<code>num[j]</code>后面，此时<code>num[i]</code>位置的上升子序列长度为<code>de[i] + 1</code></p></li><li><p>当<code>num[i] &lt; num[j]</code> 时,<code>num[i]</code> 和 <code>num[j]</code> 无法构成上升子序列，跳过</p></li><li><p>计算出<code>de[i]</code>中最大的值即为计算结果</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLis</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> leng<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>leng <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> leng
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> de<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>leng<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leng<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        de<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>de<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> de<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>de<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算过程如下</p><p><img src="`+u+`" alt="img"></p></li></ol><h3 id="贪心-二分查找-o-nlog" tabindex="-1"><a class="header-anchor" href="#贪心-二分查找-o-nlog" aria-hidden="true">#</a> 贪心 + 二分查找：O(nLog)</h3><p>要使上升子序列的长度尽可能的长，就要使序列上升的速度尽可能的慢， 因此需要让序列内末尾数字尽可能的小</p><p>我们可以维护一个<code>result</code>数组，用来存放单调递增序列结果，然后依次遍历<code>nums</code>数组</p><ul><li>如果<code>nums[i] &gt; result[len - 1]</code>，则直接插入到<code>result</code>末尾</li><li>否则，在<code>result</code>数组中通过<code>二分查找</code>的方式，找到第一个比<code>nums[i]</code>大的值<code>result[j]</code>，并更新<code>result[j] = nums[i]</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLis</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token comment">// 最大长度</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> result<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果当前值，大于末尾的值，则直接进栈</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      len<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        right <span class="token operator">=</span> len
      <span class="token comment">// 二分查找序列内第一个大于 nums[i] 的值</span>
      <span class="token comment">// 如果 中间值 小于 nums[i], 说明要往右边那一半中查找，否则就是左边那一半，直到 left 变量 大于等于 right 变量</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          right <span class="token operator">=</span> middle
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 替换掉第一个大于 nums[i] 的值为 nums[i]</span>
      result<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算过程如下</p><p><img src="`+i+`" alt="img"></p><blockquote><p>注意: 这个方案中的<code>result</code>得到的长度是正确的，但是顺序不一定是正确结果需要的顺序，比如<code>[10,9,2,5,3,7,1,18]</code>得到的 <code>result数组</code>是<code>[1,3,7,18]</code></p></blockquote><p>这是为什么呢？</p><p>要想得到最长上升子序列的正确长度，首先必须保证<code>result</code>内存放的数值增速尽可能稳和慢，所以要使用增长空间大、有潜力的值来组合</p><p>比如<code>1,50,5,...</code>当我们遍历到<code>50</code>的时候，并不知道后面是否还有值，此时先将数据放入栈中存起来是明智的，继续往后遍历遇到了<code>5</code>，显然选用<code>1,5</code>要更让人放心也更有潜力，因为后面的数再往栈内存放的几率更大，即使后面没有更多值了，那么选用<code>1,5</code>还是<code>1,50</code>其实最后长度都是一样的</p><p>那么如果使用了更小的值，已经在栈内的值应该如何处理呢？比如我们栈中存放了<code>1,3,9,10</code>，再往后遍历的时候遇到了<code>5</code>，显然<code>5</code>比<code>9,10</code>都更有潜力，如果将栈直变为<code>1,3,5</code>又不太可能，因为如果后面没有更多值了，长度由<code>4</code>变为<code>3</code>,结果显然是错误的；但是如果不去管<code>5</code>的话，后面再碰到<code>6,7,8</code>那不就嗝屁了；</p><p>所以我们可以考虑既不能放弃有潜力的值，也不能错失正确的长度结果，因此我们不妨鱼和熊掌都兼得一些，比如就第一个大于<code>5</code>的值<code>9</code>替换掉，变为<code>1,3,5,10</code>,这样在放弃栈内容顺序正确的情况下保证了栈长度的正确性，接下来，再往后遍历会遇到三种情况</p><ul><li>后面没有更多值了，此时结果长度为 4，是没有问题的，</li><li>如果后面遇到<code>50</code>,则可以直接插入到栈中,变为<code>1,5,6,10,50</code>,长度为<code>5</code>也是没有问题的，因为我们并没有将最后的值替换掉，所以我们可以将栈想象成为<code>9</code>做了个替身<code>5</code>,真正的值还是替换前的<code>1,3,9,10</code></li><li>如果后面遇到了<code>6</code>，则按照一开始的规则，将<code>10</code>替换掉变为<code>1,3,5,6</code>,长度为<code>4</code>也是没有问题的 ，因为我们将最后的值都做了替换，所以此时替身<code>5</code>变为了真身，同事我们也发现，得到的栈中的值就是最后的最优解</li></ul><p>可以发现，在没有替换完栈中的值时，<code>栈</code>中被替换的值，起到的只是占位的效果，为后面遍历数字提供参照的作用</p><h3 id="最长上升子序列进阶-得到正确的序列" tabindex="-1"><a class="header-anchor" href="#最长上升子序列进阶-得到正确的序列" aria-hidden="true">#</a> 最长上升子序列进阶：得到正确的序列</h3><p>要得到真正的序列，首先要对上面的代码做一些改动</p><ul><li>将<code>result</code>修改为存储下标（最后回溯是会改成真正的值）；为下面的<code>chain</code>提供参考</li><li>增加<code>chain</code>,存放每一位在被加入到<code>result</code>时其对应的前一位的下标值，进行关系绑定</li><li>回溯<code>chain</code>,覆盖<code>result</code>的值。因为<code>result</code>内，<strong>最后一位一定是正确的</strong>，素以可以从后往前进行修正</li></ul><p>上面我们说过要对栈内某个值进行替换后，变动的值后面的所有的值如果没有变动的话，那么替换的值只是一个替身，无法作为最后结果进行输出，只有替换值后面的都变动过了，才会由替身变为真身。 那么在没有全部替换前，我们是需要有一种方法区保存原来顺序的</p><p>比如<code>3,5,7</code>,可以想象成<code>7-&gt;5-&gt;3</code>他们之间是强绑定的，<code>7</code>前面永远都是 5，<code>5</code>前面永远都是<code>3</code></p><ul><li>如果此时遇到了<code>4</code>,栈就会变为<code>3,4,7</code>,<code>5</code>虽然变为了<code>4</code>,但是<code>7-&gt;5-&gt;3</code>这个绑定关系是不会变的，</li><li>如果此时又遇到了<code>15</code>,栈就变成了<code>3,4,7,15</code>,则绑定和回溯关系就变成了<code>15-&gt;7--&gt;5-&gt;3</code></li></ul><p>那么什么时候<code>4</code>能生效呢？那就是<code>4</code>后面的值都被替换了，比如又遇到了<code>6</code>和<code>8</code>,则栈变为了<code>3,4,6,8</code>,绑定和回溯关系就变为了<code>8-&gt;6-&gt;4-&gt;3</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="img"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getOfLIS</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 由原来存储具体值改为存储下标</span>
  <span class="token keyword">let</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 通过下标存储映射关系</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      chain<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span> val<span class="token operator">:</span> i<span class="token punctuation">,</span> pre<span class="token operator">:</span> j <span class="token punctuation">}</span><span class="token punctuation">)</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        right <span class="token operator">=</span> result<span class="token punctuation">.</span>length
      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>result<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          right <span class="token operator">=</span> mid
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      chain<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">{</span> val<span class="token operator">:</span> i<span class="token punctuation">,</span> pre<span class="token operator">:</span> result<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      result<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> preIdx <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> result<span class="token punctuation">.</span>length
  <span class="token comment">// 从后往前进行回溯，修正覆盖result中的值，找到正确的顺序</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> lastObj <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preIdx<span class="token punctuation">)</span>
    result<span class="token punctuation">[</span><span class="token operator">--</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>lastObj<span class="token punctuation">.</span>val<span class="token punctuation">]</span>
    preIdx <span class="token operator">=</span> lastObj<span class="token punctuation">.</span>pre
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getOfLIS</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [2,3,4,18]</span>

<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getOfLIS</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [3,4,6,8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue3-dom-diff-算法" tabindex="-1"><a class="header-anchor" href="#vue3-dom-diff-算法" aria-hidden="true">#</a> vue3 DOM DIFF 算法</h3><p>vue3 中的 diff 和上面的思想其实是一样的，都是基于下标来绑定数字再被插入<code>result</code>内时和其前面的一个数字的关系。但是它看起来会更加难以理解，因为它是基于<code>数组(P)</code>来绑定回溯关系的，返回的是最长递增子序列的下标值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 复制一份数组</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 存放的是arr数组的索引，result数组将要存放的是递增的索引</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token comment">// 声明一些变量</span>
  <span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c
  <span class="token comment">// 获取当前数组的长度</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前要比较的值为arrI</span>
    <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 如果当前要比较的值不为0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// result数组中最大的值的索引</span>
      j <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token comment">// 如果当前值大于result中的最大值，那么就将当前值添加到result数组中，意思是递增序列长度增加1</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 因为result在这里马上会push进去一个值，当前位置存储的是还没push前的最后一位也就是push后的前一位的索引</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
        <span class="token comment">// 也就是当前值arrI 所在位置的前一位的索引</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token comment">// 这里直接退出当前循环 下方就不需要使用else块</span>
        <span class="token keyword">continue</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 开始二分</span>
      <span class="token comment">//左指针初始值为0</span>
      u <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token comment">// 右指针初始值为数组长度-1，也就是最大索引</span>
      v <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
      <span class="token comment">// 当左指针小于右指针时，才需要进入循环</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个位置是取中间值，Vue最初的代码是 ((u + v)/ 2) | 0 后来改成了 (u+v)&gt;&gt;1，</span>
        <span class="token comment">// 更好的方式是 u+ ((v-u) &gt;&gt; 1) 可以避免指针越界，不过在vue中节点的数量远达不到越界的情况可暂时忽略</span>
        c <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token comment">// 如果中间值的位置的值小于当前值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 那么就说明要找的值在中间值的右侧，因此左指针变为中间值+1</span>
          u <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 否则就是大于等于当前值</span>
          <span class="token comment">// 那么右指针变为中间值，再进行下一次循环</span>
          v <span class="token operator">=</span> c
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 最后输出的左指针的索引一定是非小于当前值的，有可能大于也有可能等于</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前值小于第一个非小于的值，那么就意味着这个值是大于的，排除了等于的情况。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果u === 0 说明当前值是最小的，不会有比它小的值，那么它前面不会有任何的值，只有u大于0时才需要存储它前面的值</span>
          <span class="token comment">// 当前位置因为result[u]马上就被arrI替换，所以result[u - 1]就是当前值存储位置的前一位，也就是比当前值小的那个值所在的位置</span>
          p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将第一个比当前值大的值替换为当前值，依次来让数组递增的更缓慢</span>
        result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 使用二分可以找到最长的长度但是无法判断最长的序列</span>
  <span class="token comment">// 开始回溯倒序找到最长的序列，因为p中当前位置存放的是上一个比当前值小的数所在的位置，所以使用倒序</span>
  <span class="token comment">// 获取递增数组的长度</span>
  u <span class="token operator">=</span> result<span class="token punctuation">.</span>length
  <span class="token comment">// 获取递增数组的最后一项也就是最大值的索引</span>
  v <span class="token operator">=</span> result<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token comment">// 当u的索引没有越界时一直循环</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 一开始result的最后一个值存放的索引一定是最大值</span>
    result<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v
    <span class="token comment">// 根据当前值就是该序列中最大的部分来查找是谁跳动这个位置的，依次往前查</span>
    v <span class="token operator">=</span> p<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 最后输出结果数组，此数组中存放的就是最大递增子序列的索引值</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自我模仿所写-最长子序列" tabindex="-1"><a class="header-anchor" href="#自我模仿所写-最长子序列" aria-hidden="true">#</a> 自我模仿所写(最长子序列)</h2><blockquote><p>多增加了变量声明，源码中做了优化</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">getOfLIS</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果当前项大于结果的最后一项</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
        <span class="token comment">// 注意：这里因为先push,所以要取 result.length - 2 位</span>
        <span class="token comment">// 记录前一位索引，便于回溯使用</span>
        p<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          right <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> middle
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 记录前一位索引，便于回溯使用</span>
          result<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> index
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> resultLength <span class="token operator">=</span> result<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> lastResultItem <span class="token operator">=</span> result<span class="token punctuation">[</span>resultLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>resultLength<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>resultLength<span class="token punctuation">]</span> <span class="token operator">=</span> lastResultItem
      lastResultItem <span class="token operator">=</span> p<span class="token punctuation">[</span>lastResultItem<span class="token punctuation">]</span>
      newArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>resultLength<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;对应的最长子序列是&#39;</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getOfLIS</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [0, 3, 5, 6]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h3>`,46),m={href:"https://juejin.cn/post/7134499769803603999#heading-3",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7198506378432184377",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const s=e("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[n("a",m,[a("最长递增子序列及 vue3.0 中 diff 算法"),p(s)])]),n("p",null,[n("a",v,[a("一文揭秘 Vue3 中你不知道的最长递增子序列（逐行分析）"),p(s)])])])}const w=t(r,[["render",b],["__file","01.html.vue"]]);export{w as default};
