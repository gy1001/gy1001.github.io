import{_ as p,M as c,p as o,q as l,R as n,t as s,N as e,a1 as t}from"./framework-e8cb8151.js";const i="/assets/5f3346c2000182ce06400426-d033e4e6.jpg",r={},d=t('<h1 id="_12-docker-隔离的本质namespac" tabindex="-1"><a class="header-anchor" href="#_12-docker-隔离的本质namespac" aria-hidden="true">#</a> 12-Docker 隔离的本质namespac</h1><p><img src="'+i+`" alt="img"></p><blockquote><p>人的一生可能燃烧也可能腐朽，我不能腐朽，我愿意燃烧起来！——奥斯特洛夫斯基</p></blockquote><p>我们知道 Docker 或者说容器技术的一个核心优势就是资源隔离性，那么这篇文章我们就来看一下资源隔离技术的内核支持，也就是 namespace 技术。</p><h2 id="_1-namespace-简介" tabindex="-1"><a class="header-anchor" href="#_1-namespace-简介" aria-hidden="true">#</a> 1. namespace 简介</h2><p>namespace 的中文一般翻译成命名空间，我们也可以将 linux 的 namespace 理解成一系列的资源的抽象的集合。每个进程都有一个 namespace 属性，进程的 namespace 可以相同。对于同属于一个 namespace 中进程，可以感知到彼此的存在和变化，而对外界的进程一无所知，而这正是 docker 所需要的。</p><p>关于 namespace 的更多技术，我们可以通过 linux 自带的 manpage 查看，链接在文末的参考链接里面。</p><h2 id="_2-namespace-种类" tabindex="-1"><a class="header-anchor" href="#_2-namespace-种类" aria-hidden="true">#</a> 2. namespace 种类</h2><p>Linux 内核中提供了 6 中隔离支持，分别是：IPC 隔离、网络隔离、挂载点隔离、进程编号隔离、用户和用户组隔离、主机名和域名隔离。</p><table><thead><tr><th style="text-align:left;">Namespace</th><th style="text-align:left;">flag</th><th style="text-align:left;">隔离内容</th></tr></thead><tbody><tr><td style="text-align:left;">IPC</td><td style="text-align:left;">CLONE_NEWIPC</td><td style="text-align:left;">IPC（信号量、消息队列和共享内存等）隔离</td></tr><tr><td style="text-align:left;">Network</td><td style="text-align:left;">CLONE_NEWNET</td><td style="text-align:left;">网络隔离（网络栈、端口等）</td></tr><tr><td style="text-align:left;">Mount</td><td style="text-align:left;">CLONE_NEWNS</td><td style="text-align:left;">挂载点（文件系统）</td></tr><tr><td style="text-align:left;">PID</td><td style="text-align:left;">CLONE_NEWPID</td><td style="text-align:left;">进程编号</td></tr><tr><td style="text-align:left;">User</td><td style="text-align:left;">CLONE_NEWUSER</td><td style="text-align:left;">用户和用户组</td></tr><tr><td style="text-align:left;">UTS</td><td style="text-align:left;">CLONE_NEWUTS</td><td style="text-align:left;">主机名和域名</td></tr></tbody></table><p>每个进程都有一个 namespace，在 <code>/proc/&lt;pid&gt;/ns</code> 下面，下面是一个示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ns<span class="token punctuation">]</span><span class="token comment"># ls -al</span>
total <span class="token number">0</span>
dr-x--x--x <span class="token number">2</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 <span class="token builtin class-name">.</span>
dr-xr-xr-x <span class="token number">9</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">15</span>:50 <span class="token punctuation">..</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 ipc -<span class="token operator">&gt;</span> ipc:<span class="token punctuation">[</span><span class="token number">4026531839</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 mnt -<span class="token operator">&gt;</span> mnt:<span class="token punctuation">[</span><span class="token number">4026531840</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 net -<span class="token operator">&gt;</span> net:<span class="token punctuation">[</span><span class="token number">4026531956</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 pid -<span class="token operator">&gt;</span> pid:<span class="token punctuation">[</span><span class="token number">4026531836</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 user -<span class="token operator">&gt;</span> user:<span class="token punctuation">[</span><span class="token number">4026531837</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Nov  <span class="token number">3</span> <span class="token number">16</span>:16 uts -<span class="token operator">&gt;</span> uts:<span class="token punctuation">[</span><span class="token number">4026531838</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上图，我们可以看到 ns 目录下共有 6 个 link 文件，分别为 ipc, mnt, net, pid, user, uts，分别对应了我们上面提到的 6 中隔离技术。对于我们直接运行宿主机上并且没有做资源隔离的进程，这 6 个 link 文件指向的目标文件也都是一致的。而对于 docker 进程，ns 目录下的 link 文件和宿主机上的 link 文件是不一样的，也就是说他们属于不同的 namespace 空间。</p><h2 id="_3-namespace-api" tabindex="-1"><a class="header-anchor" href="#_3-namespace-api" aria-hidden="true">#</a> 3. namespace api</h2><p>我们可以通过 Linux 系统提供的系统调用来管中窥豹看一下 namespace 技术的使用细节。系统调用包括：</p><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h3><p>clone 会创建一个新的进程，函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>child_stack<span class="token punctuation">,</span>
          <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
          <span class="token comment">/* pid_t *ptid, void *newtls, pid_t *ctid */</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个形参的意思分别是：</p><ul><li><em><strong>fn</strong></em>：新的进程执行的函数；</li><li><em><strong>child_stack</strong></em>：新的进程的栈空间；</li><li><em><strong>flags</strong></em>：表示使用哪些 CLONE_* 标志位，与 namespace 相关的参数主要包括 CLONE_NEWIPC、CLONE_NEWNS、CLONE_NEWNET、CLONE_NEWPID、CLONE_NEWUSERS和CLONE_NEWUTS，分别对应不同的 namespace。</li></ul><h3 id="setns" tabindex="-1"><a class="header-anchor" href="#setns" aria-hidden="true">#</a> setns</h3><p><em><strong>setns()</strong></em> 的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span>             <span class="token comment">/* See feature_test_macros(7) */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">setns</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> nstype<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过系统调用 <em><strong>setns()</strong></em> 加入到一个已经存成在 namespace 中。这个 api 的一个实际使用例子就是我们执行 <code>docker exec</code> 命令进入到容器内部：在终端执行命令 <code>docker exec</code> 相当于 fork 一个子进程，然后将该进程加入到我们参数指定 docker 进程中，这样我们就得到了和 docker 进程内部一样的隔离视图了。</p><h3 id="unshare" tabindex="-1"><a class="header-anchor" href="#unshare" aria-hidden="true">#</a> unshare</h3><p><em><strong>unshare()</strong></em> 的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">unshare</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>unshare</strong></em> 相当于对当前进程进行隔离，我们不需要启动一个新的进程就可以启动隔离的效果。Linux 的 unshare 命令就是基于这个 api 来实现的。这里暂时就不做展开了。</p><h3 id="ioctl" tabindex="-1"><a class="header-anchor" href="#ioctl" aria-hidden="true">#</a> ioctl</h3><p><em><strong>ioctl()</strong></em> 的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),u={href:"http://man7.org/linux/man-pages/man2/ioctl_ns.2.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_4-namespace-代码示例" tabindex="-1"><a class="header-anchor" href="#_4-namespace-代码示例" aria-hidden="true">#</a> 4. namespace 代码示例</h2><p>下面我们通过几个代码 demo，来更深入地理解一下 namespace 技术。首先我们通过 clone 系统调用来创建一个进程隔离的子进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 子进程的函数主题</span>
<span class="token keyword">int</span> <span class="token function">child_fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// system 函数可以让我们的程序执行 shell 命令</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;mount -t proc proc /proc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ps aux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child pid: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 子进程的栈空间大小</span>
    <span class="token keyword">int</span> CHILD_STACK_SIZE <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
   
   <span class="token comment">//子进程的栈空间</span>
    <span class="token keyword">char</span> child_stack<span class="token punctuation">[</span>CHILD_STACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
   <span class="token comment">// 创建子进程：</span>
   <span class="token comment">// 1. child_fn 表示子进程的主题是函数 child_fn()</span>
   <span class="token comment">// 2. child_stack + CHILD_STACK_SIZE 表示子进程的栈空间，其实就是局部变量 child_stack</span>
   <span class="token comment">// 3. CLONE_NEWPID 表示子进程使用新的 PID namespace；SIGCHLD 表示接收信号</span>
    <span class="token keyword">int</span> child_pid <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>child_fn<span class="token punctuation">,</span> child_stack <span class="token operator">+</span> CHILD_STACK_SIZE<span class="token punctuation">,</span> CLONE_NEWPID <span class="token operator">|</span> SIGCHLD<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// waitpid 表示父进程等待子进程退出。如果不加这行代码，父进程将会直接退出，子进程就变成了孤儿进程</span>
    <span class="token function">waitpid</span><span class="token punctuation">(</span>child_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序中 child_fn 就是我们子进程运行的函数实体。在子进程中我们先执行了 /proc 挂载，这么做的原因是 ps 命令是查看的 /proc 目录，如果我们创建了子进程之后而没有挂载 /proc ，那么看到的还是原来的进程列表。这里我们先进行 /proc 目录挂载，然后执行 ps ，执行结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># gcc clone_pid.c</span>
<span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># ./a.out</span>
<span class="token environment constant">USER</span>       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         <span class="token number">1</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">5068</span>    <span class="token number">92</span> pts/2    S+   <span class="token number">17</span>:13   <span class="token number">0</span>:00 ./a.out
root         <span class="token number">3</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">151064</span>  <span class="token number">1792</span> pts/2    R+   <span class="token number">17</span>:13   <span class="token number">0</span>:00 <span class="token function">ps</span> aux
child pid: <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到在进行了进程隔离的子进程空间中一号进程就是我们的子进程，并且看不到其他进程。</p><p>大家可以参考我上面的代码示例，进行其他的 namespace 相关操作。</p><h2 id="_5-参考" tabindex="-1"><a class="header-anchor" href="#_5-参考" aria-hidden="true">#</a> 5. 参考</h2>`,8),m={href:"http://man7.org/linux/man-pages/man7/namespaces.7.html",target:"_blank",rel:"noopener noreferrer"};function v(b,h){const a=c("ExternalLinkIcon");return o(),l("div",null,[d,n("p",null,[s("其中 fd 是文件描述符，当 fd 指向 ns 文件的时候，我们就可以通过 ioctl 去获取一些 namespace 信息。这个系统调用 Docker 中也没有使用，所以这里限于篇幅，不再展开。感兴趣的同学可以参考这条 manpage："),n("a",u,[s("ioctl_ns"),e(a)]),s("。")]),k,n("ol",null,[n("li",null,[n("a",m,[s("namespace man-page"),e(a)])])])])}const x=p(r,[["render",v],["__file","index-12.html.vue"]]);export{x as default};
