import{_ as t,M as l,p as i,q as c,R as e,t as s,N as p,a1 as a}from"./framework-e8cb8151.js";const o="/assets/5f3f2ebb0001e57006400391-33a93979.jpg",r={},d=a('<h1 id="_31-资源隔离namespace-剖析" tabindex="-1"><a class="header-anchor" href="#_31-资源隔离namespace-剖析" aria-hidden="true">#</a> 31-资源隔离Namespace 剖析</h1><p><img src="'+o+`" alt="img"></p><blockquote><p>读一本好书，就是和许多高尚的人谈话。——歌德</p></blockquote><p>在介绍 namespace 之前先举个大数据的例子，很多大公司为了管理方便都有一个规模非常大的集群，可能有几千上万台机器。同时在公司内部又存在不同的部门，不同的业务，为了区分开各个部门的集群使用情况，同时也为了避免业务之间互相影响，一般都会将集群资源划分出多个资源队列，不同的业务使用不同的资源队列。</p><p>类似的，Kubernetes 集群里面也有一个类似资源队列的角色，叫 namespace。在生产实践中我们可以为不同的部门设置不同的 namespace，另外 namespace 支持资源限制，我们可以按需为不同的部门设置不同的资源限制。</p><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>正如前面所说，namespace 适用于跨团队、跨项目的多用户使用场景。如果 Kubernetes 集群的使用者很少，那么不需要考虑 namespace。</p><p>Namespace 为资源提供了一个界限，同一个 namespace 内的资源必须保证名字唯一，不同 namespace 内的资源可以名字相同。这里的资源包括 Pod，Deployment，Service 等。namespace 不支持嵌套结构，即一个 namespace 下包含子 namespace。这里值得注意的是：命名空间资源本身不受限于一个 namespace 内，像一些底层资源，比如 nodes 和持久化卷也不属于任何 namespace。</p><p>Namespace 可以通过 resource quota 设置资源配额，这样我们就可以为不同用户群体划分资源了。</p><p>在 Kubernetes 的未来版本，同一个 namespace 下的对象都将使用相同的访问控制。</p><p>值得注意的是，不要滥用 namespace，比如不要因为资源存在微小的差异（比如版本不同），就将这些资源划分的不同的 namespace。对于这种情况，可以使用 label 去区分。</p><h2 id="_2-namespace-使用" tabindex="-1"><a class="header-anchor" href="#_2-namespace-使用" aria-hidden="true">#</a> 2. Namespace 使用</h2><h4 id="查看-namespace" tabindex="-1"><a class="header-anchor" href="#查看-namespace" aria-hidden="true">#</a> 查看 namespace</h4><p>和其他 kubernetes 的资源一样，我们可以通过命令 <code>kubectl get namespace</code> 或者 <code>kubectl get ns</code> 来获取集群中的 namespace 情况，下面是我的 kubernetes 集群中的 namespace 情况。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ kubectl get namespace
NAME              STATUS   AGE
default           Active   148d
imooc             Active   57m
kube-node-lease   Active   148d
kube-public       Active   148d
kube-system       Active   148d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这其中有三个资源是由 kubernetes 自动创建的：</p><ul><li><em><strong>default</strong></em>：创建对象时没有指定特定 namespace 的对象都会被置于 <em><strong>default</strong></em> namespace 下。</li><li><em><strong>kube-system</strong></em>：Kubernetes 系统创建对象所使用的命名空间，比如 kube-proxy、kube-scheduler 等。</li><li><em><strong>kube-public</strong></em>：这个命名空间是自动创建的，所有用户（包括未经过身份验证的用户）都可以读取它。这个命名空间主要用于集群使用，以防某些资源在整个集群中应该是可见和可读的。这个命名空间的公共方面只是一种约定，而不是要求。</li></ul><h4 id="为请求设置-namespace" tabindex="-1"><a class="header-anchor" href="#为请求设置-namespace" aria-hidden="true">#</a> 为请求设置 namespace</h4><p>这里说的请求，包括创建、获取、删除特定的资源对象等，可以通过 <code>--namespace=&lt;namespace name&gt;</code> 或者 <code>-n &lt;namespace name&gt;</code> 来指定特定的 namespace。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>insert-namespace-name-here<span class="token operator">&gt;</span>
kubectl get pods <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>insert-namespace-name-here<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置-namespace-首选项" tabindex="-1"><a class="header-anchor" href="#设置-namespace-首选项" aria-hidden="true">#</a> 设置 namespace 首选项</h4><p>如果觉得每个 kubectl 命令后面都添加 <code>--namespace</code> 参数过于繁琐，则可以通弄过 <code>kubectl config</code> 为当前 session 设置 namespace 参数，则之后的 kubectl 命令都将使用这个特定的 namespace。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config set-context <span class="token parameter variable">--current</span> <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>insert-namespace-name-here<span class="token operator">&gt;</span>
<span class="token comment"># Validate it</span>
kubectl config view <span class="token operator">|</span> <span class="token function">grep</span> namespace:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="namespace-和-dns" tabindex="-1"><a class="header-anchor" href="#namespace-和-dns" aria-hidden="true">#</a> Namespace 和 DNS</h4><p>当我们创建一个 Service 对象时，Kubernetes 为了在集群内部可以访问到该 Service 对象的域名，会自动创建一个 DNS 条目，形式为 <code>&lt;service-name&gt;.&lt;namespace-name&gt;.svc.cluster.local</code> ，也就是说如果容器只使用 <code>&lt;service-name&gt;</code>，它将被解析到本地命名空间的服务。这对于跨多个命名空间（如开发、分级和生产）使用相同的配置非常有用。如果您希望跨命名空间访问，则需要使用完全限定域名（FQDN）。</p><h2 id="_3-为-namespace-设置资源配额" tabindex="-1"><a class="header-anchor" href="#_3-为-namespace-设置资源配额" aria-hidden="true">#</a> 3. 为 Namespace 设置资源配额</h2><p>Namespace 机制的一个目标就是通过 namespace 将集群资源划分给不同的业务方使用，这一小节我们就来看一下如何限制一个 namespace 的资源配额。</p><p>在 Kubernetes 中，资源配额是通过一个叫 <code>ResourceQuota</code> 的对象来定义的。通过 <code>ResourceQuota</code> 我们可以限制 namespace 中的对象数量，以及可以使用的计算资源总量。</p><p>Resource Quota 默认是支持的，如果发现你的 kubernetes 不支持的话，可以检查参数 <code>--enable-admission-plugins=</code> 的值里面有没有 <code>ResourceQuota</code>。</p><p>ResourceQuota 提供的资源配额支持包括：</p><h4 id="计算资源配置" tabindex="-1"><a class="header-anchor" href="#计算资源配置" aria-hidden="true">#</a> 计算资源配置</h4><table><thead><tr><th style="text-align:left;">Resource</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">limits.memory</td><td style="text-align:left;">所有非终结态的 Pod 的 memory limits 的和不能超过这个值</td></tr><tr><td style="text-align:left;">limits.cpu</td><td style="text-align:left;">所有非终结态的 Pod 的 cpu limits 的和不能超过这个值</td></tr><tr><td style="text-align:left;">requests.cpu</td><td style="text-align:left;">所有非终结态的 Pod 的 cpu requests 的和不能超过这个值</td></tr><tr><td style="text-align:left;">requests.memory</td><td style="text-align:left;">所有非终结态的 Pod 的 memory requests 的和不能超过这个值</td></tr></tbody></table><h4 id="存储资源配额" tabindex="-1"><a class="header-anchor" href="#存储资源配额" aria-hidden="true">#</a> 存储资源配额</h4><table><thead><tr><th style="text-align:left;">Resource</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">Requests.storage</td><td style="text-align:left;">所有 PVC 的存储请求总和不能超过这个值</td></tr><tr><td style="text-align:left;">persistentvolumeclaims</td><td style="text-align:left;">namespace 中的 pvc 数量</td></tr><tr><td style="text-align:left;"><code>&lt;storage-class-name&gt;</code>.storageclass.storage.k8s.io/requests.storage</td><td style="text-align:left;">指定 storage-calss-name 的所有 pvc 的存储请求的上限值</td></tr><tr><td style="text-align:left;"><code>&lt;storage-class-name&gt;</code>.storageclass.storage.k8s.io/persistentvolumeclaims</td><td style="text-align:left;">指定 storage-calss-name 的 pvc 数量</td></tr></tbody></table><h4 id="对象数量配额" tabindex="-1"><a class="header-anchor" href="#对象数量配额" aria-hidden="true">#</a> 对象数量配额</h4>`,35),u=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Description")])],-1),m=e("tr",null,[e("td",{style:{"text-align":"left"}},"congfigmaps"),e("td",{style:{"text-align":"left"}},"namespace 中可以存在的配置映射的总数。")],-1),v=e("tr",null,[e("td",{style:{"text-align":"left"}},"persistentvolumeclaims"),e("td",{style:{"text-align":"left"}},"namespace 中可以存在的PVC总数。")],-1),b=e("tr",null,[e("td",{style:{"text-align":"left"}},"pods"),e("td",{style:{"text-align":"left"}},[s("namespace 中可以存在的非终止态的pod总数。如果一个pod的"),e("code",null,"status.phase"),s(" 是 "),e("code",null,"Failed, Succeeded"),s(", 则该pod处于终止态。")])],-1),k=e("tr",null,[e("td",{style:{"text-align":"left"}},"replicationcontrollers"),e("td",{style:{"text-align":"left"}},[s("namespace 中可以存在的"),e("code",null,"rc"),s("总数。")])],-1),g=e("td",{style:{"text-align":"left"}},"resourcequotas",-1),h={style:{"text-align":"left"}},y={href:"https://kubernetes.io/docs/admin/admission-controllers/#resourcequota",target:"_blank",rel:"noopener noreferrer"},f=e("tr",null,[e("td",{style:{"text-align":"left"}},"services"),e("td",{style:{"text-align":"left"}},"namespace 中可以存在的服务总数量。")],-1),x=e("tr",null,[e("td",{style:{"text-align":"left"}},"services.loadbalancers"),e("td",{style:{"text-align":"left"}},"namespace 中可以存在的服务的负载均衡的总数量。")],-1),q=e("tr",null,[e("td",{style:{"text-align":"left"}},"services.nodeports"),e("td",{style:{"text-align":"left"}},"namespace 中可以存在的服务的主机接口的总数量。")],-1),_=e("tr",null,[e("td",{style:{"text-align":"left"}},"secrets"),e("td",{style:{"text-align":"left"}},[s("namespace 中可以存在的"),e("code",null,"secrets"),s("的总数量。")])],-1),R=a(`<p>我们下面来演示一下 Resource Quota 如何使用。首先定义个 resource quota 的资源文件，我们这里使用一个 <code>List</code> 对象，下面可以连接多个 <code>Resource Quota</code> 对象。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> List
<span class="token key atrule">items</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota
  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> quota
  <span class="token key atrule">spec</span><span class="token punctuation">:</span>
    <span class="token key atrule">hard</span><span class="token punctuation">:</span>
      <span class="token key atrule">configmaps</span><span class="token punctuation">:</span> <span class="token string">&quot;20&quot;</span>
      <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;4&quot;</span>
      <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 10Gi
      <span class="token key atrule">persistentvolumeclaims</span><span class="token punctuation">:</span> <span class="token string">&quot;10&quot;</span>
      <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token string">&quot;30&quot;</span>
      <span class="token key atrule">requests.storage</span><span class="token punctuation">:</span> 10Ti
      <span class="token key atrule">secrets</span><span class="token punctuation">:</span> <span class="token string">&quot;60&quot;</span>
      <span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token string">&quot;40&quot;</span>
      <span class="token key atrule">services.loadbalancers</span><span class="token punctuation">:</span> <span class="token string">&quot;50&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用 <code>kubectl apply</code> 将这个 <code>ResourceQuota</code> 对象应用到指定的 namespace 中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜ kubectl apply <span class="token parameter variable">-f</span> resourcequota.yaml <span class="token parameter variable">-n</span> imooc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后我们再通过 <code>kubectl describe</code> 看一下这个 namespace，可以看到其中的 Resource Quotas 部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  k8s kubectl describe ns imooc
Name:         imooc
Labels:       <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Annotations:  <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Status:       Active

Resource Quotas
 Name:                   <span class="token function">quota</span>
 Resource                Used   Hard
 --------                ---    ---
 configmaps              <span class="token number">0</span>      <span class="token number">20</span>
 limits.cpu              700m   <span class="token number">4</span>
 limits.memory           900Mi  10Gi
 persistentvolumeclaims  <span class="token number">0</span>      <span class="token number">10</span>
 pods                    <span class="token number">1</span>      <span class="token number">30</span>
 requests.storage        <span class="token number">0</span>      10Ti
 secrets                 <span class="token number">1</span>      <span class="token number">60</span>
 services                <span class="token number">0</span>      <span class="token number">40</span>
 services.loadbalancers  <span class="token number">0</span>      <span class="token number">50</span>

Resource Limits
 Type       Resource  Min   Max   Default Request  Default Limit  Max Limit/Request Ratio
 ----       --------  ---   ---   ---------------  -------------  -----------------------
 Container  memory    99Mi  1Gi   111Mi            900Mi          -
 Container  cpu       100m  800m  110m             700m           -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-为-namespace-设置资源限制" tabindex="-1"><a class="header-anchor" href="#_4-为-namespace-设置资源限制" aria-hidden="true">#</a> 4. 为 Namespace 设置资源限制</h2><p>在 Kubernetes 集群中，容器可以使用的资源默认没有上限。为了避免单个容器或者 Pod 用光 node 上的所有可用资源，Kubernetes 提供了一种可以给 namespace 设置资源限制的方式，叫 <code>LimitRange</code>。<code>LimitRange</code> 提供的限制包括：</p><ul><li>限制每个 Pod 或者容器可以使用的最少和最多计算资源</li><li>限制每个 PVC（PersistentVolumeClaim）可以使用的最少和最多存储</li><li>限制资源的 request 和 limit 比例</li><li>设置容器默认的 request/limit 的资源大小</li></ul><p>下面我们定一个一个 LimitRange 资源对象。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> limit<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>cpu<span class="token punctuation">-</span>per<span class="token punctuation">-</span>container
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">limits</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;800m&quot;</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;1Gi&quot;</span>
    <span class="token key atrule">min</span><span class="token punctuation">:</span>
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;100m&quot;</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;99Mi&quot;</span>
    <span class="token key atrule">default</span><span class="token punctuation">:</span>
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;700m&quot;</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;900Mi&quot;</span>
    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>
      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;110m&quot;</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;111Mi&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将这个 LimitRange 对象应用到其中一个 namespace 中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  kubectl apply <span class="token parameter variable">-f</span> limitrange.yaml <span class="token parameter variable">-n</span> imooc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们通过 <code>kubectl describe</code> 查看一下 <em><strong>imooc</strong></em> 这个 namespace 的一些描述信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  k8s kubectl describe namespace imooc
Name:         imooc
Labels:       <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Annotations:  <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>
Status:       Active

No resource quota.

Resource Limits
 Type       Resource  Min   Max   Default Request  Default Limit  Max Limit/Request Ratio
 ----       --------  ---   ---   ---------------  -------------  -----------------------
 Container  cpu       100m  800m  110m             700m           -
 Container  memory    99Mi  1Gi   111Mi            900Mi          -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将 namespace 的描述信息和 LimitRange 资源对象联合起来一起看，可以得出一些结论：</p><ul><li><em><strong>spec.limits.type</strong></em> 表示限制资源的类型，可以是 Container 或者 Pod</li><li><em><strong>spec.limits.max</strong></em> 表示计算资源限制的最大值，可以包含 cpu 或者 memory</li><li><em><strong>spec.limits.min</strong></em> 表示计算资源限制的最小值，可以包含 cpu 或者 memory</li><li><em><strong>spec.limit.defaultRequest</strong></em> 表示计算资源的默认 request 值，可以包含 cpu 或者 memomry</li><li><em><strong>spec.limit.default</strong></em> 表示计算资源的默认 limit 值，可以包含 cpu 或者 memory</li></ul><p>为了更直观的感受 LimitRange 的作用，我们创建一个 Pod 看看（这里仅仅为了演示，生产实践中基本不用直接创建 Pod 对象）。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;echo Hello Kubernetes! &amp;&amp; sleep 3600&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是通过 <code>kubectl apply</code> 这种声明式的 API 来创建。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> busybox.pod.simple.yaml <span class="token parameter variable">-n</span> imooc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后通过 <code>kubectl describe</code> 来查看 Pod 的资源情况，如下图所示，计算资源确实设置成 LimitRange 中预设的值了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  k8s kubectl describe pods myapp-pod <span class="token parameter variable">-n</span> imooc
Name:         myapp-pod
Namespace:    imooc
Priority:     <span class="token number">0</span>
<span class="token punctuation">..</span>.
Containers:
  myapp-container:
    <span class="token punctuation">..</span>.
    Limits:
      cpu:     700m
      memory:  900Mi
    Requests:
      cpu:        110m
      memory:     111Mi
    <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>这篇文章介绍了 Kubernetes 中对资源进行隔离的方案：namespace，并介绍了如何给 namespace 设置资源限制等操作。希望对大家生产实践会有用。</p>`,25);function N(L,M){const n=l("ExternalLinkIcon");return i(),c("div",null,[d,e("table",null,[u,e("tbody",null,[m,v,b,k,e("tr",null,[g,e("td",h,[s("namespace 中可以存在的资源配额（"),e("a",y,[s("resource quotas"),p(n)]),s("）总数。")])]),f,x,q,_])]),R])}const A=t(r,[["render",N],["__file","index-31.html.vue"]]);export{A as default};
