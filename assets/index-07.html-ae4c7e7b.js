import{_ as n,p as s,q as a,a1 as t}from"./framework-e8cb8151.js";const p={},e=t(`<h1 id="_07-express-项目代码改良" tabindex="-1"><a class="header-anchor" href="#_07-express-项目代码改良" aria-hidden="true">#</a> 07-Express 项目代码改良</h1><blockquote><p>这里我们修改的是之前爬虫项目: 03-demo</p></blockquote><h2 id="_01-创建控制器和装饰器" tabindex="-1"><a class="header-anchor" href="#_01-创建控制器和装饰器" aria-hidden="true">#</a> 01: 创建控制器和装饰器</h2><ol><li><p>因为要使用装饰器，所以修改<code>tsconfig.json</code>文件，如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装相关依赖库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> reflect-metadata <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建<code>03-demo/src/controller.LoginController.ts</code>,内容如下</p><blockquote><p>这里我们使用装饰器模式，来配置路由</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getResponseData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils/index&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;reflect-metadata&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> decoratorController<span class="token punctuation">,</span> get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./decorator&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">RequestWithBody</span> <span class="token keyword">extends</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
  body<span class="token operator">:</span> <span class="token punctuation">{</span>
    password<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span>
<span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token function">home</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isLogin <span class="token operator">=</span> req<span class="token punctuation">.</span>session <span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;html&gt;
        &lt;body&gt;
        &lt;a href=&quot;/getData&quot;&gt;开始抓取内容&lt;/a&gt;
        &lt;br /&gt;
        &lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;
        &lt;/body&gt;
      &lt;/html&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;html&gt;
      &lt;body&gt;
        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;
          &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;请输入密码&quot; /&gt;
          &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;
        &lt;/form&gt;
      &lt;/body&gt;
    &lt;/html&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello word&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token function">login</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">const</span> isLogin <span class="token operator">=</span> req<span class="token punctuation">.</span>session <span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;已经登录过了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">===</span> <span class="token string">&#39;123&#39;</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">=</span> <span class="token boolean">true</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;登录失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>03-demo/src/controller.decorator.ts</code>，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 类装饰器，统一从类的原型上拿到 path下的不同路由地址以及方法</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token comment">// 这里先注册 get 方法，后续再修改为其他方法(post、delete、put等)</span>
    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里我们处理 get 装饰器</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里需要设置为可枚举的，类装饰器中的遍历才会能够取得</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_02-通过装饰器实现项目路由功能" tabindex="-1"><a class="header-anchor" href="#_02-通过装饰器实现项目路由功能" aria-hidden="true">#</a> 02：通过装饰器实现项目路由功能</h2><blockquote><p>上一节中我们在 decorator.ts 文件中注册了路由配置以及方法，并进行了导出，但是 express 还没有使用</p></blockquote><ol><li><p>修改<code>src/index.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import router from &#39;./router&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./controller/LoginController&#39;</span> <span class="token comment">// 引入类控制器，触发装饰器</span>
<span class="token comment">// 引入新的路由，这里就注册了 / /login 两个 get  路由</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controller/decorator&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端命令<code>npm run start</code>,就可以在浏览器里<code>http://localhost:7001/login</code>和<code>http://localhost:7001/</code>看到相应的内容，跳转其他路由目前都会报错</p><p>​ <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2639064958934c0ca93ecdf673d0719c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b9396aecb634e069b4f952a0ca969b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e9d6339e98e434a9c9e05c3860f4182~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>修改<code>LoginController.ts</code>，引入<code>/logout</code>（因为它也是 <code>get</code>方式，且没有中间件）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span>
<span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/logout&#39;</span><span class="token punctuation">)</span>
  <span class="token function">logout</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样在浏览器里打开<code>http://localhost:7001/logout</code>就可以看到接口也是正常访问、返回</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c8147bb305d414781e609e33c03be08~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_03-多种请求方法装饰器的生成" tabindex="-1"><a class="header-anchor" href="#_03-多种请求方法装饰器的生成" aria-hidden="true">#</a> 03：多种请求方法装饰器的生成</h2><blockquote><p>现在我们只处理了 get 请求，并没有处理 post 处理</p></blockquote><ol><li><p>我们目前的<code>login</code>使用的是<code>get</code>请求，之前的路由用的是<code>post</code>请求，这里我们修改<code>login</code>为<code>post</code>请求</p></li><li><p>修改<code>src/LoginController.ts</code>，代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./decorator&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span>
<span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">post</span></span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token function">login</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着修改<code>src/decorator.ts</code>文件，这里要导出一个<code>post</code>方式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Methods <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../types/index&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// 取出来当前 method</span>
    <span class="token keyword">const</span> method<span class="token operator">:</span> Methods <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token comment">// 注册到路由中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> method <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里需要设置为可枚举的，类装饰器中的遍历才会能够取得</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// 这里增加设置一个属性 method,值为 get </span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// 这里增加设置一个属性 method,值为 post</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>src/types/index.ts</code>,内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> Methods <span class="token punctuation">{</span>
  get <span class="token operator">=</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  post <span class="token operator">=</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们对<code>src/decorator.ts</code>中为<code>get、post</code>方法等做一个优化处理，因为后续可能会有一个<code>put、delete</code>等方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/decorator.ts</span>
<span class="token keyword">function</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> Methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里需要设置为可枚举的，类装饰器中的遍历才会能够取得</span>
      descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> put <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>

<span class="token comment">// src/types/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">enum</span> Methods <span class="token punctuation">{</span>
  <span class="token constant">GET</span> <span class="token operator">=</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">POST</span> <span class="token operator">=</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">DELETE</span> <span class="token operator">=</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">PUT</span> <span class="token operator">=</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行<code>npm run start</code>,页面效果不变</p></li></ol><h2 id="_04-中间件装饰器的编写" tabindex="-1"><a class="header-anchor" href="#_04-中间件装饰器的编写" aria-hidden="true">#</a> 04：中间件装饰器的编写</h2><ol><li><p>新建<code>src/controller/CrowllerController.ts</code>，内容如下</p><blockquote><p>注意：我们这里使用了 中间件装饰器 useMiddleware、showData中的文件路径有所变动</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> NextFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>
<span class="token keyword">import</span> Analyzer <span class="token keyword">from</span> <span class="token string">&#39;../Analyzer&#39;</span>
<span class="token keyword">import</span> Crowller <span class="token keyword">from</span> <span class="token string">&#39;../crowller&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getResponseData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils/index&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> decoratorController<span class="token punctuation">,</span> useMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./decorator&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">RequestWithBody</span> <span class="token keyword">extends</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
  body<span class="token operator">:</span> <span class="token punctuation">{</span>
    password<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> next<span class="token operator">:</span> NextFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isLogin <span class="token operator">=</span> req<span class="token punctuation">.</span>session <span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;请先登录&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CroweController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/getData&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">useMiddleware</span></span><span class="token punctuation">(</span>checkLogin<span class="token punctuation">)</span>
  <span class="token function">getData</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sercret <span class="token operator">=</span> <span class="token string">&#39;serretKey&#39;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://www.dell-lee.com/typescript/demo.html?secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sercret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">const</span> analyzer <span class="token operator">=</span> Analyzer<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">Crowller</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">useMiddleware</span></span><span class="token punctuation">(</span>checkLogin<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/showData&#39;</span><span class="token punctuation">)</span>
  <span class="token function">showData</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里的路径有所变动</span>
      <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../data/course.json&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;还没有爬取到内容&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/controller/decorator.ts</code>,增加中间件修饰符<code>useMiddleware</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RequestHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> method<span class="token operator">:</span> Methods <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// 增加获取 middleware 中间件的方式</span>
    <span class="token keyword">const</span> middleware <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> method <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有中间件，就使用</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 中间件类型是一个函数，可以定义为 RequestHandler</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMiddleware</span><span class="token punctuation">(</span>middleware<span class="token operator">:</span> RequestHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/index.ts</code>,引入<code>CrowllerController.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 引入 CrowllerController.ts 需要在引入路由之前</span>
<span class="token keyword">import</span> <span class="token string">&#39;./controller/CrowellerController&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controller/decorator&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>终端运行<code>npm run start</code>，可以在浏览器里进行校验</p></li></ol><h2 id="_05-代码结构优化" tabindex="-1"><a class="header-anchor" href="#_05-代码结构优化" aria-hidden="true">#</a> 05：代码结构优化</h2><h3 id="目录结构优化" tabindex="-1"><a class="header-anchor" href="#目录结构优化" aria-hidden="true">#</a> 目录结构优化</h3><ol><li><p>新建<code>src/decorator</code>文件夹，内部结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">--src</span>
	<span class="token parameter variable">--decorator</span>
		<span class="token parameter variable">--controller.ts</span>
		<span class="token parameter variable">--index.ts</span>
		<span class="token parameter variable">--rquest.ts</span>
		<span class="token parameter variable">--use.ts</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内容分别如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// controller.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Methods <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../types/index&#39;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;../router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> method<span class="token operator">:</span> Methods <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> middleware <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> method <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./controller&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./request&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./use&#39;</span>

<span class="token comment">// request.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Methods <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../types/index&#39;</span>

<span class="token keyword">function</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>method<span class="token operator">:</span> Methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里需要设置为可枚举的，类装饰器中的遍历才会能够取得</span>
      descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> put <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">getRequstMethod</span><span class="token punctuation">(</span>Methods<span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>

<span class="token comment">// use.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RequestHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMiddleware</span><span class="token punctuation">(</span>middleware<span class="token operator">:</span> RequestHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/controller/LoginController.ts</code>,代码中的引入方式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import { decoratorController, get, post } from &#39;./decorator&#39; </span>
<span class="token comment">// 修改为如下一行代码</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> decoratorController<span class="token punctuation">,</span> get<span class="token punctuation">,</span> post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../decorator&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/controller/CrowellerController.ts</code>代码中的引入方式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import { get, decoratorController, useMiddleware } from &#39;./decorator&#39;</span>
<span class="token comment">// 改为如下一行</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> decoratorController<span class="token punctuation">,</span> useMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../decorator&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/router.ts</code>，代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/index.ts</code>中的引入<code>router</code>方式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import { router } from &#39;./controller/decorator&#39;</span>
<span class="token comment">// 改为如下一行</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行<code>npm run start</code>,效果如常</p></li></ol><h3 id="函数、变量类型的优化" tabindex="-1"><a class="header-anchor" href="#函数、变量类型的优化" aria-hidden="true">#</a> 函数、变量类型的优化</h3><ul><li><p>函数返回值是 undefined 的写上 void</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如下</span>
<span class="token keyword">function</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span> req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> next<span class="token operator">:</span> NextFunction <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>LoginControlle.ts</code>中的公共部分抽离为方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span>
<span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">isLogin</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session <span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>login <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token function">home</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isLogin <span class="token operator">=</span> LoginController<span class="token punctuation">.</span><span class="token function">isLogin</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">post</span></span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
  <span class="token function">login</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">const</span> isLogin <span class="token operator">=</span> LoginController<span class="token punctuation">.</span><span class="token function">isLogin</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>等等</p></li></ul><h3 id="类装饰器的优化" tabindex="-1"><a class="header-anchor" href="#类装饰器的优化" aria-hidden="true">#</a> 类装饰器的优化</h3><blockquote><p>目前我们的类装饰器，并不支持传入前缀路径，如果想支持，该如何修改呢？</p></blockquote><ol><li><p>修改<code>src/LoginController.ts</code>，如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span> 
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/CrowellerController.ts</code>，如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span><span class="token punctuation">(</span><span class="token string">&#39;/abc&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CroweController</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/decorator/controller.ts</code>，代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>rootPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token comment">// 增加路径判断逻辑</span>
      <span class="token keyword">const</span> fullPath <span class="token operator">=</span> rootPath <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> path <span class="token operator">:</span> rootPath <span class="token operator">+</span> path
      <span class="token keyword">const</span> method<span class="token operator">:</span> Methods <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>
        <span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span>
        target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">const</span> middleware<span class="token operator">:</span> RequestHandler <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>
        <span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span>
        target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token comment">// 注册路由地址使用新的 fullPath 变量</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fullPath <span class="token operator">&amp;&amp;</span> method <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行<code>npm run start,</code>路由地址变为以下几个</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://localhost:7001/abc/showData
http://localhost:7001/abc/getData
http://localhost:7001/
http://localhost:7001/login
http://localhost:7001/logout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_06-练习题如何在一个方法上使用多个装饰器" tabindex="-1"><a class="header-anchor" href="#_06-练习题如何在一个方法上使用多个装饰器" aria-hidden="true">#</a> 06: 练习题如何在一个方法上使用多个装饰器</h2><h3 id="目前的效果展示" tabindex="-1"><a class="header-anchor" href="#目前的效果展示" aria-hidden="true">#</a> 目前的效果展示</h3><ol><li><p>修改<code>src/controller/CrowellerController.ts</code>中的方法，给<code>getData</code>方法增加一个中间件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">checkLogin</span><span class="token punctuation">(</span> req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> next<span class="token operator">:</span> NextFunction<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 增加一行打印信息</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;checkLogin middleware&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> next<span class="token operator">:</span> NextFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test middleware&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">decoratorController</span></span><span class="token punctuation">(</span><span class="token string">&#39;/abc&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CroweController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/getData&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">useMiddleware</span></span><span class="token punctuation">(</span>checkLogin<span class="token punctuation">)</span>
  <span class="token comment">// 增加使用 中间件 test  </span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">useMiddleware</span></span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
  <span class="token function">getData</span><span class="token punctuation">(</span>req<span class="token operator">:</span> RequestWithBody<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们运行终端，打开浏览器<code>http://localhost:7001/abc/getData</code>,然后终端中就可以看到打印信息(只有一条，且是最上面的那个中间件)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ab7ebedcec044918b91062a2e91d160~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><ol><li><p>修改<code>scr/decorator/use.ts</code>中的代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMiddleware</span><span class="token punctuation">(</span>middleware<span class="token operator">:</span> RequestHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// 我们先取出来之前已经存储的中间件，如果没有就是 []</span>
    <span class="token keyword">const</span> middlewares <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>
      <span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 对原有的中间件 和 传递进来的中间件进行合并</span>
      middlewares<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span><span class="token punctuation">,</span>
      target<span class="token punctuation">,</span>
      key<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>src/decorator/controller.ts</code>中的代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decoratorController</span><span class="token punctuation">(</span>rootPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">const</span> fullPath <span class="token operator">=</span> rootPath <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> path <span class="token operator">:</span> rootPath <span class="token operator">+</span> path
      <span class="token keyword">const</span> method<span class="token operator">:</span> Methods <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>
        <span class="token string">&#39;method&#39;</span><span class="token punctuation">,</span>
        target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
      <span class="token comment">// 修改中间件变量以及类型</span>
      <span class="token keyword">const</span> middlewares<span class="token operator">:</span> RequestHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>
        <span class="token string">&#39;middleware&#39;</span><span class="token punctuation">,</span>
        target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">const</span> handler <span class="token operator">=</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fullPath <span class="token operator">&amp;&amp;</span> method <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这里展开中间件</span>
          router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> <span class="token operator">...</span>middlewares<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行终端，打开浏览器<code>http://localhost:7001/abc/getData</code>可以看到如下结果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5842dccc7dc34e14b6e1c5d9f5f8d008~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol>`,25),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index-07.html.vue"]]);export{r as default};
