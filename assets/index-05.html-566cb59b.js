import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const i="/assets/5cd962fd000101b306400360-93e99942.jpg",r={},u=e('<h1 id="_05-基础概念和常见配置项介绍-一" tabindex="-1"><a class="header-anchor" href="#_05-基础概念和常见配置项介绍-一" aria-hidden="true">#</a> 05-基础概念和常见配置项介绍（一）</h1><p><img src="'+i+`" alt="img"></p><blockquote><p>人生太短，要干的事太多，我要争分夺秒。 ——爱迪生</p></blockquote><p>本节介绍下跟 Webpack 配置相关的概念，以及介绍一个简单并且常用的配置项。</p><h2 id="webpack-config-js-配置文件" tabindex="-1"><a class="header-anchor" href="#webpack-config-js-配置文件" aria-hidden="true">#</a> webpack.config.js 配置文件</h2><p>Webpack 是可配置的模块打包工具，我们可以通过修改 Webpack 的配置文件（<code>webpack.config.js</code>）来对 Webpack 进行配置，Webpack 的配置文件是遵循 Node.js 的 CommonJS 模块规范的，即：</p><ul><li>通过<code>require()</code>语法导入其他文件或者使用 Node.js 内置的模块</li><li>普通的 JavaScript 编写语法，包括变量、函数、表达式等</li></ul><p>说白了，<code>webpack.config.js</code>是一个 Node.js 的模块。</p><h3 id="简单的-webpack-config-js-示例" tabindex="-1"><a class="header-anchor" href="#简单的-webpack-config-js-示例" aria-hidden="true">#</a> 简单的 webpack.config.js 示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;foo.bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，使用 CommonJS 的<code>require</code>引入 Node.js 内置的<code>path</code>模块，然后通过<code>module.exports</code>将 Webpack 的配置导出。</p><blockquote><p>Tips：Webpack 的配置是一个 Node.js 模块，所以并不只是 JSON 对象。</p></blockquote><h2 id="webpack-配置支持多种语言" tabindex="-1"><a class="header-anchor" href="#webpack-配置支持多种语言" aria-hidden="true">#</a> Webpack 配置支持多种语言</h2>`,13),d={href:"https://reactjs.org/docs/introducing-jsx.html",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"本专栏都是 JavaScript 语法的配置",-1),m=e(`<p>除了配置文件的语法多样之外，对于配置的类型也是多样的，最常见的是直接作为一个对象来使用，除了使用对象，Webpack 还支持函数、Promise 和多配置数组。</p><h3 id="函数类型的-webpack-配置" tabindex="-1"><a class="header-anchor" href="#函数类型的-webpack-配置" aria-hidden="true">#</a> 函数类型的 Webpack 配置</h3><p>如果我们只使用一个配置文件来区分生产环境（production）和开发环境（development），则可以使用函数类型的 Webpack 配置，函数类型的配置必须返回一个配置对象，如下面：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">&#39;source-maps&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;eval&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">compress</span><span class="token operator">:</span> argv<span class="token punctuation">[</span><span class="token string">&#39;optimize-minimize&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 只有传入 -p 或 --optimize-minimize</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Webpack 配置函数接受两个参数<code>env</code>和<code>argv</code>：分别对应着环境对象和 Webpack-CLI 的命令行选项，例如上面代码中的<code>--optimize-minimize</code>。</p><h3 id="promise-类型的-webpack-配置" tabindex="-1"><a class="header-anchor" href="#promise-类型的-webpack-配置" aria-hidden="true">#</a> Promise 类型的 Webpack 配置</h3><p>如果需要异步加载一些 Webpack 配置需要做的变量，那么可以使用 Promise 的方式来做 Webpack 的配置，具体方式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">/* ... */</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多配置数组" tabindex="-1"><a class="header-anchor" href="#多配置数组" aria-hidden="true">#</a> 多配置数组</h3><p>在一些特定的场景，我们可能需要一次打包多次，而多次打包中有一些通用的配置，这时候可以使用配置数组的方式，将两次以上的 Webpack 配置以数组的形式导出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 配置1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 配置2</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置的使用" tabindex="-1"><a class="header-anchor" href="#配置的使用" aria-hidden="true">#</a> 配置的使用</h3><p>默认情况下，Webpack 会查找执行目录下面的<code>webpack.config.js</code>作为配置，如果需要指定某个配置文件，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>webpack <span class="token parameter variable">--config</span> webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 Webpack 不是全局安装，则可以在项目目录下实行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> ./node_modules/webpack/bin/webpack <span class="token parameter variable">--config</span> webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用<code>npx</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--config</span> webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="webpack-常见名词解释" tabindex="-1"><a class="header-anchor" href="#webpack-常见名词解释" aria-hidden="true">#</a> Webpack 常见名词解释</h2><p>讲完 Webpack 配置文件，下面讲下配置文件中的配置项。当我们谈论 Webpack 的时候，往往会提到下面的名词：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>entry</code></td><td style="text-align:left;">项目入口</td></tr><tr><td style="text-align:left;"><code>module</code></td><td style="text-align:left;">开发中每一个文件都可以看做 module，模块不局限于 js，也包含 css、图片等</td></tr><tr><td style="text-align:left;"><code>chunk</code></td><td style="text-align:left;">代码块，一个 chunk 可以由多个模块组成</td></tr><tr><td style="text-align:left;"><code>loader</code></td><td style="text-align:left;">模块转化器，模块的处理器，对模块进行转换处理</td></tr><tr><td style="text-align:left;"><code>plugin</code></td><td style="text-align:left;">扩展插件，插件可以处理 chunk，也可以对最后的打包结果进行处理，可以完成 loader 完不成的任务</td></tr><tr><td style="text-align:left;"><code>bundle</code></td><td style="text-align:left;">最终打包完成的文件，一般就是和 chunk 一一对应的关系，bundle 就是对 chunk 进行便意压缩打包等处理后的产出</td></tr></tbody></table><h2 id="mode-模式" tabindex="-1"><a class="header-anchor" href="#mode-模式" aria-hidden="true">#</a> mode 模式</h2><p>Webpack4.0 开始引入了<code>mode</code>配置，通过配置<code>mode=development</code>或者<code>mode=production</code>来制定是开发环境打包，还是生产环境打包，比如生产环境代码需要压缩，图片需要优化，Webpack 默认<code>mode</code>是生产环境，即<code>mode=production</code>。</p><p>除了在配置文件中设置<code>mode</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以在命令行中设置<code>mode</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--config</span> webpack.config.entry.js <span class="token parameter variable">--mode</span> development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的内容及其后续的章节内容，如没有声明，则以<code>development</code>方式来做演示，这样方便查看输出的结果。</p><h2 id="webpack-的入口-entry-和输出-output" tabindex="-1"><a class="header-anchor" href="#webpack-的入口-entry-和输出-output" aria-hidden="true">#</a> Webpack 的入口（entry）和输出（output）</h2><p>通过前面的文章我们已经了解到：<strong>webpack 是一个模块打包工具，能够从一个需要处理的 JavaScript 文件开始，构建一个依赖关系图（dependency graph），该图映射到了项目中每个模块，然后将这个依赖关系图输出到一个或者多个 bundle 中</strong>。</p><p>从上面文字的认识，可以轻易的得到 Webpack 的两个核心概念：<code>entry</code>和<code>output</code>，即入口和输出，Webpack 是从指定的入口文件（entry）开始，经过加工处理，最终按照<code>output</code>设定输出固定内容的 bundle；而这个加工处理的过程，就用到了<code>loader</code>和<code>plugin</code>两个工具；<code>loader</code>是源代码的处理器，<code>plugin</code>解决的是 <code>loader</code>处理不了的事情。今天重点介绍下<code>entry</code>和<code>output</code>，在后面文章在介绍<code>loader</code>和<code>plugin</code>。</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h3><p>在介绍<code>entry</code>之前，介绍下<code>context</code>（上下文），<code>context</code>即项目打包的相对路径上下文，如果指定了<code>context=&quot;/User/test/webpack&quot;</code>，那么我们设置的<code>entry</code>和<code>output</code>的相对路径都是相对于<code>/User/test/webpack</code>的，包括在 JavaScript 中引入模块也是从这个路径开始的。由于<code>context</code>的作用，<strong>决定了<code>context</code>值必须是一个绝对路径</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&#39;/Users/test/webpack&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：在实际开发中 <code>context</code> 一般不需要配置，不配置则默认为<code>process.cwd()</code>即工作目录。</p><p>工作目录（英语：Working directory），计算机用语。</p><p>使用者在作业系统内所在的目录，使用者可在此用相对档名存取档案 —— 维基百科。</p></blockquote><h3 id="entry-入口" tabindex="-1"><a class="header-anchor" href="#entry-入口" aria-hidden="true">#</a> entry 入口</h3><p>Webpack 的<code>entry</code>支持多种类型，包括字符串、对象、数组。</p><p>从作用上来说，包括了<strong>单文件入口</strong>和<strong>多文件入口</strong>两种方式。</p><h4 id="单文件入口" tabindex="-1"><a class="header-anchor" href="#单文件入口" aria-hidden="true">#</a> 单文件入口</h4><p>单文件的用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或者使用对象方式</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单文件入口可以快速创建一个只有单一文件入口的情况，例如 library 的封装，但是单文件入口的方式相对来说比较简单，在扩展配置的时候灵活性较低。</p><p><code>entry</code>还可以传入包含文件路径的数组，当<code>entry</code>为数组的时候也会合并输出，例如下面的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/app.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./src/home.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;array.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：上面配置无论是字符串还是字符串数组的 entry，实际上都是只有一个入口，但是在打包产出上会有差异：</p><ol><li>如果直接是 string 的形式，那么 webpack 就会直接把该 string 指定的模块（文件）作为入口模块</li><li>如果是数组 <code>[string]</code> 的形式，那么 webpack 会自动生成另外一个入口模块，并将数组中每个元素指定的模块（文件）加载进来，</li><li>并将最后一个模块的 module.exports 作为入口模块的 module.exports 导出。</li></ol><p><strong>这部分会在「原理篇：打包产出小节」继续做详细介绍</strong>。</p></blockquote><h4 id="多文件入口" tabindex="-1"><a class="header-anchor" href="#多文件入口" aria-hidden="true">#</a> 多文件入口</h4><p>多文件入口是使用对象语法来通过支持多个<code>entry</code>，多文件入口的对象语法相对于单文件入口，具有较高的灵活性，例如多页应用、页面模块分离优化。</p><p>多文件入口的语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/home.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/search.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/list.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语法将<code>entry</code>分成了 3 个独立的入口文件，这样会打包出来三个对应的 bundle，在后面的文章还会介绍使用<code>splitChunks</code>抽离一个项目中多个<code>entry</code>的公共代码。</p><blockquote><p>Tips：对于一个 <code>HTML</code> 页面，我们推荐只有一个 <code>entry</code>，通过统一的入口，解析出来的依赖关系更方便管理和维护。</p></blockquote><h3 id="output-输出" tabindex="-1"><a class="header-anchor" href="#output-输出" aria-hidden="true">#</a> output 输出</h3><p>webpack 的<code>output</code>是指定了<code>entry</code>对应文件编译打包后的输出 bundle。<code>output</code>的常用属性是：</p><ul><li><code>path</code>：此选项制定了输出的 bundle 存放的路径，比如<code>dist</code>、<code>output</code>等</li><li><code>filename</code>：这个是 bundle 的名称</li><li><code>publicPath</code>：指定了一个在浏览器中被引用的 URL 地址，后面详细介绍</li></ul><p>后面章节还会继续介绍不同项目的<code>output</code>其他属性，比如我们要使用 webpack 作为库的封装工具，会用到<code>library</code>和<code>libraryTarget</code>等。</p><blockquote><p>Tips：当不指定 output 的时候，默认输出到 <code>dist/main.js</code> ，即 <code>output.path</code> 是<code>dist</code>，<code>output.filename</code> 是 <code>main</code>。</p></blockquote><p>一个 webpack 的配置，<strong>可以包含多个<code>entry</code>，但是只能有一个<code>output</code></strong>。对于不同的<code>entry</code>可以通过<code>output.filename</code>占位符语法来区分，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/home.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/search.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token string">&#39;path/to/my/entry/list.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>[name]</code>就是占位符，它对应的是<code>entry</code>的<code>key</code>（<code>home</code>、<code>search</code>、<code>list</code>），所以最终输出结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>path/to/my/entry/home.js → dist/home.js
path/to/my/entry/search.js → dist/search.js
path/to/my/entry/list.js → dist/list.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我将 <code>Webpack</code> 目前支持的占位符列出来：</p><table><thead><tr><th style="text-align:left;">占位符</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[hash]</code></td><td style="text-align:left;">模块标识符的 hash</td></tr><tr><td style="text-align:left;"><code>[chunkhash]</code></td><td style="text-align:left;">chunk 内容的 hash</td></tr><tr><td style="text-align:left;"><code>[name]</code></td><td style="text-align:left;">模块名称</td></tr><tr><td style="text-align:left;"><code>[id]</code></td><td style="text-align:left;">模块标识符</td></tr><tr><td style="text-align:left;"><code>[query]</code></td><td style="text-align:left;">模块的 query，例如，文件名 ? 后面的字符串</td></tr><tr><td style="text-align:left;"><code>[function]</code></td><td style="text-align:left;">一个 return 出一个 string 作为 filename 的函数</td></tr></tbody></table><p><code>[hash]</code> 和 <code>[chunkhash]</code> 的长度可以使用 <code>[hash:16]</code>（默认为 <strong>20</strong>）来指定。或者，通过指定 <code>output.hashDigestLength</code> 在全局配置长度，那么他们之间有什么区别吗？</p>`,63),v=n("li",null,[n("code",null,"[hash]"),s("：是"),n("strong",null,"整个项目"),s("的 hash 值，其根据每次编译内容计算得到，每次编译之后都会生成新的 hash，即修改任何文件都会导致所有文件的 hash 发生改变；在一个项目中虽然入口不同，但是 hash 是相同的；"),n("strong",null,"hash 无法实现前端静态资源在浏览器上长缓存，这时候应该使用 chunkhash")],-1),b=n("li",null,[n("code",null,"[chunkhash]"),s("：根据不同的入口文件（entry）进行依赖文件解析，构建对应的 chunk，生成相应的 hash；只要组成 entry 的模块文件没有变化，则对应的 hash 也是不变的，所以一般项目优化时，会将公共库代码拆分到一起，"),n("strong",null,"因为公共库代码变动较少的，使用 chunkhash 可以发挥最长缓存的作用")],-1),y=n("code",null,"[contenthash]",-1),g={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/webpack-contrib/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},f=e(`<p><code>[hash]</code>、<code>[chunkhash]</code>和<code>[contenthash]</code>都支持<code>[xxx:length]</code>的语法。</p><blockquote><p>Tips: 占位符是可以组合使用的，例如<code>[name]-[hash:8]</code></p></blockquote><h4 id="output-publicpath" tabindex="-1"><a class="header-anchor" href="#output-publicpath" aria-hidden="true">#</a> output.publicPath</h4><p>对于使用<code>&lt;script&gt;</code> 和 <code>&lt;link&gt;</code>标签时，当文件路径不同于他们的本地磁盘路径（由<code>output.path</code>指定）时，<code>output.publicPath</code>被用来作为<code>src</code>或者<code>link</code>指向该文件。这种做法在需要将静态文件放在不同的域名或者 CDN 上面的时候是很有用的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home/git/public/assets&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;/assets/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则输出：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>/assets/logo.png</code>就是根据<code>publicPath</code>输出的，<code>output.path</code>制定了输出到本地磁盘的路径，而<code>output.publicPath</code>则作为实际上线到服务器之后的 url 地址。所以我们在上 CDN 的时候可以这样配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home/git/public/assets&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;http://cdn.example.com/assets/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则输出：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://cdn.example.com/assets/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="output-library" tabindex="-1"><a class="header-anchor" href="#output-library" aria-hidden="true">#</a> <code>output.library</code></h4><p>如果我们打包的目的是生成一个供别人使用的库，那么可以使用<code>output.library</code>来指定库的名称，库的名称支持占位符和普通字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span> <span class="token comment">// &#39;[name]&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="output-librarytarget" tabindex="-1"><a class="header-anchor" href="#output-librarytarget" aria-hidden="true">#</a> <code>output.libraryTarget</code></h4><p>使用<code>output.library</code> 确定了库的名称之后，还可以使用<code>output.libraryTarget</code>指定库打包出来的规范，<code>output.libraryTarget</code>取值范围为：<code>var</code>、<code>assign</code>、<code>this</code>、<code>window</code>、<code>global</code>、<code>commonjs</code>、<code>commonjs2</code>、<code>commonjs-module</code>、<code>amd</code>、<code>umd</code>、<code>umd2</code>、<code>jsonp</code>，默认是<code>var</code>，下面通过打包后的代码不同，来看下差别。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;var.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;var&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token keyword">var</span> myLib <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// assign config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;assign.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output： 少了个 var</span>
 myLib <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// this config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;this.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&quot;myLib&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// window config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;window.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
window<span class="token punctuation">[</span><span class="token string">&quot;myLib&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ===============================================</span>
<span class="token comment">// global config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;global.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;global&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output：注意 target=node 的时候才是 global，默认 target=web下global 为 window</span>
window<span class="token punctuation">[</span><span class="token string">&quot;myLib&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// commonjs config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;commonjs.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
exports<span class="token punctuation">[</span><span class="token string">&quot;myLib&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// amd config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;amd.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ===============================================</span>
<span class="token comment">// umd config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;umd.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> exports<span class="token punctuation">[</span><span class="token string">&#39;myLib&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> root<span class="token punctuation">[</span><span class="token string">&#39;myLib&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// commonjs2 config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;commonjs2.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs2&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// umd2 config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;umd2.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;umd2&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> exports<span class="token punctuation">[</span><span class="token string">&#39;myLib&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> root<span class="token punctuation">[</span><span class="token string">&#39;myLib&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// commonjs-module config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;commonjs-module.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs-module&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// output</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ===============================================</span>
<span class="token comment">// jsonp config</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;myLib&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;jsonp.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;jsonp&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// output</span>
<span class="token function">myLib</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意： <code>libraryTarget=global</code> 的时候，如果 <code>target=node</code> 才是 global，默认 <code>target=web</code> 下 global 为 window，保险起见可以使用 <code>this</code>。</p></blockquote><p>下面介绍下跟 output 输出相关的三个配置项：<code>externals</code>，<code>target</code> 和 <code>devtool</code></p><h3 id="externals" tabindex="-1"><a class="header-anchor" href="#externals" aria-hidden="true">#</a> externals</h3><p><code>externals</code>配置项用于去除输出的打包文件中依赖的某些第三方 js 模块（例如 <code>jquery</code>，<code>vue</code> 等等），减小打包文件的体积。该功能通常在开发自定义 js 库（library）的时候用到，用于去除自定义 js 库依赖的其他第三方 js 模块。这些被依赖的模块应该由使用者提供，而不应该包含在 js 库文件中。例如开发一个 jQuery 插件或者 Vue 扩展，不需要把 jQuery 和 Vue 打包进我们的 bundle，引入库的方式应该交给使用者。</p><p>所以，这里就有个重要的问题，使用者应该怎么提供这些被依赖的模块给我们的 js 库（library）使用呢？这就要看我们的 js 库的导出方式是什么，以及使用者采用什么样的方式使用我们的库。例如：</p><table><thead><tr><th style="text-align:left;">js library 导出方式</th><th style="text-align:left;">output.libraryTarget</th><th style="text-align:left;">使用者引入方式</th><th style="text-align:left;">使用者提供给被依赖模块的方式</th></tr></thead><tbody><tr><td style="text-align:left;">默认的导出方式</td><td style="text-align:left;">output.libraryTarget=‘var’</td><td style="text-align:left;"><strong>只能</strong>以 <code>&lt;script&gt;</code> 标签的形式引入我们的库</td><td style="text-align:left;"><strong>只能以全局变量</strong>的形式提供这些被依赖的模块</td></tr><tr><td style="text-align:left;">commonjs</td><td style="text-align:left;">output.libraryTarget=‘commonjs’</td><td style="text-align:left;"><strong>只能</strong>按照 commonjs 的规范引入我们的库</td><td style="text-align:left;">被依赖模块需要按照 commonjs 规范引入</td></tr><tr><td style="text-align:left;">amd</td><td style="text-align:left;">output.libraryTarget=‘amd’</td><td style="text-align:left;">只能按照 amd 规范引入</td><td style="text-align:left;">被依赖模块需要按照 amd 规范引入</td></tr><tr><td style="text-align:left;">umd</td><td style="text-align:left;">output.libraryTarget=‘umd’</td><td style="text-align:left;">可以用<code>&lt;script&gt;</code>、commonjs、amd 引入</td><td style="text-align:left;">被依赖模块需要按照对应方式引入</td></tr></tbody></table><p>如果不是在开发一个 js 库，即没有设置 <code>output.library</code>, <code>output.libraryTarget</code> 等配置信息，那么我们生成的打包文件只能以 <code>&lt;script&gt;</code> 标签的方式在页面中引入，因此那些被去除的依赖模块也只能以全局变量的方式引入。</p><h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h3><p>在项目开发中，我们不仅仅是开发 web 应用，还可能开发的是 Node.js 服务应用、或者 electron 这类跨平台桌面应用，这时候因为对应的宿主环境不同，所以在构建的时候需要特殊处理。webpack 中可以通过设置<code>target</code>来指定构建的目标（target）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;web&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 web，可以省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>target</code>的值有两种类型：string 和 function。</p><p><code>string</code> 类型支持下面的七种：</p><ul><li><code>web</code>：<strong>默认</strong>，编译为类浏览器环境里可用；</li><li><code>node</code>：编译为类 Node.js 环境可用（使用 Node.js require 加载 chunk）；</li><li><code>async-node</code>：编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）；</li><li><code>electron-main</code>：编译为 Electron 主进程；</li><li><code>electron-renderer</code>：编译为 Electron 渲染进程；</li><li><code>node-webkit</code>：编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 nw.gui 导入（<strong>实验性质</strong>）；</li><li><code>webworker</code>：编译成一个 WebWorker。</li></ul><p>后面章节介绍 webpack 特殊项目类型配置的时候还会介绍 <code>target</code> 相关的用法。</p><p>除了<code>string</code>类型，target 还支持 <code>function</code> 类型，这个函数接收一个<code>compiler</code>作为参数，如下面代码可以用来增加插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">target</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">compiler</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="devtool" tabindex="-1"><a class="header-anchor" href="#devtool" aria-hidden="true">#</a> devtool</h3>`,34),x=n("code",null,"devtool",-1),j={href:"http://blog.teamtreehouse.com/introduction-source-maps",target:"_blank",rel:"noopener noreferrer"},w=e('<p>但是由于 sourcemap 包含的数据量较大，而且生成算法需要计算量支持，所以 sourcemap 的生成会消耗打包的时间，下面的表格整理了不同的<code>devtool</code>值对应不同的 sourcemap 类型对应打包速度和特点。</p><table><thead><tr><th style="text-align:left;">devtool</th><th style="text-align:left;">构建速度</th><th style="text-align:left;">重新构建速度</th><th style="text-align:left;">生产环境</th><th style="text-align:left;">品质(quality)</th></tr></thead><tbody><tr><td style="text-align:left;">留空，none</td><td style="text-align:left;">+++</td><td style="text-align:left;">+++</td><td style="text-align:left;">yes</td><td style="text-align:left;">打包后的代码</td></tr><tr><td style="text-align:left;">eval</td><td style="text-align:left;">+++</td><td style="text-align:left;">+++</td><td style="text-align:left;">no</td><td style="text-align:left;">生成后的代码</td></tr><tr><td style="text-align:left;">cheap-eval-source-map</td><td style="text-align:left;">+</td><td style="text-align:left;">++</td><td style="text-align:left;">no</td><td style="text-align:left;">转换过的代码（仅限行）</td></tr><tr><td style="text-align:left;">cheap-module-eval-source-map</td><td style="text-align:left;">o</td><td style="text-align:left;">++</td><td style="text-align:left;">no</td><td style="text-align:left;">原始源代码（仅限行）</td></tr><tr><td style="text-align:left;">eval-source-map</td><td style="text-align:left;">–</td><td style="text-align:left;">+</td><td style="text-align:left;">no</td><td style="text-align:left;">原始源代码</td></tr><tr><td style="text-align:left;">cheap-source-map</td><td style="text-align:left;">+</td><td style="text-align:left;">o</td><td style="text-align:left;">no</td><td style="text-align:left;">转换过的代码（仅限行）</td></tr><tr><td style="text-align:left;">cheap-module-source-map</td><td style="text-align:left;">o</td><td style="text-align:left;">-</td><td style="text-align:left;">no</td><td style="text-align:left;">原始源代码（仅限行）</td></tr><tr><td style="text-align:left;">inline-cheap-source-map</td><td style="text-align:left;">+</td><td style="text-align:left;">o</td><td style="text-align:left;">no</td><td style="text-align:left;">转换过的代码（仅限行）</td></tr><tr><td style="text-align:left;">inline-cheap-module-source-map</td><td style="text-align:left;">o</td><td style="text-align:left;">-</td><td style="text-align:left;">no</td><td style="text-align:left;">原始源代码（仅限行）</td></tr><tr><td style="text-align:left;">source-map</td><td style="text-align:left;">–</td><td style="text-align:left;">–</td><td style="text-align:left;">yes</td><td style="text-align:left;">原始源代码</td></tr><tr><td style="text-align:left;">inline-source-map</td><td style="text-align:left;">–</td><td style="text-align:left;">–</td><td style="text-align:left;">no</td><td style="text-align:left;">原始源代码</td></tr><tr><td style="text-align:left;">hidden-source-map</td><td style="text-align:left;">–</td><td style="text-align:left;">–</td><td style="text-align:left;">yes</td><td style="text-align:left;">原始源代码</td></tr><tr><td style="text-align:left;">nosources-source-map</td><td style="text-align:left;">–</td><td style="text-align:left;">–</td><td style="text-align:left;">yes</td><td style="text-align:left;">无源代码内容</td></tr></tbody></table><blockquote><p><code>+++</code> 非常快速, <code>++</code> 快速, <code>+</code> 比较快, <code>o</code> 中等, <code>-</code> 比较慢, <code>--</code> 慢</p></blockquote>',3),_={href:"https://sentry.io/",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"cheap-module-eval-source-map",-1),W=e('<h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5><p>本小节从 webpack 的配置文件<code>webpack.config.js</code>基本语法开始，分别介绍了配置的基本用法，<code>mode</code>、<code>context</code>、<code>entry</code>、<code>output</code>、<code>target</code>等 webpack 中的基础概念。希望大家读完本小节内容之后，能够动手实际操作一下。在记忆方面，可以</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li><p>Webpack 的配置有几种写法，分别可以应用到什么场景？</p></li><li><p>我们要开发一个 jQuery 插件、Vue 组件等，需要怎么配置 Webpack？</p></li><li><p>Webpack 的占位符 <code>[hash]</code> 、<code>[chunkhash]</code> 和 <code>[contenthash]</code> 有什么区别和联系？最佳实践是什么？</p></li><li><p>Webpack 的 SourceMap 有几种形式？分别有什么特点？SourceMap 配置的最佳实践是什么？</p></li><li><p>什么是 bundle ，什么是 chunk，什么是 module？</p><p><strong>module</strong>：不同文件类型的模块。Webpack 就是用来对模块进行打包的工具，这些模块各种各样，比如：js 模块、css 模块、sass 模块、vue 模块等等不同文件类型的模块。这些文件都会被 loader 转换为有效的模块，然后被应用所使用并且加入到依赖关系图中。相对于一个完整的程序代码，模块化的好处在于，模块化将程序分散成小的功能块，这就提供了可靠的抽象能力以及封装的边界，让设计更加连贯、目的更加明确。而不是将所有东西都揉在一块，既难以理解也难以管理。</p><p><strong>chunk</strong>：数据块。</p><p>a. 一种是非初始化的：例如在打包时，对于一些动态导入的异步代码，webpack 会帮你分割出共用的代码，可以是自己写的代码模块，也可以是第三方库（node_modules 文件夹里的），这些被分割的代码文件就可以理解为 chunk。</p><p>b. 还有一种是初始化的：就是写在入口文件处 (entry point) 的各种文件或者说模块依赖，就是 chunk ，它们最终会被捆在一起打包成一个 main.js （当然输出文件名你可以自己指定），这个 main.js 可以理解为 bundle，当然它其实也是 chunk。</p><p><strong>bundle</strong>：捆绑好的最终文件。如果说，chunk 是各种片段，那么 bundle 就是一堆 chunk 组成的“集大成者”，比如上面说的 main.js 就属于 bundle。当然它也类似于电路上原先是各种散乱的零件，最终组成一个集成块的感觉。它经历了加载和编译的过程，是源文件的最终版本。</p></li></ol></blockquote>',3),T={href:"https://github.com/ksky521/webpack-tutorial",target:"_blank",rel:"noopener noreferrer"};function L(S,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("Webpack 不仅仅支持 js 配置，还支持 ts（TypeScript）、CoffeeScript 甚至 "),n("a",d,[s("JSX"),t(a)]),s(" 语法的配置，不同语言其实核心配置项都不变，只不过语法不同而已，"),k,s("。")]),m,n("ul",null,[v,b,n("li",null,[y,s("：使用 chunkhash 存在一个问题，当在一个 JS 文件中引入了 CSS 文件，编译后它们的 hash 是相同的。而且，只要 JS 文件内容发生改变，与其关联的 CSS 文件 hash 也会改变，针对这种情况，可以把 CSS 从 JS 中使用 "),n("a",g,[s("mini-css-extract-plugin"),t(a)]),s(" 或 "),n("a",h,[s("extract-text-webpack-plugin"),t(a)]),s(" 抽离出来并使用 contenthash。")])]),f,n("p",null,[x,s("是来控制怎么显示"),n("a",j,[s("sourcemap"),t(a)]),s("，通过 sourcemap 我们可以快速还原代码的错误位置。")]),w,n("p",null,[n("strong",null,[s("一般在实际项目中，我个人推荐生产环境不使用或者使用 source-map（如果有 "),n("a",_,[s("Sentry"),t(a)]),s(" 这类错误跟踪系统），开发环境使用"),q,s("。")])]),W,n("p",null,[s("专栏代码已经整理好给大家共享出来： "),n("a",T,[s("https://github.com/ksky521/webpack-tutorial"),t(a)])])])}const J=p(r,[["render",L],["__file","index-05.html.vue"]]);export{J as default};
