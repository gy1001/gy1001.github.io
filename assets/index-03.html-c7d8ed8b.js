import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const i={},u=e(`<h1 id="_03-响应系统-响应系统的核心设计原则" tabindex="-1"><a class="header-anchor" href="#_03-响应系统-响应系统的核心设计原则" aria-hidden="true">#</a> 03-响应系统-响应系统的核心设计原则</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01：前言</h2><p>从本章节我们将陆续实现<code>Vue3</code>的核心内容，那么本章节首先先来</p><p>看的是：<strong>响应系统</strong></p><p>我们通常把：<strong>会影响视图变化的数据成为响应数据</strong>，当响应式数据发生变化时，视图理应发生变化</p><ol><li>那么<code>Vue</code>中这样的响应性数据是如何进行实现的呢？</li><li><code>Vue2</code>和<code>Vue3</code>之间响应性的设计有什么变化呢？为什么会产生这种变化呢？</li></ol><p>如果想知道这些内容，那么就快开始本章节的学习吧</p><h2 id="_02-js-的程序性" tabindex="-1"><a class="header-anchor" href="#_02-js-的程序性" aria-hidden="true">#</a> 02：JS 的程序性</h2><p>想要了解响应性，那么首先了解什么叫做：<strong>JS 的程序性</strong></p><p>我们来看下面这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 定义一个商品对象，包含价格和数量</span>
    <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 总价格</span>
    <span class="token keyword">let</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity
    <span class="token comment">// 第一次打印</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 修改了商品的数量</span>
    product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token comment">// 第二次打印</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家可以想一下，在这段代码中，第一次打印的值是什么？第二次打印的值又是什么？</p><p>这是一个非常简单的 JS 逻辑，两次打印的值都是一样的：<code>总价格：20元</code></p><p>但是大家有没有想过一个问题？</p><p>那就是当我们去进行第二次打印，<strong>你真得希望它还是 20 吗？</strong></p><blockquote><p>我们知道我们最终希望打印的是<strong>总价格</strong>，那么当<code>quantity</code>由 2 变为 5 de 时候，总价格不应该是 50 了吗？</p><p>我们打印出来的总价格，难道不应该是 50 吗？</p></blockquote><p>那么此时有没有冒出来一个想法：<strong>商品数量发生变化了，如果总价格能够够自己跟随变化，那就太好了！</strong></p><p>但是<code>js</code>本身具有<strong>程序性</strong>，所谓的程序性指的就是：<strong>一套固定的，不会发生变化的执行流程，<strong>在这样的一个程序性之下，我们是</strong>不可能</strong>拿到想要的<code>50</code>的</p><p>那么如果我们想要拿到这个<code>50</code>就必须让你的程序变得更加的”聪明“，也就是使其具备<strong>响应性</strong></p><h2 id="_03-如何让你的程序变得更加-聪明" tabindex="-1"><a class="header-anchor" href="#_03-如何让你的程序变得更加-聪明" aria-hidden="true">#</a> 03：如何让你的程序变得更加”聪明“</h2><blockquote><p>你为了让你的程序变得更加”聪明“，所以你开始想：”如果数据变化了，重新执行运算就好了“</p></blockquote><p>那么怎么去做呢？你进行了一个这样的初步设想</p><ol><li>创建一个函数 <code>effect</code>,在其内部封装<code>计算总价格的表达式</code></li><li>在第一次打印总价格之前，执行<code>effect</code>方法</li><li>在第二次打印总价格之前，执行<code>effect</code>方法</li></ol><p>那么这样我们是不是就可以在第二次打印的时候，就得到我们想要的<code>50</code>了吗？</p><p>根据以上设想，你得到了如下的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个商品对象，包含价格和数量</span>
<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 总价格</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 计算总价格</span>
<span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity <span class="token comment">// product.quantity getter 行为</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第一次打印</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token comment">// 修改了商品的数量</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// product.quantity setter 行为</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 第二次打印</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这样的代码中，我们成功的让第二次打印得到了我们期望的结果：<strong>数据变化了，运算也重新执行了</strong></p><p>但是大家可以发现，在我们当前的代码中存在一个明显的问题，那就是：<strong>必须主动在数量变化之后，重新主动触发 effect</strong>才可以得到我们想要的结果。这样就未免有些麻烦，有什么更好的办法吗？</p><p>肯定是有的，我们继续往下看</p><h2 id="_04-vue2-的响应性核心-api-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#_04-vue2-的响应性核心-api-object-defineproperty" aria-hidden="true">#</a> 04: Vue2 的响应性核心 API:Object.defineProperty</h2><p>我们知道,在<code>Vue2</code>中是使用<code>Object.defineProperty</code>作为响应性的核心的。对于这个 API 而言，它可以监听指定对象上的指定属性的 getter、setter 行为。</p><p>那么接下来，针对于上节我们必须触发 effect 函数的问题，我们就可以用这个 API 来进行处理，</p><p>修改代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个商品对象，包含价格和数量</span>
<span class="token keyword">let</span> quantity <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  quantity<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 总价格</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 计算总价格</span>
<span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity
<span class="token punctuation">}</span>
<span class="token comment">// 第一次打印</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token comment">// 使用 Object.defineProperty 来监听 quantity 属性的 getter setter 行为</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">&#39;quantity&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> quantity
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    quantity <span class="token operator">=</span> newValue
    <span class="token comment">// 触发 effect</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 修改了商品的数量</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment">// 第二次打印</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们修改<code>product.quantity</code>的值的时候，就会触发使用 <code>Object.defineProperty</code>监听的指定对象<code>product</code>的指定属性<code>product</code>的 <code>setter</code>行为，然后重新为全局变量<code>quantity</code>赋值，然后触发<code>effect</code>函数，此时 <code>effect</code>函数执行，会触发<code>product</code>属性<code>quantity</code>的 <code>getter</code>行为，然后返回值是全局变量<code>quantity</code>的值。此时 总价格<code>total</code>就更新为最新的数据，第二次打印时候，总价格就是计算后的最新的数据。</p><p>这样我们就解决了需要在打印前，手动触发更新总价格函数逻辑的行为。程序变得更加”智能“</p><h2 id="_05-obejct-defineproperty-在设计层的缺陷" tabindex="-1"><a class="header-anchor" href="#_05-obejct-defineproperty-在设计层的缺陷" aria-hidden="true">#</a> 05：Obejct.defineProperty 在设计层的缺陷</h2><p><code>Vue2</code>使用<code>Object.defineProperty</code>作为响应性的核心 API,但是在<code>Vue3</code>的时候却放弃了这种方式，转而使用<code>Proxy</code>实现，为什么会这样呢？</p><p>这是因为：<strong>Obejct.defineProperty 存在一个致命的缺陷</strong></p>`,39),r={href:"https://v2.cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},d=e(`<blockquote><p>由于 JavaScript 的限制，Vue<strong>不能检测</strong>数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性</p></blockquote><p>他说：<strong>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化</strong>这是什么意思呢？</p><p>我们开看下面的这个例子</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, key) in obj<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ key }}--{{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addObjKey<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>为对象新增属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>----------------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, index) in arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ index }}--{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addArrItem<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>为数组新增元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">addObjKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token comment">// 通过打印可以发现，obj 中存在gender 属性，但是视图中并没有体现</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">addArrItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token comment">// 通过打印可以发现，arr 中存在 王五，但是视图中并没有体现</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们呈现了<code>Vue2</code>中响应性的限制</p><ol><li>当为<strong>对象</strong>新增一个没有在 data 中声明的属性时，新增的属性<strong>不是响应性</strong>的</li><li>当为<strong>数组</strong>通过下标的形式新增加一个元素时，新增的元素<strong>不是响应性</strong>的</li></ol><p>那么为什么会这样的呢？</p><p>想要搞明白这个，那就必须明白官网说的<strong>由于 JavaScript 的限制</strong>指的是什么意思</p><p>我们知道</p><ol><li><code>vue2</code>中是以<code>Obejct.defineProperty</code>作为核心 API 实现的响应性</li><li><code>Obejct.defineProperty</code>只可以监听<strong>指定对象的指定属性的 getter 和 setter</strong></li><li>被监听了<code>getter</code>和<code>setter</code>的属性，就被叫做<strong>该属性具备了响应性</strong></li></ol><p>那么这就意味着：我们<strong>必须要知道指定对象中存在该属性</strong>，才可以为该对象指定响应性，</p><p>但是<strong>由于 JavaScript 的限制</strong>我们<strong>没有办法监听到为某一个对象新增了某一个属性</strong>这样的一个行为，那么新增属性就没有办法通过 核心 API 来监听到该属性的 getter setter，所以<strong>新增的属性将失去响应性</strong></p><blockquote><p>那么如果想要增加的具备响应性的新属性，那么就可以通过 Vue.set 方法来实现</p></blockquote><p>那么此时，我们已经知道这些 vue2 中的“缺陷”，那么 vue3 中是如何解决这些缺陷的呢？我们继续往下看</p><h3 id="关于数组的冷知识" tabindex="-1"><a class="header-anchor" href="#关于数组的冷知识" aria-hidden="true">#</a> 关于数组的冷知识</h3><h5 id="vm-items-indexofitem-newvalue-真的不能被监听么" tabindex="-1"><a class="header-anchor" href="#vm-items-indexofitem-newvalue-真的不能被监听么" aria-hidden="true">#</a> vm.items[indexOfItem] = newValue 真的不能被监听么？</h5><blockquote><p>Vue 对数组的 7 个变异方法（push、pop、shift、unshift、splice、sort、reverse）实现了响应式。这里就不做测试了。我们测试一下通过索引改变数组的操作，能不能被监听到。</p><p>遍历数组，用 Object.defineProperty 对每一项进行监测</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">defineGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">defineSet</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">set key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      value <span class="token operator">=</span> newVal
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token function">observe</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfb613ce7c8747fdaf242033a1fc28fb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>测试说明</strong></p><blockquote><p>通过索引改变 arr[1]，我们发现触发了 set，也就是 Object.defineProperty 是可以检测到通过索引改变数组的操作的，那 Vue2.0 为什么没有实现呢？是尤大能力不行？这肯定毋庸置疑。那他为什么不实现呢？</p></blockquote><h4 id="后续" tabindex="-1"><a class="header-anchor" href="#后续" aria-hidden="true">#</a> 后续</h4><p>后来我在网上找的时候发现了这个。🌀🔥 这是 github 上，一位开发小哥对尤大提到问题。</p><p>![image-20230313113310445](/Users/gaoyuan/Library/Application Support/typora-user-images/image-20230313113310445.png)</p><p><code>小结</code>：原来是出于对性能原因的考虑，没有去实现它。而不是不能实现。</p><p>对于对象而言，每一次的数据变更都会对对象的属性进行一次枚举，一般对象本身的属性数量有限，所以对于遍历枚举等方式产生的性能损耗可以忽略不计，但是对于数组而言呢？数组包含的元素量是可能达到成千上万，假设对于每一次数组元素的更新都触发了枚举/遍历，其带来的性能损耗将与获得的用户体验不成正比，故 vue 无法检测数组的变动。</p><p>不过 Vue3.0 用 proxy 代替了 defineProperty 之后就解决了这个问题。</p>`,27),k={href:"https://juejin.cn/post/6970752937047883789",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"_06-vue3-的响应性核心-api-proxy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_06-vue3-的响应性核心-api-proxy","aria-hidden":"true"},"#"),s(" 06：Vue3 的响应性核心 API: Proxy")],-1),m=n("code",null,"Obejct.defineProperty",-1),g=n("code",null,"vue3",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},f=e(`<p><code>proxy</code>顾名思义就是<strong>代理</strong>的意思，我们来看如下代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>proxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 定义一个商品</span>
    <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// product: 被代理对象</span>
    <span class="token comment">// proxyProduct: 代理对象</span>
    <span class="token comment">// new Proxy 接收两个参数：被代理对象，handler 对象</span>
    <span class="token comment">// 生成 proxy 代理对象实例，该实例拥有&lt;&lt;被代理对象的所有属性&gt;&gt;，并且可以被监听 setter 和 getter</span>
    <span class="token keyword">const</span> proxyProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// 监听 proxyProduct 的 set 方法，在 proxyProduct.xx = xx 时候被触发</span>
      <span class="token comment">// 接收4个参数：被代理对象 target,指定的属性名 key，新值 newValue, 最初被调用对象 receiver</span>
      <span class="token comment">// 返回值为一个 boolean 类型，true 表示设置成功</span>
      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&#39;setter&#39;)</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 监听 proxyProduct 的 get 方法，在proxyProduct.xx 时候，被触发</span>
      <span class="token comment">// 接收三个参数：被代理对象 target, 指定的属性名 key，最初被调用的 对象 receiver</span>
      <span class="token comment">// 返回值 为 在proxyProduct.xx 的结果</span>
      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&#39;getter&#39;)</span>
        <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 总价格</span>
    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// 计算总价格</span>
    <span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      total <span class="token operator">=</span> proxyProduct<span class="token punctuation">.</span>price <span class="token operator">*</span> proxyProduct<span class="token punctuation">.</span>quantity
    <span class="token punctuation">}</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    proxyProduct<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">50</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">总价格为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中，我们可以发现<code>Proxy</code>和<code>Object.defineProperty</code>存在一个非常大的区别，就是：</p><ol><li>Proxy: <ol><li>Proxy 将代理一个对象（被代理队形），得到一个新对象（代理对象），同时拥有被代理对象中的所有属性</li><li>当想要修改对象的指定属性时，我们应该使用<strong>代理对象</strong>进行修噶</li><li><strong>代理对象</strong>的任何一个属性都可以触发 <code>handler</code>的<code>setter</code>和<code>getter</code></li></ol></li><li>Object.defineProperty <ol><li>Object.defineProperty 为<strong>指定对象的指定属性</strong> 设置 <strong>属性描述符</strong></li><li>当想要修改对象的指定属性时，可以使用原对象进行修改</li><li>通过属性描述符，只有<strong>被监听</strong>的指定属性，才可以触发<code>getter</code>和<code>setter</code></li></ol></li></ol><p>所以，当 <code>Vue3</code>通过 <code>Proxy</code>实现响应性核心 API 之后，<code>vue</code>将不会在存在新增属性丢失响应性的问题</p><h2 id="_07-proxy-的最佳拍档-reflect-拦截-js-对象操作" tabindex="-1"><a class="header-anchor" href="#_07-proxy-的最佳拍档-reflect-拦截-js-对象操作" aria-hidden="true">#</a> 07: Proxy 的最佳拍档：Reflect--拦截 JS 对象操作</h2>`,6),y=n("code",null,"Proxy",-1),h=n("code",null,"Proxy",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect",target:"_blank",rel:"noopener noreferrer"},x=e("<p><code>Reflect</code> 属性，多数时候会与 <code>proxy</code> 配合使用，在 <code>MDN</code> <code>proxy</code> 的例子中， <code>Reflect</code> 也有出现</p><p>那么 Reflect 的作用是什么呢？</p><p>查看 MDN 的文档介绍，我们可以发现<code>Reflect</code>提供了非常多的静态方法，并且很巧的是这些方法与<code>Proxy</code> 中<code>Handler</code>的方法类似</p>",3),q=n("h2",{id:"reflect-静态方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reflect-静态方法","aria-hidden":"true"},"#"),s(" Reflect 静态方法")],-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"Reflect.get(target, propertyKey[, receiver\\])",-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"Reflect.has(target, propertyKey)",-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"Reflect.set(target, propertyKey, value[, receiver\\])",-1),O=n("p",null,"...",-1),S=n("h2",{id:"proxy-的-handler-对象方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#proxy-的-handler-对象方法","aria-hidden":"true"},"#"),s(" Proxy 的 Handler 对象方法")],-1),A={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"handler.get()",-1),J={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"handler.has()",-1),z={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"handler.set()",-1),C=n("p",null,"...",-1),B=e(`<p>我们已经知道了 <code>handler</code>中<code>get</code>和<code>set</code>的作用，那么<code>Reflect</code>中的<code>get</code>和<code>set</code>作用是什么呢？</p><p>我们来看一下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上代码可以发现，两次打印的结果都是相同的，这其实就说明了<code>Reflect.get(obj, &quot;name&quot;)</code>本质上和 <code>obj.name</code>的作用相同</p><p>那么既然如此，为什么还需要<code>Reflect</code>呢？</p><p>根据官方文档可知，对于<code>Reflect.get</code>而言，它还存在第三个参数<code>receiver</code>,那么这个参数的作用是什么呢？</p><p>根据官网的介绍为：</p><blockquote><p>如果 target 对象中指定了 getter ,receiver 则为 getter 调用时候的 this 值</p></blockquote><p>什么意思呢？我们来看以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 通过 get 标识符标记，可以方法的调用像属性的调用一样</span>
  <span class="token keyword">get</span> <span class="token function">funllName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">funllName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>funllName<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;funllName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 张三</span>
<span class="token comment">// 第三个参数 receiver 在对象指定了  getter 时表示为 this</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;funllName&#39;</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 李四</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中，我们可以利用 <code>p2</code>作为第三个参数<code>receiver</code>，以此来修改<code>fullName</code>的打印结果。即：<strong>此时触发的 fullName 不是 p1 的而是 p2 的</strong></p><p>那么明确好了以后，我们再来看下面这个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">funllName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&#39;getter 行为被触发&#39;, receiver)</span>
    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>funllName<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
<span class="token comment">//  思考：getter 行为应该被触发几次呢？ 应该被触发三次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个代码中，我问大家，此时我们触发了 <code>proxy.fullName</code>,在这个<code>fullName</code>中又触发了<code>this.lastName + this.firstName</code> 那么，<strong>getter 应该触发几次？</strong></p><p><strong>此时 getter 应该触发 3 次</strong>，但是<strong>实际只触发了 1 次</strong>，这是为什么呢？</p><p>可能有同学已经想到了，因为在 <code>this.lastName + this.firstName</code>这个代码中，我们的<code>this</code>是 <code>p1</code>,而不是<code>proxy</code>！所以，<code>lastName</code>和<code>firstName</code>的触发，不会再次出发<code>getter</code></p><p>想要实现这个想法，那么就需要使用 <code>Reflect.get</code>了。</p><p>我们已知，<code>Reflect.get</code>的第三个参数<code>receiver</code>可以修改<code>this</code>指向，那么我们可不可以<strong>利用 Reflect.get 把 fullName 中的 this 指向修改为 proxy</strong>.依次来达到触发三次的效果呢？</p><p>我们修改如上代码为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">funllName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&#39;getter 行为被触发&#39;, receiver)</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>funllName<span class="token punctuation">)</span> <span class="token comment">// 张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改代码后，我们发现，此时<code>getter</code>得到了三次的触发</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>本小节的内容比较多，但是核心其实就是在描述一件事情，那就是<code>Reflect</code>的作用，我们为什么要使用它呢？</p><p>最后做一个总结：</p><p>当我们期望监听到代理对象的 <code>getter</code> 和 <code>setter</code> 时，<strong>不应该使用 target[key]</strong>, 因为它在某些时候（比如<code>fullName</code>）下是不可靠的。<strong>应该使用 Reflect</strong>, 借助于它的 <code>get</code> 和 <code>set</code> 方法，使用 <code>receiver</code>（proxy 实例）作为 <code>this</code>, 已达到期望的结果（触发三次）</p><h2 id="_08-总结" tabindex="-1"><a class="header-anchor" href="#_08-总结" aria-hidden="true">#</a> 08： 总结</h2><p>在本章节中，我们首先了解了 <code>JS的程序性</code>，我们知道了默认情况下，JS 是非常死板的，所以如果想要让程序变得更加”聪明“，那么就需要额外做一些事情。</p><p>通常我们有两种方式来监听<code>target</code>的<code>getter</code>和<code>setter</code>分别是：</p><ol><li><code>Object.defineProperty</code>: 这是<code>Vue2</code>的响应性核心 API,但是这个 API 存在一定的缺陷，他只能监听<strong>指定对象</strong>的<strong>指定属性</strong>的 <code>getter</code>和 <code>setter</code>。所以在”某些情况下“，vue2 对象或者数组会失去响应性</li><li><code>Proxy</code>:这是 <code>Vue3</code>的响应式核心 API。该 API 表示代理某一个对象，代理对象将拥有被代理对象的所有属性和方法，并且可以通过操作代理对象来监听对应的<code>getter</code>和<code>setter</code></li></ol><p>最后如果我们想要”安全“的使用<code>Proxy</code>，还需要配合<code>Reflect</code>一起才可以。因为一旦我们在**被代理对象的内部，通过 this 触发 getter 和 setter 时，**也需要被监听到。</p>`,30);function G(U,W){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("在"),n("a",r,[s("vue 官网存在这样的一段描述"),t(a)]),s("：")]),d,n("p",null,[n("a",k,[s("参考文章：Vue2.0 为什么不能检查数组的变化？又该如何解决？"),t(a)])]),v,n("p",null,[s("因为 "),m,s("存在问题，所以"),g,s("中修改了这个核心 API,改为使用 "),n("a",b,[s("Proxy"),t(a)]),s(" 进行实现")]),f,n("p",null,[s("当我们了解了"),y,s("之后，那么接下来我们需要了解另一个 "),h,s(' 的"伴生对象": '),n("a",_,[s("Reflect"),t(a)])]),x,n("blockquote",null,[q,n("p",null,[n("a",w,[j,t(a)])]),n("p",null,[n("a",P,[N,t(a)])]),n("p",null,[n("a",R,[V,t(a)])]),O,S,n("p",null,[n("a",A,[I,t(a)])]),n("p",null,[n("a",J,[E,t(a)])]),n("p",null,[n("a",z,[$,t(a)])]),C]),B])}const K=p(i,[["render",G],["__file","index-03.html.vue"]]);export{K as default};
