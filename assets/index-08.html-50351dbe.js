import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const i={},u=e('<h1 id="_08-大型前端项目-进阶实战——架构升级需求分析-构建源码分析" tabindex="-1"><a class="header-anchor" href="#_08-大型前端项目-进阶实战——架构升级需求分析-构建源码分析" aria-hidden="true">#</a> 08-大型前端项目：进阶实战——架构升级需求分析+构建源码分析</h1><h2 id="_01-vue2-elm-架构升级需求分析" tabindex="-1"><a class="header-anchor" href="#_01-vue2-elm-架构升级需求分析" aria-hidden="true">#</a> 01：vue2-elm 架构升级需求分析</h2><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3>',3),r={href:"https://github.com/bailicangdu/vue2-elm.git",target:"_blank",rel:"noopener noreferrer"},d=e(`<li><p>安装依赖和运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),k=e('<h3 id="构建源码分析" tabindex="-1"><a class="header-anchor" href="#构建源码分析" aria-hidden="true">#</a> 构建源码分析</h3><ul><li>build <ul><li>buiild.js: 打包执行文件</li><li>webpack.config.js: 项目配置公共文件</li><li>webpack.dev.config.js: 项目启动配置文件</li><li>wepack.dll.cofnig.js: 插件抽离第三方配置文件</li><li>webpack.prod.config.js: 项目打包配置文件</li></ul></li><li>config <ul><li>开发和线上环境的配置文件</li></ul></li></ul><h2 id="_02-vue2-elm-项目启动-构建命令分析" tabindex="-1"><a class="header-anchor" href="#_02-vue2-elm-项目启动-构建命令分析" aria-hidden="true">#</a> 02：vue2-elm 项目启动+构建命令分析</h2><p>上一节中我们通过脚本<code>npm run dev</code>来运行代码，发现页面正常渲染，</p>',4),v=e(`<li><p>我们分析<code>package.json</code>中的脚本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=online node build/dev-server.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;local&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=local node build/dev-server.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node build/build.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),m=n("code",null,"cross-env NODE_ENV=online",-1),b=n("code",null,"cross-env",-1),h=n("code",null,"NODE_ENV",-1),g=n("code",null,"online",-1),f=n("code",null,"cross-env",-1),x={href:"https://juejin.cn/post/7006650325931130916",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/7069309414192185381",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,[n("p",null,[s("然后执行"),n("code",null,"node build/dev-server.js")])],-1),w=n("li",null,[n("p",null,[s("查看"),n("code",null,"build/dev-server.js"),s("文件，里面用到了很多直到现在还在使用的代码以及思想")]),n("ul",null,[n("li",null,"webpack-dev-middleware"),n("li",null,"热更新的一个实现"),n("li",null,"等等")])],-1),j=e('<h2 id="_03-vue2-elm-项目开发模式构建源码分析" tabindex="-1"><a class="header-anchor" href="#_03-vue2-elm-项目开发模式构建源码分析" aria-hidden="true">#</a> 03：vue2-elm 项目开发模式构建源码分析</h2><h3 id="分析源码的方式" tabindex="-1"><a class="header-anchor" href="#分析源码的方式" aria-hidden="true">#</a> 分析源码的方式</h3><ul><li>直接阅读</li><li>运行起来，打日志(比如：<code>console.log</code>)</li><li>运行起来，在浏览器中打断点（因为运行时有一些上下文）</li></ul><h2 id="_04-深入理解开发模式下时为什么要启动-express-服务" tabindex="-1"><a class="header-anchor" href="#_04-深入理解开发模式下时为什么要启动-express-服务" aria-hidden="true">#</a> 04：深入理解开发模式下时为什么要启动 express 服务</h2>',4),q=n("li",null,[n("p",null,"vue-cli 在本地开发模式下，为什么采用 express 启动静态资源服务器"),n("ul",null,[n("li",null,"解决线上部署后的资源路径问题"),n("li",null,"解决 history 模式下的 URL fallback 问题")])],-1),E=n("p",null,"参考",-1),N={href:"https://www.cnblogs.com/zhuzhenwei918/p/6866094.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,[s("为什么"),n("code",null,"hisory模式下，刷新页面会报404")],-1),O=n("li",null,[n("p",null,[s("因为在 history 模式下，只是动态的通过 js 操作 window.history 来改变有浏览器地址栏里的路径，并没有发起 http 请求，但当你直接 在浏览器里输入这个地址的时候 就一定要先对服务器放起 http 请求，但是这个目标在服务器上又不存在所以就返回了 404 了，怎么解决呢，就是把所有的请求全部转发到 "),n("code",null,"http://www.xxx.com/index.hmtl"),s(" 上就可以了")])],-1),D={href:"https://webpack.docschina.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"},z=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">bypass</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Skipping proxy for browser request.&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">&#39;/index.html&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),R=e(`<h2 id="_05-http-服务原理讲解-express-服务快速搭建" tabindex="-1"><a class="header-anchor" href="#_05-http-服务原理讲解-express-服务快速搭建" aria-hidden="true">#</a> 05：http 服务原理讲解+express 服务快速搭建</h2><p>一个 express 服务的一个访问流程</p><ol><li>用户通过浏览器访问某个域名后，发起一个 http 请求,打到指定的服务器上</li><li>假如这里请求的是 80 端口，服务器中有一个 express 服务监听 80 端口，会对这个端口进行处理</li><li>假如请求的是<code>index.html</code>,其中还会请求其他的一些文件<code>app.js</code>、<code>index.css</code>等</li></ol><h3 id="express-服务快速搭建" tabindex="-1"><a class="header-anchor" href="#express-服务快速搭建" aria-hidden="true">#</a> express 服务快速搭建</h3><ol><li><p>新建文件夹<code>express-demo</code>,执行命令<code>npm init -y</code></p></li><li><p>安装相关依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建文件<code>server.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建服务</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 拦截路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
    <span class="token string">&quot;&lt;html&gt;&lt;body&gt;&lt;div style=&#39;color: red;&#39;&gt;我是测试&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 监听端口，启动服务</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9001</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务启动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开浏览器<code>http://localhost:9001/</code>，可以看到如下界面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8aa5a2698d19475eb38ff01aae1d1145~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>目前如果访问其他页面，会提示 error 页面，后续我们会通过中间件的形式来进行处理</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d427141b583243f0b18e836da0e0ba35~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_06-express-核心概念-middleware-深入讲解" tabindex="-1"><a class="header-anchor" href="#_06-express-核心概念-middleware-深入讲解" aria-hidden="true">#</a> 06：express 核心概念 middleware 深入讲解</h2><h3 id="什么是中间件" tabindex="-1"><a class="header-anchor" href="#什么是中间件" aria-hidden="true">#</a> 什么是中间件</h3>`,7),P=n("em",null,"中间件",-1),B={href:"https://www.expressjs.com.cn/zh-cn/4x/api.html#req",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"req",-1),F={href:"https://www.expressjs.com.cn/zh-cn/4x/api.html#res",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"res",-1),L=n("code",null,"next",-1),T=n("p",null,"中间件函数可以执行以下任务：",-1),U=n("ul",null,[n("li",null,"执行任何代码。"),n("li",null,"对请求和响应对象进行更改。"),n("li",null,"结束请求/响应循环。"),n("li",null,"调用堆栈中的下一个中间件函数。")],-1),A=n("h3",{id:"基础中间件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础中间件","aria-hidden":"true"},"#"),s(" 基础中间件")],-1),M=e(`<li><p>我们修改<code>server.js</code>为如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建服务</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 中间件: 处理请求的业务逻辑</span>
<span class="token comment">// 前置中间件</span>
<span class="token comment">// 可以理解为全局中间件：第一个参数为回调函数时，则针对所有请求生效</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before middleware start&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before middleware end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 拦截路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;拦截了 / 路由&#39;</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
    <span class="token string">&quot;&lt;html&gt;&lt;body&gt;&lt;div style=&#39;color: red;&#39;&gt;我是测试&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果不执行 next, 后续中间件不会执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 后置中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after middle start&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after middle end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9001</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务启动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行<code>node server.js</code></p></li><li><p>刷新<code>localhost:9000</code>可以看到终端中有如下记录</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28eb8ae817df4aeeb3854b31433b08bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li>`,3),X={href:"https://juejin.cn/post/6957258059022499854",target:"_blank",rel:"noopener noreferrer"},Y=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/958d6af0fa994c15afbc9bfd21607af3~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),G=e(`<h3 id="路由器层中间件" tabindex="-1"><a class="header-anchor" href="#路由器层中间件" aria-hidden="true">#</a> 路由器层中间件</h3><ol><li><p>另外还可以，对固定的路由进行中间件处理，不符合规则不执行此中间件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在后置中间件前加入</span>

<span class="token comment">// 路由中间件，第一个参数为匹配路由，第二个参数为回调函数</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;拦截了 /test 路由&#39;</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们重新运行<code>node server.js</code>,</p></li><li><p>访问<code>localhost:9000</code>，时候，打印结果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28eb8ae817df4aeeb3854b31433b08bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>重新运行<code>node server.js</code>，访问<code>localhost:9000/test</code>时，打印结果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23ad322950a0400d9d709f98da92cb9b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_07-express-异常中间件和异常捕获机制详解" tabindex="-1"><a class="header-anchor" href="#_07-express-异常中间件和异常捕获机制详解" aria-hidden="true">#</a> 07：express 异常中间件和异常捕获机制详解</h2><h3 id="异常中间件" tabindex="-1"><a class="header-anchor" href="#异常中间件" aria-hidden="true">#</a> 异常中间件</h3><p>注意事项：</p><ol><li>异常中间件全局只包含一个</li><li>异常中间件可以传递给普通中间件</li><li>异常中间件需要放在所有中间件最后</li><li>异常中间件只能捕获回调函数中的异常（如果是 promise 内部异常就不会被捕获）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after next middler&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error message&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 这个 promise 内部异常不会被捕获</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;new promise middleware&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise&#39;</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;promise error&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 异常中间件</span>
<span class="token comment">// 注意事项</span>
<span class="token comment">// 1. 异常中间件全局只包含一个</span>
<span class="token comment">// 2. 异常中间件可以传递给普通中间件</span>
<span class="token comment">// 3. 异常中间件需要放在所有中间件最后</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;!error-----&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 如果有多个异常中间件，后续的不会执行</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token string">&#39;这里不会生效&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么对于不能捕获的 promise 异常怎么处理呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局 promise 异常捕获</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledRejection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledRejection&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么还有其他的异常怎么办呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局异常捕获</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;uncaughtException&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;uncaughtException&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;启动之前的异常&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-express-https-服务-静态资源服务搭建实战" tabindex="-1"><a class="header-anchor" href="#_08-express-https-服务-静态资源服务搭建实战" aria-hidden="true">#</a> 08：express https 服务+静态资源服务搭建实战</h2><h3 id="如何启动一个-https-服务呢" tabindex="-1"><a class="header-anchor" href="#如何启动一个-https-服务呢" aria-hidden="true">#</a> 如何启动一个 https 服务呢？</h3><ol><li><p>新建<code>https</code>文件夹，网上搜寻一些免费的证书或者购买,文件类似如下测试</p><ul><li><code>https/xxxxx.key</code> 公钥</li><li><code>https/xxxx.pem</code> 密钥</li></ul></li><li><p>创建 <code>https服务</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9001</span>
<span class="token keyword">const</span> httpsPort <span class="token operator">=</span> <span class="token number">443</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私钥</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./https/xxxx.key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 公钥</span>
  <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./https/xxx.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// app 为之前通过 express 创建的 http 服务</span>
<span class="token keyword">const</span> httpsServer <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> app<span class="token punctuation">)</span>
httpsServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>httpsPort<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;https服务启动成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有可能你申请的证书对应域名为 <code>abc.com</code></p></li><li><p>你需要在 <code>hosts</code> 文件中增加如下配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> abc<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后打开浏览器<code>https://abc.com</code> 即可</p></li></ol><h3 id="静态资源服务" tabindex="-1"><a class="header-anchor" href="#静态资源服务" aria-hidden="true">#</a> 静态资源服务</h3><ol><li><p>新建<code>static</code>文件夹，这个文件夹当做我们的静态资源文件夹</p></li><li><p>新建<code>static/index.html</code>、<code>static/inde.js</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// index.html
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

// index.js console.log(&#39;index.js&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加静态资源命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 同构部署</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/static&#39;</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;./static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样通过访问<code>localhost:9001/static/index.html</code>可以看到页面正常显示，且控制台正常打印</p></li><li><p>同样访问<code>https://abc.com/static/index.html</code>一样的效果</p></li></ol>`,16);function H(J,K){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("原项目源码："),n("a",r,[s("https://github.com/bailicangdu/vue2-elm.git"),t(a)])])]),d]),k,n("ol",null,[v,n("li",null,[n("p",null,[s("通过语句前一部分"),m,s(" 可知我们通过"),b,s("库设置了"),h,s("为"),g,s(",为什么要用"),f,s("呢？可以参考下文"),n("a",x,[s("Node 的 cross-env 模块"),t(a)])])]),n("li",null,[n("p",null,[s("拓展知识："),n("a",_,[s("webpack 彻底搞懂系列之 - .env 文件"),t(a)])])]),y,w]),j,n("ul",null,[q,n("li",null,[E,n("ul",null,[n("li",null,[n("a",N,[s("为什么 vue+webpack 需要用到 node，如何部署项目到服务器？ "),t(a)])]),n("li",null,[n("a",S,[s("Vue-Router:不同的历史模式"),t(a)])])])]),n("li",null,[V,n("ul",null,[O,n("li",null,[n("p",null,[s("解决方案:"),n("a",D,[s("https://webpack.docschina.org/configuration/dev-server/"),t(a)])]),z])])])]),R,n("p",null,[P,s("函数能够访问"),n("a",B,[s("请求对象"),t(a)]),s(" ("),C,s(")、"),n("a",F,[s("响应对象"),t(a)]),s(" ("),I,s(") 以及应用程序的请求/响应循环中的下一个中间件函数。下一个中间件函数通常由名为 "),L,s(" 的变量来表示。")]),T,U,A,n("ol",null,[M,n("li",null,[n("p",null,[s("这里我们可以看到它的一个执行顺序，遵循"),n("a",X,[s("洋葱模型"),t(a)])]),Y])]),G])}const W=p(i,[["render",H],["__file","index-08.html.vue"]]);export{W as default};
