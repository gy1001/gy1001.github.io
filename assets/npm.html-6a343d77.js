import{_ as l,M as i,p as o,q as c,R as n,t as s,N as a,a1 as t}from"./framework-e8cb8151.js";const r={},d=n("h1",{id:"npm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#npm","aria-hidden":"true"},"#"),s(" npm")],-1),u=n("blockquote",null,[n("p",null,"npm，全名 node package manger")],-1),m={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"npm 提供了命令行工具，可以方便的进行下载、安装、升级、删除包，也可以让你作为开发者发布并维护包",-1),b=n("h2",{id:"_1-如何安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-如何安装","aria-hidden":"true"},"#"),s(" 1. 如何安装")],-1),h=n("ul",null,[n("li",null,"npm 是随同 Nodejs 一期安装的包管理工具，所以你首先需要拥有 node 环境,")],-1),k={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>点击下载安装 对应的包即可</p><h2 id="_2-验证版本" tabindex="-1"><a class="header-anchor" href="#_2-验证版本" aria-hidden="true">#</a> 2. 验证版本</h2><p>打开终端，分别输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 查看当前 <span class="token function">node</span> 版本
<span class="token function">node</span> <span class="token parameter variable">-v</span>
// 查看当前 <span class="token function">npm</span> 版本
<span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本机测试如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cf871cbef4542a0a786ff65bfa5ca95~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_3-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-常用命令" aria-hidden="true">#</a> 3. 常用命令</h2><blockquote><p>注意：需要在终端中打开</p></blockquote><h3 id="_3-1-项目初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-项目初始化" aria-hidden="true">#</a> 3.1 项目初始化</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>输入命令后，按照提示一路输入项目相关的配置，如：项目名称，版本号，关键字，项目协议等后，最终会产生 package.json 文件，并记录下刚才输入的信息</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8017ecfe7f44031854ff23ea4e145be~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>最终产生的 <code>package.json</code>文件如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6f70e5dcb964526b07fecaab59d6472~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_3-2-安装依赖包" tabindex="-1"><a class="header-anchor" href="#_3-2-安装依赖包" aria-hidden="true">#</a> 3.2 安装依赖包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本地安装</span>
<span class="token function">npm</span> <span class="token function">install</span> xxx
<span class="token comment"># 全局安装</span>
$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-global</span> <span class="token operator">&lt;</span>package name<span class="token operator">&gt;</span>
$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>package name<span class="token operator">&gt;</span>
<span class="token comment"># 强制重新安装</span>
$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>packageName<span class="token operator">&gt;</span> <span class="token parameter variable">--force</span>
<span class="token comment"># 如果你希望，所有模块都要强制重新安装，那就删除node_modules目录，重新执行npm install</span>
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules
$ <span class="token function">npm</span> <span class="token function">install</span>
<span class="token comment"># 也支持直接输入Github代码库地址</span>
$ <span class="token function">npm</span> <span class="token function">install</span> git://github.com/package/path.git
$ <span class="token function">npm</span> <span class="token function">install</span> git://github.com/package/path.git<span class="token comment">#0.1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：我需要安装 express 可以使用如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装后，项目中会产生一个 node_modules 文件夹，里面是从 npm 官网 下载复制了一份 express 的整体文件到本地</p><p><strong>注意：</strong> 这里不同版本的 npm 使用不同的一个处理方式，这个后续我们会通过 和 yarn、pnpm 作比较时候细细道来,先有个初步了解 (<strong>旧版本使用循环嵌套的处理，新版本做了一些扁平化的一些处理</strong>)</p><ol><li>使用 如下版本安装</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/970b9f02cd134165a8709ff10ebe1b5e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>安装后的的 node_modules 包如下图</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87c97f5d87b846a39ba06df2b7c53eed~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol start="2"><li>使用 如下版本安装</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b36a184fa4648c3af15fb0c092ee79f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>安装后的的 node_modules 包如下图</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce0af0ff100e4f8e944018fe92f74d92~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_3-3-删除依赖包" tabindex="-1"><a class="header-anchor" href="#_3-3-删除依赖包" aria-hidden="true">#</a> 3.3 删除依赖包</h3><p>删除后从 node_modules 中删除相关库文件，以及 package.json 中删除掉相关依赖项</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> uninstall <span class="token punctuation">[</span>package name<span class="token punctuation">]</span>

<span class="token comment"># 卸载全局模块</span>
$ <span class="token function">npm</span> uninstall <span class="token punctuation">[</span>package name<span class="token punctuation">]</span> <span class="token parameter variable">-global</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-更新依赖包" tabindex="-1"><a class="header-anchor" href="#_3-4-更新依赖包" aria-hidden="true">#</a> 3.4 更新依赖包</h3><p>npm update 命令可以更新本地安装的模块</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 升级当前项目的指定模块</span>
$ <span class="token function">npm</span> update <span class="token punctuation">[</span>package name<span class="token punctuation">]</span>
<span class="token comment"># 升级全局安装的模块</span>
$ <span class="token function">npm</span> update <span class="token parameter variable">-global</span> <span class="token punctuation">[</span>package name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-其他命令" tabindex="-1"><a class="header-anchor" href="#_4-其他命令" aria-hidden="true">#</a> 4. 其他命令</h2><h3 id="_4-1-npm-set-设置环境变量" tabindex="-1"><a class="header-anchor" href="#_4-1-npm-set-设置环境变量" aria-hidden="true">#</a> 4.1 npm set 设置环境变量</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-name <span class="token string">&#39;Your name&#39;</span>
<span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-email <span class="token string">&#39;Your email&#39;</span>
<span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-url <span class="token string">&#39;http://yourdomain.com&#39;</span>
<span class="token function">npm</span> <span class="token builtin class-name">set</span> init-license <span class="token string">&#39;MIT&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的~/.npmrc 文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token builtin class-name">set</span> save-exact <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令设置加入模块时，package.json 将记录模块的确切版本，而不是一个可选的版本范围。</p><h3 id="_4-2-npm-info" tabindex="-1"><a class="header-anchor" href="#_4-2-npm-info" aria-hidden="true">#</a> 4.2 npm info</h3><blockquote><p>npm info 命令可以查看每个模块的具体信息</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> info underscore
<span class="token function">npm</span> info underscore description
<span class="token function">npm</span> info underscore homepage
<span class="token function">npm</span> info underscore version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-npm-search" tabindex="-1"><a class="header-anchor" href="#_4-3-npm-search" aria-hidden="true">#</a> 4.3 npm search</h3><p>npm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> search <span class="token operator">&lt;</span>搜索词<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4-npm-list" tabindex="-1"><a class="header-anchor" href="#_4-4-npm-list" aria-hidden="true">#</a> 4.4 npm list</h3><p>npm list 命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> list
<span class="token function">npm</span> list <span class="token parameter variable">-global</span>
<span class="token function">npm</span> list vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 global 参数，会列出全局安装的模块。</p><h3 id="_4-5-npm-run" tabindex="-1"><a class="header-anchor" href="#_4-5-npm-run" aria-hidden="true">#</a> 4.5 npm run</h3><ul><li>npm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。</li><li>npm run 命令会自动在环境变量 $PATH 添加 node_modules/.bin 目录，所以 scripts 字段里面调用命令时不用加上路径，这就避免了全局安装 NPM 模块。</li><li>npm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。</li><li>npm 内置了两个命令简写，npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// paackage.json 中的 script 脚本命令</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-其他管理工具" tabindex="-1"><a class="header-anchor" href="#_5-其他管理工具" aria-hidden="true">#</a> 5. 其他管理工具</h2><h3 id="_5-1-npx" tabindex="-1"><a class="header-anchor" href="#_5-1-npx" aria-hidden="true">#</a> 5.1 npx</h3><blockquote><p>npx 只是一个临时的使用方案。 npm5.2 之后产生的</p></blockquote><ul><li>npx 和 script 一致可以帮我们直接运行 .bin 目录下的内容</li><li>如果.bin 目录下存在 会执行对应脚本，如果不存在会下载运行</li></ul><h3 id="_5-2-nrm" tabindex="-1"><a class="header-anchor" href="#_5-2-nrm" aria-hidden="true">#</a> 5.2 nrm</h3><blockquote><p>nrm(npm registry manager )是 npm 的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换</p></blockquote><ol><li>安装命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> nrm <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>nrm ls 查看可选的源</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nrm <span class="token function">ls</span>
<span class="token comment"># 执行后结果如下，其中，带*的是当前使用的源，</span>
* <span class="token function">npm</span> -------- https://registry.npmjs.org/
<span class="token function">yarn</span> ------- https://registry.yarnpkg.com/
cnpm ------- http://r.cnpmjs.org/
taobao ----- https://registry.npm.taobao.org/
nj --------- https://registry.nodejitsu.com/
npmMirror -- https://skimdb.npmjs.com/registry/
edunpm ----- http://registry.enpmjs.org/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>nrm use 切换源</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到taobao源</span>
nrm use taobao
<span class="token comment"># 执行后会出现如下结果</span>
Registry has been <span class="token builtin class-name">set</span> to: https://registry.npm.taobao.org/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>nrm add 增加定制的源 <blockquote><p>你可以增加定制的源，特别适用于添加企业内部的私有源，执行命令 <code>nrm add registry url</code>，其中 reigstry 为源名，url 为源的路径。</p></blockquote></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 比如增加公司的私有源，私服地址为：http://public.npmjs.gyinner/</span>
<span class="token comment"># 可以执行如下命令</span>
nrm <span class="token function">add</span> gy http://public.npmjs.gyinner/
<span class="token comment"># 在执行 nrm ls 后就可以在列表最后查看到最后添加的 gy 源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>nrm del 删除源 <blockquote><p>执行命令<code>nrm del registry</code>删除对应的源。</p></blockquote></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除上述添加的 gy 源</span>
nrm del gy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>nrm test 测试源的速度</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 测试 npm 源的响应时间</span>
nrm <span class="token builtin class-name">test</span> <span class="token function">npm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-nvm" tabindex="-1"><a class="header-anchor" href="#_5-3-nvm" aria-hidden="true">#</a> 5.3 nvm</h3><blockquote><p>nvm 全英文也叫 node.js version management，是一个 nodejs 的版本管理工具。nvm 和 n 都是 node.js 版本管理工具，为了解决 node.js 各种版本存在不兼容现象可以通过它可以<strong>安装和切换不同版本的 node.js</strong>。</p></blockquote>`,73),_={href:"https://nvm.uihtm.com/",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><strong>目前推荐使用 n 模块来管理</strong></p><h3 id="_5-4-n-版本管理工具" tabindex="-1"><a class="header-anchor" href="#_5-4-n-版本管理工具" aria-hidden="true">#</a> 5.4 n 版本管理工具</h3><ol><li>安装命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>查看已经安装的 node 版本列表</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>n <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad32c051eccb41dba0481c1517cb0b21~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol start="3"><li>利用 n 下载所需版本的 node</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载最新版本</span>
<span class="token function">sudo</span> n latest
<span class="token comment"># 下载指定版本</span>
<span class="token function">sudo</span> n 版本号
<span class="token comment"># 下载最新稳定版</span>
<span class="token function">sudo</span> n stable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>删除某个版本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>n <span class="token function">rm</span> <span class="token number">10.24</span>.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>切换版本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> n
<span class="token comment"># 输入后会列举出已安装的所有版本，通过上下箭头可以进行选择，回车后确定选择</span>
  node/10.11.0
ο node/12.14.0
  node/14.15.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-fnm-fast-node-manager" tabindex="-1"><a class="header-anchor" href="#_5-5-fnm-fast-node-manager" aria-hidden="true">#</a> 5.5 fnm: Fast Node Manager</h3><p>无意间看到这个，看了一眼，没有仔细深入这个包管理工具，目前我倾向于使用 n 来管理版本。这个就作为延伸阅读</p><h3 id="_5-6-nvs-node-version-switcher" tabindex="-1"><a class="header-anchor" href="#_5-6-nvs-node-version-switcher" aria-hidden="true">#</a> 5.6 nvs: Node Version Switcher</h3><p>同上</p><h2 id="_6-关于依赖管理" tabindex="-1"><a class="header-anchor" href="#_6-关于依赖管理" aria-hidden="true">#</a> 6. 关于依赖管理</h2><h3 id="_6-1-dependencies-和-devdependencies" tabindex="-1"><a class="header-anchor" href="#_6-1-dependencies-和-devdependencies" aria-hidden="true">#</a> 6.1 dependencies 和 devDependencies</h3><ol><li>假设我们有项目 a，其 package.json 结构如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;c&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>a 的依赖 b 和 c 的依赖信息如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node_modules/b/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;d&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;e&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// node_modules/c/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;g&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>执行 npm install 后，a 的 node_modules 目录最终内容如下</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node_modules
├── b       <span class="token comment">// a 的 dependencies</span>
├── c       <span class="token comment">// a 的 devDependencies</span>
├── d       <span class="token comment">// b 的 dependencies</span>
└── f       <span class="token comment">// c 的 dependencies</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>包管理器将以项目的 package.json 为起点，安装所有 dependencies 与 devDependencies 中声明的依赖。</li><li>但是对于这些一级依赖项具有的更深层级依赖，在深度遍历的过程中，只会安装 dependencies 中的依赖，忽略 devDependencies 中的依赖。</li><li>因此，b 和 c 的 devDependencies —— e 和 g 被忽略， 而它们的 dependencies —— d 和 f 被安装。</li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,27),x={href:"https://zhuanlan.zhihu.com/p/546400909",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zhuanlan.zhihu.com/p/258080852",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.jianshu.com/p/94d084ce6834",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/G_eorge/article/details/51379347",target:"_blank",rel:"noopener noreferrer"},N={href:"https://juejin.cn/post/7080414800274489351",target:"_blank",rel:"noopener noreferrer"},$={href:"https://juejin.cn/post/6961679951925870623",target:"_blank",rel:"noopener noreferrer"};function D(V,z){const e=i("ExternalLinkIcon"),p=i("CommentService");return o(),c("div",null,[d,u,n("ul",null,[n("li",null,[s("npm 是 Node 开放式模块登记和管理系统，是 Node.js 的标准发布平台，用于 Node.js 包的发布、传播、依赖控制，"),n("a",m,[s("npm 官网网址"),a(e)])]),v]),b,h,n("p",null,[n("a",k,[s("Node.js 官网"),a(e)])]),n("p",null,[n("a",g,[s("Node.js 中文网"),a(e)])]),f,n("p",null,[n("a",_,[s("nvm 官网地址"),a(e)])]),q,n("p",null,[n("a",x,[s("新一代包管理工具 pnpm 使用心得"),a(e)])]),n("p",null,[n("a",j,[s("npm 超详细教程"),a(e)])]),n("p",null,[n("a",y,[s("nrm 安装与配置"),a(e)])]),n("p",null,[n("a",w,[s("管理 node 版本，选择 nvm 还是 n？"),a(e)])]),n("p",null,[n("a",N,[s("node 版本管理选 n 还是 nvm？我选 fnm"),a(e)])]),n("p",null,[n("a",$,[s("NVS —— js 实现的 node 版本管理工具"),a(e)])]),a(p)])}const S=l(r,[["render",D],["__file","npm.html.vue"]]);export{S as default};
