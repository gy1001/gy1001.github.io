import{_ as t,M as o,p as c,q as i,R as s,t as n,N as p,a1 as e}from"./framework-e8cb8151.js";const l={},u=e('<h1 id="_23-怎么调试-webpack" tabindex="-1"><a class="header-anchor" href="#_23-怎么调试-webpack" aria-hidden="true">#</a> 23 怎么调试 Webpack？</h1><p>更新时间：2019-06-25 17:21:36</p><p><img src="https://img.mukewang.com/5cd9643f0001e11806390358.jpg" alt="img"></p><p>宝剑锋从磨砺出，梅花香自苦寒来。</p><p>——佚名</p><p>在深入理解 Webpack 内核原理之前，我们先来学习下研究方法，即怎么调试 Webpack。我们都知道 Webpack 实际是 Node.js 编写的，执行的时候我们使用<code>webpack-cli</code>命令进行执行，所以我们可以利用 Node.js 的调试方法来调试 Webpack。</p><p>在这里我们不是使用<code>console.log</code>的方式来调试代码，而是使用<strong>断点</strong>的方式来调试 Webpack，配合 VSCode IDE 编辑器的调试面板来实现 Webpack 的 Debug。</p>',7),r={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://electronjs.org/",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"学会这个其实可以扩展到调试任意 Node.js 项目代码",-1),v=e(`<h2 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备" aria-hidden="true">#</a> 前期准备</h2><p>首先是先下载并安装 VSCode。我电脑是 Mac 系统，所以以 Mac 版本的 VSCode 为教程来介绍，Windows 版本并没有多少差异性；</p><p>第二步是准备 Node.js 开发环境。我这里使用的是 10.15.3 LTS 版本的 Node.js（截稿最新版本是 Node.js 12，LTS 版本是 10.15.3），但是调试技巧都是通用的；</p><p>第三步是准备好 Webpack 和 Webpack-cli 工程项目。我们按照下面顺序来创建一个调试项目：</p><ol><li>创建一个<code>webpack-debug</code>的目录并且进入目录，Mac 命令行如下：<code>mkdir webpack-debug &amp;&amp; cd $_</code>；</li><li>创建<code>package.json</code>初始化 NPM 环境：<code>npm init -y</code>；</li><li>安装开发依赖：<code>npm install -D webpack webpack-cli</code>；</li><li>安装项目依赖，这里使用了<code>lodash</code>这个工具库：<code>npm install -S lodash</code>；</li><li>创建项目 Webpack 入口文件<code>src/index.js</code>和配置文件<code>webpack.config.js</code>，内容如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;entry&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们执行<code>npx webpack</code>，执行成功：</p>`,7),m=s("img",{src:"http://img.mukewang.com/5d0767b70001c6e914440504.png",alt:"图片描述"},null,-1),b=s("code",null,"npx webpack",-1),g={href:"https://www.npmjs.com/package/npx",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"package.json",-1),h=s("code",null,"bin",-1),f=s("code",null,"webpack",-1),y=s("code",null,"webpack-cli",-1),_=s("code",null,"webpack-cli",-1),j={href:"https://github.com/webpack/webpack-cli/blob/master/package.json#L10-L12",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"package.json",-1),x=e(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// webpack-cli package.json</span>
<span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/cli.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/cli.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=6.11.5&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以实际我们执行<code>npx webpack</code>，跟执行<code>node ./node_modules/webpack-cli/bin/cli.js</code> 效果是一样的，知道这个我们就明白原来 Webpack 命令实际执行的就是<code>webpack-cli</code>项目中的<code>bin/cli.js</code>呢！</p><h2 id="使用-vscode-的调试功能" tabindex="-1"><a class="header-anchor" href="#使用-vscode-的调试功能" aria-hidden="true">#</a> 使用 VSCode 的调试功能</h2><p>了解了<code>webpack</code>执行命令的原理之后，我们再来看下 VSCode 的调试功能怎么使用，下面是一张调试面板的截图：</p><p><img src="http://img.mukewang.com/5d0767e000019aeb19201080.png" alt="图片描述"> 在 VSCode 中开启调试很简单，只需要下面步骤：</p><ol><li>打开需要调试的文件，然后在需要的地方设置添加<code>debugger</code>关键字设置断点；</li><li>按下<code>F5</code>快捷键，这时候会让选择调试项目的类型，选择后会生成一个<code>launch.json</code>文件；</li><li>修改<code>launch.json</code>文件的相关内容，主要是<code>name</code>、<code>program</code>和<code>cwd</code>三个字段，改成项目对应的配置即可。这里使用<code>\${workspaceFolder}</code>这个变量，代表 VSCode 的工作路径，即当前打开项目的根目录；</li><li>点击 VSCode 界面左侧长得类似虫子的按钮进入 debug 面板界面，点击上图中左上角的开始三角按钮，启动调试；</li></ol><p><img src="http://img.mukewang.com/5d0768060001dbb001310325.png" alt="图片描述"></p><ol start="5"><li>这时候就可以使用调试控制条进行调试了。左侧会显示执行上下文、变量、断点、调用栈等多个信息，跟 Chrome 的 DevTools 调试非常调试。</li></ol><p>调试控制条如下图所示，共有 6 个按钮，从左到右依次为下面列表及其对应的快捷键（Mac 系统）：</p><p><img src="http://img.mukewang.com/5d07682d00012bf502160032.png" alt="图片描述"></p><ul><li>继续/暂停：<code>F5</code></li><li>单步跳过：<code>F10</code></li><li>单步调试：<code>F11</code></li><li>单步跳出：<code>⇧F11</code></li><li>重新调试：<code>⇧⌘F5</code></li><li>停止调试： <code>⇧F5</code></li></ul><h2 id="使用-vscode-调试-webpack" tabindex="-1"><a class="header-anchor" href="#使用-vscode-调试-webpack" aria-hidden="true">#</a> 使用 VSCode 调试 Webpack</h2><p>下面我们来动手实践下如何用 VSCode 调试 Webpack，整个调试的流程最关键的步骤是两步：</p><ol><li>寻找<code>cli.js</code>中合适的断点位置；</li><li>配置 VSCode 的<code>launch.json</code>。</li></ol><h3 id="寻找cli-js中合适的断点位置" tabindex="-1"><a class="header-anchor" href="#寻找cli-js中合适的断点位置" aria-hidden="true">#</a> 寻找<code>cli.js</code>中合适的断点位置</h3><p>首先我们知道执行<code>webpack</code>执行的文件是<code>./node_modules/webpack-cli/bin/cli.js</code>，我们需要了解下这个文件的大概执行流程，并且找出合适的断点位置。</p><p>下面我从头来分析整个<code>cli.js</code>源码寻找断点位置。这个过程我会比较详细地来讲解，我希望大家能够在我操作的过程中，学习到如何有侧重点的阅读开源的代码，既能了解整体的实现方案又能够寻找到合适的断点位置。</p><p>先看下<code>cli.js</code>的文件大框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">NON_COMPILATION_ARGS</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils/constants&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;import-local&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// Prefer the local installation of webpack-cli</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;v8-compile-cache&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> ErrorHelpers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils/errorHelpers&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token constant">NON_COMPILATION_CMD</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv <span class="token operator">=</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">!==</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span>
      process<span class="token punctuation">.</span>argv <span class="token operator">=</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NON_COMPILATION_ARGS</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">===</span> arg<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NON_COMPILATION_CMD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils/prompt-command&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
      <span class="token constant">NON_COMPILATION_CMD</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> yargs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;yargs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">webpack-cli </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

Usage: webpack-cli [options]
       webpack-cli [options] --entry &lt;entry&gt; --output &lt;output&gt;
       webpack-cli [options] &lt;entries...&gt; --output &lt;output&gt;
       webpack-cli &lt;command&gt; [options]

For more information, see https://webpack.js.org/api/cli/.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config/config-yargs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span>

  yargs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里才是整个 bin 命令的主体</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),N={href:"https://github.com/yargs/yargs",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"Yargs",-1),O=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yargs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里才是整个 bin 命令的主体</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看下<code>yargs.parse</code>解析完 bin 命令参数之后在内部做的事情：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yargs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  Error<span class="token punctuation">.</span>stackTraceLimit <span class="token operator">=</span> <span class="token number">30</span>

  <span class="token comment">// 解析失败需要输出内容时，输出内容</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
    process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//  help 和 version 信息</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    argv<span class="token punctuation">[</span><span class="token string">&#39;display&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;verbose&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> options
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据命令行传入的 argv参数，生成processOptions的参数对象</span>
    options <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils/convert-argv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析失败，输出错误信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;ValidationError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> err
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> stack <span class="token operator">=</span> ErrorHelpers<span class="token punctuation">.</span><span class="token function">cleanUpWebpackOptions</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> err<span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> stack

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\u001b[1m\\u001b[31m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\u001b[39m\\u001b[22m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> stdout <span class="token operator">=</span> argv<span class="token punctuation">.</span>silent
    <span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">write</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span> <span class="token comment">// eslint-disable-line</span>
    <span class="token operator">:</span> process<span class="token punctuation">.</span>stdout

  <span class="token keyword">function</span> <span class="token function">ifArg</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理数组型的参数执行命令</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      argv<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> argv<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">processOptions</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 暂时忽略</span>
  <span class="token punctuation">}</span>
  <span class="token function">processOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码，我们发现<code>yargs.parse</code>内部一开始主要做了一些参数解析和错误处理的事情，然后重要的是根据命令行传入的 argv 参数，生成<code>processOptions</code>的参数对象（<code>options</code>）。这时候整个内部重点变成了<code>processOptions(options)</code>的执行。下面继续看<code>processOptions</code>的函数内部实现：</p><p>我们会发现，<code>processOptions</code>函数的前面，基本都是根据传入的 bin 命令参数在处理<code>outputOptions</code>。<code>outputOptions</code>是跟输出 Webpack 编译结果相关的一个参数对象，比如会显示 Webpack 执行中的错误信息，生成打包报告等，所以不是我们主要关注的。我们关注的是 Webpack 打包过程。所以类似下面的代码我们不需要细研究：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">ifArg</span><span class="token punctuation">(</span><span class="token string">&#39;build-delimiter&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  outputOptions<span class="token punctuation">.</span>buildDelimiter <span class="token operator">=</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们发现了<code>const webpack = require(&#39;webpack&#39;);</code>关键字出现了，这时候整个<code>processOptions</code>的核心代码出现了，即下面的内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> lastHash <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">let</span> compiler
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;WebpackOptionsValidationError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>color<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\u001b[1m\\u001b[31m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\u001b[39m\\u001b[22m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token comment">// eslint-disable-next-line no-process-exit</span>
    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">throw</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中，<code>cli.js</code>导入了<code>webpack</code>模块依赖，然后开始执行<code>webpack(options)</code>，这时候正式进入<code>webpack</code>模块的打包流程。我们可以在<code>webpack(options)</code>之前添加一个<code>debugger</code>断点，这样调试代码的时候，执行到这里就暂停，等待调试。</p><blockquote><p>Tips：整个源码阅读流程可以大概总结为：</p><ol><li>首先折叠不用的分支和逻辑，只看文件大的框架代码；</li><li>寻找执行的关键路径，根据变量名称猜测变量意图，重点变量通过仔细阅读对应实现源码来验证想法；</li><li>根据关键路径顺藤摸瓜，理清整个执行过程；</li><li>了解了整个执行过程之后，进入下一个阶段阅读或者做对应的事情（比如设置断点）继续研究。</li></ol></blockquote><h3 id="修改launch-json开始调试" tabindex="-1"><a class="header-anchor" href="#修改launch-json开始调试" aria-hidden="true">#</a> 修改<code>launch.json</code>开始调试</h3><p>设置完断点之后，这时候在<code>cli.js</code>页面按<code>F5</code>快捷键，选择<code>Node.js</code>环境，这时候会进入编辑<code>launch.json</code>。如果直接进入了调试模式，那么需要按照下图方式手动打开<code>launch.json</code>编辑界面：</p><p><img src="http://img.mukewang.com/5d07687200016aed04130264.png" alt="图片描述"> 这时候，我们根据项目的实际情况修改<code>name</code>、<code>cwd</code>、<code>program</code>配置。如果我们用 VSCode 打开的是项目之前创建的<code>webpack-debug</code>文件夹，那么<code>\${workspaceFolder}</code>对应的就是<code>webpack-debug</code>的完整路径，配置内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 起个名字</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;调试 webpack&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 工作路径</span>
      <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 被调试文件的路径，以\${workspaceFolder}开头</span>
      <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/node_modules/webpack-cli/bin/cli.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上面配置，我们保存<code>launch.json</code>之后，就可以开始调试了，整个过程可以看下下面的动图：</p><p><img src="http://img.mukewang.com/5d102654000166e700050001.gif" alt="图片描述"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本小节文章主要介绍了怎么使用 VSCode 的 debug 面板来调试 Webpack。其实这种方式不仅仅用于 Webpack 调试，也是 Node.js 的一种比较轻量级的调试方式。在讲解调试方法的过程中，带领大家阅读了<code>webpack-cli</code>的<code>cli.js</code>源码，通过这个过程希望大家可以掌握一种阅读开源的方法，解决面对一个开源项目源码无从下手的窘相。</p><blockquote><p>本小节相关面试题：</p><ol><li>怎么 debug 一个 Node.js 项目；</li><li>平时使用什么 IDE，如何调试代码？</li></ol></blockquote>`,19);function S(V,W){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[s("a",r,[n("VSCode"),p(a)]),n(" 是一个基于 Electron 编写的 IDE，"),s("a",d,[n("Electron"),p(a)]),n(" 是基于 Chromium 内置 Node.js 的一套桌面应用解决方案，通过它可以用 JavaScript、HTML 和 CSS 这些前端技术栈来创建桌面应用，并且 Electron 创建出来的桌面应用是支持跨端的！VSCode 和 Electron 都是开源的，感兴趣的可以去 Github 查看源码。本篇文章主要来介绍基于 VSCode 的调试面板来调试 Webpack，"),k,n("。")]),v,s("p",null,[m,n(" 下面来说下"),b,n("做了什么事情。之前介绍下，"),s("a",g,[n("npx"),p(a)]),n("实际执行的是对应模块的 bin 命令，bin 命令是对应的 NPM 模块在模块安装（npm install）的时候通过"),w,n("的"),h,n("字段指定的，"),f,n("这个命令实际是通过"),y,n("来注入的。我们来看下"),_,n("的"),s("a",j,[q,p(a)]),n("：")]),x,s("p",null,[n("整个文件中，主要是使用"),s("a",N,[n("Yargs"),p(a)]),n("这个包来做 bin 命令的选项解析器。通过"),C,n("可以解析出执行的是什么命令，从而调用对应的方法做对应的事情。整个文件的主体在：")]),O])}const M=t(l,[["render",S],["__file","index-23.html.vue"]]);export{M as default};
