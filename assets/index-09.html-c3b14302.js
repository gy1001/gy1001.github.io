import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const i={},u=e(`<h1 id="_09-runtime-运行时-构建-renderer-渲染器" tabindex="-1"><a class="header-anchor" href="#_09-runtime-运行时-构建-renderer-渲染器" aria-hidden="true">#</a> 09-runtime 运行时-构建 renderer 渲染器</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01: 前言</h2><p>从本章开始我们将要在 <code>VNode</code> 的基础上构建 <code>renderer 渲染器</code></p><p>根据上一章中的描述我们知道，在 <code>packages/runtime-core/src/renderer.ts</code>中存放渲染相关的内容</p><p><code>Vue</code> 提供了一个 <code>baseCreateRenderer</code> 的函数，该函数会返回一个对象，我们把这个返回的这个对象叫做 <code>renderer 渲染器</code></p><p>对于该对象而言，提供了三个方法</p><ol><li><code>render: 渲染函数</code></li><li><code>hydrate: 服务端渲染相关</code></li><li><code>createApp：构建vue项目的开始</code></li></ol><p>查看<code>baseCreateRenderer</code>的代码，我们也可以发现整个 <code>baseCreateRenderer</code> 包含了 2000 行代码，可见整个渲染器是非常复杂的</p><p>所以说，对于我们的实现而言，还是和之前一样，我们将谨遵<strong>没有使用就当不存在</strong>和<strong>最少代码的实现逻辑</strong>这两个核心思想，类构建整个 <code>render</code> 的过程</p><p>在实现 <code>render</code> 的过程中，我们也会和学习 <code>h函数</code> 一样，利用 <code>h函数</code> 时的测试实例，配合上 <code>render</code> 函数来分类型进行依次处理</p><p>那么明确好了这些内容之后 ，我们下面就来进入渲染器的世界吧</p><h2 id="_02-源码阅读-初见-render-函数-element-节点的挂载操作" tabindex="-1"><a class="header-anchor" href="#_02-源码阅读-初见-render-函数-element-节点的挂载操作" aria-hidden="true">#</a> 02: 源码阅读：初见 render 函数，ELEMENT 节点的挂载操作</h2><p>在上一小节，我们实现过一个这样的测试案例：<code>packages/vue/examples/mine/runtime/h-element.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token comment">// &lt;div :class=&quot;{ red: true }&quot;&gt;&lt;/div&gt;</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们可以得到一个对应的 <code>VNode</code>，我们可以使用 <code>render</code> 函数来渲染它</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以在 <code>packages/runtime-core/src/renderer.ts</code>的第 2327 行，增加 <code>debugger</code></p><ol><li><p>进入 <code>render 函数</code></p></li><li><p><code>render 函数</code>接收三个参数</p><ol><li><code>vnode 虚拟节点</code></li><li><code>container 容器</code></li><li><code>isSVG 是否是SVG</code></li></ol></li><li><p>执行 <code>patch(container._vnode ||null, vnode, container, null, null, null, isSVG)</code></p><ol><li><p>根据我们之前所说，我们知道 <code>patch</code> 表示更新节点，这里传递的参数我们主要关注<strong>前三个</strong></p></li><li><p><code>container._vnode</code> 表示<strong>旧节点(n1)</strong>,<code>vnode</code>表示<strong>新节点（n2）</strong>，<code>container</code>表示<strong>容器</strong></p></li><li><p>执行 <code>switch case 到 if(shapeFlag &amp; ShapeFlags.ELEMENT )</code></p><ol><li><p>我们知道此时 <code>shapeFlag</code> 为 9，转换为二进制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00001001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>ShapeFlags.ELEMENT</code> 的值为 1，转换为二进制是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进行按位与或，得到的二进制结果是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000001</span> <span class="token comment">// 十进制 的 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>即 <code>if(shapeFlag &amp; ShapeFlags.ELEMENT ) </code></p></li><li><p>所以会进入 <code>if</code></p></li></ol></li><li><p>触发 <code>processElement</code> 方法</p><ol><li><p>进入 <code>processElement</code> 方法</p></li><li><p>因为当前为<strong>挂载操作</strong>，所以<strong>没有旧节点，即 n1 === null</strong></p></li><li><p>触发 <code>mountElement</code> 方法，即<strong>挂载方法</strong></p><ol><li><p>进入 <code>mountElemen</code> 方法</p></li><li><p>进入 <code>el = vnode.el = hostCreateElement(...)</code> 该方法为创建 Element 的方法</p><ol><li>进入该方法，可以发现该方法指向 <code>packages/runtime-core/src/nodeOps.ts</code> 中的 <code>createElement</code> 方法</li><li>不知道大家还记不记得，之前我们说过：<code>vue</code> 为了保持兼容性，把所有和浏览器相关的 <code>API </code>封装到了 <code>runtime-core</code> 中</li><li>在 <code>createElement</code> 中的代码非常简单就是通过 <code>document.createElement</code> 方法<code>创建 dom</code>，并返回</li></ol></li><li><p>此时 <code>el</code> 和 <code>vnode.el</code> 的值为 <code>createElement</code> 生成的 <code>div 实例</code></p></li><li><p>接下来处理 子节点</p></li><li><p>执行 <code>if（shapeFlag &amp; shapeFlags.TEXT_CHILDREN）</code>同样的按位与或&amp;，大家可以自己进行下二进制的转换</p></li><li><p>触发 <code>hostSetElementText</code> 方法</p><ol><li>进入该方法，同样指向 <code>packages/runtime-dom/src/nodeOps.ts</code>下的 <code>setElementText</code>方法</li><li>里面的代码非常简单，只有一行 <code>el.textContext = text</code></li></ol></li><li><p>那么至此 <code>div</code> 已经生成，并且 <code>textContent</code> 存在值，如果此时触发 <code>div 的 outerHTML</code>方法，得到 <code>&lt;div&gt;hello render&lt;/div&gt;</code></p></li><li><p>那么此时我们只缺少 <code>class</code> 属性了，所以接下来进入 <code>props</code> 的处理</p></li><li><p>执行 <code>for 循环</code>，进入 <code>hostPatchProp </code>方法，此时<code>key = class</code>,<code>props = { class: &quot;text&quot;}</code></p><ol><li><p>进入 <code>hostPatchProp</code> 方法</p></li><li><p>该方法位于 <code>packages/runtime-dom/src/patchProp.ts</code> 下的 <code>patchProp</code> 方法</p></li><li><p>此时 <code>key === class</code> 所以会触发 <code>patchClass</code></p><ol><li><p>进入 <code>patchClass</code>，我们可以看到它内部的代码也比较简单，主要分成了三种情况处理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchClass</span><span class="token punctuation">(</span>
  el<span class="token operator">:</span> Element<span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  isSVG<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// directly setting className should be faster than setAttribute in theory</span>
  <span class="token comment">// if this is an element during a transition, take the temporary transition</span>
  <span class="token comment">// classes into account.</span>
  <span class="token keyword">const</span> transitionClasses <span class="token operator">=</span> <span class="token punctuation">(</span>el <span class="token keyword">as</span> ElementWithTransition<span class="token punctuation">)</span><span class="token punctuation">.</span>_vtc
  <span class="token keyword">if</span> <span class="token punctuation">(</span>transitionClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token punctuation">(</span>
      value
        <span class="token operator">?</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>transitionClasses<span class="token punctuation">]</span>
        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>transitionClasses<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//  以下三种方式</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSVG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>className <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>完成 <code>class 设定</code></p></li></ol></li></ol></li><li><p>当执行完 <code>hostPatchProp</code> 之后，如果此时触发 <code>div</code>的<code>outerHTML</code>方法，将得到 <code>&lt;div class=&quot;test&quot;&gt; hello render&lt;/div&gt;</code></p></li><li><p>现在<code> dom</code> 已经构建好了，最后就只剩下 <strong>挂载</strong>操作了</p></li><li><p>继续执行代码将进入 <code>hostInsert(el,container,anchor)</code> 方法</p><ol><li>进入 <code>hostInsert</code> 方法</li><li>该方法位于 <code>/packages/runtime-dom/src/modules</code> 中的 <code>insert</code> 方法</li><li>内部同样只有一行代码： <code>parent.inserBefore(child, anchor | null)</code></li><li>我们知道 <code>insertBefore</code> 方法可以插入到 <code>dom </code>指定区域</li></ol></li><li><p>那么到这里，我们已经成功的把 <code>div</code> 插入到<code>dom树</code>中，执行完成 <code>hostInsert</code>方法之后，浏览器会出现对应的 <code>div</code></p></li></ol></li><li><p>至此，整个 <code>patchElement</code> 执行完成</p></li></ol></li></ol></li><li><p>执行<code>container._vnode = vnode</code>为<strong>旧节点赋值</strong></p></li></ol><p>由以上代码可知，</p><ol><li>整个挂在 <code>Element | Text_Children</code> 的过程可以分为以下步骤 <ol><li>触发 <code>patch</code> 方法</li><li>根据 <code>shapeFlag</code> 的值，判断触发 <code>processElement</code> 方法</li><li>在 <code>processElement</code> 中，根据<strong>是否存在 就 VNode</strong>来判定触发<strong>挂载</strong>还是<strong>更新</strong>的操作 <ol><li>挂载中分成了 4 大步</li><li>处理 <code>textContent</code></li><li>处理 <code>patch</code></li><li>挂载 <code>dom</code></li></ol></li><li>通过 <code>container._vnode = vnode</code> 为<strong>旧节点赋值</strong></li></ol></li></ol><h2 id="_03-框架实现-构建-renderer-基本架构" tabindex="-1"><a class="header-anchor" href="#_03-框架实现-构建-renderer-基本架构" aria-hidden="true">#</a> 03：框架实现：构建 renderer 基本架构</h2><p>在上一小节中，我们明确了 <code>render</code> 渲染 <code>Element | Text_Children</code> 的场景，那么接下来我们就可以根据阅读的源码来实现对应的框架渲染器了</p><p>实现渲染器的过程我们将分为两个部分</p><ol><li>搭建出 <code>renderer</code> 的基本架构，我们知道对于 <code>renderer</code> 而言，它内部分为 <code>core</code> 和 <code>dom</code> 两个部分，那么这两个部分怎么交互，我们都会在基本架构这里进行处理</li><li>处理具体的 <code>procesElement</code>方法逻辑</li></ol><p>那么这一小节，我们就先做一部分：搭建出 <code>renderer</code> 的基本架构</p><p>整个<strong>基本架构</strong>应该分为<strong>三部分</strong>进行处理</p><ol><li><code>renderer</code> 渲染器本身，我们需要构建出 <code>baseCreateRenderer</code> 方法</li><li>我们知道所有和 <code>dom</code> 的操作都是与<code>core</code> 分离的，而和 <code>dom</code> 的操作包含了两个部分 <ol><li><code>Element操作</code>：比如 <code>insert</code>、 <code>createElement</code>等，这些将被放入到 <code>runtime-dom</code> 中</li><li><code>props操作</code>：比如<strong>设置类名</strong>，这些也将被放入到 <code>runtime-dom</code> 中</li></ol></li></ol><h3 id="renderer-渲染器本身" tabindex="-1"><a class="header-anchor" href="#renderer-渲染器本身" aria-hidden="true">#</a> renderer 渲染器本身</h3><ol><li><p>创建<code>packages/runtime-core/src/renderer.ts</code>文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ShapeFlags <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/shared/src/shapeFlags&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Fragment<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Comment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RendererOptions</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 未指定的 element 的 props 打补丁
   */</span>
  <span class="token function">patchProp</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> preValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> nextValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 未指定的 element 设置 textContent
   */</span>
  <span class="token function">setElementText</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Element<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 插入指定的 el 到 parent 中，anchor 表示插入的位置，即：锚点
   */</span>
  <span class="token function">insert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> parent<span class="token operator">:</span> Element<span class="token punctuation">,</span> anchor<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 创建 element
   */</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    createElement<span class="token operator">:</span> hostCreateElement<span class="token punctuation">,</span>
    insert<span class="token operator">:</span> hostInsert<span class="token punctuation">,</span>
    patchProp<span class="token operator">:</span> hostPatchProp<span class="token punctuation">,</span>
    setElementText<span class="token operator">:</span> hostSetElementText<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> options

  <span class="token keyword">const</span> <span class="token function-variable function">processElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 挂载节点</span>
      <span class="token function">mountElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">//  更新节点</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> vnode
    <span class="token comment">//  1. 创建 element</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">//  2. 设置文本</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> children<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//  3. 设置 props</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//  4. 插入</span>
    <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> Text<span class="token operator">:</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> Comment<span class="token operator">:</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> Fragment<span class="token operator">:</span>
        <span class="token keyword">break</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">processElement</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO 卸载</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打补丁</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode <span class="token comment">// 更新旧节点</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    render<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// packages/runtime-core/src/index.ts 导出 createRenderer 函数</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> createRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./renderer&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>导出 <code>render</code> 函数</p><ol><li><p>在<code>/packages/runtime-dom/src/index.ts</code>下添加如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> extend <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/runtime-core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> nodeOps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./nodeOps&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> patchProp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./patchProp&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">ensureRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> renderer
<span class="token keyword">const</span> rendererOptions <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> patchProp <span class="token punctuation">}</span><span class="token punctuation">,</span> nodeOps<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">ensureRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> renderer <span class="token operator">||</span> <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>/packages/runtime-dom/src/nodeOps.ts</code>文件，代码内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> doc <span class="token operator">=</span> document
<span class="token keyword">export</span> <span class="token keyword">const</span> nodeOps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> anchor <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  createElement<span class="token operator">:</span> <span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Element <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
    <span class="token keyword">return</span> el
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">setElementText</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>packages/runtime-dom/src/patchProp.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// @vue/shared</span>
<span class="token keyword">const</span> <span class="token constant">ONRE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[^a-z]</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isOn <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token constant">ONRE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

<span class="token comment">// patchProp.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isOn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span> <span class="token comment">// 新增加的工具函数，是否以 on 开头</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> patchClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/class&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">patchProp</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>packages/runtime-dom/src/modules/class.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchClass</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 疑问：这里为什么不用 setAttributes</span>
    el<span class="token punctuation">.</span>className <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vue/src/index.ts</code>导出<code>render</code>函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/runtime-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li><li><p>编写测试示例<code>packages/vue/examples/run-time/render-element.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b20f48939e8643bc8e7054d16fd8f530~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_04-框架实现-渲染更新-element-节点的更新实现" tabindex="-1"><a class="header-anchor" href="#_04-框架实现-渲染更新-element-节点的更新实现" aria-hidden="true">#</a> 04：框架实现：渲染更新，ELEMENT 节点的更新实现</h2><ol><li><p>继续完善<code>render</code>函数，之前已经完成了挂载节点，接下来继续实现更新节点，<code>packages/runtime-core/src/renderer.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">EMPTY_OBJ</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">processElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 挂载节点</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新节点</span>
      <span class="token function">patchElement</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">patchElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>
    <span class="token comment">// 比较新旧节点的 children 进行更新</span>
    <span class="token function">patchChildren</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token comment">// 比较新旧节点的 属性 props 进行更新</span>
    <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// patchChildren 函数需要分为多种情况</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patchChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c1 <span class="token operator">=</span> oldVNode <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> prevShapeFlag <span class="token operator">=</span> oldVNode <span class="token operator">?</span> oldVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">:</span> <span class="token number">0</span>
    <span class="token keyword">const</span> c2 <span class="token operator">=</span> newVNode <span class="token operator">&amp;&amp;</span> newVNode<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> <span class="token punctuation">{</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token comment">// 注意：子类 children 有三种可能：text array 或者 没有 children</span>
    <span class="token comment">// 1. 当新节点的 children 是 text 类型时</span>
    <span class="token comment">// 		1.1 如果 旧节点的 children 是 array 类型时，xxxx</span>
    <span class="token comment">// 		1.2 否则，都是字符串类型那个，当前后不相等时候，直接调用 hostSetElementText</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO 卸载旧子节点</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>c2 <span class="token operator">!==</span> c1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 挂在新子节点的文本即可</span>
        <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 2.  否则，新节点的 children 类型不是 text，又分情况</span>
      <span class="token comment">//    2.1 当旧节点的 children 类型是 array 类型时</span>
      <span class="token comment">// 		 	2.1.1 如果新节点 children 类型也是 array, 需要做 diff 处理</span>
      <span class="token comment">//    	2.1.2 否则新节点不是array，也不是 text，直接卸载旧的 children 即可</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO Diff</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO 卸载式操作</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.2 否则，新节点 是 text 或者空</span>
        <span class="token comment">// prev children was text OR null</span>
        <span class="token comment">// new children is array OR null</span>
        <span class="token comment">// 如果 旧节点是 text 类型，那么删除 旧节点 text 内容即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 删除纠结点的text</span>
          <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果 新节点 children 是 array 类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// TODO 单独新子节点的挂载</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 比较新旧接节点的 props</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patchProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果前后节点 props 不相等</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历新节点，如果 旧节点中的值与新节点的值不相等，旧更新这个 key</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> next <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">const</span> prev <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!==</span> prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 如果旧节点不是 空对象，</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历旧节点，如果在新节点中这个 key 不存在，就更新此属性 key 为null</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_05-框架实现-处理新旧节点不同元素时-element-节点的更新" tabindex="-1"><a class="header-anchor" href="#_05-框架实现-处理新旧节点不同元素时-element-节点的更新" aria-hidden="true">#</a> 05：框架实现：处理新旧节点不同元素时，ELEMENT 节点的更新</h2><blockquote><p>经过源码查看，我们知道处理新旧不同节点的时候，我们是先删除旧节点，然后挂载新节点实现的</p></blockquote><ol><li><p>先到 <code>renderer</code> 函数里面，找到其中的 <code>patch函数</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/runtime-core/src/vnode</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token builtin">any</span>
  __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span>
  props<span class="token operator">:</span> <span class="token builtin">any</span>
  children<span class="token operator">:</span> <span class="token builtin">any</span>
  shapeFlag<span class="token operator">:</span> <span class="token builtin">number</span>
  key<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token comment">// 增加key 属性</span>
<span class="token punctuation">}</span>

<span class="token comment">// @vue/shared  增加工具函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> VNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/runtime-core/src/vnode&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isSameVNodeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token operator">:</span> VNode<span class="token punctuation">,</span> n2<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n1<span class="token punctuation">.</span>key <span class="token operator">===</span> n2<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">===</span> n2<span class="token punctuation">.</span>type
<span class="token punctuation">}</span>

<span class="token comment">// renderer.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    removeElement<span class="token operator">:</span> hostRemoveElement  <span class="token comment">// 新增加</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> options

 	<span class="token keyword">const</span> <span class="token function-variable function">unmount</span> <span class="token operator">=</span> vnode <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 删除旧节点</span>
    <span class="token function">hostRemoveElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接下来处理 新旧节点不一致的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 删除旧节点</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span>
      <span class="token comment">// 旧节点置为 null,然后后续 进行 processElement 时候会重新挂载新节点</span>
      oldVNode <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接下如之前，进行 type 的 switch case 不同情况的处理</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>packages/runtime-dom/src/nodeOps.ts</code>中增加 <code>removeElement</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> nodeOps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">removeElement</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>parentNode
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建测试示例代码<code>packages/vue/example/run-time/render-component-update-2.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;active&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode3 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update 标签为 p&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode3<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以看到页面显示效果</p><ol><li>先显示 <strong>class 为 test</strong>， 内容显示 <strong>hello render 的 div 元素</strong></li><li>2s 后，内容变为 <strong>update</strong>, 属性 <strong>class 变为 active</strong></li><li>再 3s 后，内容变为 <strong>update 标签为 p</strong>，**class **属性消失</li></ol></li></ol><h2 id="_06-框架实现-删除元素-element-节点的卸载操作" tabindex="-1"><a class="header-anchor" href="#_06-框架实现-删除元素-element-节点的卸载操作" aria-hidden="true">#</a> 06：框架实现：删除元素，ELEMENT 节点的卸载操作</h2><p>那么现在对于我们的代码而言，他已经有了一个 unmount 函数，那么接下来我们就可以基于这个函数来实现某个元素的卸载操作，比如，新增测试用例为如下</p><ol><li><p>新增<code>packages/vue/example/run-time/render-element-remove.html</code>，如下</p><p>我们</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 把上一次的 元素卸载</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>继续完善<code>render</code>函数，修改<code>packages/runtime-core/src/renderer.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当传入的新节点为空，但是旧节点存在</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 直接对旧节点进行 卸载 即可</span>
        <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打补丁</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode <span class="token comment">// 更新旧节点</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    render
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行测试示例，看到页面中 2s 后，元素消失</p></li></ol><h2 id="_07-深入属性挂载-html-attributes-和-dom-properties" tabindex="-1"><a class="header-anchor" href="#_07-深入属性挂载-html-attributes-和-dom-properties" aria-hidden="true">#</a> 07：深入属性挂载：HTML Attributes 和 DOM Properties</h2><p>当我们为一个 DOM 设置对应属性的时候，其实分成了两种情况</p><ol><li><code>HTML Attributes</code></li><li><code>DOM Properties</code></li></ol><p>那么想要搞明白，上一小节中所出现的问题的原因，我们就需要搞明白上面的两种情况指的是什么意思</p><h3 id="html-attributes" tabindex="-1"><a class="header-anchor" href="#html-attributes" aria-hidden="true">#</a> HTML Attributes</h3>`,42),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"定义在 HTML 标签上的属性",-1),d=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test-class<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>textarea value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里 HTML Attributes 指的就是 class=&quot;test-class&quot; 和 type=&quot;text&quot;</p><h3 id="dom-properties" tabindex="-1"><a class="header-anchor" href="#dom-properties" aria-hidden="true">#</a> DOM Properties</h3>`,3),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/element",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"DOM 对象上的属性",-1),b=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们就可以通过 . 的形式获取对应的属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>el.type // &quot;textarea&quot; el.className // &quot;test-class&quot; el.value // &quot;textarea-value&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p>然后我们对比 HTML Attributes 和 DOM Properties 可以发现双方对于<strong>同样属性的描述是不同的</strong>，而这个是<code>HTML Attributes</code>和<code>DOM Properties</code>之间的关键</p><p>那么明确好了这个之后，我们再来看对应方法，根据上一小节的代码，我们可以知道，设置属性，我们一共使用了两个方法</p>`,6),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/setAttribute",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"可以设置指定元素上的某个属性值",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/element#%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"直接修改指定对象的属性",-1),f=e(`<p>但是这两个方式却有一个很尴尬的问题，那就是<strong>属性名不同</strong></p><p>比如</p><ol><li>针对于 <code>class</code> 获取 <ol><li><code>HTML Attributes</code>：<code>el.getAttribute(&quot;class&quot;)</code></li><li><code>DOM Properties</code>: <code>el.className</code></li></ol></li><li>针对于 <code>textarea</code> 的 <code>type</code> 获取 <ol><li><code>HTML Attributes</code>：<code>el.getAttribute(&#39;type&#39;)</code></li><li><code>DOM Properties</code>: <code>el.type 无法获取</code></li></ol></li><li>针对于 <code>textarea</code> 的<code>value</code> 获取 <ol><li><code>HTML Attributes</code>：<code>el.getAttribute(&#39;value&#39;)无法获取</code></li><li><code>DOM Properties</code>: <code>el.value</code></li></ol></li></ol><p>所以为了解决这种问题，咱们就必须要能够<strong>针对不同属性，通过不同方式</strong>进行属性指定。<strong>所以</strong>，vue <strong>才会通过一系列的判断进行处理</strong>，有些判断会最终通过<code>setAttribute</code>来处理，而有些判断会最终通过 <code>el[key]</code> 的形式来处理，本质原因就是<code>HTML Attribute</code>和<code>DOM Properties</code>不一样导致的。</p><p>源码中的<code>pathDomProps</code>是用来处理<code>DOM Properties</code>的，而<code>patchAttr</code>方法是用来处理<code>HTML Attributes</code>的属性指定</p><p>接下来我们来看一个比较特殊的属性<code>class</code>,通过上面的演示我们知道，无论是通过<code>el.setAttribute(&#39;class&#39;)</code>还是<code>el.className</code>来进行指定，最终都可以达到效果。但是查看源码中有这样一段代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchClass</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> isSVG<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> transitionClasses <span class="token operator">=</span> <span class="token punctuation">(</span>el <span class="token keyword">as</span> ElementWithTransition<span class="token punctuation">)</span><span class="token punctuation">.</span>_vtc
  <span class="token keyword">if</span> <span class="token punctuation">(</span>transitionClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSVG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// 这里用了 setAttribute(&quot;class&quot;, xxx)来处理</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>className <span class="token operator">=</span> value <span class="token comment">// 这里又通过 el.className 形式来处理</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么他为什么要这么做呢，我们先看下面的一个测试示例文件<code>/packages/vue/examples/mine/attrVsProps.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>attr Vs Props<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app1&#39;</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;className&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      div1<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;test1&#39;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;className&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;attrs&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      div2<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;attrs&#39;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码，查看控制台的打印时间</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb26a7a9fc13418ab7856f1b5d38457c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看出来</p><p><strong>通过 className 形式设置的耗时要 快于 通过 attrs 形式来处理 class 的时间的</strong>，所以在 <code>vue</code> 源码中，才会这样处理：除了 <code>SVG 元素</code>采用 <code>setAttribute</code> 形式处理 <code>class</code> 以外，其他的元素处理 <code>class</code> 采用 <code>className</code> 形式</p><p>知悉：<strong>设置 class 时，className 的形式处理性能要优于 attributes 的形式处理</strong></p><h2 id="_08-框架实现-区分处理-element-节点的各种属性挂载" tabindex="-1"><a class="header-anchor" href="#_08-框架实现-区分处理-element-节点的各种属性挂载" aria-hidden="true">#</a> 08： 框架实现：区分处理 ELEMENT 节点的各种属性挂载</h2><p>上一小节我们了解了设置属性的多种方式以及它们的不同</p><ol><li><p>修改<code>packages/runtime-dom/src/patchProp.ts</code>文件，</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> patchAttr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/attr&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> patchDomProp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/prop&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">patchProp</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSetAsProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新增的</span>
    <span class="token function">patchDomProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">patchAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">shouldSetAsProp</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// #1787, #2840 form 表单元素的表单属性是只读的，必须设置为属性 attribute</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// #1526 &lt;input list&gt; 必须设置为属性 attribute</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;list&#39;</span> <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;INPUT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// #2766 &lt;textarea type&gt; 必须设置为属性 attribute</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;type&#39;</span> <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&#39;TEXTAREA&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> key <span class="token keyword">in</span> el
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/runtime-dom/src/modules/attr.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchAttr</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/runtime-dom/src/modules/prop.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchDomProp</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加测试用例<code>packages/vue/examples/run-time/render-element-props.htmrender-element-props.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token string">&#39;textarea&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;textarea value&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;hello render&#39;</span>
  <span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开浏览器，页面内容如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d23bf93498a4a1c844cdd31ed507312~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_09-框架实现-element-节点下-style-属性的挂载和" tabindex="-1"><a class="header-anchor" href="#_09-框架实现-element-节点下-style-属性的挂载和" aria-hidden="true">#</a> 09：框架实现：ELEMENT 节点下，style 属性的挂载和</h2><ol><li><p>修改<code>patchProp.ts</code>文件中的<code>patchProp</code>函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> patchStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/style&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">patchProp</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token comment">// 新增加处理 style 的逻辑</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSetAsProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchDomProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">patchAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>packages/runtime-dom/src/modules/style.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchStyle</span><span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">(</span>el <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style
  <span class="token keyword">const</span> isCSSString <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isCSSString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setStyle</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历旧的属性对象，如果属性键在新的对象中不存在，就置为 &quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preValue <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>preValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> preValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">setStyle</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setStyle</span><span class="token punctuation">(</span>
  style<span class="token operator">:</span> CSSStyleDeclaration<span class="token punctuation">,</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  val<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建测试示例<code>vue-next-mini/packages/vue/examples/run-time/render-element-style.html</code>,代码如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;你好，世界&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
      <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&#39;你好，世界&#39;</span>
    <span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_10-源码阅读-element-节点下-事件的挂载和更新" tabindex="-1"><a class="header-anchor" href="#_10-源码阅读-element-节点下-事件的挂载和更新" aria-hidden="true">#</a> 10：源码阅读：ELEMENT 节点下，事件的挂载和更新</h2><ol><li><p>增加测试实例代码<code>vue-next-3.2.37/packages/vue/examples/mine/render-elemet-listener.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你好呀&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;点我&#39;</span>
  <span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
      <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ondblclick</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;双击获得大奖了&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;我又点击了&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&#39;双击我&#39;</span>
    <span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看 <code>vue-next-3.2.37/packages/runtime-dom/src/patchProp.ts</code>中的处理,里面做了一些列的判断，最终调用了<code>patchEvent</code>函数处理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> patchProp<span class="token operator">:</span> DOMRendererOptions<span class="token punctuation">[</span><span class="token string">&#39;patchProp&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  el<span class="token punctuation">,</span>
  key<span class="token punctuation">,</span>
  prevValue<span class="token punctuation">,</span>
  nextValue<span class="token punctuation">,</span>
  isSVG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  prevChildren<span class="token punctuation">,</span>
  parentComponent<span class="token punctuation">,</span>
  parentSuspense<span class="token punctuation">,</span>
  unmountChildren
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">}</span><span class="token operator">...</span>
   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// isOn 的判断逻辑 (key: string) =&gt; /^on[^a-z]/.test(key)</span>
     <span class="token comment">// 如果属性名字是以 on 开头的，并且不是 以 onUpdate: 开头的</span>
     <span class="token comment">// ignore v-model listeners</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isModelListener</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// isModelListener: (key) =&gt; key.startsWith(&#39;onUpdate:&#39;)</span>
      <span class="token function">patchEvent</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> prevValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着查看<code>vue-next-3.2.37/packages/runtime-dom/src/modules/events.ts</code>中的处理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchEvent</span><span class="token punctuation">(</span>
  el<span class="token operator">:</span> Element <span class="token operator">&amp;</span> <span class="token punctuation">{</span> _vei<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Invoker <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  rawName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  prevValue<span class="token operator">:</span> EventValue <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  nextValue<span class="token operator">:</span> EventValue <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// vei = vue event invokers</span>
  <span class="token comment">// 声明一个_vei属性挂载在 el 上,初始值为一个对象 {}</span>
  <span class="token keyword">const</span> invokers <span class="token operator">=</span> el<span class="token punctuation">.</span>_vei <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>_vei <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 是否存在这个事件对象，用来处理更新同事件的回调函数</span>
  <span class="token keyword">const</span> existingInvoker <span class="token operator">=</span> invokers<span class="token punctuation">[</span>rawName<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextValue <span class="token operator">&amp;&amp;</span> existingInvoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// patch</span>
    <span class="token comment">// 如果要设置的属性值存在，并且之间绑定过同名属性的事件，就直接赋值即可，这样解决了频繁的删除、新增事件时非常消耗性能的问题。</span>
    existingInvoker<span class="token punctuation">.</span>value <span class="token operator">=</span> nextValue
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果不存在</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parseName</span><span class="token punctuation">(</span>rawName<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// add: 新的值存在，就代表添加，调用 createInvoker 函数</span>
      <span class="token keyword">const</span> invoker <span class="token operator">=</span> <span class="token punctuation">(</span>invokers<span class="token punctuation">[</span>rawName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createInvoker</span><span class="token punctuation">(</span>
        nextValue<span class="token punctuation">,</span>
        instance
      <span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> invoker<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existingInvoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// remove：如果之前绑定过，但是此次不存在就进行移除</span>
      <span class="token function">removeEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> existingInvoker<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
      <span class="token comment">// 并从 invokers 赋值该属性值为 undefined</span>
      invokers<span class="token punctuation">[</span>rawName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回一个经过包装后的函数，调用后的返回值，有一个 value 属性指向用户的设置回调</span>
<span class="token keyword">function</span> <span class="token function">createInvoker</span><span class="token punctuation">(</span>
  initialValue<span class="token operator">:</span> EventValue<span class="token punctuation">,</span>
  instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这是一个回调函数</span>
  <span class="token keyword">const</span> invoker<span class="token operator">:</span> <span class="token function-variable function">Invoker</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// async edge case #6566: inner click event triggers patch, event handler</span>
    <span class="token comment">// attached to outer element during patch, and triggered again. This</span>
    <span class="token comment">// happens because browsers fire microtask ticks between event propagation.</span>
    <span class="token comment">// the solution is simple: we save the timestamp when a handler is attached,</span>
    <span class="token comment">// and the handler would only fire if the event passed to it was fired</span>
    <span class="token comment">// AFTER it was attached.</span>
    <span class="token keyword">const</span> timeStamp <span class="token operator">=</span> e<span class="token punctuation">.</span>timeStamp <span class="token operator">||</span> <span class="token function">_getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipTimestampCheck <span class="token operator">||</span> timeStamp <span class="token operator">&gt;=</span> invoker<span class="token punctuation">.</span>attached <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// callWithAsyncErrorHandling 是一个加了 try...catch 包装的函数</span>
      <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span>
        <span class="token function">patchStopImmediatePropagation</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> invoker<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
        instance<span class="token punctuation">,</span>
        ErrorCodes<span class="token punctuation">.</span><span class="token constant">NATIVE_EVENT_HANDLER</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>e<span class="token punctuation">]</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  invoker<span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue
  invoker<span class="token punctuation">.</span>attached <span class="token operator">=</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> invoker
<span class="token punctuation">}</span>

<span class="token comment">// 真是当调用的事件回调处理，分为数组、不是数组的判断</span>
<span class="token keyword">function</span> <span class="token function">patchStopImmediatePropagation</span><span class="token punctuation">(</span>
  e<span class="token operator">:</span> Event<span class="token punctuation">,</span>
  value<span class="token operator">:</span> EventValue
<span class="token punctuation">)</span><span class="token operator">:</span> EventValue <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> originalStop <span class="token operator">=</span> e<span class="token punctuation">.</span>stopImmediatePropagation
    e<span class="token punctuation">.</span><span class="token function-variable function">stopImmediatePropagation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">originalStop</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span>e <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_stopped <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_stopped <span class="token operator">&amp;&amp;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><strong>总结：</strong></p><ol><li>我们一共三次进入 <code>patchEvent</code> 方法 <ol><li>第一次进入为 挂载 <code>onClick</code> 行为</li><li>第二次进入为 挂载 <code>onDblclick</code> 行为</li><li>第三次进入为 卸载 <code>onClick</code> 行为</li></ol></li><li>挂载事件，通过 <code>el.addEventListener</code> 完成</li><li>卸载事件，通过 <code>el.removeEventListener</code> 完成</li><li>除此之外，还有一个 <code>_vei</code> 即 <code>invokers</code> 对象 和 <code>invoker</code> 函数，我们说两个东西需要重点关注，那么这两个对象有什么意义呢？</li></ol><h3 id="深入事件更新" tabindex="-1"><a class="header-anchor" href="#深入事件更新" aria-hidden="true">#</a> <strong>深入事件更新</strong></h3><p>在 <code>patchEvent</code> 方法中有一行代码是我们没有讲到的，那就是：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// patch</span>
existingInvoker<span class="token punctuation">.</span>value <span class="token operator">=</span> nextValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这行代码是用来更新事件的，<code>vue</code> 通过这种方式而不是调用 <code>addEventListener</code> 和 <code>removeEventListener</code> 解决了<strong>频繁的删除、新增事件</strong>时非常消耗性能的问题。</p><h2 id="_11-框架实现-element-节点下-事件的挂载和更新" tabindex="-1"><a class="header-anchor" href="#_11-框架实现-element-节点下-事件的挂载和更新" aria-hidden="true">#</a> 11： 框架实现：ELEMENT 节点下，事件的挂载和更新</h2><ol><li><p>修改<code>vue-next-mini-mine/packages/runtime-dom/src/patchProp.ts</code>文件，完善里面的处理事件的方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> patchEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./modules/event&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">patchProp</span> <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> Element<span class="token punctuation">,</span> key<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchEvent</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> preValue<span class="token punctuation">,</span> nextValue<span class="token punctuation">)</span> <span class="token comment">// 新增处理事件的回调</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSetAsProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>vue-next-mini-mine/packages/runtime-dom/src/modules/event.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchEvent</span><span class="token punctuation">(</span>
  el<span class="token operator">:</span> Element <span class="token operator">&amp;</span> <span class="token punctuation">{</span> _vei<span class="token operator">?</span><span class="token operator">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  prev<span class="token punctuation">,</span>
  next
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> invokers <span class="token operator">=</span> el<span class="token punctuation">.</span>_vei <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>_vei <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 增加 事件缓存对象 属性</span>
  <span class="token keyword">const</span> existingInvoker <span class="token operator">=</span> invokers<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&amp;&amp;</span> existingInvoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新回调</span>
    existingInvoker<span class="token punctuation">.</span>value <span class="token operator">=</span> next
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rawName <span class="token operator">=</span> <span class="token function">parseName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 处理事件属性名，</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> invoker <span class="token operator">=</span> <span class="token punctuation">(</span>invokers<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createInvoker</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>
      el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>rawName<span class="token punctuation">,</span> invoker<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existingInvoker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>rawName<span class="token punctuation">,</span> existingInvoker<span class="token punctuation">)</span> <span class="token comment">// 移除事件</span>
      invokers<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 缓存对象中的事件值 置为 undefined</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">parseName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 截取事件属性并小写</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createInvoker</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">invoker</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是数组类型，就需要循环执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>invoker<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      invoker<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      invoker<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> invoker<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  invoker<span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue
  <span class="token keyword">return</span> invoker
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加测试示例文件<code>vue-next-mini-mine/packages/vue/example/run-time/render-element-event.html</code>,内容如下（注意：这里用了<strong>双击事件</strong>，打开浏览器不要使用 手机 视图，<strong>手机视图上双击事件不会触发</strong>）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你好呀&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;点我&#39;</span>
  <span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
      <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">onDblclick</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;双击获得大奖&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;我又双击了&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&#39;双击&#39;</span>
    <span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_12-局部总结" tabindex="-1"><a class="header-anchor" href="#_12-局部总结" aria-hidden="true">#</a> 12: 局部总结</h2><p>目前我们已经完成了针对于 <code>ELEMENT</code> 的：</p><ol><li>挂载</li><li>更新</li><li>卸载</li><li><code>patch props</code> 打补丁 <ol><li><code>class</code></li><li><code>style</code></li><li><code>event</code></li><li><code>attr</code></li></ol></li></ol><p>等行为的处理。</p><p>针对于 <strong>挂载、更新、卸载</strong> 而言，我们主要使用了 <code>packages/runtime-dom/src/nodeOps.ts</code> 中的浏览器兼容方法进行的实现，比如：</p><ol><li><code>doc.createElement</code></li><li><code>parent.removeChild</code></li></ol><p>等等。</p><p>而对于 <code>patch props</code> 的操作而言，因为 <code>HTML Attributes</code> 和 <code>DOM Properties</code> 不同的问题，所以我们需要针对不同的 <code>props</code> 进行分开的处理。</p><p>而最后的 <code>event</code>，本身并不复杂，但是 <code>vei</code> 的更新思路也是非常值得学习的一种事件更新方案。</p><p>至此，针对于 <code>ELEMENT</code> 的处理终于完成啦~</p><p>接下来是 <code>Text</code> 、<code>Comment</code> 以及 <code>Component</code> 的渲染行为。</p><h2 id="_13-框架实现-renderer-渲染器下-text-节点的挂载和更新" tabindex="-1"><a class="header-anchor" href="#_13-框架实现-renderer-渲染器下-text-节点的挂载和更新" aria-hidden="true">#</a> 13: 框架实现：renderer 渲染器下，Text 节点的挂载和更新</h2><ol><li><p>Text 节点的处理在 <code>vue-next-mini-mine/packages/runtime-core/src/renderer.ts</code>文件中的<code>baseCreateRender</code>方法中的<code>patch</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RendererOptions</span> <span class="token punctuation">{</span>
  <span class="token function">createText</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>
  <span class="token function">setText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    insert<span class="token operator">:</span> hostInsert<span class="token punctuation">,</span>
    createText<span class="token operator">:</span> hostCreateText<span class="token punctuation">,</span> <span class="token comment">// 新增</span>
    setText<span class="token operator">:</span> hostSetText <span class="token comment">// 新增</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> options

 <span class="token comment">// ...</span>
 <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> Text<span class="token operator">:</span>
     <span class="token function">processText</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token comment">// 新增</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> Comment<span class="token operator">:</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> Fragment<span class="token operator">:</span>
      <span class="token keyword">break</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">processText</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 挂载节点操作</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateText</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新操作</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>el<span class="token operator">!</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children <span class="token operator">!==</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">hostSetText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接下来到我们的<code>nodeOps.ts</code>文件中进行处理,增加两个方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> nodeOps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">createText</span><span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> doc<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">setText</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> text
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加测试示例文件<code>vue-next-mini-mine/packages/vue/example/run-time/render-text.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token string">&#39;你好，世界&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行后，可以看到页面中的运行效果, 测试挂载和更新成功</p></li></ol><h2 id="_14-框架实现-renderer-渲染器下-comment-节点的挂载和更新" tabindex="-1"><a class="header-anchor" href="#_14-框架实现-renderer-渲染器下-comment-节点的挂载和更新" aria-hidden="true">#</a> 14: 框架实现：renderer 渲染器下，Comment 节点的挂载和更新</h2><p>首先知晓：<code>comment</code> 节点是一个静态节点，不涉及到更新，所以它没有更新操作</p><ol><li><p>在<code>packages/runtime-core/src/renderer.ts</code>中添加 <code>Comment</code> 处理逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RendererOptions</span> <span class="token punctuation">{</span>
  <span class="token function">createComment</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    insert<span class="token operator">:</span> hostInsert<span class="token punctuation">,</span>
    createComment<span class="token operator">:</span> hostCreateComment
  <span class="token punctuation">}</span> <span class="token operator">=</span> options
 <span class="token operator">...</span>
 <span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">case</span> Comment<span class="token operator">:</span>
        <span class="token function">processComment</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// 处理 comment 函数，如果之前没有，就进行创建 挂载操作，并把 新节点的 el 属性指向该节点</span>
  <span class="token keyword">const</span> <span class="token function-variable function">processComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateComment</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
      <span class="token comment">// 如果存在，就只需要把之前的 el 属性赋值即可，因为没有更新操作</span>
      newVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>el
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着在<code>packages/runtime-dom/src/nodeOps.ts</code>增加<code>createComment</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> nodeOps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">createComment</span><span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> doc<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写测试用例文件<code>packages/vue/examples/run-time/render-comment.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render<span class="token punctuation">,</span> Comment <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>Comment<span class="token punctuation">,</span> <span class="token string">&#39;i am a comment&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行浏览器，可以看到如下效果（页面中渲染了 注释节点）：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a0da6050d354765b7925cf64708d825~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_15-框架实现-renderer-渲染器下-fragment-节点的挂载和更新" tabindex="-1"><a class="header-anchor" href="#_15-框架实现-renderer-渲染器下-fragment-节点的挂载和更新" aria-hidden="true">#</a> 15: 框架实现：renderer 渲染器下，Fragment 节点的挂载和更新</h2><ol><li><p>在<code>packages/runtime-core/src/renderer.ts</code>中添加 <code>Fragment</code> 处理逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> normalizeVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./commponentRenderUtis&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>  isString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token operator">...</span>
 <span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">case</span> Fragment<span class="token operator">:</span>
        <span class="token function">processFragement</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">const</span> <span class="token function-variable function">processFragement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">mountChildren</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">patchChildren</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 对children 的循环渲染</span>
  <span class="token keyword">const</span> <span class="token function-variable function">mountChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nodeChildren<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>nodeChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nodeChildren <span class="token operator">=</span> nodeChildren<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nodeChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>nodeChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>nodeChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 之前的逻辑</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patchChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
  <span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建文件<code>packages/runtime-core/src/commponentRenderUtis.ts</code>内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createVNode<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cloneIfMounted</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// strings and numbers</span>
    <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cloneIfMounted</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> child
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新增测试用例代码<code>packages/vue/examples/run-time/render-fragment.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>Fragment<span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>Fragment<span class="token punctuation">,</span> <span class="token string">&#39;你好，世界&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开浏览器运行，可以看到刚开始渲染的结果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/288610aa549d4d0795d8c4a8206383b2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>2s 后，视图进行更新，页面内容如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be3ba45de884780a9e80c4c7b017837~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h3 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h3>`,49),x={href:"https://juejin.cn/post/7185608954171359292#heading-5",target:"_blank",rel:"noopener noreferrer"};function E(V,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[s("HTML Attributes"),t(a)]),s(" 所代表的是"),k,s("。比如我们以以下 DOM 为例")]),d,n("p",null,[n("a",v,[s("DOM Properties"),t(a)]),s(" 所代表的就是在"),m,s("，比如下面的")]),b,n("ol",null,[n("li",null,[n("a",g,[s("Element.setAttribute"),t(a)]),s(": 该方法"),y]),n("li",null,[n("a",h,[s("dom.xx"),t(a)]),s("：相当于"),w])]),f,n("p",null,[n("a",x,[s("vue3 源码学习，实现一个 mini-vue（九）：构建 renderer 渲染器之 ELEMENT 节点的各种属性挂载"),t(a)])])])}const T=p(i,[["render",E],["__file","index-09.html.vue"]]);export{T as default};
