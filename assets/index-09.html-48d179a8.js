import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t="/assets/5f16cc510001af0106400426-abb2aa99.jpg",p="/assets/5f16cc7f0001ce3028581184-ed05850a.png",c="/assets/5f16cc8d0001b05125481064-1958019b.png",i="/assets/5f16cc9b000128ed25361476-dfa8c75e.png",l="/assets/5f16cca700017be118620590-dfe8d4c4.png",o="/assets/5f16ccb10001349e26461102-631cf30f.png",r="/assets/5f16ccbe000161ab27821108-fca6dfd2.png",d={},u=e('<h1 id="_09-站在巨人的肩膀上热门-docker-镜像介绍-二" tabindex="-1"><a class="header-anchor" href="#_09-站在巨人的肩膀上热门-docker-镜像介绍-二" aria-hidden="true">#</a> 09-站在巨人的肩膀上热门 Docker 镜像介绍（二）</h1><p><img src="'+t+'" alt="img"></p><blockquote><p>读书给人以快乐、给人以光彩、给人以才干。——培根</p></blockquote><p>上一篇文章介绍了基础的热门 Docker 操作系统镜像，这篇文章我们来介绍一些应用镜像，也是我们可以直接拿来使用的。</p><p>很多时候我们要学习一门新的技术，比如 MySQL （这里举个例子，MySQL 当然不能算是新技术），如果不使用 Docker 的情况下，我们第一步是配置开发环境。但是很多软件的环境配置起来非常复杂，这一步就吓退了很多初学者。借助于 Docker 镜像，我们将不再受到这些困扰，因为镜像中包含了运行该软件需要的所有软件依赖，这样我们就可以将主要精力用来学习核心技术，而不是环境配置上。</p><p>下面我们就来介绍几个热门的 Docker 镜像：Nginx、MySQL、Redis。其他镜像使用各位读者可以举一反三。</p><h2 id="_1-nginx" tabindex="-1"><a class="header-anchor" href="#_1-nginx" aria-hidden="true">#</a> 1. Nginx</h2><p>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，支持 HTTP、HTTPS、SMTP、POP3、IMAP 等协议。我们可以通过 docker search 命令搜索官方镜像中心有哪些版本的 nginx，如下图。</p><p><img src="'+p+'" alt="图片描述"></p><p>其中第一个 OFFICIAL 标志显示 OK 的为官方镜像。同时我们也可以通过官方的 Docker Hub 网站搜索，结果如下图：</p><p><img src="'+c+'" alt="图片描述"></p><p>其中第一个即为官方 Nginx 镜像，点进去我们可以看到镜像描述、评价、tag 等。</p><p><img src="'+i+`" alt="图片描述"></p><p>下面我们来简单演示一下镜像的使用，首先通过 docker pull 命令下载镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull nginx</span>
Using default tag: latest
latest: Pulling from library/nginx
bc51dd8edc1b: Pull complete
66ba67045f57: Pull complete
bf317aa10aa5: Pull complete
Digest: sha256:ad5552c786f128e389a0263104ae39f3d3c7895579d45ae716f528185b36bc6f
Status: Downloaded newer image <span class="token keyword">for</span> nginx:latest
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep nginx</span>
nginx               latest              2073e0bcb60e        <span class="token number">4</span> days ago          127MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用 nginx 我们需要准备一个 index.html 也就是网站初始页，使用 nginx 镜像的时候，我们可以在启动的时候通过 volume 的方式将 index.html 映射进去：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run -p 8080:80 -d -v /root/nginx:/usr/share/nginx/html nginx:latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 -p 是将宿主机的 8080 端口映射到容器，-v 是数据卷的意思，我们后面会详述，将宿主机的 /root/nginx 目录映射到容器中的 /usr/share/nginx/html 目录。细心一点的同学会发现不管是端口映射还是数据卷映射，都是宿主机在前，容器在后。在宿主机的 /root/nginx 目录存放在 index.html，也就是网站的初始页，内容很简单，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Docke技术原理与实践(imooc.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>站在巨人的肩膀上：热门 Docker 镜像介绍（二）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Nginx 首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们使用宿主机的浏览器打开 0.0.0.0:8080 端口就能看到 index.html 的内容显示在浏览器上，如下图。</p><p><img src="`+l+'" alt="图片描述"></p><h2 id="_2-mysql" tabindex="-1"><a class="header-anchor" href="#_2-mysql" aria-hidden="true">#</a> 2. MySQL</h2><p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL <strong>是最流行的关系型数据库管理系统之一</strong>，在 WEB 应用方面，MySQL 是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p><strong>关系数据库将数据保存在不同的表中</strong>，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。<strong>MySQL 软件采用了双授权政策，分为社区版和商业版</strong>，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><p>下面我们像介绍 Nginx 镜像一样，直接通过 docker search 搜索 mysql 相关的镜像，结果如下图。</p><p><img src="'+o+`" alt="图片描述"></p><p>我们可以看到最上面两个 MySQL 和 MariaDB 就是官方提供的镜像。MariaDB 源于 MySQL 的一个分支，主要由开源社区进行维护，采用 GPL 授权许可。MariaDB 完全兼容 MySQL，包括 API 和命令行，我们完全可以将 MariaDB 作为 MySQL 的替代品使用，实际上确实有很多公司是这么使用的。所以这里我们通过 docker search mysql 的时候，MariaDB 的结果也出来了。 我们下面演示一下 MySQL 的镜像使用。首先通过 docker pull 下载镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep mysql</span>
mysql               latest              791b6e40940c        <span class="token number">4</span> days ago          465MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，我们这里没有加 tag，下载的是 latest 版本，也就是 8.x 版本。如果要使用 5.7 版本，可以指定 mysql:5.7。下面启动 MySQL 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql:latest</span>
6cb8b944810bd318cab711b8cb15596f4b5514470dcfa06401131335043b66ae
<span class="token punctuation">[</span>root@emr-header-1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
6cb8b944810b        mysql:latest        <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">5</span> seconds ago       Up <span class="token number">4</span> seconds        <span class="token number">33060</span>/tcp, <span class="token number">0.0</span>.0.0:3307-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp   wonderful_neumann
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中通过环境变量 MYSQL_ROOT_PASSWORD 指定了 root 用户的密码。由于我们这里直接使用了 latest 版本的，如果我们直接通过 MySQL Client 连接的话会报如下的错。原因是mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># mysql -h 192.168.64.82 -P 3307 -uroot -p</span>
Enter password:
ERROR <span class="token number">2059</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Authentication plugin <span class="token string">&#39;caching_sha2_password&#39;</span> cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面出现的问题我们可以通过迂回的方式进行解决，首先通过 docker exec 登录到 MySQL 容器中解决。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># docker exec -ti 945fb3c4fc2f /bin/bash</span>
root@945fb3c4fc2f:/<span class="token comment"># mysql -uroot -p123456</span>
mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\\</span>g.
Your MySQL connection <span class="token function">id</span> is <span class="token number">11</span>
Server version: <span class="token number">8.0</span>.19 MySQL Community Server - GPL

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2020</span>, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type <span class="token string">&#39;help;&#39;</span> or <span class="token string">&#39;\\h&#39;</span> <span class="token keyword">for</span> help. Type <span class="token string">&#39;\\c&#39;</span> to <span class="token function">clear</span> the current input statement.

mysql<span class="token operator">&gt;</span> ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们再通过 MySQL 客户端进行登录就可以了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker1 ~<span class="token punctuation">]</span><span class="token comment"># mysql -h 192.168.64.82 -P 3307 -uroot -p</span>
Enter password:
Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\\</span>g.
Your MySQL connection <span class="token function">id</span> is <span class="token number">16</span>
Server version: <span class="token number">8.0</span>.19 MySQL Community Server - GPL

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2018</span>, Oracle, MariaDB Corporation Ab and others.

Type <span class="token string">&#39;help;&#39;</span> or <span class="token string">&#39;\\h&#39;</span> <span class="token keyword">for</span> help. Type <span class="token string">&#39;\\c&#39;</span> to <span class="token function">clear</span> the current input statement.

MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>
+--------------------+
<span class="token operator">|</span> Database           <span class="token operator">|</span>
+--------------------+
<span class="token operator">|</span> information_schema <span class="token operator">|</span>
<span class="token operator">|</span> mysql              <span class="token operator">|</span>
<span class="token operator">|</span> performance_schema <span class="token operator">|</span>
<span class="token operator">|</span> sys                <span class="token operator">|</span>
+--------------------+
<span class="token number">4</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-redis" tabindex="-1"><a class="header-anchor" href="#_3-redis" aria-hidden="true">#</a> 3. Redis</h2><p>Redis 是使用 C 语言编写的高性能 key-value 数据库系统，遵守开源 BSD 协议。在日常开发中，Redis 经常被用来当做缓存使用，后端在加一层持久化存储，比如 MySQL 等。我们也可以通过 docker search 来搜索一下 docker hub 中包含的 Redis 镜像，下图是搜索结果。</p><p><img src="`+r+`" alt="图片描述"></p><p>我们先通过 docker pull 命令下载上图中第一个，也就是官方的 Redis 镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull redis</span>
Using default tag: latest
latest: Pulling from library/redis
bc51dd8edc1b: Already exists
37d80eb324ee: Pull complete
392b7748dfaf: Pull complete
48df82c3534d: Pull complete
2ec2bb0b4b0e: Pull complete
1302bce0b2cb: Pull complete
Digest: sha256:7b84b346c01e5a8d204a5bb30d4521bcc3a8535bbf90c660b8595fad248eae82
Status: Downloaded newer image <span class="token keyword">for</span> redis:latest
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep redis</span>
redis               latest              44d36d2c2374        <span class="token number">4</span> days ago          <span class="token number">98</span>.2MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 docker run 启动容器，我们这里使用默认配置。如果需要指定配置，可以先将配置文件通过数据卷的方式映射到容器内部，然后将配置文件作为启动参数加进去。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-test <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候我们启动一个 redis client，也就是通过 redis-cli 连接上 redis-test 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker nginx<span class="token punctuation">]</span><span class="token comment"># redis-cli -p 6379</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> abc <span class="token number">1234</span>
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时启动另一个 redis client 来查看这个 key。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get abc
<span class="token string">&quot;1234&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>限于篇幅，本文只简单介绍了几个常用的热门镜像，同时也告诉大家这种通过 Docker 镜像来学习技术的方式。希望后面大家在学习的过程的中可以按本文介绍的思路来举一反三。</p>`,49),m=[u];function k(v,b){return s(),a("div",null,m)}const h=n(d,[["render",k],["__file","index-09.html.vue"]]);export{h as default};
