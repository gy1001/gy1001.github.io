import{_ as n,p as s,q as a,a1 as p}from"./framework-e8cb8151.js";const t={},e=p(`<h1 id="_25-高阶函数" tabindex="-1"><a class="header-anchor" href="#_25-高阶函数" aria-hidden="true">#</a> 25-高阶函数</h1><p>我想大家对于面向对象相关的知识都应该有所涉猎「如果还没有接触过，可以在后面的章节中学习」，有一个问题会困扰很多人：</p><p>在构造函数中，如果我们使用了 this，那么这个 this 指向的是谁？ 如果在定义的原型方法中使用 this，这个 this 又指向谁？是构造函数？原型？还是实例？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Jake&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道构造函数其实就是普通的函数，我们也知道 this 其实是在函数运行时才确认的。那么是什么导致了构造函数变得特别？</p><p><strong>答案与 new 关键字有关。</strong></p><p>如果自定义一个 New 方法，来模拟关键字 new 的能力，那么应该如下实现：</p><ol><li>调用函数</li><li>创建一个新的对象,把实例对象的隐式原型指向构造函数的显式原型</li><li>改变 this 指向,把 this 绑定在实例对象上</li><li>返回一个对象,如果构造函数本身返回的是一个对象,那么就返回这个对象,如果不是就返回这个实例对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将构造函数以参数形式传入</span>
<span class="token keyword">function</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 声明一个中间对象，该对象为最终返回的实例</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>prototype <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将实例的原型指向构造函数的原型</span>
    res<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> func<span class="token punctuation">.</span>prototype
  <span class="token punctuation">}</span>

  <span class="token comment">// ret为构造函数执行的结果，这里通过apply，将构造函数内部的this指向修改为指向res，即为实例对象</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 当我们在构造函数中明确指定了返回对象时，那么new的执行结果就是该返回对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ret <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ret
  <span class="token punctuation">}</span>

  <span class="token comment">// 如果没有明确指定返回对象，则默认返回res，这个res就是实例对象</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便大家理解，我在例子中做了详细的注解。通过 New 方法的实现我们可以看出，当 New 执行时，利用 apply 显示的指定了传入的构造函数的 this 指向。因此当我们使用 New 创建实例时，<strong>构造函数中 this 是指向被创建的实例。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
<span class="token punctuation">}</span>

<span class="token comment">// 使用上例中封装的New方法来创建实例</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;Jake&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Jake</span>
p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Tom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把当前函数看成基础函数的话，那么<strong>高阶函数，就是让当前函数获得额外能力的函数。</strong></p><p>如果我们把构造函数看成基础函数的话，那么 New 方法，就是构造函数的高阶函数。构造函数本就是和普通函数一样，没有什么区别。但是因为 new 的存在，它获得了额外的能力。New 方法每次执行都会创建一个新的中间对象，并将中间对象的原型，指向构造函数的原型，将构造函数的 this 指向该中间对象。这样统一逻辑的封装，就是高阶函数的运用。</p><p>如果简单粗暴一点的理解，凡是接收一个函数作为参数的函数，都是高阶函数。但是如果这样理解，那么我们可能并不能很好的利用高阶函数的特性来让我们的代码变得更加优雅。因为高阶函数其实是一个高度封装的过程，理解他需要一点神奇的想象力。接下来，我们借助几个例子，来理解高阶函数的封装。</p><h2 id="_01-数组-map-方法封装的思考过程" tabindex="-1"><a class="header-anchor" href="#_01-数组-map-方法封装的思考过程" aria-hidden="true">#</a> 01-数组 map 方法封装的思考过程</h2><p>数组有一个 map 方法，它对数组中的每一项运行特定的函数，返回每次函数调用的结果组成的新数组。通俗来说，就是遍历数组的每一项，并且在 map 的第一个参数中进行运算并返回计算结果。最后返回一个由所有计算结果组成的新数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个被遍历的数据array</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token comment">// map方法第一个参数为一个回调函数，该函数拥有三个参数</span>
<span class="token comment">//  + 第一个参数表示 array 数组中的每一项</span>
<span class="token comment">//  + 第二个参数表示当前遍历的索引值</span>
<span class="token comment">//  + 第三个参数表示数组本身</span>
<span class="token comment">//  + 该函数中的 this 指向为 map 方法的第二个参数，若该参数不存在，则this指向丢失</span>
<span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 可运行查看每一项参数的具体值</span>
    <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment">// newArray为一个新数组，由map遍历的结果组成</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// [2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子详细分析了 map 的所有细节。现在需要我们思考的是，如果要我们自己来封装这样一个方法，应该怎么办？</p><p>所有的数组遍历方法，都是在 for 循环的基础之上封装的，因此我们可以从 for 循环开始考虑。</p><p>一个 for 循环的过程其实很好封装，但是难点在于，for 循环里面要对数组每一子项所做的事情很难用一个固定的模式把它封装起来，在不同的场景下，for 循环对数据的处理肯定是不一样的。那么怎么办？</p><p>在封装函数时，一个不确定的变量，我们可以往函数中传入参数的方式来指定它。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么同样的道理，一个不确定的处理过程，我们可以往函数中传入另外一个函数的方式来自定义这个处理过程。这里也是体现了函数作为一等公民的重要特点。</p><p>基于这个思路，就可以按照如下的方式封装 map 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 首先定义一个数组来保存每一项的运算结果，最后返回</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length
    <span class="token comment">// 封装for循环过程</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将每一项的运算操作丢进fn里，利用call方法指定fn的this指向与具体参数</span>
      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;TypeError: &#39;</span> <span class="token operator">+</span> fn <span class="token operator">+</span> <span class="token string">&#39; is not a function.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回每一项运算结果组成的新数组</span>
  <span class="token keyword">return</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// [2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回过头反思 map 方法的封装过程，可以发现，其实我们封装的是一个数组的 for 循环过程。每一个数组在使用 for 循环遍历时，虽然无法确认在 for 循环中到底会干什么事情，但是我们可以确定的是，他们一定会使用 for 循环。</p><p>于是，可以把使用 for 循环这个公共的逻辑封装起来，而具体要干什么事，则以一个函数作为参数的形式，来让使用者自定义。这个被作为参数传入的函数，我们可以称之为基础函数。而我们封装的 map 方法，就可以称之为高阶函数。</p><p><strong>高阶函数的使用思路正是在于此，他其实是一个封装公共逻辑的过程。</strong> 例如此处的 for 循环逻辑。</p><p>在实践中，高阶函数的用途也十分广泛，接下来我们通过另外一个例子再次来感受一下高阶函数的魅力。</p><h2 id="_02-实践" tabindex="-1"><a class="header-anchor" href="#_02-实践" aria-hidden="true">#</a> 02-实践</h2><p>假设我们正在做一个音乐社区的项目。</p><p>很显然的，在进入这个项目中的每一个页面时，我们都必须判断当前用户是否已经登录。因为有人登录与没人登录所展示的页面肯定是有很多差别的。不仅如此，在确认用户登录之后，我们还要得到用户的具体信息，昵称，姓名，vip 等级，权限范围等。</p><p>因此用户状态的判断逻辑，是每一个页面都必须要做的一个公共逻辑。在学习了高阶函数之后，可以用高阶函数来做这件事情。</p><p>为了强化读者朋友们的模块化思维，这里继续使用模块化的方式来完成这个 demo。根据现有的知识，我们可以利用自执行函数来划分模块。</p><p>首先需要一个高阶函数来专门处理获取用户状态的逻辑。因此可以单独将这个高阶函数封装为一个独立的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 高阶函数withLogin，用来判断当前的用户状态</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用随机数的方式来模拟一个获取用户信息的方法</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getLogin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">userinfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">&#39;jake&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
        <span class="token literal-property property">userid</span><span class="token operator">:</span> <span class="token string">&#39;666666&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">withLogin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">basicFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> loginInfo <span class="token operator">=</span> <span class="token function">getLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将loginInfo以参数的形式传入基础函数中</span>
    <span class="token keyword">return</span> <span class="token function">basicFn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> loginInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  window<span class="token punctuation">.</span>withLogin <span class="token operator">=</span> withLogin<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们要展示主页，可以通过一个 renderIndex 的方法来渲染。当然，渲染主页仍然是一个单独的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> withLogin <span class="token operator">=</span> window<span class="token punctuation">.</span>withLogin

  <span class="token keyword">const</span> <span class="token function-variable function">renderIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">loginInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里处理index页面的逻辑</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginInfo<span class="token punctuation">.</span>login<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理已经登录之后的逻辑</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里处理未登录的逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 对外暴露接口时，使用高阶函数包一层，来执行当前页面的登录状态的判断</span>
  window<span class="token punctuation">.</span>renderIndex <span class="token operator">=</span> <span class="token function">withLogin</span><span class="token punctuation">(</span>renderIndex<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的道理，当我们想要展示其他的页面，例如个人主页时，会有一个 renderPersonal 方法，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> withLogin <span class="token operator">=</span> window<span class="token punctuation">.</span>withLogin
  <span class="token keyword">const</span> <span class="token function-variable function">renderPersonal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">loginInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginInfo<span class="token punctuation">.</span>login<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// do something</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// do other something</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>renderPersonal <span class="token operator">=</span> <span class="token function">withLogin</span><span class="token punctuation">(</span>renderPersonal<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用高阶函数封装每个页面的公共逻辑之后，会发现代码逻辑变得非常清晰，而且更加统一。当我们再写新的页面逻辑，就在此基础上完成即可，就再也不用去考虑已经封装过的逻辑。</p><p>最后，在合适的时机使用这些渲染函数即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">renderIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目中使用高阶函数，你的代码会变得更加优雅，也更具逼格。</p>`,44),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","index-25.html.vue"]]);export{r as default};
