import{_ as e,p as t,q as i,a1 as d}from"./framework-e8cb8151.js";const a="/assets/image-20230729001523496-c77f00e7.png",s="/assets/image-20230729001612181-ee8cf0e4.png",c="/assets/image-20230729001619523-b8acce40.png",r="/assets/image-20230729001626223-0d564d32.png",n="/assets/image-20230729001634727-cca79766.png",o="/assets/image-20230729001642800-11edc4ce.png",p="/assets/image-20230729001649993-8cf64f7b.png",l="/assets/image-20230729001700373-692f3972.png",g="/assets/image-20230729001707823-28b19fb5.png",m="/assets/image-20230729001713995-877e66e1.png",v="/assets/image-20230729001722443-cab2f2e8.png",u="/assets/image-20230729001730634-31d78b2b.png",x={},h=d('<h1 id="_20-单独回滚代码-记录不变只回滚代码" tabindex="-1"><a class="header-anchor" href="#_20-单独回滚代码-记录不变只回滚代码" aria-hidden="true">#</a> 20-单独回滚代码：记录不变只回滚代码</h1><p><img src="'+a+`" alt="image-20230729001523496"></p><blockquote><p>人要有毅力，否则将一事无成。——居里夫人</p></blockquote><p>有些情况下我们需要将代码回滚，但是不回滚提交记录，原因可能是需要这些提交记录去追责，也有可能是服务器设置了不能强制提交等等原因。</p><p>此时如果使用 reset 去出去就显得不太合适，操作起来也会略显繁琐，在 Git 中有一个更加适合我们的命令 <code>git revert</code>，它就可以帮我我们快速解决刚才这个问题。</p><h2 id="_20-1-构造实验环境" tabindex="-1"><a class="header-anchor" href="#_20-1-构造实验环境" aria-hidden="true">#</a> 20.1 构造实验环境</h2><p>我们在使用 <code>git revert</code> 命令之前，先来构建一个实验环境，用来体现此命令的价值所在，首先我们进入 Git 仓库中，然后去修改一个文件，并通过 <code>git status</code> 命令展示 git 的文件状态，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &#39;场景复现&#39; &gt;&gt; index.php &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的文件状态信息如下图所示：</p><p><img src="`+s+`" alt="image-20230729001612181"></p><p>在上图中可以看到文件 <code>index.php</code> 已经被修改，接下来我们将修改的内容通过 <code>git commit</code> 提交到版本控制器中去，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit . -m &#39;回滚代码不回滚记录测试&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的提示信息如下图所示：</p><p><img src="`+c+`" alt="image-20230729001619523"></p><p>在图中可以看到一个文件被修改，增加了一行代码的提示，说明已经提交成功，接着我们将提交的版本推送到远程仓库中去，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，远程仓库返回的信息如下图所示：</p><p><img src="`+r+`" alt="image-20230729001626223"></p><p>从上图中可以看出，已经成功将版本推送到远程仓库中。</p><h3 id="_20-2-使用-reset-回滚" tabindex="-1"><a class="header-anchor" href="#_20-2-使用-reset-回滚" aria-hidden="true">#</a> 20.2 使用 reset 回滚</h3><p>假设此时我发现刚才提交的代码有问题，需要撤销这次修改，那么我们可能会使用前面学到的 <code>git reset</code> 命令，但这个命令有些情况下并不适合，下面我将使用 <code>git reset</code> 命令与 <code>git revert</code> 命令进行对比。</p><p>首先我们通过 <code>reset</code> 命令将版本恢复到上一个版本，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="`+n+`" alt="image-20230729001634727"></p><p>在上图中可以看到已经撤销版本成功，文件 <code>index.php</code> 的变更已经在工作区中，接着我们尝试将老版本再次推送到远程，参考命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，远程仓库提示拒绝推送，如下图所示：</p><p><img src="`+o+`" alt="image-20230729001642800"></p><p>在上图中推送失败，是因为推送的版本比远程仓库版本老，如果要强制推送可以使用 <code>git push -f</code>，但很多时候我们远程仓库是设置了保护分支的，所以加上 <code>-f</code> 参数依然推送不了，所以有些时候并不适合使用 <code>git reset</code> 命令。</p><p>在明确 <code>git reset</code> 方式不合适之后，我们把代码回滚到远程最新的位置，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset --hard origin/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="`+p+`" alt="image-20230729001649993"></p><p>在上图中可以看出，Git 代码已经恢复到最新的版本，为了严谨的实验环境我需要再次通过 <code>git log</code> 来确认版本记录，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的版本记录列表如下图所示：</p><p><img src="`+l+`" alt="image-20230729001700373"></p><p>在图中可以看到我们之前构造的实验环境已经恢复完成，同时我们选择任意一个版本将它的 commitid 复制下来，用于我们后面的 <code>git revert</code> 实验。</p><h2 id="_20-3-revert-操作" tabindex="-1"><a class="header-anchor" href="#_20-3-revert-操作" aria-hidden="true">#</a> 20.3 revert 操作</h2><p>revert 可以回滚指定的版本的代码，回滚代码后会生成一个新的版本号，记录下整个版本变动流程，就可以用 <code>revert</code> 这种操作方法，下面我们使用 revert 回滚，参考命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git revert 6d8feb147973711d08211f953f3d7c463ee1e88f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，会弹出一个合并代码的提示框，如下图所示：</p><p><img src="`+g+`" alt="image-20230729001707823"></p><p>在图中需要我们编辑一些备注信息，编辑好之后，按键盘的 <code>esc</code> 键，然后输入 <code>:x</code> 再按下回车即可。操作完成之后，我们可以通过 <code>git log</code> 命令来查看版本记录的变化，参考命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的版本列表信息如下图所示：</p><p><img src="`+m+`" alt="image-20230729001713995"></p><p>在上图中显示了版本记录，可以看到最新的版本记录已经发生了变化，备注信息中提示了是从 <code>revert</code> 中恢复来的，并展示了原始的 commitid，说明我已经操作成功。</p><p>接着我们通过 <code>git diff</code> 命令来与我们之前提交的版本区别，用来验证我们的代码效果，构造的命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff 6d8feb147973711d08211f953f3d7c463ee1e88f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的版本差异信息如下图所示：</p><p><img src="`+v+`" alt="image-20230729001722443"></p><p>在差异信息中，我们可以看到当前最新版本，比此前提交的版本少了一行代码，而这个代码正是我们在前面提交的，说明我们通过 <code>revert</code> 命令撤销版本成功，接着我们尝试将新版本推送到远程，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="`+u+'" alt="image-20230729001730634"></p><p>在返回的信息中，可以看出已经成功的提交了代码，并没有出现此前使用 <code>git reset</code> 恢复后推送远程仓库提示当前仓库落后于远程仓库。</p><p><strong>需要注意的是，在使用 <code>revert</code> 去恢复某个版本代码时，Git 只会撤销指定版本的代码，而不是指定版本后的所有版本</strong>。比如说你提交了 1、2、3 三个版本，当你撤销版本 2 的时候，会生成版本 4，但是不会对版本 3 产生影响。</p><h2 id="_20-4-小结" tabindex="-1"><a class="header-anchor" href="#_20-4-小结" aria-hidden="true">#</a> 20.4 小结</h2><p>在这一节中，主要学习了如何只撤销代码而不撤销版本记录，在文章当中用了 <code>git reset</code> 和 <code>git revert</code> 作对比演示，需要大致记住的几点有：</p><ol><li><code>git reset</code> 命令会改变之前的版本记录，可能会导致不能提交到远程仓库；</li><li><code>git revert</code> 命令只会撤销某个版本的代码，然后在当前分支增加一条版本新纪录；</li><li><code>git revert</code> 只会撤销指定版本的代码，而不是指定版本后的所有版本</li></ol>',62),_=[h];function b(f,G){return t(),i("div",null,_)}const q=e(x,[["render",b],["__file","index-20.html.vue"]]);export{q as default};
