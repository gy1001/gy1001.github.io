import{_ as p,M as c,p as t,q as l,R as s,t as n,N as e,a1 as o}from"./framework-e8cb8151.js";const i="/assets/5cd963fc000167cb06400360-16af82b7.jpg",r="/assets/image-20230910110619959-8c0e5b9d.png",d="/assets/image-20230910110629246-52ded66a.png",u="/assets/image-20230910110641599-df71c51b.png",k="/assets/image-20230910110650101-4fe09653.png",m="/assets/image-20230910110659581-8bd7b75f.png",v="/assets/image-20230910110710510-874120bd.png",b="/assets/image-20230910110719354-9ddaa27c.png",h="/assets/image-20230910110726432-b7af78fc.png",g="/assets/image-20230910110734800-83565466.png",y="/assets/image-20230910110742480-c57397a8.png",j="/assets/image-20230910110753434-692675cc.png",_={},x=o('<h1 id="_19-使用-webpack-的-splitchunks-功能来拆分代码" tabindex="-1"><a class="header-anchor" href="#_19-使用-webpack-的-splitchunks-功能来拆分代码" aria-hidden="true">#</a> 19-使用 Webpack 的 splitChunks 功能来拆分代码</h1><p><img src="'+i+'" alt="img"></p><blockquote><p>读一本好书，就是和许多高尚的人谈话。 ——歌德</p></blockquote><p>在 Webpack4 之前，我们处理公共模块的方式都是使用 <code>CommonsChunkPlugin</code>，然而该插件让开发配置繁琐，并且使公共代码的抽离不够彻底和细致，</p><p>因此新的<code>splitChunks</code>改进了这些能力，不过虽然<code>splitChunks</code>相对 CommonsChunkPlugin 进步不少，但是 splitChunks 的配置却比较复杂。</p><h2 id="webpack-代码拆分方式" tabindex="-1"><a class="header-anchor" href="#webpack-代码拆分方式" aria-hidden="true">#</a> Webpack 代码拆分方式</h2><p>在 Webpack 中，总共提供了三种方式来实现代码拆分（Code Splitting）：</p><ul><li>entry 配置：通过多个 entry 文件来实现；</li><li>动态加载（按需加载）：通过写代码时主动使用<code>import()</code>或者<code>require.ensure</code>来动态加载；</li><li>抽取公共代码：使用<code>splitChunks</code>配置来抽取公共代码。</li></ul><p>这里我们主要讲的是通过<code>splitChunks</code>抽取公共代码。</p><p>在讲解之前，再来复习下 Webpack 中三个重要的概念：<code>module</code>、<code>chunks</code>、<code>bundle</code>。</p><ul><li><p><strong>module</strong></p><blockquote><p>就是 JavaScript 的模块，简单来说就是你通过 <code>import</code>、<code>require</code> 语句引入的代码，也包括 css、图片等资源；</p></blockquote></li><li><p><strong>chunk</strong></p><blockquote><p>chunk 是 webpack 根据功能拆分出来的，chunk 包含着 module，可能是一对多也可能是一对一，chunk 包含三种情况，就是上面介绍的三种实现代码拆分的情况。</p></blockquote></li><li><p><strong>bundle</strong></p><blockquote><p>bundle 是 webpack 打包之后的各个文件，一般就是和 chunk 是一对一的关系，bundle 就是对 chunk 进行编译压缩打包等处理之后的产出。</p></blockquote></li></ul><p>记住这些，后面会用到，下面开始 splitChunks 配置。</p><h2 id="splitchunks-默认配置" tabindex="-1"><a class="header-anchor" href="#splitchunks-默认配置" aria-hidden="true">#</a> splitChunks 默认配置</h2>',13),f=s("code",null,"splitChunks",-1),q={href:"https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js",target:"_blank",rel:"noopener noreferrer"},w=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 三选一： &quot;initial&quot; | &quot;all&quot; | &quot;async&quot; (默认)</span>
      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 最小尺寸，30K，development 下是10k，越大那么单个文件越大，chunk 数就会变少（针对于提取公共 chunk 的时候，不管再大也不会把动态加载的模块合并到初始化模块中）当这个值很大的时候就不会做公共部分的抽取了</span>
      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 文件的最大尺寸，0为不限制，优先级：maxInitialRequest/maxAsyncRequests &lt; maxSize &lt; minSize</span>
      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 默认1，被提取的一个模块至少需要在几个 chunk 中被引用，这个值越大，抽取出来的文件就越小</span>
      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 在做一次按需加载的时候最多有多少个异步请求，为 1 的时候就不会抽取公共 chunk 了</span>
      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 针对一个 entry 做初始化模块分隔的时候的最大文件数，优先级高于 cacheGroup，所以为 1 的时候就不会抽取 initial common 了</span>
      <span class="token literal-property property">automaticNameDelimiter</span><span class="token operator">:</span> <span class="token string">&#39;~&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包文件名分隔符</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 拆分出来文件的名字，默认为 true，表示自动生成文件名，如果设置为固定的字符串那么所有的 chunk 都会被合并成一个</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则规则，如果符合就提取 chunk</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 缓存组优先级，当一个模块可能属于多个 chunkGroup，这里是优先级</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 优先级</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 如果该chunk包含的modules都已经另一个被分割的chunk中存在，那么直接引用已存在的chunk，不会再重新产生一个</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：上面的默认配置都添加了注释，一些很简单的配置就不再详细介绍，下面主要介绍一些比较难理解并且重要的配置项。</p></blockquote><p><code>splitChunks</code>默认配置对应的就是 chunk 生成的第二种情况：通过写代码时主动使用<code>import()</code>或者<code>require.ensure</code>来动态加载。</p><p>下面来看下使用<code>import()</code>或者<code>require.ensure</code>来写代码，在 Webpack 打包的时候有什么不同。</p><p>创建<code>index.js</code>，使用<code>import()</code>动态加载<code>react</code>模块，<strong>同时为了方便跟踪产出物，在这里使用了 webpack 的魔法注释，保证输出的 bundle 名称，后面也使用这种方式</strong>。内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;react&quot; */</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Tips：如果忘记魔法注释内容，可以翻阅之前的文章。</p></blockquote><p>添加<code>webpack.config.js</code>，内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&#39;./default/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),C={href:"https://www.npmjs.com/package/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"},z=o('<p>完成上面配置之后，执行<code>webpack --config webpack.config.js</code>，首先看到对应的输出的 log 为：</p><p><img src="'+r+'" alt="image-20230910110619959"></p><p><code>index.js</code>打包出来了两个文件<code>react.js</code>和<code>main.js</code>，两个文件包含的内容通过 webpack-bundle-analyzer 查看效果如下：</p><p><img src="'+d+`" alt="image-20230910110629246"></p><p>由此可以知道：</p><ol><li><code>index.js</code>打包出来了两个文件<code>react.js</code>和<code>main.js</code>；</li><li><code>react.js</code>是被拆分出来的，内容实际是 react；</li><li><code>react.js</code>被拆分出来是因为<code>splitChunks</code>默认配置<code>chunks=&#39;async&#39;</code>。</li></ol><h2 id="理解-splitchunks-chunks-三个值" tabindex="-1"><a class="header-anchor" href="#理解-splitchunks-chunks-三个值" aria-hidden="true">#</a> 理解 <code>splitChunks.chunks</code> 三个值</h2><p><code>splitChunks</code>中的<code>chunks</code>是一个很重要的配置项，表示从哪些 chunks 里面抽取代码，<code>chunks</code>的三个值有：<code>&quot;initial&quot;</code>、 <code>&quot;all&quot;</code>、 <code>&quot;async&quot;</code>， 默认就是是<code>async</code>。</p><p>为了理解<code>splitChunks.chunks</code>三个值的差异，下面通过实例来帮助我们理解。</p><p>首先创建两个文件<code>a.js</code>和<code>b.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;a-lodash&quot; */</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;I am a.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;b-react&quot; */</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;b-lodash&quot; */</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">&#39;I am b.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：为了方便判断打包出来的 bundle 文件是谁生产的，所以统一使用了魔法注释（magic comments）。</p></blockquote><p>这两个文件的特点是：</p><ol><li><code>react</code> 模块被两个文件都引入了，不同的是<code>a.js</code>是同步引入，<code>b.js</code>是动态引入；</li><li><code>jquery</code>模块在两个文件中都被引入，并且<strong>都是同步引入</strong>；</li><li><code>lodash</code>模块都被两个文件引入，并且<strong>都是动态引入</strong>。</li></ol><p>下面是我们的<code>webpack.config.js</code>文件内容，我们主要修改是<code>chunks</code>的三个值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;./default/a.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;./default/b.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 这里是我们修改的地方，async|initial|all</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chunks-async" tabindex="-1"><a class="header-anchor" href="#chunks-async" aria-hidden="true">#</a> <code>chunks=&#39;async&#39;</code></h3><p>当<code>chunks=&#39;async&#39;</code>配置下，Webpack 打包 log 和 bundle 分析结果如下：</p><p><img src="`+u+'" alt="image-20230910110641599"></p><p><img src="'+k+'" alt="image-20230910110650101"></p><p>通过实践观察，在这种模式下：</p><ol><li><p>在<code>a.js</code>和<code>b.js</code> 都同步引入的 <code>jquery</code> 被打包进了各自的 bundle 中没有拆分出来共用，说明在这种配置下只会针对动态引入的的代码进行拆分</p></li><li><p>react 在 a.js 和 b.js 表现不同：</p><ul><li>在<code>a.js</code>因为是同步引入的，设置的<code>chunks=&#39;async&#39;</code>，所以不被拆分出去</li></ul></li></ol><ul><li>在<code>b.js</code>是动态引入的，符合<code>chunks=&#39;async&#39;</code>的设置，所以被单独拆到<code>vendors~b-react.js</code></li></ul><ol start="3"><li><code>lodash</code>因为在两个文件都是动态加载的，所以被拆到了<code>vendors~a-lodash.js</code></li></ol><blockquote><p>Tips：<code>b.js</code>中的<code>react</code>拆出来的文件名是<code>vendors~b-react.js</code>含有<code>vendors</code>，说明中了名字为<code>vendors</code>的<code>cacheGroups</code>规则</p></blockquote><h3 id="chunks-initial" tabindex="-1"><a class="header-anchor" href="#chunks-initial" aria-hidden="true">#</a> <code>chunks=&#39;initial&#39;</code></h3><p>在<code>chunks=&#39;initial&#39;</code>配置下，Webpack 打包 log 和 bundle 分析结果如下</p><p><img src="'+m+'" alt="image-20230910110659581"></p><p><img src="'+v+`" alt="image-20230910110710510"></p><p><code>initial</code> 即原始的最初的意思，原则就是<strong>有共用的情况即发生拆分</strong>。</p><p>首先，<strong>动态引入的模块不受影响，它是无论如何都会被拆分出去的</strong>。</p><p>而对于同步引入的代码，如果有多处都在使用，则拆分出来共用，至于共同引用次会被拆分，是通过<code>minChunks</code>单独配置的，针对这个原则，我们再来看下上面的代码拆分的结果</p><ol><li>因为<code>jquery</code>模块是<code>a.js</code>和<code>b.js</code>共用的代码，所以单独拆除来放到<code>vendors~a~b.js</code>中，<code>vendors~a~b.js</code>文件名来自我们配置的<code>cacheGroups</code>的 key，即<code>vendors</code>和分隔符（<code>automaticNameDelimiter</code>）以及实际被共用的 bundle 的名称，即：a 和 b</li><li><code>react</code>在<code>b.js</code>因为用的是动态引入，所以被拆成了<code>b-react.js</code>（名字来自于设置的魔法注释），<code>a.js</code>的<code>react</code>则被拆到了<code>vendors~a.js</code></li><li><code>lodash</code>因为在两个文件都是动态加载的，所以被拆到了<code>a-lodash.js</code>（名字来自魔法注释）</li></ol><blockquote><p><strong>进一步解释</strong>：</p><p><code>react</code>在<code>b.js</code>拆出来为<code>b-react.js</code>名称，说明中了默认配置（默认配置是<code>chunks=&#39;async&#39;</code>），名字来自魔法注释；</p><p><code>a.js</code>的<code>react</code>文件名是<code>vendors~a.js</code>，这是因为中了<code>vendors</code>规则，本身<code>a.js</code>的<code>react</code>是同步引入，在这里被拆出来是因为<code>react</code>在 development 模式用的是 dev 版本，体积超过<code>minSize</code>的默认设置<code>30K</code>，所以被拆出来了，观察对应的 webpack 打包 log：<code>Entrypoint a = vendors~a~b.js vendors~a.js a.js</code> 也说明这一点。</p><p>如果我们把对应的配置，加大<code>minSize</code>到 80K（超过 dev 版本 react 大小），则<code>vendors~a.js</code> 和 <code>a.js</code>会合并在一起了，具体看下图效果：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 忽略其他，只看cacheGroups</span>
<span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">80000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt="image-20230910110719354"></p><p><img src="'+h+'" alt="image-20230910110726432"></p><h3 id="chunks-all" tabindex="-1"><a class="header-anchor" href="#chunks-all" aria-hidden="true">#</a> <code>chunks=&#39;all&#39;</code></h3><p>在 <code>chunks=&#39;initial&#39;</code> 配置下，虽然<code>a.js</code>和<code>b.js</code>都引入了<code>react</code>，但是因为引入方式不同，而没有拆分在一起，而是各自单独拆封成一个 chunk，要想把<code>react</code>放到一个文件中，就要使用<code>chunks=&#39;all&#39;</code>了。</p><p>下面是<code>chunks=&#39;all&#39;</code>的配置结果：</p><p><img src="'+g+'" alt="image-20230910110734800"></p><p><img src="'+y+'" alt="image-20230910110742480"></p><p>通过执行打包结果，跟我们的预期一致，<code>chunks=&#39;all&#39;</code>的配置下能够最大程度的生成复用代码，复用代码在 http cache 环境下，多页应用由一个页面跳转到另外一个共用代码的页面，会节省 http 请求，所以一般来说<code>chunks=&#39;all&#39;</code>是推荐的方式，但是<code>async</code>和<code>initial</code>也有其存在的必要，理解三者差异，根据项目实际代码拆分需求来配置即可。</p><blockquote><p>Tips：拆分出来的文件名称可以通过<code>output.chunkFilename</code>来指定规则，例如<code>chunkFilename=&#39;[name].js&#39;</code>，然后在对应的配置中配置<code>name</code>的具体值，</p><p>比如 vendors 的 name 指定为<code>foo</code>：<code>vendors.name=&#39;foo&#39;</code></p></blockquote><h2 id="使用-cachegroups" tabindex="-1"><a class="header-anchor" href="#使用-cachegroups" aria-hidden="true">#</a> 使用 cacheGroups</h2><p><code>cacheGroups</code>（缓存组）是 Webpack splitChunks 最核心的配置，<code>splitChunks</code>的配置项都是作用于<code>cacheGroup</code>上的，默认有两个<code>cacheGroup</code>：<code>vendors</code>和<code>default</code>（本文一开始默认配置部分已经贴出），</p><p>如果将<code>cacheGroup</code>的默认两个分组<code>vendor</code>和<code>default</code>设置为 false，则<code>splitChunks</code>就不会起作用，我们也可以重写这俩默认的配置。</p><p><code>cacheGroups</code>除了拥有默认配置所有的配置项目（例如 minSize、minChunks、name 等）之外，还有三个独有的配置项：<code>test</code>、<code>priority</code>和<code>reuseExistingChunk</code>。</p><p><code>splitChunks.cacheGroup</code><strong>必须同时满足</strong>各个配置项的条件才能生效，<code>reuseExistingChunk</code>表示是否使用已有的 chunk，如果为 true 则表示如果当前的 chunk 包含的模块已经被抽取出去了，那么将不会重新生成新的。</p><p>下面重点说下<code>test</code>和<code>priority</code></p>',50),S=s("code",null,"splitChunks",-1),G={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},W=o(`<h3 id="priority" tabindex="-1"><a class="header-anchor" href="#priority" aria-hidden="true">#</a> priority</h3><p><code>priority</code>配置项的意义就是权重。</p><p>如果有一个模块满足了多个缓存组的条件就会去按照权重划分，谁的权重高就优先按照谁的规则处理。</p><p>在下面的配置中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然给<code>vendors</code>和<code>default</code>除 <code>priority</code> 配置外，其他配置都相同，打包的结果如下：</p><p><img src="`+j+`" alt="image-20230910110753434"></p><p>共用的代码文件名为<code>vendors~cachegroup1~cachegroup2.js</code>说明中了<code>vendors</code>配置，虽然<code>default</code>和<code>vendors</code>两个都能满足需求，但是 <code>default</code> 的 <code>priority</code> 是 <code>-20</code> 明显小于 <code>vendors</code> 的<code>-10</code>，所以会优先按照 vendors 这个缓存组拆分。</p><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h3><p><code>cacheGroup.test</code>表示满足这个条件的才会被缓存组命中，取值可以是正则、字符串和函数。</p><p>正则和字符串很好理解，当<code>test</code>为函数时，比如返回<code>true/false</code>，并且接收两个参数：<code>module</code>和<code>chunks</code></p><ul><li><code>module</code>：每个模块打包的时候，都会执行<code>test</code>函数，并且传入模块 module 对象，module 对象包含了模块的基本信息，例如类型、路径、文件 hash 等；</li><li><code>chunks</code>：是当前模块被分到哪些<code>chunks</code>使用，module 跟 chunks 关系可能是一对一，也可能是多对一，所以一旦我们使用 chunks 做匹配，那么符合条件的 chunk 内包含的模块都会被匹配到。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> chunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//...</span>
            <span class="token keyword">return</span> module<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;javascript/auto&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个实际应用场景来说明，前面提到过<code>splitChunks</code>不仅作用于 JavaScript，还可以作用于 CSS，所以类似<code>test=/[\\\\/]node_modules[\\\\/]/</code>的写法，实际也会匹配出<code>node_modules</code>中的 CSS，如果我们用到的一个 npm 包引入了自己的 css 文件，那么也会中了拆分逻辑，这时候如果要排除这部分 CSS 或者单独给这部分 CSS 设置自己的<code>cacheGroup</code>规则，有两种方式：</p><ol><li>设置更高权重的<code>cacheGroup</code>；</li><li>使用<code>test</code>函数针对类型为 js 和 css 分别设置各自的<code>cacheGroup</code>。</li></ol><p>另外我们还可以使用<code>test</code>函数实现更细化的匹配，例如：忽略一部分文件等。</p>`,16),N=s("p",null,"本小节 Webpack 相关面试题：",-1),B=s("p",null,"本章节一直在回答一个问题：Webpack 怎么优化。",-1),A=s("p",null,"本小节主要介绍 Webpack splitChunks 来拆分代码。",-1),P={href:"https://zhuanlan.zhihu.com/p/611518123",target:"_blank",rel:"noopener noreferrer"};function E(T,I){const a=c("ExternalLinkIcon");return t(),l("div",null,[x,s("p",null,[n("由于 Webpack 做到了开箱即用，所以"),f,n("是有"),s("a",q,[n("默认配置"),e(a)]),n("的：")]),w,s("p",null,[n("在这里使用了"),s("a",C,[n("webpack-bundle-analyzer"),e(a)]),n("插件来查看 webpack 打包情况。")]),z,s("blockquote",null,[s("p",null,[n("Tips：除了 JavaScript，"),S,n("也适用于使用"),s("a",G,[n("mini-css-extract-plugin"),e(a)]),n("插件的 css 配置。")])]),W,s("blockquote",null,[N,B,A,s("p",null,[n("前端打包中 Module、Chunk、Bundle 的区别: "),s("a",P,[n("https://zhuanlan.zhihu.com/p/611518123"),e(a)])])])])}const V=p(_,[["render",E],["__file","index-19.html.vue"]]);export{V as default};
