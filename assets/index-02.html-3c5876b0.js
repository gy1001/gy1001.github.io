import{_ as i,p as a,q as r,a1 as t}from"./framework-e8cb8151.js";const e="/assets/index-02-1691761511934-ac2e45ca.png",l={},d=t('<h1 id="_02-初识-vim-想说爱你不容易" tabindex="-1"><a class="header-anchor" href="#_02-初识-vim-想说爱你不容易" aria-hidden="true">#</a> 02-初识 Vim，想说爱你不容易</h1><h2 id="_01-初识-vim-想说爱你不容易" tabindex="-1"><a class="header-anchor" href="#_01-初识-vim-想说爱你不容易" aria-hidden="true">#</a> 01: 初识 Vim，想说爱你不容易</h2><h3 id="下载与安装" tabindex="-1"><a class="header-anchor" href="#下载与安装" aria-hidden="true">#</a> 下载与安装</h3><p><strong>作为开发者的你，安装 Vim 应该很简单</strong></p><ul><li>Linux/Unix(Mac) 自带 Vim, 直接终端里输入 Vim 即可进入</li><li>Windows 用户可以下载 GVim 等安装和体验</li><li>建议 Windows 用户可以尝试使用虚拟机来体验 Linux 下的 Vim</li></ul><h3 id="初始-vim" tabindex="-1"><a class="header-anchor" href="#初始-vim" aria-hidden="true">#</a> 初始 Vim</h3><p><strong>据说 Stackoverflow 帮助过上百万开发者退出 Vim</strong></p><ul><li>输入 Vim 似乎没法输入东西，起始模式进去是 normal 模式</li><li>使用 :q 可以退出 Vim</li></ul><h3 id="开始编辑" tabindex="-1"><a class="header-anchor" href="#开始编辑" aria-hidden="true">#</a> 开始编辑</h3><p><strong>进入编辑模式就可以像其他编辑器一样编辑了</strong></p><ul><li>使用 i 进入编辑模式，开始输入文字</li><li>i 表示 insert, a(append), o(open a line below)</li><li>使用 Esc 又可以回到 normal 模式，使用 :wq 保存退出</li><li>i: 在光标所在字符前开始插入</li><li>a: 在光标所在字符后开始插入</li><li>o: 在光标所在行的下面另起一新行插入</li><li>s: 删除光标所在的字符并开始插入</li><li>r: 替换光标后的一个字符</li><li>I: 在光标所在行的行首开始插入 如果行首有空格则在空格之后插入（insert before line）</li><li>A: 在光标所在你行的行尾开始插入（append after line）</li><li>O: 在光标所在行的上面另起一行开始插入（open a line above）</li><li>S: 删除光标所在行并开始插入</li><li>R: 替换光标所在行的所有字符</li></ul><h2 id="_02-vim-为什么你有这么多模式" tabindex="-1"><a class="header-anchor" href="#_02-vim-为什么你有这么多模式" aria-hidden="true">#</a> 02: Vim，为什么你有这么多模式</h2><h3 id="怪异-的-vim-模式" tabindex="-1"><a class="header-anchor" href="#怪异-的-vim-模式" aria-hidden="true">#</a> “怪异”的 Vim 模式</h3><p><strong>Vim 和其他很多编辑器的区别在于多种模式</strong></p><ul><li>进入 Vim 默认是 normal（普通）模式？为什么不是编辑模式呢 ？</li><li>使用 a(append) i(insert) 等进入编辑模式</li><li>还是有 :cmd 命令模式和 visual 可视化模式</li></ul><h3 id="进入-vim-默认是-normal-普通-模式-为什么不是编辑模式呢" tabindex="-1"><a class="header-anchor" href="#进入-vim-默认是-normal-普通-模式-为什么不是编辑模式呢" aria-hidden="true">#</a> 进入 Vim 默认是 normal（普通）模式？为什么不是编辑模式呢 ？</h3><p><strong>奇怪的是，为什么 Vim 进入之后不像其他编辑器一样直接插入？</strong></p><ul><li>进入 Vim 模式默认是 normal 普通模式。使用 Esc 从插入回到普通模式</li><li>普通模式下可以进行各种命令操作和移动</li><li>大部分情况下你是在浏览而不是编辑，所以 Vim 默认是 normal</li></ul><h3 id="insert-插入模式" tabindex="-1"><a class="header-anchor" href="#insert-插入模式" aria-hidden="true">#</a> Insert -插入模式</h3><p><strong>插入模式下 Vim 可以直接编辑，和其他编辑器一样</strong></p><ul><li>使用 i(insert) a(append) o(open a line below)进入插入模式</li><li>使用 Esc 退出插入模式到 normal 模式</li><li>你来试试 I A O 如何进入插入模式的 ？</li></ul><h3 id="command-命令-模式" tabindex="-1"><a class="header-anchor" href="#command-命令-模式" aria-hidden="true">#</a> Command(命令)模式</h3><p><strong>Normal 模式下输入：之后执行命令，比如保存退出:wq 一气呵成</strong></p><ul><li>顾名思义，执行 Vim 命令，比如保存 :w ，退出 :q</li><li>比如分屏 :vs(vertical split) :sp(split)</li><li>比如使用 :% s/foo/bar/g 全局替换</li></ul><h3 id="visual-可视化模式" tabindex="-1"><a class="header-anchor" href="#visual-可视化模式" aria-hidden="true">#</a> Visual 可视化模式</h3><p><strong>Visual 模式一般用来块状选择文本</strong></p><ul><li>Normal 模式下使用 v 进入 visual 选择</li><li>使用 V 选择行</li><li>使用 ctrl + v 进行方块选择</li></ul><h2 id="_03-vim-插入模式小技巧" tabindex="-1"><a class="header-anchor" href="#_03-vim-插入模式小技巧" aria-hidden="true">#</a> 03: Vim 插入模式小技巧</h2><h3 id="如何快速纠错" tabindex="-1"><a class="header-anchor" href="#如何快速纠错" aria-hidden="true">#</a> 如何快速纠错</h3><p><strong>代码就像人生，总是经常出错，需要我们快速修正</strong></p><ul><li>进入 Vim 之后首先使用 a/i/o 之一进入插入模式</li><li>ctrl + h 删除上一个字符，ctrl + w 删除上一个单词，ctrl + u 删除当前行</li><li>以上几个快捷键可以用在很多地方，比如终端</li></ul><h3 id="快速切换-insert-和-normal-模式" tabindex="-1"><a class="header-anchor" href="#快速切换-insert-和-normal-模式" aria-hidden="true">#</a> 快速切换 insert 和 normal 模式</h3><p><strong>很多键盘的键位设置，Esc 按起来不方便，不方便切换到 normal</strong></p><ul><li>使用 ctrl + c 代替 Esc（但是可能会中断某些插件）或者 ctrl + [</li><li>使用 gi 快速跳转至最后一次编辑的地方并进入插入模式</li><li>在配置章节我们会讲解如何映射方便的快捷键来替代 Esc</li></ul><h3 id="让键盘适用工具" tabindex="-1"><a class="header-anchor" href="#让键盘适用工具" aria-hidden="true">#</a> 让键盘适用工具</h3><p><strong>键盘的选择会影响你的编辑速度</strong></p><ul><li>选择 Esc 和 Ctrl 比较容易碰到的键盘</li><li>使用 Vim 你可以使用 HHKB 或者 poker2 这种迷你键盘</li><li>使用软件修改键位，比如 CapsLock 改成频繁使用到的 Ctrl</li></ul><h3 id="熟能生巧" tabindex="-1"><a class="header-anchor" href="#熟能生巧" aria-hidden="true">#</a> 熟能生巧</h3><p><strong>让你的肌肉形成记忆</strong></p><ul><li>Linux 和 Vim 下有非常多的快捷键简化工具</li><li>尝试抛弃你的退格键，使用 ctrl 快捷键来完成编辑工具</li><li>尝试修改而不是强迫自己适应难用键位设置</li></ul><h2 id="_04-vim-快速移动大法" tabindex="-1"><a class="header-anchor" href="#_04-vim-快速移动大法" aria-hidden="true">#</a> 04: Vim 快速移动大法</h2><h3 id="反人类的-hjkl" tabindex="-1"><a class="header-anchor" href="#反人类的-hjkl" aria-hidden="true">#</a> 反人类的 hjkl</h3><p><strong>众所周知，vim normal 模式使用了反人类的 hjkl 来移动</strong></p><ul><li>据说编辑器作者在编写 vim 的时候键盘还没有流行上下左右按键</li><li>左 h 下 j 上 k 右 l 移动也不会让手指脱离主键盘区</li></ul><h3 id="在单词之间【飞舞】" tabindex="-1"><a class="header-anchor" href="#在单词之间【飞舞】" aria-hidden="true">#</a> 在单词之间【飞舞】</h3><p><strong>在单词之间移动是我们浏览操作中最常用的命令</strong></p><ul><li>w/W 移动到下一个 word/WORD 开头。e/E 下一个 word/WORD 尾</li><li>b/B 回到上一个 word/WORD 开头，可以理解为 backword</li><li>word 指的是以非空白符分割的单词，WORD 以空白符分割的单词</li></ul><h3 id="行间搜索移动" tabindex="-1"><a class="header-anchor" href="#行间搜索移动" aria-hidden="true">#</a> 行间搜索移动</h3><p><strong>同一行快速移动的方式其实是搜索一个字符并且移动到该字符</strong></p><ul><li>使用 f{char} 可以移动到 char 字符上，t 移动到 char 的前一个字符</li><li>如果第一次没有搜到，可以使用分号; 逗号, 继续搜该行下一个/上一个</li><li>大写的 F 表示反过来搜前面的字符</li></ul><h3 id="vim-水平移动" tabindex="-1"><a class="header-anchor" href="#vim-水平移动" aria-hidden="true">#</a> Vim 水平移动</h3><p><strong>如何快速移动到一行的行首或者行尾呢？</strong></p><ul><li>0 移动到行首第一个字符，^ 移动到第一个非空白字符</li><li>$ 移动到行尾，g_ 移动到行尾非空白字符</li><li>记住常用的 0 和 $ 就可以满足日常需求了</li></ul><h3 id="vim-垂直移动" tabindex="-1"><a class="header-anchor" href="#vim-垂直移动" aria-hidden="true">#</a> Vim 垂直移动</h3><p><strong>我们还可以在句子（sentence）和段落（paragraph）间移动（不常用）</strong></p><ul><li>使用括号（）在句子间移动，你可以用 :help（ 来查看帮助</li><li>使用 {} 在段落之间移动</li><li>插件章节我们会讲如何使用 easy-motion 插件移动，这些命令就都不用记忆啦</li></ul><h3 id="vim-页面移动" tabindex="-1"><a class="header-anchor" href="#vim-页面移动" aria-hidden="true">#</a> Vim 页面移动</h3><p><strong>翻页命令太多，2/8 定律，记住常见的就能满足需求</strong></p><ul><li>gg/G 移动到文件开头/结尾，你可以使用 ctrl + o 快速返回</li><li>H/M/L 跳转到屏幕的开头 Head 中间/ Middle / 末尾 Lower</li><li>Ctrl+u ctrl+f 上下翻页（upword/forward） zz 把屏幕置为中间</li></ul><h3 id="练习到形成条件反射" tabindex="-1"><a class="header-anchor" href="#练习到形成条件反射" aria-hidden="true">#</a> 练习到形成条件反射</h3><p><strong>站在【岸上】学不会游泳，光学不练学不会 Vim</strong></p><ul><li>这一张讲了 normal 模式下非常多的命令，是不是头大了</li><li>知道为啥 Vim 默认是 normal 模式了吧？它提供了强大的命令来移动</li><li>清醒一下大脑，回顾下本章内容，操练起你的 Vim 吧。如果讲完了本章节你还在用上下左右这种低效的方式移动，本章就白看了！</li></ul><h2 id="_05-vim-快速增删改查" tabindex="-1"><a class="header-anchor" href="#_05-vim-快速增删改查" aria-hidden="true">#</a> 05: Vim 快速增删改查</h2><h3 id="vim-增加字符" tabindex="-1"><a class="header-anchor" href="#vim-增加字符" aria-hidden="true">#</a> Vim 增加字符</h3><p><strong>增加字符就是进入插入模式，开始敲键盘吧</strong></p><ul><li>进入插入模式编辑文本</li><li>使用 a/i/o 进入插入模式</li><li>还记得 A/I/O 是什么作用么？</li></ul><h3 id="vim-快速删除" tabindex="-1"><a class="header-anchor" href="#vim-快速删除" aria-hidden="true">#</a> Vim 快速删除</h3><p><strong>如何快速删除一个字符或者单词呢？</strong></p><ul><li>Vim 在 normal 模式下使用 x 快速删除一个字符</li><li>使用 d(delete) 配合文本对象快速删除一个单词 daw(d around word)</li><li>d 和 x 都可以搭配数字来执行多次（2dd:删除两行、4x:删除四个字符）</li></ul><h3 id="vim-快速修改" tabindex="-1"><a class="header-anchor" href="#vim-快速修改" aria-hidden="true">#</a> Vim 快速修改</h3><p><strong>相比删除，更常用修改，一般都是删除之后改成我们期望的文本</strong></p><ul><li>常用有三个，r(replace)、c(change)、s(substitute)</li><li>normal 模式下，使用 r 可以替换一个字符，s 替换并进入插入模式</li><li>使用 c 配合文本对象，我们可以快速进行修改</li></ul><h3 id="vim-查询" tabindex="-1"><a class="header-anchor" href="#vim-查询" aria-hidden="true">#</a> Vim 查询</h3><p><strong>查询单词也是一个常用操作</strong></p><ul><li>使用 / 或者 ？ 进行前向或者反向搜索</li><li>使用 n/N 跳转到下一个或者上一个匹配</li><li>使用 * 或者 # 进行当前单词的前向和后向匹配</li></ul><h3 id="课后练习" tabindex="-1"><a class="header-anchor" href="#课后练习" aria-hidden="true">#</a> 课后练习</h3><p><strong>改变你低效的 Vim 操作习惯</strong></p><ul><li>本章讲了很多方便的增删改查命令，请课后练习</li><li>替换你的低效操作，比如想修改一个单词可以直接 caw</li><li>使用助记符比如 c(change)、d(delete)、r(replace) 来帮助记忆</li></ul><h2 id="_06-vim-如何搜索替换" tabindex="-1"><a class="header-anchor" href="#_06-vim-如何搜索替换" aria-hidden="true">#</a> 06: Vim 如何搜索替换</h2><h3 id="vim-替换命令" tabindex="-1"><a class="header-anchor" href="#vim-替换命令" aria-hidden="true">#</a> Vim 替换命令</h3><p><strong>substitute 命令允许我们查找并且替换文本，并且支持正则表达式</strong></p><ul><li>:[rang]s[ubstitute]/{pattern}/{string}/[flags]</li><li>range 表示范围，比如:10，20 表示 10-20 行，% 表示全部</li><li>pattern 是要替换的模式，string 是替换后文本</li></ul><h3 id="替换标志位" tabindex="-1"><a class="header-anchor" href="#替换标志位" aria-hidden="true">#</a> 替换标志位</h3><p><strong>Flags 有几个常用的标志</strong></p><ul><li>g(global) 表示全局范围内执行</li><li>c(confirm)表示确认，可以确认或者拒绝修改</li><li>n(number)报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul><h2 id="_07-vim-多文件操作" tabindex="-1"><a class="header-anchor" href="#_07-vim-多文件操作" aria-hidden="true">#</a> 07: Vim 多文件操作</h2><h3 id="buffer-window-tab" tabindex="-1"><a class="header-anchor" href="#buffer-window-tab" aria-hidden="true">#</a> Buffer Window Tab</h3><p><strong>我们先来介绍几个多文件操作相关的概念</strong></p><ul><li>Buffer 是打开的一个文件的内存缓冲区</li><li>窗口是 Buffer 可视化的分割区域</li><li>Tab 可以组织窗口为一个工作区 npm <img src="'+e+'" alt=""></li></ul><h3 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h3><p><strong>Buffer - 什么是缓冲区？</strong></p><ul><li>Vim 打开一个文件后会加载文件内容到缓冲区中</li><li>之后的修改都是针对内存中的缓冲区，并不会直接保存到文件</li><li>直到我们执行 :w(write) 的时候才会把修改的内容写入到文件里</li></ul><h3 id="buffer-切换" tabindex="-1"><a class="header-anchor" href="#buffer-切换" aria-hidden="true">#</a> Buffer 切换</h3><p><strong>那如何在 Buffer 之间切换呢？</strong></p><ul><li>使用 :ls 会列举当前缓冲区，然后使用 :b n 跳转到第 n 个缓冲区</li><li>:bpre :bnext :bfirst :blast</li><li>或者用 :b buffer_name 加上 tab 补全来跳转</li></ul><h3 id="window-窗口" tabindex="-1"><a class="header-anchor" href="#window-窗口" aria-hidden="true">#</a> Window 窗口</h3><p><strong>窗口是可视化的分割区域</strong></p><ul><li>一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同缓冲区</li><li><code>&lt;ctrl + w&gt;s</code>水平分割，<code>&lt;ctrl + w&gt;v</code> 垂直分割，或者 :sp 和 :vs</li><li>每个窗口可以继续被无限分割（看你屏幕是否够大）</li></ul><h3 id="如何切换窗口" tabindex="-1"><a class="header-anchor" href="#如何切换窗口" aria-hidden="true">#</a> 如何切换窗口</h3><p><strong>切换窗口的命令都是使用 Ctrl + w(window) 作为前缀</strong></p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>&lt;ctrl + w&gt;w</code></td><td>在窗口间循环切换</td></tr><tr><td><code>&lt;ctrl + w&gt;h</code></td><td>切换到左边的窗户</td></tr><tr><td><code>&lt;ctrl + w&gt;j</code></td><td>切换到下边的窗户</td></tr><tr><td><code>&lt;ctrl + w&gt;k</code></td><td>切换到上边的窗户</td></tr><tr><td><code>&lt;ctrl + w&gt;l</code></td><td>切换到右边的窗户</td></tr></tbody></table><h3 id="如何重排窗口" tabindex="-1"><a class="header-anchor" href="#如何重排窗口" aria-hidden="true">#</a> 如何重排窗口？</h3><p><strong>重排窗口可以改变窗口的大小：h window-resize 查看文档</strong></p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>&lt;ctrl + w&gt;=</code></td><td>使所有窗口等宽、等高</td></tr><tr><td><code>&lt;ctrl + w&gt;_</code></td><td>最大化活动窗口的高度</td></tr><tr><td><code>&lt;ctrl + w&gt;|</code></td><td>最大化活动窗口的宽度</td></tr><tr><td><code>[N]&lt;ctrl + w&gt;_</code></td><td>把活动窗口的高度设为[N]行</td></tr><tr><td><code>[N]&lt;ctrl + w&gt;|</code></td><td>把活动窗口的宽度设为[N]行</td></tr></tbody></table><h3 id="tab-标签页-将窗口分组" tabindex="-1"><a class="header-anchor" href="#tab-标签页-将窗口分组" aria-hidden="true">#</a> Tab(标签页)将窗口分组</h3><p><strong>Tab 是可以容纳一系列窗口的容器(h:tabpage)</strong></p><ul><li>Vim 的 Tab 和其他编辑器不太一样，可以想象成 Linux 的虚拟桌面</li><li>比如一个 Tab 全用来编辑 Python 文件，一个 Tab 全是 Html 文件</li><li>相比窗口，Tab 一般用的比较少，Tab 太多管理起来也比较麻烦</li></ul><h3 id="tab-标签页-操作" tabindex="-1"><a class="header-anchor" href="#tab-标签页-操作" aria-hidden="true">#</a> Tab(标签页)操作</h3><p><strong>Tab 使用不多，简单了解一下常用操作就好</strong></p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>:table[dit] {filename}</td><td>在新标签页中打开 {filename}</td></tr><tr><td><code>&lt;ctrl + w&gt;T</code></td><td>把当前窗口移动到一个新标签页</td></tr><tr><td>:tabc[lose]</td><td>关闭当前标签页及其中的所有窗口</td></tr><tr><td>:tabo[nly]</td><td>只保留活动标签页，关闭所有其他标签页</td></tr></tbody></table><h3 id="tab-标签页-切换操作" tabindex="-1"><a class="header-anchor" href="#tab-标签页-切换操作" aria-hidden="true">#</a> Tab(标签页)切换操作</h3><p><strong>如何切换不同的标签页，一般建立两个就好，太多不好操作</strong></p><table><thead><tr><th>命令</th><th>普通模式命令</th><th>用途</th></tr></thead><tbody><tr><td>:tabn[ext] {N}</td><td><code>{N}gt</code></td><td>切换到编号为{N}的标签页</td></tr><tr><td>:tabn[ext]</td><td><code>gt</code></td><td>切换到下一个标签页</td></tr><tr><td>:tabp[revious]</td><td><code>gt</code></td><td>切换到上一个标签页</td></tr></tbody></table><h3 id="课后练习-1" tabindex="-1"><a class="header-anchor" href="#课后练习-1" aria-hidden="true">#</a> 课后练习</h3><p><strong>只要你的屏幕足够大，多文件操作会很方便，脱离鼠标就可以实现</strong></p><ul><li>尝试打开 Vim 一次操作多个文件</li><li>窗口分割可以非常方便地查看代码，比如查看整个调用链</li><li>延伸：插件篇我们会配合 ctrlp 插件和 nerdtree 快速操作多个文件</li></ul><h2 id="_08-什么是-vim-的-text-object" tabindex="-1"><a class="header-anchor" href="#_08-什么是-vim-的-text-object" aria-hidden="true">#</a> 08: 什么是 Vim 的 text object</h2><h3 id="text-object-文本对象" tabindex="-1"><a class="header-anchor" href="#text-object-文本对象" aria-hidden="true">#</a> Text Object(文本对象)</h3><p><strong>如果你学过主流的编程语言，一定知道面象对象编程</strong></p><ul><li>Vim 里文本也有对象的概念，比如一个单词，一段句子，一个段落</li><li>很多其他编辑器经常只能操作单个字符来修改文本，比较低效</li><li>通过操作文本对象来修改要比只操作单个字符高效</li></ul><h3 id="文本对象操作方式" tabindex="-1"><a class="header-anchor" href="#文本对象操作方式" aria-hidden="true">#</a> 文本对象操作方式</h3><p><strong>之前我们已经使用过文本对象了，回忆下 dw(删除一个单词)</strong></p><ul><li><code>[number]&lt;command&gt;[text object]</code></li><li>number 表示次数，command 是命令,d(elete), c(hange), y(yank)</li><li>text object 是要操作的文本对象，比如单词w，句子s，段落p</li></ul><h2 id="_09-vim-复制粘贴与寄存器的使用" tabindex="-1"><a class="header-anchor" href="#_09-vim-复制粘贴与寄存器的使用" aria-hidden="true">#</a> 09: Vim 复制粘贴与寄存器的使用</h2><h2 id="_10-vim-如何用宏完成强大的批量操作" tabindex="-1"><a class="header-anchor" href="#_10-vim-如何用宏完成强大的批量操作" aria-hidden="true">#</a> 10: Vim 如何用宏完成强大的批量操作</h2><h2 id="_11-vim-补全大法" tabindex="-1"><a class="header-anchor" href="#_11-vim-补全大法" aria-hidden="true">#</a> 11: Vim 补全大法</h2><h2 id="_12-给-vim-换个配色" tabindex="-1"><a class="header-anchor" href="#_12-给-vim-换个配色" aria-hidden="true">#</a> 12: 给 Vim 换个配色</h2><h2 id="_13-本章小结-裸-vim-也很强" tabindex="-1"><a class="header-anchor" href="#_13-本章小结-裸-vim-也很强" aria-hidden="true">#</a> 13: 本章小结：裸 Vim 也很强</h2>',128),h=[d];function n(o,s){return a(),r("div",null,h)}const u=i(l,[["render",n],["__file","index-02.html.vue"]]);export{u as default};
