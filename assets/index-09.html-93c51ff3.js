import{_ as s,p as n,q as a,a1 as e}from"./framework-e8cb8151.js";const t={},p=e(`<h1 id="_09-深入-infer、ts-高级类型、泛型再进阶【全方位深度掌握-ts-泛型】" tabindex="-1"><a class="header-anchor" href="#_09-深入-infer、ts-高级类型、泛型再进阶【全方位深度掌握-ts-泛型】" aria-hidden="true">#</a> 09-深入 infer、TS 高级类型、泛型再进阶【全方位深度掌握 TS 泛型】</h1><h2 id="_01-infer——深入-infer-和-infer-的三种应用" tabindex="-1"><a class="header-anchor" href="#_01-infer——深入-infer-和-infer-的三种应用" aria-hidden="true">#</a> 01:infer——深入 infer 和 infer 的三种应用</h2><h3 id="infer-的定义" tabindex="-1"><a class="header-anchor" href="#infer-的定义" aria-hidden="true">#</a> infer 的定义</h3><blockquote><p>infer 表示在 extends 条件语句中以占位符出现的等到使用时才推断出来的数据类型</p></blockquote><h3 id="第一种用法-引用函数参数类型" tabindex="-1"><a class="header-anchor" href="#第一种用法-引用函数参数类型" aria-hidden="true">#</a> 第一种用法：引用函数参数类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第一种用法啊</span>
<span class="token keyword">type</span> <span class="token class-name">CusFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token comment">// 下面的 infer P 表示引用 params: Customer 中的 Customer 类型</span>
<span class="token keyword">type</span> <span class="token class-name">CustParaType</span> <span class="token operator">=</span> CusFn <span class="token keyword">extends</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> CusFn <span class="token comment">// type CustParaType = (params: Customer) =&gt; string</span>
<span class="token keyword">type</span> <span class="token class-name">CustParaType2</span> <span class="token operator">=</span> CusFn <span class="token keyword">extends</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> CusFn <span class="token comment">// type CustParaType2 = Customer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种用法-引用函数返回采数类型" tabindex="-1"><a class="header-anchor" href="#第二种用法-引用函数返回采数类型" aria-hidden="true">#</a> 第二种用法：引用函数返回采数类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第二种用法</span>
<span class="token keyword">type</span> <span class="token class-name">CusFn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token comment">// 这里的 infer P 表示引用 返回值的类型 string</span>
<span class="token keyword">type</span> <span class="token class-name">CustParaType3</span> <span class="token operator">=</span> CusFn2 <span class="token keyword">extends</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> CusFn2 <span class="token comment">// type CustParaType3 = string</span>
<span class="token keyword">type</span> <span class="token class-name">CustParaType4</span> <span class="token operator">=</span> CusFn2 <span class="token keyword">extends</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> CusFn2 <span class="token comment">// type CustParaType4 = Customer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第三种用法-泛型上的使用" tabindex="-1"><a class="header-anchor" href="#第三种用法-泛型上的使用" aria-hidden="true">#</a> 第三种用法：泛型上的使用</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  custname<span class="token operator">:</span> <span class="token builtin">string</span>
  buymoney<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">CusFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> Customer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name">ParamsType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">CustParaType</span> <span class="token operator">=</span> ParamsType<span class="token operator">&lt;</span>CusFn<span class="token operator">&gt;</span> <span class="token comment">// type CustParaType = string</span>

<span class="token keyword">type</span> <span class="token class-name">EleOfArr<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">EleOfArrTest</span> <span class="token operator">=</span> EleOfArr<span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span> <span class="token comment">// type EleOfArrTest = string</span>
<span class="token keyword">type</span> <span class="token class-name">EleOfArrTest2</span> <span class="token operator">=</span> EleOfArr<span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span> <span class="token comment">// type EleOfArrTest = { name: string,age: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-视频作业-infer-在集合种的应用" tabindex="-1"><a class="header-anchor" href="#_02-视频作业-infer-在集合种的应用" aria-hidden="true">#</a> 02：视频作业 infer 在集合种的应用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> subid<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> subname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> chineseSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> mathSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> englishSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> setZhangSanSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>chineseSubject<span class="token punctuation">,</span> mathSubject<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 此时推导出 const setZhangSanSubject: Set&lt;Subject&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何使用 infer 来推导出 Subject 类型？？？？？？ 解法如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">zhangSanType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> setZhangSanSubject <span class="token comment">// type zhangSanType = Set&lt;Subject&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">inferSetType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">unknown</span>
<span class="token keyword">type</span> <span class="token class-name">setType</span> <span class="token operator">=</span> inferSetType<span class="token operator">&lt;</span>zhangSanType<span class="token operator">&gt;</span> <span class="token comment">// type setType = Subject</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-infer-进阶——vue3-源码中的-infer-在响应数据的解套应用" tabindex="-1"><a class="header-anchor" href="#_03-infer-进阶——vue3-源码中的-infer-在响应数据的解套应用" aria-hidden="true">#</a> 03：infer 进阶——Vue3 源码中的 infer 在响应数据的解套应用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">unref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ref<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ref<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">V</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>value <span class="token keyword">as</span> an<span class="token punctuation">)</span> <span class="token operator">:</span> ref
<span class="token punctuation">}</span>

<span class="token function">unref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token function">unref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// { age: 23 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-类型体操准备——vue3-源码中的复杂类型体操准备-先理解-in-keyof" tabindex="-1"><a class="header-anchor" href="#_04-类型体操准备——vue3-源码中的复杂类型体操准备-先理解-in-keyof" aria-hidden="true">#</a> 04: 类型体操准备——Vue3 源码中的复杂类型体操准备：先理解 in keyof</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  degree<span class="token operator">:</span> <span class="token builtin">number</span>
  phone<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">CustKeyValsType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Customer<span class="token punctuation">]</span><span class="token operator">:</span> Customer<span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 推导出
 * type CustKeyValsType = <span class="token punctuation">{</span>
    name: string;
    degree: number;
    phone: string;
<span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-类型体操——深入-vue3-源码中的类型体操" tabindex="-1"><a class="header-anchor" href="#_05-类型体操——深入-vue3-源码中的类型体操" aria-hidden="true">#</a> 05: 类型体操——深入 Vue3 源码中的类型体操</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果泛型变量T是ComputedRef的&#39;子集&#39;，那么使用UnwrapRefSimple处理infer指代的ComputedRef泛型参数V</span>
<span class="token comment">// 否则进一步判断是否为Ref的&#39;子集&#39;，进一步UnwrapRefSimple</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UnwrapRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComputedRef<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> UnwrapRefSimple<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ref<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> UnwrapRefSimple<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> UnwrapRefSimple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

<span class="token comment">// 我是分割线</span>

<span class="token comment">// 如果T为Function | CollectionTypes | BaseTypes | Ref之一的&#39;子集&#39;，直接返回。</span>
<span class="token comment">// 否则判断是否为数组的&#39;子集&#39;，不是的话视为object，调用UnwrappedObject</span>
<span class="token keyword">type</span> <span class="token class-name">UnwrapRefSimple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">|</span> CollectionTypes <span class="token operator">|</span> BaseTypes <span class="token operator">|</span> Ref
  <span class="token operator">?</span> <span class="token constant">T</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> <span class="token constant">T</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span>
  <span class="token operator">?</span> UnwrappedObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token comment">// 我是分割线</span>
<span class="token comment">// 调用UnwrapRef，产生递归效果，解决了ts类型递归</span>
<span class="token keyword">type</span> <span class="token class-name">UnwrappedObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> UnwrapRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> SymbolExtract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上源码，测试代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> urf<span class="token operator">:</span> UnwrapRef<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span> <span class="token comment">//推导出： const urf:string</span>
<span class="token keyword">const</span> urf1<span class="token operator">:</span> UnwrapRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">//推导出： const urf:string</span>
<span class="token keyword">const</span> urf2<span class="token operator">:</span> UnwrapRef<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> age<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// 推导出 const urf2: { name: string, age: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-ts-条件类型——容易混淆的问题-条件类型的好处" tabindex="-1"><a class="header-anchor" href="#_06-ts-条件类型——容易混淆的问题-条件类型的好处" aria-hidden="true">#</a> 06: TS 条件类型——容易混淆的问题，条件类型的好处</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token comment">// type Test = never</span>

<span class="token keyword">type</span> <span class="token class-name">ConditionType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">TestConditionType</span> <span class="token operator">=</span> ConditionType<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// type TestConditionType = string | number</span>
<span class="token comment">// 原因： 上面的使用时整体一次性比较，后面使用泛型采用的时 逐个进行比较，结果略有差异</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-条件类型的复杂应用" tabindex="-1"><a class="header-anchor" href="#_07-条件类型的复杂应用" aria-hidden="true">#</a> 07: 条件类型的复杂应用</h2><p>给接口增加不确定属性，以及值类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第一种</span>
<span class="token keyword">interface</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  degree<span class="token operator">:</span> <span class="token builtin">number</span>
  phone<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用条件类型进行增加</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  degree<span class="token operator">:</span> <span class="token builtin">number</span>
  phone<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">AppAttrToObj<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">V</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> AppAttrToObj<span class="token operator">&lt;</span>Customer<span class="token punctuation">,</span> <span class="token string">&#39;weixn&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token comment">// 推导出 type Test = { name: string, weixn: string, degree: number, phone: string }</span>
<span class="token comment">// 这样原有类型身上就可以添加属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-ts-in-keyof-keyof-在大中项目中的综合实战应用-扁平模块化属性名" tabindex="-1"><a class="header-anchor" href="#_08-ts-in-keyof-keyof-在大中项目中的综合实战应用-扁平模块化属性名" aria-hidden="true">#</a> 08：TS in keyof keyof 在大中项目中的综合实战应用---扁平模块化属性名</h2><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题：</h3><p>对于以下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Modules</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  menu<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">setActiveIndex</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
    <span class="token function-variable function">setCollapse</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
  <span class="token punctuation">}</span>
  tabs<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">seteditableTabsValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>editValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">setTabs</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">setTabsList</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何书写一种如下类型,使其类型为</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GetKeysMenu</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&#39;menu/setActiveIndex&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;menu/setCollapse&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;tabs/seteditableTabsValue&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;tabs/setTabs&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;tabs/setTabsList&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h3><blockquote><p>使用 keyof 获取值类型的联合类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P2</span></span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token keyword">keyof</span> Person<span class="token punctuation">]</span> <span class="token comment">// number | string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ol><li><p>Person[&#39;key&#39;] 是查询类型(Lookup Types), 可以获取到对应属性类型的类型；</p></li><li><p>Person[keyof Person]本质上是执行 Person[&#39;id&#39; | &#39;name&#39; | &#39;age&#39;]；</p></li><li><p>由于联合类型具有分布式的特性，Person[&#39;id&#39; | &#39;name&#39; | &#39;age&#39;] 变成了 Person[&#39;id&#39;] ｜ Person[&#39;name&#39;] ｜ Person[&#39;age&#39;]；</p></li><li><p>最后得到的结果就是 number | string.</p></li></ol><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Modules</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  menu<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">setActiveIndex</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
    <span class="token function-variable function">setCollapse</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
  <span class="token punctuation">}</span>
  tabs<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">seteditableTabsValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>editValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">setTabs</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">setTabsList</span><span class="token operator">:</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1. 模板字符类型</span>
<span class="token keyword">type</span> <span class="token class-name">TestMB<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">U</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">type</span> <span class="token class-name">TestMoBan</span> <span class="token operator">=</span> TestMB<span class="token operator">&lt;</span><span class="token string">&#39;menu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setActiveIndex&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;setCollapse&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// type TestMoBan = &quot;menu/setActiveIndex&quot; | &quot;menu/setCollapse&quot;</span>

<span class="token comment">// 2. 先拿到父模块的属性名</span>
<span class="token keyword">type</span> <span class="token class-name">ModulesSpliceKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TestModulesSpliceKeys</span> <span class="token operator">=</span> ModulesSpliceKeys<span class="token operator">&lt;</span>Modules<span class="token operator">&gt;</span>
<span class="token comment">// 3. 父子模块联合起来</span>
<span class="token keyword">type</span> <span class="token class-name">ModulesSplceKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> TestMB<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">TestModulesKeys</span> <span class="token operator">=</span> ModulesSplceKeys<span class="token operator">&lt;</span>Modules<span class="token operator">&gt;</span>
<span class="token doc-comment comment">/**
  * 
	type TestModulesKeys = <span class="token punctuation">{</span>
    menu: &quot;menu/setActiveIndex&quot; | &quot;menu/setCollapse&quot;;
    tabs: &quot;tabs/seteditableTabsValue&quot; | &quot;tabs/setTabs&quot; | &quot;tabs/setTabsList&quot;;
  <span class="token punctuation">}</span>
*/</span>

<span class="token comment">// 4. 最后一步，第三步为了更好的理解，</span>
<span class="token keyword">type</span> <span class="token class-name">ModulesSplceKeysNew<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> TestMB<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>
<span class="token comment">// [keyof T]跟在对象后面表示舍弃前面的 key</span>
<span class="token keyword">type</span> <span class="token class-name">GetKeysMenu</span> <span class="token operator">=</span> ModulesSplceKeysNew<span class="token operator">&lt;</span>Modules<span class="token operator">&gt;</span>
<span class="token comment">// type GetKeysMenu = &quot;menu/setActiveIndex&quot; | &quot;menu/setCollapse&quot; | &quot;tabs/seteditableTabsValue&quot; | &quot;tabs/setTabs&quot; | &quot;tabs/setTabsList&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09-高级类型——extract-和它的真实应用" tabindex="-1"><a class="header-anchor" href="#_09-高级类型——extract-和它的真实应用" aria-hidden="true">#</a> 09：高级类型——Extract 和它的真实应用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type Extract&lt;T, U&gt; = T extends U ? T : never;</span>
<span class="token keyword">type</span> <span class="token class-name">TestExtract</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExtract = string</span>
<span class="token keyword">type</span> <span class="token class-name">TestExtract2</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExtract2 = string | number</span>
<span class="token keyword">type</span> <span class="token class-name">TestExtract3</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExtract3 = string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-ts-高级类型——exclude-和它的真实应用" tabindex="-1"><a class="header-anchor" href="#_10-ts-高级类型——exclude-和它的真实应用" aria-hidden="true">#</a> 10: TS 高级类型——Exclude 和它的真实应用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type Exclude&lt;T, U&gt; = T extends U ? never : T;</span>
<span class="token keyword">type</span> <span class="token class-name">TestExclude</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExclude = never</span>
<span class="token keyword">type</span> <span class="token class-name">TestExclude2</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExclude2 = never</span>
<span class="token keyword">type</span> <span class="token class-name">TestExclude3</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// type TestExclude3 = boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-技巧性解决-keyof-不能直观看到结果的问题" tabindex="-1"><a class="header-anchor" href="#_11-技巧性解决-keyof-不能直观看到结果的问题" aria-hidden="true">#</a> 11：技巧性解决 keyof 不能直观看到结果的问题</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  degree<span class="token operator">:</span> <span class="token builtin">number</span>
  phone<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Customer <span class="token comment">// type Keys = keyof Customer 这里不能直观的看到类型结果</span>
<span class="token comment">// 解决办法</span>
<span class="token keyword">type</span> <span class="token class-name">DirectKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">KeysNew</span> <span class="token operator">=</span> DirectKeys<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Customer<span class="token operator">&gt;</span> <span class="token comment">// type KeysNew = &quot;name&quot; | &quot;degree&quot; | &quot;phone&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-record-类型和-record-类型存在的意义" tabindex="-1"><a class="header-anchor" href="#_12-record-类型和-record-类型存在的意义" aria-hidden="true">#</a> 12：Record 类型和 Record 类型存在的意义</h2><blockquote><p>Record 第一个参数类型只支持 string、number、address 三种</p><p>keyof any 在 ts 中会被自动解析为 string | number | symbol 三种类型，无需理解，记住即可</p><p>[P in K] 第一个参数类型遍历</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  type Record&lt;K extends keyof any, T&gt; = <span class="token punctuation">{</span> [P in K]: T <span class="token punctuation">}</span>;
  type Record&lt;K extends string | number | symbol, T&gt; = <span class="token punctuation">{</span> [P in K]: T; <span class="token punctuation">}</span>
*/</span>
<span class="token keyword">function</span> <span class="token function">addObj</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;address&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">addObj</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token number">111</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-record-经典实战应用准备——isplainobject-类型" tabindex="-1"><a class="header-anchor" href="#_13-record-经典实战应用准备——isplainobject-类型" aria-hidden="true">#</a> 13：Record 经典实战应用准备——isPlainObject 类型</h2><h2 id="_14-record-完成包含无穷级或数组或对象的对象深拷贝-作业" tabindex="-1"><a class="header-anchor" href="#_14-record-完成包含无穷级或数组或对象的对象深拷贝-作业" aria-hidden="true">#</a> 14：Record 完成包含无穷级或数组或对象的对象深拷贝+作业</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">BaseType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> BaseType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;猪八戒&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object object]&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-扩展-record-和-map-对比" tabindex="-1"><a class="header-anchor" href="#_15-扩展-record-和-map-对比" aria-hidden="true">#</a> 15: 扩展：Record 和 Map 对比</h2><ol><li><p>Record 是属于一个轻量级的 type 类型,Map 相对 Record 是重量级。</p></li><li><p>Map 不能像 Record 一样直接转换为普通的对象，来应对只有查询的实际问题，只是为了频繁的查询去 new 一个 Map 是 一种不必要的浪费。</p></li><li><p>如果读取数据和显示数据频繁，就应该采用 Record。</p></li><li><p>如果增删改比较多，那还是使用 Map。</p></li></ol><h2 id="_16-视频作业-record-扁平化的子数组对象" tabindex="-1"><a class="header-anchor" href="#_16-视频作业-record-扁平化的子数组对象" aria-hidden="true">#</a> 16: 视频作业：Record 扁平化的子数组对象</h2><h3 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> todoList<span class="token operator">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&#39;开发权限模块&#39;</span><span class="token punctuation">,</span>
    completed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">&#39;使用 Vue3 + Ts 开发&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&#39;年会&#39;</span><span class="token punctuation">,</span>
    completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">&#39;12月29日上午&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token comment">// 想要的实现效果如下</span>
<span class="token keyword">const</span> pickTodoList <span class="token operator">=</span> <span class="token punctuation">{</span>
  开发权限模块<span class="token operator">:</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&#39;开发权限模块&#39;</span><span class="token punctuation">,</span>
    completed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  年会<span class="token operator">:</span> <span class="token punctuation">{</span>
    completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    title<span class="token operator">:</span> <span class="token string">&#39;年会&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_17-ts-更多重要的高级类型——抓取属性类型" tabindex="-1"><a class="header-anchor" href="#_17-ts-更多重要的高级类型——抓取属性类型" aria-hidden="true">#</a> 17: TS 更多重要的高级类型——抓取属性类型</h2><blockquote><p>Pick 主要用于抓取 type 类型、接口、类中的属性组成一个新的对象类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token constant">ISBN</span><span class="token operator">:</span> <span class="token builtin">string</span>
  book_name<span class="token operator">:</span> <span class="token builtin">boolean</span>
  book_price<span class="token operator">:</span> <span class="token builtin">string</span>
  store_count<span class="token operator">:</span> <span class="token builtin">number</span>
  publish<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
  name<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 
  type Pick&lt;T, K extends keyof T&gt; = <span class="token punctuation">{</span>
    [P in K]: T[P];
  <span class="token punctuation">}</span>;
  */</span>

<span class="token keyword">type</span> <span class="token class-name">SubBook</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Book<span class="token punctuation">,</span> <span class="token string">&#39;ISBN&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;book_name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;book_price&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// 推导出 type SubBook = { ISBN: string, book_name: boolean, book_price: string }</span>
<span class="token keyword">type</span> <span class="token class-name">SubCustmer</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Customer<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// 推导出 type SubCustmer = { name: string }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-ts-映射类型的高级玩法" tabindex="-1"><a class="header-anchor" href="#_18-ts-映射类型的高级玩法" aria-hidden="true">#</a> 18: TS 映射类型的高级玩法</h2><blockquote><p>上一节中，我们使用 Pick 从对象或者类中抓取出符合想要的属性以及值类型，假如想要摘取的属性过多，我们就想有没有一种排除语法，排除掉其中几个，剩余的我们都要抓取。如何操作呢，代码如下</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token constant">ISBN</span><span class="token operator">:</span> <span class="token builtin">string</span>
  book_name<span class="token operator">:</span> <span class="token builtin">boolean</span>
  book_price<span class="token operator">:</span> <span class="token builtin">string</span>
  store_count<span class="token operator">:</span> <span class="token builtin">number</span>
  publish<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TestOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">MyOmit</span> <span class="token operator">=</span> TestOmit<span class="token operator">&lt;</span>Book<span class="token punctuation">,</span> <span class="token string">&#39;ISBN&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;book_price&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// type MyOmit = { book_name: boolean, store_count: number, publish: string }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化</p><p>上面代码 <code>P extends K ? never : P</code>很像 <code>Exclude</code>的作用，可以进行优化如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token constant">ISBN</span><span class="token operator">:</span> <span class="token builtin">string</span>
  book_name<span class="token operator">:</span> <span class="token builtin">boolean</span>
  book_price<span class="token operator">:</span> <span class="token builtin">string</span>
  store_count<span class="token operator">:</span> <span class="token builtin">number</span>
  publish<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TestOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// [P in keyof T as P extends K ? never : P]: T[P]</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> Exclude<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">MyOmit</span> <span class="token operator">=</span> TestOmit<span class="token operator">&lt;</span>Book<span class="token punctuation">,</span> <span class="token string">&#39;ISBN&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;book_price&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// type MyOmit = { book_name: boolean, store_count: number, publish: string }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-record-capitalize-exclude-映射类型-函数约束综合真实应用-1" tabindex="-1"><a class="header-anchor" href="#_19-record-capitalize-exclude-映射类型-函数约束综合真实应用-1" aria-hidden="true">#</a> 19: Record, Capitalize, Exclude，映射类型，函数约束综合真实应用-1</h2><h3 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1" aria-hidden="true">#</a> 问题</h3><blockquote><p>需求：把 add 变为 doAdd, del 变为 doDel 。。。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">upt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码实现步骤" tabindex="-1"><a class="header-anchor" href="#代码实现步骤" aria-hidden="true">#</a> 代码实现步骤</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1. 获取 TODO 函数</span>
<span class="token keyword">type</span> <span class="token class-name">Degree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// type DegreeTodo = Degree&lt;Todo&gt;</span>
<span class="token comment">// 推导出 type DegreeTodo = { add: () =&gt; number; del: () =&gt; number; upt: () =&gt; number }</span>
<span class="token comment">// 2. 模板字符</span>
<span class="token keyword">type</span> <span class="token class-name">DegreeTwo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">DegreeTodoTwo</span> <span class="token operator">=</span> DegreeTwo<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">// 推导出 type DegreeTodoTwo = { doadd: () =&gt; number,dodel: () =&gt; number, doupt: () =&gt; number}</span>

<span class="token comment">// 3. 首字母大写</span>
<span class="token keyword">type</span> <span class="token class-name">DegreeThree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span>
    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">DegreeTodoThree</span> <span class="token operator">=</span> DegreeThree<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">// type DegreeTodoThree = { doAdd: () =&gt; number, doDel: () =&gt; number, doUpt: () =&gt; number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码合并优化" tabindex="-1"><a class="header-anchor" href="#代码合并优化" aria-hidden="true">#</a> 代码合并优化</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Degree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span>
    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">DegreeTodo</span> <span class="token operator">=</span> Degree<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">// type DegreeTodoThree = { doAdd: () =&gt; number, doDel: () =&gt; number, doUpt: () =&gt; number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-record-capitalize-exclude-映射类型-函数约束综合真实应用-2" tabindex="-1"><a class="header-anchor" href="#_20-record-capitalize-exclude-映射类型-函数约束综合真实应用-2" aria-hidden="true">#</a> 20: Record, Capitalize, Exclude，映射类型，函数约束综合真实应用-2</h2><blockquote><p>上节代码中我们对 T 的类型没有做限制，可以传递任意类型</p></blockquote><h3 id="发现问题" tabindex="-1"><a class="header-anchor" href="#发现问题" aria-hidden="true">#</a> 发现问题</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Degree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span>
    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 对于数组类型，会展开数组类型原型的所有方法</span>
<span class="token keyword">type</span> <span class="token class-name">TestArr</span> <span class="token operator">=</span> Degree<span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>

<span class="token doc-comment comment">/**
 * 推导结果如下：
type TestArr = <span class="token punctuation">{</span>
  doToString: () =&gt; string;
  doToLocaleString: () =&gt; string;
  doPop: () =&gt; any;
  doPush: (...items: any[]) =&gt; number;
  ...
<span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化代码" tabindex="-1"><a class="header-anchor" href="#优化代码" aria-hidden="true">#</a> 优化代码</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Exc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">Degree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Exc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">as</span> Exc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span>
    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> Exc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TestArr</span> <span class="token operator">=</span> Degree<span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>
<span class="token comment">// 推导结果: type TestArr = {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-一个有点诡异的复杂映射类型的重要应用" tabindex="-1"><a class="header-anchor" href="#_21-一个有点诡异的复杂映射类型的重要应用" aria-hidden="true">#</a> 21: 一个有点诡异的复杂映射类型的重要应用</h2><h3 id="问题-2" tabindex="-1"><a class="header-anchor" href="#问题-2" aria-hidden="true">#</a> 问题</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TestMouseEvent</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  eventType<span class="token operator">:</span> <span class="token string">&#39;click&#39;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">TestKeyEvent</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  eventType<span class="token operator">:</span> <span class="token string">&#39;keyUp&#39;</span>
  key<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如何实现 EventFunctions</span>
<span class="token keyword">type</span> <span class="token class-name">EventRec</span> <span class="token operator">=</span> EventFunctions<span class="token operator">&lt;</span>TestMouseEvent <span class="token operator">|</span> TestKeyEvent<span class="token punctuation">,</span> <span class="token string">&#39;eventType&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// 推导结果如下：</span>
<span class="token comment">/*
  type EventRec = {
    click: (event: TestMouseEvent) =&gt; any
    keyUp: (event: TestKeyEvent) =&gt; any
  }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2" aria-hidden="true">#</a> 代码实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">EventFunctions<span class="token operator">&lt;</span>
  Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  EventKey <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token punctuation">,</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Event <span class="token keyword">in</span> Events <span class="token keyword">as</span> Event <span class="token keyword">extends</span> <span class="token class-name">Events</span> <span class="token operator">?</span> Event<span class="token punctuation">[</span>EventKey<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    event<span class="token operator">:</span> Event<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token comment">// [Event in Events as Event[EventKey]]: (event: Event) =&gt; any</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">EventRec</span> <span class="token operator">=</span> EventFunctions<span class="token operator">&lt;</span>TestMouseEvent <span class="token operator">|</span> TestKeyEvent<span class="token punctuation">,</span> <span class="token string">&#39;eventType&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">// 推导结果如下：</span>
<span class="token comment">/*
  type EventRec = {
    click: (event: TestMouseEvent) =&gt; any
    keyUp: (event: TestKeyEvent) =&gt; any
  }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-一个有点诡异的复杂映射类型的重要应用【其他更多理解】" tabindex="-1"><a class="header-anchor" href="#_22-一个有点诡异的复杂映射类型的重要应用【其他更多理解】" aria-hidden="true">#</a> 22: 一个有点诡异的复杂映射类型的重要应用【其他更多理解】</h2><h2 id="_23-ts-三个实用的高级辅助类型" tabindex="-1"><a class="header-anchor" href="#_23-ts-三个实用的高级辅助类型" aria-hidden="true">#</a> 23: TS 三个实用的高级辅助类型</h2><h3 id="required-可选项变为必选项" tabindex="-1"><a class="header-anchor" href="#required-可选项变为必选项" aria-hidden="true">#</a> Required：可选项变为必选项</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  date<span class="token operator">?</span><span class="token operator">:</span> Date
  publishers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 发言人</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Make all properties in T required
 
  type Required&lt;T&gt; = <span class="token punctuation">{</span>
      [P in keyof T]-?: T[P];
  <span class="token punctuation">}</span>;
 */</span>

<span class="token keyword">type</span> <span class="token class-name">TodoRequired</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">/*
-? 可选项目变为 必选项
推导结果如下，
type TodoRequired = {
  readonly title: string;
  completed: boolean;
  description: string;
  date: Date;
  publishers: string;
}
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="partial" tabindex="-1"><a class="header-anchor" href="#partial" aria-hidden="true">#</a> Partial</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Make all properties in T optional</span>
<span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TodoRequired</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">/*
-? 可选项目变为 必选项
推导结果如下，
  type TodoRequired = {
    readonly title?: string | undefined;
    completed?: boolean | undefined;
    description?: string | undefined;
    date?: Date | undefined;
    publishers?: string | undefined;
  }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly" aria-hidden="true">#</a> Readonly</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Make all properties in T readonly</span>
<span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TodoRequired</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>
<span class="token comment">/*
-? 可选项目变为 必选项
推导结果如下，
  type TodoRequired = {
    readonly title: string;
    readonly completed: boolean;
    readonly description: string;
    readonly date?: Date | undefined;
    readonly publishers?: string | undefined;
  }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-ts-高级类型视频作业-一个大中项目非常实用的复杂实战题" tabindex="-1"><a class="header-anchor" href="#_24-ts-高级类型视频作业-一个大中项目非常实用的复杂实战题" aria-hidden="true">#</a> 24: TS 高级类型视频作业：一个大中项目非常实用的复杂实战题</h2><h3 id="问题-3" tabindex="-1"><a class="header-anchor" href="#问题-3" aria-hidden="true">#</a> 问题</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    stuNo<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    stuName<span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
    teacherNo<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
    teacherName<span class="token operator">:</span> <span class="token string">&#39;菩提祖师&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    stuNo<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    stuName<span class="token operator">:</span> <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span>
    teacherNo<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
    teacherName<span class="token operator">:</span> <span class="token string">&#39;黎山老母&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    stuNo<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    stuName<span class="token operator">:</span> <span class="token string">&#39;金蝉子&#39;</span><span class="token punctuation">,</span>
    teacherNo<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
    teacherName<span class="token operator">:</span> <span class="token string">&#39;如来佛祖&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token function">getSubItemsFromArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">&#39;stuNo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;stuName&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 实现 getSubItemsFromArr， 获得 &#39;stuNo&#39;, &#39;stuName&#39; 的属性值组成的新对象数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3" aria-hidden="true">#</a> 代码实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_25-作业-百度复杂面试题" tabindex="-1"><a class="header-anchor" href="#_25-作业-百度复杂面试题" aria-hidden="true">#</a> 25: 作业：百度复杂面试题</h2><h3 id="作业-百度复杂面试题-综合运用-综-infer-映射类型-keyof-泛型约束来实现。" tabindex="-1"><a class="header-anchor" href="#作业-百度复杂面试题-综合运用-综-infer-映射类型-keyof-泛型约束来实现。" aria-hidden="true">#</a> **作业：百度复杂面试题:综合运用 综 infer，映射类型, keyof ，泛型约束来实现。 **</h3><p><strong>已知条件 1：接口和类 ：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Action<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span>
  payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">FoodModule</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> topic<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">public</span> count<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">delay</span><span class="token punctuation">(</span>promise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>second<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;delay&#39;</span><span class="token punctuation">,</span>
      payload<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">延迟 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 秒</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">searchFoodByCity</span><span class="token punctuation">(</span>action<span class="token operator">:</span> Action<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      payload<span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>
      type<span class="token operator">:</span> <span class="token string">&#39;searchFoodByCity&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>已知条件 2</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 下面是 FoodModule 类的 delay 和 searchFoodByCity 方法的泛型类型 分别是：</span>
<span class="token keyword">type</span> <span class="token class-name">asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;&gt;</span> <span class="token comment">// delay方法类型</span>
<span class="token keyword">type</span> <span class="token class-name">syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token comment">// searchFoodByCity方法类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要求实现 1：根据上面两个已知条件，综合利用 ： infer,keyof, in keyof 来得到下面类型：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">asyncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token comment">// delay方法类型</span>
<span class="token keyword">type</span> <span class="token class-name">syncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token comment">// searchFoodByCity方法类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**要求实现 2： 根据上面两个已知条件和实现 1，最终获取到下面类型。 **</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LastResult</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  delay<span class="token operator">:</span> asyncMethodConnect<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>
  searchFoodByCity<span class="token operator">:</span> syncMethodConnect<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本体难度系数较高，但能很好的巩固知识并提升对知识的理解，请同学们先仔细思考再做</strong></p><h2 id="_26-本章总结" tabindex="-1"><a class="header-anchor" href="#_26-本章总结" aria-hidden="true">#</a> 26: 本章总结</h2><h3 id="诸多重要的-ts-高级类型语法" tabindex="-1"><a class="header-anchor" href="#诸多重要的-ts-高级类型语法" aria-hidden="true">#</a> 诸多重要的 TS 高级类型语法</h3><ol><li>infer: infer、在 Vue3 源码中的 infer 应用</li><li>类型体操：类型体操（类型递归），in keyof</li><li>条件类型：条件类型，条件类型的复杂应用</li><li>in keyof 实战中的应用</li><li>TS 高级类型：Extract、Exclude、Record、Pick、Omit、Capitalize</li><li>映射类型： in</li><li>诡异的复杂映射机制</li><li>TS 高级辅助类型：ReadOnly Required Paritial</li></ol>`,118),o=[p];function c(l,i){return n(),a("div",null,o)}const k=s(t,[["render",c],["__file","index-09.html.vue"]]);export{k as default};
