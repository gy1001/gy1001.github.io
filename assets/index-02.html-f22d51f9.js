import{_ as p,M as o,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-e8cb8151.js";const i={},r=n("h1",{id:"_02-数据类型容易忽略的细节",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_02-数据类型容易忽略的细节","aria-hidden":"true"},"#"),s(" 02-数据类型容易忽略的细节")],-1),u=n("p",null,"推荐文章",-1),d={href:"https://juejin.cn/post/7023168824975294500",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_01-数据类型的陷阱-从表象看本质" tabindex="-1"><a class="header-anchor" href="#_01-数据类型的陷阱-从表象看本质" aria-hidden="true">#</a> 01: 数据类型的陷阱，从表象看本质！</h2><h3 id="_01、判断是不是-object" tabindex="-1"><a class="header-anchor" href="#_01、判断是不是-object" aria-hidden="true">#</a> 01、判断是不是 Object</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第一个问题-上面的方法有什么问题" tabindex="-1"><a class="header-anchor" href="#第一个问题-上面的方法有什么问题" aria-hidden="true">#</a> 第一个问题：上面的方法有什么问题</h4><blockquote><p><code>null</code>也会返回 <code>true</code>, 因为 <code>typeof null</code>的值就是<code>object</code></p></blockquote><h4 id="为什么-typeof-null的返回值就是object" tabindex="-1"><a class="header-anchor" href="#为什么-typeof-null的返回值就是object" aria-hidden="true">#</a> 为什么 <code>typeof null</code>的返回值就是<code>object</code></h4>`,6),m=n("p",null,"历史原因造成的历史原因造成的; 因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。",-1),v={href:"https://2ality.com/2013/10/typeof-null.html",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"作者看过 JS 引擎代码，得出结论。大致意思如下：",-1),h={href:"https://www.zhihu.com/search?q=%E6%AF%94%E7%89%B9&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.zhihu.com/search?q=%E5%93%88%E6%B3%95%E6%9B%BC%E7%BC%96%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"1：整型（int）",-1),y={href:"https://www.zhihu.com/search?q=%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.zhihu.com/search?q=%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E5%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"100：字符串（string）",-1),x=n("li",null,"110：布尔型（boolean）",-1),j=n("p",null,"另外还用两个特殊值：",-1),N=n("li",null,"undefined，用整数 −2^30（负 2 的 30 次方，不在整型的范围内）",-1),E={href:"https://www.zhihu.com/search?q=%E6%9C%BA%E5%99%A8%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.zhihu.com/search?q=%E5%AE%8F%E5%AE%9A%E4%B9%89&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"JS_TypeOfValue",-1),q={href:"https://www.zhihu.com/search?q=%E6%BA%90%E4%BB%A3%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1118265190%7D",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>JS_PUBLIC_API(JSType)
JS_TypeOfValue(JSContext *cx, jsval v)
{
    JSType type = JSTYPE_VOID;
    JSObject *obj;
    JSObjectOps *ops;
    JSClass *clasp;

    CHECK_REQUEST(cx);
    if (JSVAL_IS_VOID(v)) {  // (1)
        type = JSTYPE_VOID;
    } else if (JSVAL_IS_OBJECT(v)) {  // (2)
        obj = JSVAL_TO_OBJECT(v);
        if (obj &amp;&amp;
            (ops = obj-&gt;map-&gt;ops,
              ops == &amp;js_ObjectOps
              ? (clasp = OBJ_GET_CLASS(cx, obj),
                clasp-&gt;call || clasp == &amp;js_FunctionClass) // (3,4)
              : ops-&gt;call != 0)) {  // (3)
            type = JSTYPE_FUNCTION;
        } else {
            type = JSTYPE_OBJECT;
        }
    } else if (JSVAL_IS_NUMBER(v)) {
        type = JSTYPE_NUMBER;
    } else if (JSVAL_IS_STRING(v)) {
        type = JSTYPE_STRING;
    } else if (JSVAL_IS_BOOLEAN(v)) {
        type = JSTYPE_BOOLEAN;
    }
    return type;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JavaScript 中的变量是没有类型的，只有值才有。 --《你不知道的 JavaScript（中卷）》</p></blockquote><p>作者：贝叶斯 链接：https://www.zhihu.com/question/21691758/answer/1118265190 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>`,3),O=n("h4",{id:"什么不修复这个问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么不修复这个问题","aria-hidden":"true"},"#"),s(" 什么不修复这个问题？")],-1),I=n("p",null,"兼容性问题，历史性遗留问题太多，万一修复后导致其他的各种各样的问题，就会很难处理。",-1),T={href:"http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"typeof null === 'null'",-1),B=t(`<h3 id="_02、一元运算符-转为数字" tabindex="-1"><a class="header-anchor" href="#_02、一元运算符-转为数字" aria-hidden="true">#</a> 02、一元运算符+转为数字</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">+</span>val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题出现在哪里呢" tabindex="-1"><a class="header-anchor" href="#问题出现在哪里呢" aria-hidden="true">#</a> 问题出现在哪里呢？</h4><p>兼容性问题，在 ES5 中代码没有问题，但是在 ES6 中是不能够正常使用的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//NaN</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token string">&#39;10px&#39;</span><span class="token punctuation">)</span> <span class="token comment">//NaN</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token comment">// Es6中的bigInt 和 Symbol</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token number">10n</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: Cannot convert a BigInt value to a number</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// VM79:2 Uncaught TypeError: Cannot convert a Symbol value to a number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03、位移转为数字" tabindex="-1"><a class="header-anchor" href="#_03、位移转为数字" aria-hidden="true">#</a> 03、位移转为数字</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val <span class="token operator">&gt;&gt;</span> <span class="token number">0</span> <span class="token comment">// 有符号位移</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toNumber2</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span> <span class="token comment">// 无符号位移</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码有什么问题" tabindex="-1"><a class="header-anchor" href="#代码有什么问题" aria-hidden="true">#</a> 代码有什么问题？</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token string">&#39;10px&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token comment">// 超大的数</span>
<span class="token function">toNumber</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
<span class="token function">toNumber2</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token comment">// 4294967295</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质：</h4><p>32 位的有符号位移和无符号位移</p><h3 id="_04、字符串批量转换为整数" tabindex="-1"><a class="header-anchor" href="#_04、字符串批量转换为整数" aria-hidden="true">#</a> 04、字符串批量转换为整数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, NaN, NaN]</span>
<span class="token comment">// parseInt( &quot;1&quot;, 0) // 1</span>
<span class="token comment">// parseInt( &quot;2&quot;, 1) NaN</span>
<span class="token comment">// parseInt( &quot;3&quot;, 2) NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结果是什么" tabindex="-1"><a class="header-anchor" href="#结果是什么" aria-hidden="true">#</a> 结果是什么</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="parseint-第二个参数的取值范围" tabindex="-1"><a class="header-anchor" href="#parseint-第二个参数的取值范围" aria-hidden="true">#</a> parseInt 第二个参数的取值范围</h4><blockquote><p>2-36 之间的整数，表示被解析字符串的基数。</p></blockquote><h3 id="_05、if-条件判断" tabindex="-1"><a class="header-anchor" href="#_05、if-条件判断" aria-hidden="true">#</a> 05、if 条件判断</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// name 存在</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  result<span class="token punctuation">.</span>name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
<span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="本质-转为布尔值" tabindex="-1"><a class="header-anchor" href="#本质-转为布尔值" aria-hidden="true">#</a> 本质：转为布尔值</h4><h4 id="问题-哪些值可以转为布尔值-false" tabindex="-1"><a class="header-anchor" href="#问题-哪些值可以转为布尔值-false" aria-hidden="true">#</a> 问题：哪些值可以转为布尔值 false</h4><p>下面 6 种值转化为布尔值时为 false，其他转化都为 true</p><ul><li><p><code>undefined</code>（未定义，找不到值时出现）</p></li><li><p><code>null</code>（代表空值）</p></li><li><p><code>false</code>（布尔值的 false，字符串&quot;false&quot;布尔值为 true）</p></li><li><p><code>0</code>（数字 0，字符串&quot;0&quot;布尔值为 true）</p></li><li><p><code>NaN</code>（无法计算结果时出现，表示&quot;非数值&quot;；但是 typeof NaN===&quot;number&quot;）</p></li><li><p><code>&quot;&quot;</code>（双引号）或<code>&#39;&#39;</code>（单引号） （空字符串，中间有空格时也是 true）</p></li></ul><h3 id="_06、宽松比较" tabindex="-1"><a class="header-anchor" href="#_06、宽松比较" aria-hidden="true">#</a> 06、宽松比较</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// false</span>
<span class="token string">&#39;0&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="本质-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#本质-隐式类型转换" aria-hidden="true">#</a> 本质：隐式类型转换</h4><h4 id="宽松比较-规律" tabindex="-1"><a class="header-anchor" href="#宽松比较-规律" aria-hidden="true">#</a> 宽松比较-规律</h4><ul><li><code>NaN</code></li><li><code>bigInt</code>、<code>Symbol</code></li><li><code>null</code>、<code>undefined</code></li><li>布尔值类型和其他类型的相等比较</li><li>数字类型和字符串类型的相等比较</li><li>对象类型和原始类型的相等比较</li></ul><h3 id="_07、闲谈" tabindex="-1"><a class="header-anchor" href="#_07、闲谈" aria-hidden="true">#</a> 07、闲谈</h3><ul><li><p><code>typeof</code> 性能比 <code>instanceof</code> 高 20 倍？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1000000</span>
<span class="token keyword">var</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">typeof</span> func <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;[typeof func === &#39;function&#39;]&quot;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  func <span class="token keyword">instanceof</span> <span class="token class-name">Function</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&#39;[instace of Function]&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment">// 这样执行出来结果 大概前者是后者的 1/2 时间或者小于，远没有 20倍，并且这个前提是 1000000 次执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>null</code> 和 <code>undefined</code> 实现的机制完全不一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node 环境下执行的结果</span>
<span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log
<span class="token function">print</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// undefined</span>
<span class="token function">print</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// { value: undefined,  writable: false, enumerable: false, configurable: false }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>判断是不是数字， NaN</p></li></ul><h2 id="_02-综合评定-数据类型-8-中判断方式" tabindex="-1"><a class="header-anchor" href="#_02-综合评定-数据类型-8-中判断方式" aria-hidden="true">#</a> 02：综合评定，数据类型 8 中判断方式</h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><ul><li><p>主要用途：操作数的类型，只能识别基础数据类型和引用类型</p></li><li><p>特别注意：null、NaN、document.all</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>all <span class="token comment">//  &#39;undefined&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// &#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token comment">// &#39;number&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意事项：已经不是绝对安全（暂时性死去）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">typeof</span> a
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// VM517:2 Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><ul><li><p>原理：<code>constructor</code> 指向创建实例对象的构造函数</p></li><li><p>注意事项：<code>null</code>、<code>undefined</code></p></li><li><p>注意事项：<code>constructor</code> 可以被改写</p></li><li><p>实际应用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://github.com/reduxjs/redux/blob/4.x/src/utils/kindOf.js</span>
<span class="token keyword">function</span> <span class="token function">miniKindOf</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;undefined&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>

  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> val
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;boolean&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;string&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;number&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;symbol&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;function&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> type
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;array&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDate</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;date&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;error&#39;</span>

  <span class="token keyword">const</span> constructorName <span class="token operator">=</span> <span class="token function">ctorName</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>constructorName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;Symbol&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;Promise&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;WeakMap&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;WeakSet&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;Map&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;Set&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> constructorName
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// other</span>
  <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><ul><li><p>原理：就是原型链上查找，查到即是其实例</p></li><li><p>注意事项：右操作数必须是 函数 或者 class</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://github.com/reduxjs/redux/blob/4.x/src/utils/kindOf.js</span>
<span class="token keyword">function</span> <span class="token function">isError</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 先用 instanceof 判断</span>
    val <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> val<span class="token punctuation">.</span>message <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span>
      val<span class="token punctuation">.</span>constructor <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>stackTraceLimit <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先用 instanceof 判断</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>toDateString <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>getDate <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>setDate <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意事项：多全局对象，例如多 window 之间（比如 <code>iframe</code> 中）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> frame <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> isInstanceOf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">frame<span class="token punctuation">.</span>Array</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fram.Array&#39;</span><span class="token punctuation">,</span> frame<span class="token punctuation">.</span>Array<span class="token punctuation">)</span> <span class="token comment">// fram.Array f Array() { [native code] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isInstanceOf&#39;</span><span class="token punctuation">,</span> isInstanceOf<span class="token punctuation">)</span> <span class="token comment">// isInstanceOf false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="isprorotypeof" tabindex="-1"><a class="header-anchor" href="#isprorotypeof" aria-hidden="true">#</a> isProrotypeOf</h3><ul><li>原理：是否出现在实例对象的原型链上</li><li>注意事项：<strong>能正常返回值</strong>的情况下，基本等同于 <code>instanceof</code></li></ul><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h3><ul><li><p>原理：通过函数的动态 this 特性，返回其数据类型，<code>&#39;[object Date]&#39;</code></p></li><li><p>思考题：自定义对象如何获得 <code>[object MyArray]</code> 类型(看下一节)</p></li><li><p>思考题：<code>Object.prototype.toString.call(Boolean.prototype)</code></p><blockquote><p>&#39;[object Boolean]&#39;</p></blockquote></li></ul><h3 id="鸭子类型检测" tabindex="-1"><a class="header-anchor" href="#鸭子类型检测" aria-hidden="true">#</a> 鸭子类型检测</h3><ul><li><p>原理：检查自身，属性的类型或者执行结果的类型</p></li><li><p>例子：<code>KindOf</code> 与 <code>p-is-promise</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// https://github.com/sindresorhus/p-is-promise/blob/main/index.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    value <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Promise</span></span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>catch <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>总结：候选方案</p></li></ul><h3 id="symbol-tostringtag" tabindex="-1"><a class="header-anchor" href="#symbol-tostringtag" aria-hidden="true">#</a> Symbol.toStringTag</h3><ul><li><p>原理：Object.prototype.toString 会读取该值</p></li><li><p>适用场景：需自定义类型</p></li><li><p>注意事项：兼容性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;MyArray&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> pf <span class="token operator">=</span> console<span class="token punctuation">.</span>log
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// [object MyArray]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="等比较" tabindex="-1"><a class="header-anchor" href="#等比较" aria-hidden="true">#</a> 等比较</h3><ul><li><p>原理：与某个固定的值进行比较</p></li><li><p>使用场景：<code>undefined</code> <code>window</code> <code>document</code> <code>null</code> 等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://github.com/jashkenas/underscore/blob/master/underscore.js</span>

<span class="token comment">// Is a given variable undefined?</span>
<span class="token keyword">function</span> <span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>看下图，浏览器中的<code>undefined</code>的<code>writable</code>是<code>false</code>，不可改写的</p></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba0d566e94a14592af62b251c0542d21~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><table><thead><tr><th>方法</th><th>基础数据类型</th><th>引用类型</th><th>注意事项</th></tr></thead><tbody><tr><td>typeof</td><td>可以</td><td>不可以</td><td>NaN object document.all</td></tr><tr><td>constructor</td><td>部分可以</td><td>可以</td><td>可以被改写</td></tr><tr><td>instanceof</td><td>不可以</td><td>可以</td><td>多窗口，右边是构造函数或者 class</td></tr><tr><td>isPrototypeOf</td><td>不可以</td><td>可以</td><td>小心 null 和 undefined</td></tr><tr><td>toString</td><td>可以</td><td>可以</td><td>小心内置原型</td></tr><tr><td>鸭子类型</td><td></td><td>可以</td><td>不得以或者兼容</td></tr><tr><td>Symbol.toStringTag</td><td>不可以</td><td>可以</td><td>识别自定义对象</td></tr><tr><td>等比较</td><td>可以</td><td>可以</td><td>特殊对象</td></tr></tbody></table><h2 id="_03-五分钟让你懂得透彻-es6-增强的-nan" tabindex="-1"><a class="header-anchor" href="#_03-五分钟让你懂得透彻-es6-增强的-nan" aria-hidden="true">#</a> 03：五分钟让你懂得透彻 ES6 增强的 NaN</h2><h4 id="nan-和-number-nan" tabindex="-1"><a class="header-anchor" href="#nan-和-number-nan" aria-hidden="true">#</a> NaN 和 Number.NaN</h4><ul><li><p>特点 1：typeof 是数字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token comment">// &#39;number&#39;</span>
<span class="token keyword">typeof</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token comment">// &#39;number&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特点 2：我不等于我自己</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>
Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token number">NaN</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不能被删除( <code>configurable</code> 是 <code>false</code> )</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158ef8d59c42412f9df63a33a8c56280~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ul><h4 id="isnan" tabindex="-1"><a class="header-anchor" href="#isnan" aria-hidden="true">#</a> isNaN</h4><ul><li><p><code>isNaN</code>: 检查 <code>toNumber</code> 返回值，如果是 <code>NaN</code>, 就返回 <code>true</code>, 否则就返回 false</p></li><li><p>ES 标准</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b897b81602741a084f0bf837612b82e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ul><h4 id="number-isnan" tabindex="-1"><a class="header-anchor" href="#number-isnan" aria-hidden="true">#</a> Number.isNaN</h4><ul><li>Number.isNaN: 判断一个值是否是数字，并且值等于 NaN</li></ul><h4 id="严格判断-nan-汇总" tabindex="-1"><a class="header-anchor" href="#严格判断-nan-汇总" aria-hidden="true">#</a> 严格判断 NaN 汇总</h4>`,58),D={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"isNaN()",-1),M=n("li",null,"自身比较",-1),V=n("li",null,"Object.is",-1),P=n("li",null,"typeof + NaN",-1),L=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isNaNVal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isNaNVal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val <span class="token operator">!==</span> val
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isNaNVal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 综合垫片</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;isNaN&#39;</span> <span class="token keyword">in</span> Number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Number<span class="token punctuation">.</span><span class="token function-variable function">isNaN</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="透过陷阱看本质" tabindex="-1"><a class="header-anchor" href="#透过陷阱看本质" aria-hidden="true">#</a> 透过陷阱看本质</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),z=n("li",null,[n("p",null,"includes: 调用内部的 Number::sameValueZero")],-1),R=n("li",null,[n("p",null,"indexOf: 调用内部的 Number::equal")],-1),U=n("p",null,"我们深入规范看一看：",-1),Y={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Findexed-collections.html%23sec-array.prototype.includes",target:"_blank",rel:"noopener noreferrer"},G={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fabstract-operations.html%23sec-samevaluezero",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"x",-1),Z=n("code",null,"y",-1),$={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fecmascript-data-types-and-values.html%23sec-numeric-types-number-sameValueZero",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"x",-1),X=n("code",null,"y",-1),H=t("<li>If <code>x</code> is NaN and <code>y</code> is NaN, return true.</li><li>If <code>x</code> is +0𝔽 and <code>y</code> is -0𝔽, return true.</li><li>If <code>x</code> is -0𝔽 and <code>y</code> is +0𝔽, return true.</li>",3),Q=n("code",null,"x",-1),nn={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fecmascript-data-types-and-values.html%23number-value",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"y",-1),an=n("li",null,"Return false",-1),en=n("h3",{id:"indexof",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#indexof","aria-hidden":"true"},"#"),s(" indexOf")],-1),tn={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Findexed-collections.html%23sec-array.prototype.indexof",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fabstract-operations.html%23sec-isstrictlyequal",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"searchElement",-1),cn=n("code",null,"elementK",-1),ln={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fecmascript-data-types-and-values.html%23sec-numeric-types-number-equal",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"x",-1),un=n("code",null,"y",-1),dn=n("p",null,"其比对逻辑",-1),kn=n("code",null,"x",-1),mn=n("code",null,"y",-1),vn=n("code",null,"x",-1),bn={href:"https://link.juejin.cn?target=https%3A%2F%2Ftc39.es%2Fecma262%2Fmultipage%2Fecmascript-data-types-and-values.html%23number-value",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"y",-1),fn=n("code",null,"x",-1),gn=n("code",null,"y",-1),yn=n("code",null,"x",-1),_n=n("code",null,"y",-1),wn=n("li",null,"Return false.",-1),xn=n("p",null,"可以看到，任何一个为 NaN，就直接返回 false，必然不能严格的检查 NaN.",-1),jn=t(`<h2 id="_04-数值千分位-6-种方法-性能大比拼" tabindex="-1"><a class="header-anchor" href="#_04-数值千分位-6-种方法-性能大比拼" aria-hidden="true">#</a> 04: 数值千分位 6 种方法 &amp; 性能大比拼！</h2><h3 id="数值转字符串遍历" tabindex="-1"><a class="header-anchor" href="#数值转字符串遍历" aria-hidden="true">#</a> 数值转字符串遍历</h3><ul><li><p>整体思路：数字转字符串，整体部分低位往高位遍历</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 转换为数字，并按照 . 拆分</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 整体部分再拆分</span>
  <span class="token keyword">const</span> int <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 小数部分</span>
  <span class="token keyword">const</span> fraction <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  int<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 非第一位并且值是3的倍数 添加 ，</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> r
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> v <span class="token operator">+</span> r
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>fraction <span class="token operator">?</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> fraction <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9,398,222.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="字符串-substring-截取" tabindex="-1"><a class="header-anchor" href="#字符串-substring-截取" aria-hidden="true">#</a> 字符串 + substring 截取</h3><ul><li>整体思路：数字转字符串，整体部分高位往低位遍历，三位分组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 转换为数字，并按照 . 拆分</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> int <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">const</span> fraction <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 多余的位数</span>
  <span class="token keyword">var</span> f <span class="token operator">=</span> int<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">3</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">+=</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> int<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>f <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 多余的位数，上面</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>fraction <span class="token operator">?</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> fraction <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9,398,222.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="除法-求模" tabindex="-1"><a class="header-anchor" href="#除法-求模" aria-hidden="true">#</a> 除法+求模</h3><ul><li>整体思路：求模的值添加&quot;,&quot; 求余值（是否大于 1）计算是够结束</li><li><ol><li>值对 1000 求模，获得最高三位</li><li>值除于 1000，值是否大于 1 判定是否结束</li><li>重复 1 2 直到退出</li><li>拼接整数部分 + 小数部分</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> number
  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">var</span> temp
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// 求模的值，用于获取最高三位，这里可能会有小数</span>
    mod <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">1000</span>
    <span class="token comment">// 值是不是大于1，是继续的条件</span>
    n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">1000</span>
    <span class="token comment">// 高三位</span>
    temp <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>mod
    <span class="token comment">// 1、填充：n&gt;1循环未结束，就要填充为比如 1 =》 不然 1001就会变成 11</span>
    <span class="token comment">// 2、拼接 &quot;,&quot;</span>
    r <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>temp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>r <span class="token operator">?</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> r <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> strNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">var</span> index <span class="token operator">=</span> strNumber<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 拼接小书部分</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">+=</span> strNumber<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> r
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9,398,222.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则" tabindex="-1"><a class="header-anchor" href="#正则" aria-hidden="true">#</a> 正则</h3><ul><li>基本原理：先行断言 + 分组</li></ul><table><thead><tr><th>名字</th><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td>先行断言（前瞻）</td><td>exp1(?=exp2)</td><td>查找 exp2 前面的 exp1</td></tr><tr><td>后行断言（后顾）</td><td>(?&lt;=exp2)exp1</td><td>查找 exp2 后面的 exp1</td></tr><tr><td>正向否定查找（负前瞻）</td><td>exp1(?!exp2)</td><td>查找后面不是 exp2 的 exp1</td></tr><tr><td>反向否定查找（负后顾）</td><td>(?&lt;!exp2)exp1</td><td>查找前面不是 exp2 的 exp1</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log
<span class="token function">print</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello (?=[a=z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello (?=[a=z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

<span class="token keyword">function</span> <span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{1,3}(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$&amp;,&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9,398,222.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{1,3}(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> match <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_array</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9,398,222.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ecma-规范" tabindex="-1"><a class="header-anchor" href="#ecma-规范" aria-hidden="true">#</a> ECMA 规范</h3><table><thead><tr><th>规范</th><th>说明</th></tr></thead><tbody><tr><td>ECMA-262</td><td>ECMAScript 规范</td></tr><tr><td>ECMA-402</td><td>国际化 API 规范</td></tr><tr><td>ECMA-404</td><td>JSON 数据交换语法</td></tr><tr><td>ECMA-419</td><td>嵌入式系统 API 规范</td></tr><tr><td>ECMA-414</td><td>ECMAScript 相关的标准有哪些？即 ECMA-262 ECMA-402 ECMA-404</td></tr></tbody></table><h3 id="intl-numberformat" tabindex="-1"><a class="header-anchor" href="#intl-numberformat" aria-hidden="true">#</a> Intl.NumberFormat</h3><ul><li>语法：new Intl.NumberFormat([locales[, options]])</li><li>基本功能：国际化的数字处理方案，他可以用来显示不同国家对数字的处理偏好</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用默认配置选项</span>
<span class="token keyword">function</span> <span class="token function">format_with_Intl</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token string">&#39;en-us&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format_with_Intl</span><span class="token punctuation">(</span><span class="token number">9398222.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">format_with_Intl</span><span class="token punctuation">(</span>
  <span class="token parameter">number<span class="token punctuation">,</span>
  minimumFractionDigits<span class="token punctuation">,</span>
  maximumFractionDigits<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  minimumFractionDigits <span class="token operator">=</span> minimumFractionDigits <span class="token operator">||</span> <span class="token number">2</span>
  maximumFractionDigits <span class="token operator">=</span> maximumFractionDigits <span class="token operator">||</span> <span class="token number">2</span>
  maximumFractionDigits <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minimumFractionDigits<span class="token punctuation">,</span> maximumFractionDigits<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token string">&#39;en-us&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">maximumSignificantDigits</span><span class="token operator">:</span> maximumFractionDigits <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimumFractionDigits</span><span class="token operator">:</span> minimumFractionDigits <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tolocalstring" tabindex="-1"><a class="header-anchor" href="#tolocalstring" aria-hidden="true">#</a> toLocalString</h3><ul><li>功能：其能把数字转为特定语言环境下的表示字符串</li><li>语法：numObj.toLocaleString([locales[, options]])</li></ul><h3 id="性能大比拼" tabindex="-1"><a class="header-anchor" href="#性能大比拼" aria-hidden="true">#</a> 性能大比拼</h3><table><thead><tr><th>方法名</th><th>思路</th><th>性能</th><th>备注</th></tr></thead><tbody><tr><td>fromat_with_array</td><td>数字转为字符串，整数部分低位往高位遍历</td><td>T2</td><td></td></tr><tr><td>format_with_substring</td><td>数字转字符串，整数部分高位往低位遍历</td><td>T2</td><td></td></tr><tr><td>format_with_mod</td><td>求模添加&quot;，&quot; 求余计算是否可以结束</td><td>T0（最佳）</td><td></td></tr><tr><td>format_with_regex</td><td>先行断言+分组</td><td>T2</td><td></td></tr><tr><td>Intl.NumberFormat</td><td>规范数字国际化，en-us</td><td>T2 或者下水道</td><td>ECMA-402 标准，初始化成本很大</td></tr><tr><td>toLocaleString</td><td>底层调用 Intl.NumberFormat 一丘之貉</td><td>T2 或者下水道</td><td>设置小数后性能变大非常大</td></tr></tbody></table><h2 id="_05" tabindex="-1"><a class="header-anchor" href="#_05" aria-hidden="true">#</a> 05：[] + [], [] + {}, {} + [], {} + {}</h2><ul><li><p>如果操作数是对象，则对象会转换为原始值</p></li><li><p>如果其中一个操作数字是字符串的话，另一个操作数也会转换为字符串，进行字符串拼接</p></li><li><p>否则，两个操作数都将转换为数字或者 NaN，进行假加法操作</p></li><li><p>思考题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">10n</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions</span>
Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">// Uncaught TypeError: Cannot convert a Symbol value to a number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对象转换为原始数据类型的值" tabindex="-1"><a class="header-anchor" href="#对象转换为原始数据类型的值" aria-hidden="true">#</a> 对象转换为原始数据类型的值</h3><ul><li>Symbol.ToPrimitive</li><li>Object.prototype.valueOf</li><li>Object.prototype.toString</li></ul><h3 id="的原始值" tabindex="-1"><a class="header-anchor" href="#的原始值" aria-hidden="true">#</a> []的原始值</h3><ul><li>typeof [][Symbol.ToPrimitive] : undefined</li><li>[].valueOf(): []</li><li>[].toString(): &quot;&quot;</li></ul><h3 id="的原始值-1" tabindex="-1"><a class="header-anchor" href="#的原始值-1" aria-hidden="true">#</a> {} 的原始值</h3><ul><li>typeof {}[Symbol.ToPrimitive] : undefined</li><li>({}).valueOf(): {}</li><li>({}).toString(): &quot;[object Object]&quot;</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> [] + []</h3><ul><li>[].toString() + [].toString() = &quot;&quot; + &quot;&quot; = &quot;&quot;</li></ul><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> [] + {}</h3><ul><li>[].toString() +({}).toString() = &quot;&quot; + &quot;[object Object]&quot; = &quot;[object Object]&quot;</li></ul><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a> {} + []</h3><ul><li>({}) + [] = ({}).toString() + [].toString() = &quot;[object Object]&quot;</li><li>{} + [] = {}; + [] = +[] = 0</li></ul><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a> {} + {}</h3><ul><li>{} + {} = +&quot;[object Object]&quot; = NaN</li><li>({})+({}) = &#39;[object Object][object Object]&#39;</li></ul>`,40);function Nn(En,Sn){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,u,n("p",null,[n("a",d,[s("NaN 你都未必懂，花五分钟让你懂得不能再懂"),e(a)])]),k,n("blockquote",null,[m,n("p",null,[s("参考《"),n("a",v,[s("The history of “typeof null”"),e(a)]),s("》")]),b,n("p",null,[s("第一版的 JavaScript 是用 32 位"),n("a",h,[s("比特"),e(a)]),s("来存储值的，且是通过值的低 1 位或 3 位来识别类型的（有点"),n("a",f,[s("哈法曼编码"),e(a)]),s("的味道）。")]),n("ol",null,[g,n("li",null,[s("000："),n("a",y,[s("引用类型"),e(a)]),s("（object）")]),n("li",null,[s("010："),n("a",_,[s("双精度浮点型"),e(a)]),s("（double）")]),w,x]),j,n("ol",null,[N,n("li",null,[s("null，"),n("a",E,[s("机器码"),e(a)]),s("空指针（C/C++ "),n("a",S,[s("宏定义"),e(a)]),s("），低三位也是 000")])]),n("p",null,[s("而在"),A,s("（也就是 typeof 的"),n("a",q,[s("源代码"),e(a)]),s("）里，是没有先过滤 null 的，导致在判断 obj 阶段产生了误会。")]),F]),O,I,n("p",null,[s("曾有一个 ECMAScript 的修复提案（通过选择性加入的方式），但"),n("a",T,[s("被拒绝了"),e(a)]),s("。该提案会导致 "),C,s("。")]),B,n("ul",null,[n("li",null,[s("Number.isNaN: 它是原来的全局 "),n("a",D,[J,e(a)]),s(" 的更稳妥的版本。")]),M,V,P]),L,n("ul",null,[z,R,n("li",null,[U,n("p",null,[s("ES 标准的"),n("a",Y,[s("Array.prototype.includes"),e(a)]),s(" 比较值相等调用的是内部的"),n("a",G,[s(" SameValueZero ( "),K,s(", "),Z,s(" )"),e(a)]),s("方法，其会检查值第一值是不是数字，如果是数字，调用的是 "),n("a",$,[s("Number::sameValueZero"),e(a)]),s("("),W,s(", "),X,s("), 其具体比较步骤：")]),n("blockquote",null,[n("ol",null,[H,n("li",null,[s("If "),Q,s(" is the same "),n("a",nn,[s("Number value"),e(a)]),s(" as "),sn,s(", return true.")]),an])])]),n("li",null,[en,n("p",null,[s("ES 标准中 "),n("a",tn,[s("Array.prototype.indexOf"),e(a)]),s(" 值比较调用的是"),n("a",pn,[s("IsStrictlyEqual"),e(a)]),s("("),on,s(", "),cn,s("), 其如果检查到第一个值为数字，调用的 "),n("a",ln,[s("Number::equal"),e(a)]),s("("),rn,s(", "),un,s(").")]),dn,n("blockquote",null,[n("ol",null,[n("li",null,[s("If "),kn,s(" is NaN, return false. 2. If "),mn,s(" is NaN, return false. 3. If "),vn,s(" is the same "),n("a",bn,[s("Number value"),e(a)]),s(" as "),hn,s(", return true. 4. If "),fn,s(" is +0𝔽 and "),gn,s(" is -0𝔽, return true. 5. If "),yn,s(" is -0𝔽 and "),_n,s(" is +0𝔽, return true.")]),wn])]),xn])]),jn])}const qn=p(i,[["render",Nn],["__file","index-02.html.vue"]]);export{qn as default};
