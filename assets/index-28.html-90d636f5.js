import{_ as e,p as a,q as s,a1 as t}from"./framework-e8cb8151.js";const i="/assets/image-20230729134715935-a917b2ff.png",d="/assets/image-20230729134724608-38c160fe.png",n="/assets/image-20230729134731812-63d49a4d.png",c="/assets/image-20230729134738090-1eaefaf5.png",p="/assets/image-20230729134747696-99c30275.png",o="/assets/image-20230729134757820-fb6bb48d.png",l="/assets/image-20230729134804478-e5ad1de7.png",r="/assets/image-20230729134810039-3c9a42ae.png",m="/assets/image-20230729134818540-da907ae3.png",g="/assets/image-20230729134827171-36ca7110.png",u="/assets/image-20230729134833673-39ddccd8.png",v="/assets/image-20230729134840932-369f8649.png",b="/assets/image-20230729134848229-2c445a2a.png",x="/assets/image-20230729134856025-3c7f939a.png",h="/assets/image-20230729134904627-66ff3f37.png",_="/assets/image-20230729134910979-5f070067.png",k="/assets/image-20230729134917007-b80f560d.png",f="/assets/image-20230729134923405-6c65d578.png",G="/assets/image-20230729134931497-bf7ef4b4.png",q="/assets/image-20230729134940346-9bc4a221.png",y="/assets/image-20230729134952672-50f6d2c5.png",B="/assets/image-20230729134957790-8eea6318.png",V="/assets/image-20230729135004343-ed80e9ac.png",j="/assets/image-20230729135011756-91da1652.png",w="/assets/image-20230729135018552-ce2d30b1.png",E="/assets/image-20230729135024833-a1414924.png",M="/assets/image-20230729135031704-07480869.png",N="/assets/image-20230729135039286-77f66c06.png",S={},z=t(`<h1 id="_28-代码冲突解决-多人提交代码发生冲突解决方法" tabindex="-1"><a class="header-anchor" href="#_28-代码冲突解决-多人提交代码发生冲突解决方法" aria-hidden="true">#</a> 28-代码冲突解决：多人提交代码发生冲突解决方法</h1><p><img src="https://img3.mukewang.com/5dd1d312000138f106400359.jpg" alt="img"></p><blockquote><p>梦想只要能持久，就能成为现实。我们不就是生活在梦想中的吗？——丁尼生</p></blockquote><p>在团队协作开发中很难完全避免代码冲突问题，第一次遇到冲突时候往往不知道怎么解决，在这节内容里面我将团队协作中遇到的三种冲突解决思路和流程，分别是：拉取远程仓库时候的冲突、<code>rebase</code> 复制其他分支版本冲突、暂存区冲突等，合并代码冲突解决方法在第 20 节中已经提到，在这一节中将不再复述。</p><h2 id="_28-1-与远程冲突" tabindex="-1"><a class="header-anchor" href="#_28-1-与远程冲突" aria-hidden="true">#</a> 28.1 与远程冲突</h2><p>我们平时在提交代码之前通常会拉取一下代码，所以拉取代码命令用的比较多，冲突也比较多常见，下面我把一个代码仓库复制一份出来，分别称之为 <code>a仓库</code>和 <code>b仓库</code>，然后分别模拟两个用户平时的提交流程，复现一下冲突场景，然后用来演示冲突解决方法，执行复制文件夹命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/  <span class="token operator">&amp;&amp;</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> test201907 test201911  <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-al</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，返回的信息如下图所示：</p><p><img src="`+i+`" alt="image-20230729134715935"></p><p>在上图中，可以看到已经将仓库复制了一份出来，接下来我进入 <code>a仓库</code>并在里面修改文件，执行命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> test201907 <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">11111111</span> <span class="token operator">&gt;</span> bb.txt <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的工作区修改状态如下图所示：</p><p><img src="`+d+`" alt="image-20230729134724608"></p><p>在上图中可以看到文件 <code>bb.txt</code> 已经被修改，我把工作区的修改提交到一个新版本并推送到远程仓库当中，提交并推送所执行的命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token builtin class-name">.</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;冲突解决v1&#39;</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 远程仓库返回的提示信息，如下图所示：</p><p><img src="`+n+`" alt="image-20230729134731812"></p><p>在上图中，可以看到已经改动推送到远程仓库当中，接着进入 <code>b仓库</code>中，继续修改代码然后提交到新版本中，执行命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/test201911 <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token number">22222</span> <span class="token operator">&gt;</span> bb.txt <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token builtin class-name">.</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;冲突解决V2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+c+`" alt="image-20230729134738090"></p><p>在上图中，可以看到已经将工作区的修改提交到新版本中，接着我们使用 <code>git pull</code> 命令拉取代码便会产生冲突，因为远程仓库也修改了 <code>bb.txt</code> 文件，而本地仓库也修改了此文件，Git 不知道以哪一个版本为准，执行命令如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+p+`" alt="image-20230729134747696"></p><p>在上图中可以看到拉去远程代码成功了，但是提示自动合并冲突问题，这个时候需要我们手动去编辑文件，将需要的版本保留，不需要的代码删除，这里我使用 <code>vim</code> 命令编辑冲突文件，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vim bb.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，便可以将不需要的代码删除，vim 编辑框如下图所示：</p><p><img src="`+o+`" alt="image-20230729134757820"></p><p>在上图中可以看到冲突的两个版本内容，远程的版本在下方，而本地的版本在上方，我们只保留 <code>22222</code>，然后保存并退出，接着执行 <code>git commit -a</code> 命令就可以完成解决冲突，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+l+`" alt="image-20230729134804478"></p><p>在上图中可以看到 Git 需要输入备注信息，这里可以填写代码冲突解决的一些备注信息，也可以使用默认信息，然后<code>:x</code> 保存并退出即可，此时就已经成功解决完冲突，我们可以通过 <code>git log</code> 命令查看版本记录列，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的版本列表如下图所示：</p><p><img src="`+r+`" alt="image-20230729134810039"></p><p>在上图中可以看到此时多出了一个 <code>Merge branch</code> 的版本记录，这个便是我们解决冲突后所生成的，到此我们已经解决完代码冲突问题。</p><h2 id="_28-2-rebase-冲突" tabindex="-1"><a class="header-anchor" href="#_28-2-rebase-冲突" aria-hidden="true">#</a> 28.2 rebase 冲突</h2><p>当我们使用 <code>git rebase</code> 命令复制另外一个分支的版本记录到当前分支时候也有可能产生代码冲突问题，我们同样使用一个实例进行演示；</p><p>我们在两个分支中，同时去修改同一个文件并且同一行代码，这样 Git 就不能自动选择版本，从而制造一个冲突出来，我们再看看 <code>rebase</code> 代码冲突如何解决，首先切换到 <code>test</code> 分支中，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+m+`" alt="image-20230729134818540"></p><p>在上图中，可以看到已经成功切换到 <code>test</code> 分支当中，接着我们随意修改一个代码文件，这里以 <code>aa.txt</code> 文件为例，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo 33333333 &gt; aa.txt  &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+g+`" alt="image-20230729134827171"></p><p>在上图中可以看到文件 <code>aa.txt</code> 已经被修改，我们将修改的内容提交到一个新版本中去，执行的命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit . -m &#39;代码冲突解决 v3&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+u+`" alt="image-20230729134833673"></p><p>在上图中可以看到已经提交工作区的修改成功，接着我们切换到 <code>develop</code> 分支当中，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+v+`" alt="image-20230729134840932"></p><p>在上图中可以看到已经切换到 <code>develop</code> 分支成功，接着修改 <code>aa.txt</code> 文件并提交一个版本，执行修改文件命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo 4444444 &gt; aa.txt  &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+b+`" alt="image-20230729134848229"></p><p>在上图中可以看到 <code>aa.txt</code> 文件已经别修改，同样我们将工作区的改动提交到新版本当中，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit . -m &#39;代码冲突解决 v4&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+x+`" alt="image-20230729134856025"></p><p>在上图中可以看到提交新版本已经成功，现在我们切换到 <code>test</code> 分支中去，然后使用 <code>git rebase</code> 命令将刚才在 <code>develop</code> 分支的提交复制到 <code>test</code> 中去，执行切回到 <code>test</code> 分支的命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+h+`" alt="image-20230729134904627"></p><p>在上图中可以看到已经切换到 <code>test</code> 分支当中去，现在我们使用 <code>git rebase</code> 命令复制后，应该会出现代码冲突情况，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git rebase develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+_+`" alt="image-20230729134910979"></p><p>在上图中可以看到果然出现了代码冲突问题，我们接下来就来看看如何 <code>git rebase</code> 导致的代码冲突，同样我们首先使用 <code>vim</code> 命令，只保留正确的代码，将不正确的代码删除，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vim aa.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，vim 界面如下图所示：</p><p><img src="`+k+`" alt="image-20230729134917007"></p><p>在上图中可以看到冲突的具体内容，我们将上面的 <code>44444444</code> 保留，其他不需要的内容全部删除，然后让 <code>git rebase</code> 的任务继续执行，这个时候我们需要使用下面的命令来触发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add . &amp;&amp; git rebase --continue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+f+`" alt="image-20230729134923405"></p><p>在上图中可以看到 Git 提示我们没有改动，说明我们的 <code>git rebase</code> 命令还未完成，还需要我们接着处理。不过一般绝大部分情况下只要我们通过 <code>vim</code> 清理完不需要的代码保存并退出之后就完事了，我们接着往下看如何处理这种情况。</p><blockquote><p>这里出现没有改动，是因为 <code>git rebase</code> 命令先将自己的差异版本记录拿到一边去，然后将 <code>develop</code> 分支的改动复制进来，然后再将自己差异的版本记录插入到末尾，但是我们改动保留了内容 <code>4444444</code>，因此就会出现这个提示，具体可以参考第 24 节中的 <code>Git rebase</code> 命令。</p></blockquote><p>当出现上述提示时，我们可以使用 <code>git rebase --skip</code> 命令进行忽略，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git rebase --skip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+G+`" alt="image-20230729134931497"></p><p>在上图中可以看到已经显示了 <code>test</code> 的分支名称，说明 <code>git rebase</code> 命令已经执行完成。</p><h2 id="_28-3-暂存区冲突" tabindex="-1"><a class="header-anchor" href="#_28-3-暂存区冲突" aria-hidden="true">#</a> 28.3 暂存区冲突</h2><p>在将工作区的改动暂时存储起来的时候一样，也会出现代码冲突问题，我们以一个小例子为例，首先切换到 <code>develop</code> 分支中，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+q+`" alt="image-20230729134940346"></p><p>在上图中可以看到已经切换到了 <code>develop</code> 分支中，我们随意修改一个代码文件，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo 55555 &gt; aa.txt &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+y+`" alt="image-20230729134952672"></p><p>在上图中可以看到 <code>aa.txt</code> 文件被修改，此时我们使用 <code>git stash</code> 命令将修改临时存储起来，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+B+`" alt="image-20230729134957790"></p><p>在上图中可以看到已经将修改暂存成功，接着我再一次去编辑 <code>aa.txt</code> 文件，然后将内容改为与之前不一样的内容，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo 66666 &gt; aa.txt &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+V+`" alt="image-20230729135004343"></p><p>在上图中可以看到 <code>aa.txt</code> 文件处于修改状态了，现在我们使用 <code>git commit</code> 命令将这个修改提交到新版本中，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git git commit . -m &#39;代码冲突解决 v5&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+j+`" alt="image-20230729135011756"></p><p>在上图中可以看到已经成功，将工作区的改动提交到新版本中了，在这个基础上我再来使用 <code>git stash apply</code> 命令从暂存区恢复修改，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash apply
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 返回的信息如下图所示：</p><p><img src="`+w+`" alt="image-20230729135018552"></p><p>在上图中可以看到 Git 提示了代码冲突问题。</p><h3 id="_28-3-3-处理-stash-冲突" tabindex="-1"><a class="header-anchor" href="#_28-3-3-处理-stash-冲突" aria-hidden="true">#</a> 28.3.3 处理 stash 冲突</h3><p>我们先使用 <code>git status</code> 查看文件状态，看看工作区当前处于什么状态，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+E+`" alt="image-20230729135024833"></p><p>在上图中可以看到 <code>aa.txt</code> 文件为<code>双方修改</code>，说明这个文件存在冲突问题，我们同样使用 vim 命令将里面不需要的代码删掉，留下需要的部分即可，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vim aa.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 冲突的代码如下图所示：</p><p><img src="`+M+`" alt="image-20230729135031704"></p><p>在上图中可以看到暂存区的改动与之前 <code>git commit</code> 提交的版本存在冲突，我们保留其中一份即可，然后使用 <code>git add</code> 命令将工作区的修改提交，再查看文件状态，执行命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add . &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完毕之后，Git 仓库的文件状态如下图所示：</p><p><img src="`+N+'" alt="image-20230729135039286"></p><p>在上图中可以看到 <code>aa.txt</code> 文件已经不再处于<code>双方修改</code>的状态了，此时我们按照正常流程开发即可。</p><h2 id="_28-4-小结" tabindex="-1"><a class="header-anchor" href="#_28-4-小结" aria-hidden="true">#</a> 28.4 小结</h2><p>在这一节中，主要讲解了如何代码冲突的原因，以及处理代码冲突的方法，从代码冲突的过程来看代码冲突。通常是因为一个文件在两个地方（分支或暂存区）被修改，然后又需要在一个地方进行合并，就会让 Git 无法确定使用那一个版本，从而产生代码冲突，让开发者自己来判断，解决代码冲突。</p><p>解决代码冲突通常需要去编辑冲突的文件，将需要的代码进行保留，不需要的代码给删除，清理完不需要的代码之后需要通知 Git 让它继续执行任务，不同场景的冲突，通知 Git 的方式并不一样，分为以下几种：</p><ol><li><code>git merge</code> 和 <code>git pull</code> 命令导致的冲突，处理完冲突后使用 <code>git commit -a</code>；</li><li><code>git rebase</code> 命令导致的冲突，处理完冲突之后使用 <code>git rebase --continue</code> 或 <code>git rebase --skip</code>；</li><li><code>git stash apply</code> 命令导致的冲突，处理完冲突之后使用 <code>git add .</code> 即可。</li></ol>',131),A=[z];function C(D,F){return a(),s("div",null,A)}const I=e(S,[["render",C],["__file","index-28.html.vue"]]);export{I as default};
