import{_ as p,M as n,p as o,q as r,R as t,t as s,N as c,a1 as a}from"./framework-e8cb8151.js";const _={},i=t("h1",{id:"_59-typescript-入门指引",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_59-typescript-入门指引","aria-hidden":"true"},"#"),s(" 59-TypeScript 入门指引")],-1),l=t("p",null,"TypeScript ，后面简称 ts。",-1),d=t("p",null,"ts 在前端开发中，占据越来越重要的作用。因此，如何学习 ts，并将其运用于实践项目中，也变得非常重要。",-1),h={href:"https://www.tslang.cn/docs/release-notes/typescript-3.1.html",target:"_blank",rel:"noopener noreferrer"},g=a("<p>本附录章节主要是为读者学习 ts 官方文档，提供一些思路，快速将其掌握。</p><p>掌握 ts，对于初学者来说，有几大疑问，这些疑问在官方文档中并未体现</p><p><strong>一、为什么我们要学习 ts？</strong></p><p>许多人学习 ts 的目的并非为了优化项目，而是为了学习，为了面试，大家都在说要学这个东西，因此在学习 ts 时，有一种割裂感。一方面是 ts 带来的好处不明显，一方面又觉得 ts 的使用给自己带来了大量的不方便。</p><p>许多同学在解决 ts 的红线提示时，伤透了脑筋，总感觉 ts 不太听话，用起来很难受。</p><p><strong>二、实践中 ts 到底应该怎么用</strong></p><p>基本语法的学习并不难，即使是高阶语法，多琢磨琢磨，也能够掌握，但是运用到项目中去，运用到 React 中去，到底应该是一个什么样子的，很多人没底，也不太清楚</p><p><strong>三、理解不了泛型</strong></p><p>很多人被泛型吓到了。这个就是单纯的理解不了，属于语法中的难点。但是泛型是 ts 的核心，如果掌握不了泛型，基本上也没有掌握 ts。</p><p><strong>四、不懂合理利用类型推导</strong></p><p>类型推导是核心。合理的利用类型推导，能够加强我们对 ts 的内在理解。最关键的是，能简化不少不必要的写法。因此，理解类型推导，能够让我们对 ts 运用得更加合理。</p><p><strong>五、类型兼容性</strong></p><p>大家在学习 ts 时，往往会忽略类型兼容性的重要性。</p><p>不理解类型兼容性，就容易在使用时出现很多无法理解的错误。实际使用时，往往需要对各种类型声明进行融合，而要合理的融合，那么类型兼容性就是关键。</p><p><strong>六、语法难点：一些高级类型</strong></p><p>这个需要我们根据官方文档，一点一点的学习与理解，没有什么捷径。</p><p>基于官方文档，攻克了以上六个难点，我们对 ts 的使用一定能够游刃有余。</p><p>接下来，我们用几篇文章来分别讲解以上几个疑难点</p>",18);function f(m,u){const e=n("ExternalLinkIcon");return o(),r("div",null,[i,l,d,t("p",null,[s("ts 的语法学习并不困难，学习资源也并不难获取，"),t("a",h,[s("官方文档"),c(e)]),s("提供了完整全面的语法解析。")]),g])}const k=p(_,[["render",f],["__file","index-59.html.vue"]]);export{k as default};
