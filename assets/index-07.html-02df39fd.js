import{_ as p,M as o,p as c,q as i,R as n,t as s,N as e,a1 as t}from"./framework-e8cb8151.js";const l="/assets/虚拟列表-2e0b6a49.png",u="/assets/观察者vs发布订阅-98746dbd.png",r="/assets/MVC-3ddb8eb5.png",d="/assets/MVVM-0945231c.png",k="/assets/vue-mvvm-0f4c3a4d.png",v="/assets/performance-5b78817b.png",m="/assets/network-ff5d651d.png",h="/assets/lighthouse-performance-a04aa041.png",b="/assets/lighthouse-sug-ae25946f.png",g="/assets/github-performance-3b3a5658.png",f={},y=t('<h1 id="_07-实际工作经验-是否做过真实项目" tabindex="-1"><a class="header-anchor" href="#_07-实际工作经验-是否做过真实项目" aria-hidden="true">#</a> 07- 实际工作经验 - 是否做过真实项目</h1><h2 id="_01-开始" tabindex="-1"><a class="header-anchor" href="#_01-开始" aria-hidden="true">#</a> 01: 开始</h2><p>无论是校招还是社招，企业都希望得到工作经验丰富的候选人。所以面试时会有很多面试题来考察候选人，是否有真实工作经验（而非只做过个人项目和 demo）。本章将通过多个面试题，讲解前端面试常考的实际工作经验问题。</p><h3 id="为何考察" tabindex="-1"><a class="header-anchor" href="#为何考察" aria-hidden="true">#</a> 为何考察</h3><p>企业都需要有工作经验的人才，入职之后简单培训就可以干活，不用再操心培养。毕竟现在人员流动很频繁。</p><p>而且，有实际工作经验的，他之前踩过很多坑，未来工作就可以多一些稳定性。</p><h3 id="考察重点" tabindex="-1"><a class="header-anchor" href="#考察重点" aria-hidden="true">#</a> 考察重点</h3><p>各种能体现工作经验的题目，如</p><ul><li>性能优化的实践</li><li>设计模式的应用</li><li>错误监控的实践 （不是真实项目，很少有错误监控）</li><li>项目难点，角色之间的沟通</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>进做过个人项目，不代表有项目经验</li><li>应届毕业生也需要工作经验 —— 你的毕业设计，实习经历</li></ul><h3 id="看几个题目" tabindex="-1"><a class="header-anchor" href="#看几个题目" aria-hidden="true">#</a> 看几个题目</h3><ul><li>如果一个网页访问慢，你该如何分析问题原因？</li><li>Vue 应该如何监听 JS 报错</li><li>你遇到了哪些项目难点，如何解决的？</li></ul><h2 id="_02-h5-页面如何进行首屏优化" tabindex="-1"><a class="header-anchor" href="#_02-h5-页面如何进行首屏优化" aria-hidden="true">#</a> 02: H5 页面如何进行首屏优化</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>H5 如何进行首屏优化？尽量说全</p><h3 id="前端通用的优化策略" tabindex="-1"><a class="header-anchor" href="#前端通用的优化策略" aria-hidden="true">#</a> 前端通用的优化策略</h3><p>压缩资源，使用 CDN ，http 缓存等。本节只讨论首屏，这些先不讲。</p><h3 id="路由懒加载" tabindex="-1"><a class="header-anchor" href="#路由懒加载" aria-hidden="true">#</a> 路由懒加载</h3><ul><li>是用于 SPA，不适用 MPA</li><li>路由拆分，优先保证首页加载</li></ul><h3 id="服务端渲染-ssr" tabindex="-1"><a class="header-anchor" href="#服务端渲染-ssr" aria-hidden="true">#</a> 服务端渲染 SSR</h3><ul><li><p>传统的 SPA 方式过程繁多</p><ul><li>下载 html ，解析，渲染</li><li>下载 js ，执行</li><li>ajax 异步加载数据</li><li>重新渲染页面</li></ul></li><li><p>而 SSR 则只有一步</p><ul><li>下载 html ，接续，渲染</li></ul></li><li><p>如果是纯 H5 页面，SSR 就是首屏优化的终极方案。</p></li></ul><p>技术方案：</p><ul><li>传统的服务端模板，如 ejs smarty jsp 等</li><li>Nuxt.js ( Vue 同构 )</li><li>Next.js ( React 同构 )</li></ul><h3 id="app-预取" tabindex="-1"><a class="header-anchor" href="#app-预取" aria-hidden="true">#</a> App 预取</h3><p>如果 H5 在 App webview 中展示，可以使用 App 预取资源</p><ul><li>在列表页，App 预取数据（一般是标题、首页文本，不包括图片、视频）</li><li>进入详情页，H5 直接即可渲染 App 预取的数据</li><li>可能会造成“浪费”：预期了，但用户未进入该详情页 —— 不过没关系，现在流量便宜</li></ul><p>例如，你在浏览朋友圈时，可以快速的打开某个公众号的文章。</p><p>这里可以联想到 <code>prefetch</code> ，不过它是预取 <code>js css</code> 等静态资源，并不是首屏的内容。 不要混淆。</p><h3 id="分页" tabindex="-1"><a class="header-anchor" href="#分页" aria-hidden="true">#</a> 分页</h3><ul><li>针对列表页</li><li>默认只显示第一页内容</li><li>上滑加载更多</li></ul><p>根据显示设备的高度，设计尽量少的页面内容。即，首评内容尽量少，其他内容上滑时加载。</p><h3 id="图片-lazyload" tabindex="-1"><a class="header-anchor" href="#图片-lazyload" aria-hidden="true">#</a> 图片 lazyLoad</h3><p>先加载内容，再加载图片。<br> 注意，提前设置图片容器的尺寸，尽量重绘，不要重排。</p><h3 id="离线包-hybrid" tabindex="-1"><a class="header-anchor" href="#离线包-hybrid" aria-hidden="true">#</a> 离线包 hybrid</h3><p>提前将 <code>html css js</code> 等下载到 App 内。<br> 当在 <code>App</code> 内打开页面时，<code>webview</code> 使用 <code>file://</code> 协议加载本地的 <code>html css js</code> ，然后再 <code>ajax</code> 请求数据，再渲染。</p><p>可以结合 <code>App</code> 预取。</p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><ul><li>路由懒加载</li></ul><ul><li>服务端渲染 SSR</li><li>APP 预取</li><li>分页</li><li>图片 lazyLoad</li><li>Hybrid</li></ul><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><ul><li>服务端 SSR 是 H5 的终极优化方案（但是成本也高）</li><li>移动端 H5 要结合 APP 原生能力去优化</li><li>严格来说， Hybird 不是 H5，但是这里回答出来也没问题</li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><ul><li>做完性能优化，还要进行统计、计算、评分，作为你的工作成果。</li><li>性能优化也需要配合体验，如 骨架屏、 <code>loading 动画</code>等</li><li>不同的形式，有不同的优化方式，要积极和面试官沟通</li></ul><h2 id="_03-后端一次性返回-10w-条数据-你该如何渲染" tabindex="-1"><a class="header-anchor" href="#_03-后端一次性返回-10w-条数据-你该如何渲染" aria-hidden="true">#</a> 03：后端一次性返回 10w 条数据，你该如何渲染</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>后端返回 10w 条数据，该如何渲染？</p><h3 id="设计是否合理" tabindex="-1"><a class="header-anchor" href="#设计是否合理" aria-hidden="true">#</a> 设计是否合理？</h3><p>前端很少会有一次性渲染 10w 条数据的需求，而且如果直接渲染会非常卡顿。<br> 你可以反问面试官：这是什么应用场景。然后判断这个技术方案是否合理。</p><p>例如，就一个普通的新闻列表，后端一次性给出 10w 条数据是明显设计不合理的。应该分页给出。<br> 你能正常的反问、沟通、给出自己合理的建议，这本身就是加分项。</p><p>当然，面试官话语权更大，他可能说：对，不合理，但就非得这样，该怎么办？</p><h3 id="思考-浏览器能否处理-10w-条数据" tabindex="-1"><a class="header-anchor" href="#思考-浏览器能否处理-10w-条数据" aria-hidden="true">#</a> 思考：浏览器能否处理 10W 条数据</h3><ul><li>JS 没有问题</li><li>渲染到 DOM 会非常卡顿</li></ul><h3 id="自定义中间层" tabindex="-1"><a class="header-anchor" href="#自定义中间层" aria-hidden="true">#</a> 自定义中间层</h3><ul><li>自定义 nodejs 中间层，获取并拆分这 10w 条数据</li><li>前端对接 nodejs 中间层，而不是服务端</li><li>成本比较高</li></ul><h3 id="虚拟列表" tabindex="-1"><a class="header-anchor" href="#虚拟列表" aria-hidden="true">#</a> 虚拟列表</h3><p>基本原理</p><ul><li>只渲染可视区域 DOM</li><li>其他隐藏区域不渲染，只用一个 <code>&lt;div&gt;</code> 撑开高度</li><li>监听容器滚动，随时创建和销毁 DOM</li></ul><p><img src="'+l+'" alt=""></p><p>虚拟列表实现比较复杂，特别是在结合异步 ajax 加载。明白实现原理，实际项目可用第三方 lib</p>',60),x={href:"https://www.npmjs.com/package/vue-virtual-scroll-list",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.npmjs.com/package/react-virtualized",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>沟通需求和场景，给出自己合理的设计建议</li><li>虚拟列表</li></ul><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>要主动沟通，表达观点（也许正在考察你的沟通能力）</li><li>后端的问题，首先要用后端的思维去解决--中间层</li></ul><ul><li>虚拟列表只是无奈的选择，实现复杂而且效果不一定好（低配手机）</li></ul><h3 id="扩展-1" tabindex="-1"><a class="header-anchor" href="#扩展-1" aria-hidden="true">#</a> 扩展</h3><p>有时候面试官会出这种刁钻的问题来故意“难为”候选人，把自己扮演成后端角色，看候选人是否好欺负。<br> 如果此时你顺从面试官的问题继续埋头苦思，那就错了。应该适当的追问、沟通、提出问题、给出建议，这是面试官想要看到的效果。</p><p>实际工作中，前端和后端、服务端的人合作，那面会遇到各种设计沟通的问题。看你是否有这种实际工作经验。</p><h2 id="_04-扩展-文字超出省略" tabindex="-1"><a class="header-anchor" href="#_04-扩展-文字超出省略" aria-hidden="true">#</a> 04: 扩展：文字超出省略</h2><p>注：文本小节</p><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p>文字超出省略，用哪个 CSS 样式？</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>如果你有实际工作经验，实际项目有各种角色参与。页面需要 UI 设计，开发完还需要 UI 评审。<br> UI 设计师可能是这个世界上最“抠门”的人，他们都长有像素眼，哪怕差 1px 他们都不会放过你。所以，开发时要严格按照视觉稿，100% 还原视觉稿。</p><p>但如果你没有实际工作经验（或实习经验），仅仅是自学的项目，或者跟着课程的项目。没有 UI 设计师，程序员的审美是不可靠的，肯定想不到很多细节。</p><p>所以，考察一些 UI 关注的细节样式，将能从侧面判断你有没有实际工作经验。</p><h3 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h3><p>单行文字</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box1</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> <span class="token comment">/* 不换行 */</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> <span class="token comment">/* 超出省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行文字</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box2</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span> <span class="token comment">/* 将对象作为弹性伸缩盒子模型显示 */</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span> <span class="token comment">/* 设置子元素排列方式 */</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token comment">/* 显示几行，超出的省略 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-2" tabindex="-1"><a class="header-anchor" href="#扩展-2" aria-hidden="true">#</a> 扩展</h3><p>UI 关注的问题还有很多，例如此前讲过的移动端响应式，Retina 屏 1px 像素问题。</p>`,23),_=n("code",null,"12px",-1),S=n("code",null,"14px",-1),C=n("code",null,"16px",-1),R=n("code",null,"20px",-1),P=n("code",null,"24px",-1),V={href:"https://ant.design/components/typography-cn/",target:"_blank",rel:"noopener noreferrer"},M=t(`<h2 id="_05-前端常用的设计模式-什么场景" tabindex="-1"><a class="header-anchor" href="#_05-前端常用的设计模式-什么场景" aria-hidden="true">#</a> 05: 前端常用的设计模式？什么场景？</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>前端常用的设计模式？什么场景？</p><h3 id="开放封闭原则" tabindex="-1"><a class="header-anchor" href="#开放封闭原则" aria-hidden="true">#</a> 开放封闭原则</h3><ul><li>S: Single Responsibility Principle（SRP）：单一职责原则</li><li>O: Open Closed Principle（OCP）：开闭原则</li><li>L: Liskov Substitution Principle（LSP）：里氏替换原则</li><li>I: Interface Segregation Principle（ISP）：接口隔离原则</li><li>D: Dependence Inversion Principle（DIP）：依赖倒置原则</li></ul><p>设计原则是设计模式的基础，开放封闭原则是最重要的：对扩展开发，对修改封闭。</p><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h3><p>用一个工厂函数，创建一个实例，封装创建的过程。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Foo <span class="token punctuation">{</span>
  <span class="token comment">// 封装创建过程，这其中可能有很多业务逻辑</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景</p><ul><li>jQuery <code>$(&#39;div&#39;)</code> 创建一个 jQuery 实例</li><li>React <code>createElement(&#39;div&#39;, {}, children)</code> 创建一个 vnode</li></ul><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><p>提供全局唯一的对象，无论获取多少次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token literal-property property">instance</span><span class="token operator">:</span> SingleTon <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SingleTon <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// const s1 = new SingleTon() // Error: constructor of &#39;singleton&#39; is private</span>

<span class="token keyword">const</span> s2 <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> s3 <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2 <span class="token operator">===</span> s3 <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景</p><ul><li>Vuex Redux 的 store ，全局唯一的</li><li>全局唯一的 dialog modal</li></ul><p>PS：JS 是单线程语言,创建单例很简单。如果是 Java 等多线程语言，创建单例时还需要考虑线程锁死，否则两个线程同时创建，则可能出现两份 instance （多线程共享进程内存）。</p><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h3><ul><li>使用者不能直接访问真实数据，而是通过一个代理层来访问。<br></li><li>在代理层可以监听 get set 做很多事情</li><li>如 ES6 Proxy 本身就是代理模式，Vue3 基于它来实现响应式。</li></ul><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h3><p>即常说的绑定事件。一个主题，一个观察者，主题变化之后触发观察者执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一个主题，一个观察者，主题变化之后触发观察者执行</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h3><p>即常说的自定义事件，一个 <code>event</code> 对象，可以绑定事件，可以触发事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 绑定</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 事件1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 事件2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 触发执行</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>温故知新。在讲 JS 内存泄漏时提到，Vue React 组件销毁时，要记得解绑自定义事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 事件1 */</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 事件2 */</span>
<span class="token punctuation">}</span>

<span class="token comment">// mounted 时绑定</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span>

<span class="token comment">// beforeUnmount 时解绑</span>
event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式" aria-hidden="true">#</a> 装饰器模式</h3><ul><li><p>原功能不变，增加一些新功能（AOP 面向切面编程）</p></li><li><p>ES 和 TS 的 Decorator 语法就是装饰器模式</p></li><li><p>类装饰器，方法装饰器</p></li></ul>`,29),L={href:"https://www.typescriptlang.org/play",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// class 装饰器</span>
<span class="token keyword">function</span> <span class="token function">logDec</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

@logDec
<span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// method 装饰器</span>
<span class="token comment">// 每次 buy 都要发送统计日志，可以抽离到一个 decorator 中</span>
<span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(descriptor.value) // buy 函数</span>
  <span class="token keyword">const</span> oldValue <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value <span class="token comment">// 暂存 buy 函数</span>

  <span class="token comment">// “装饰” buy 函数</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Calling </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token comment">// 打印日志</span>
    <span class="token keyword">return</span> <span class="token function">oldValue</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token comment">// 执行原来的 buy 函数</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> descriptor
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Seller</span> <span class="token punctuation">{</span>
  @log
  <span class="token keyword">public</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do buy&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Seller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Angular nest.js 都已广泛使用装饰器。这种编程模式叫做<strong>AOP 面向切面编程</strong>：关注业务逻辑，抽离工具功能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;cats&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CatsController</span> <span class="token punctuation">{</span>
  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;This action adds a new cat&#39;</span>
  <span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;This action returns all cats&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><p>传统的经典设计模式有 23 个，作为面试题只说出几个前端常用的就可以。</p><ul><li>工厂模式</li><li>单例模式</li><li>代理模式</li><li>观察者模式</li><li>发布订阅模式</li><li>装饰器模式</li></ul><h3 id="连环问-观察者模式和发布订阅模式的区别" tabindex="-1"><a class="header-anchor" href="#连环问-观察者模式和发布订阅模式的区别" aria-hidden="true">#</a> 连环问：观察者模式和发布订阅模式的区别？</h3><p><img src="`+u+'" alt=""></p><p>观察者模式</p><ul><li>Subject 和 Observer 直接绑定，中间无媒介</li><li>如 <code>addEventListener</code> 绑定事件</li></ul><p>发布订阅模式</p><ul><li>Publisher 和 Observer 相互不认识，中间有媒介</li><li>如 <code>EventBus</code> 自定义事件</li></ul><h3 id="连环问-mvc-和-mvvm-有什么区别" tabindex="-1"><a class="header-anchor" href="#连环问-mvc-和-mvvm-有什么区别" aria-hidden="true">#</a> 连环问：MVC 和 MVVM 有什么区别</h3><p>MVC 原理</p><ul><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ul><p><img src="'+r+'" alt=""></p><p>MVVM 直接对标 Vue 即可</p><ul><li>View 即 Vue template</li><li>Model 即 Vue data</li><li>VM 即 Vue 其他核心功能，负责 View 和 Model 通讯</li></ul><p><img src="'+d+'" alt=""></p><p><img src="'+k+`" alt=""></p><h2 id="_06-vue-优化" tabindex="-1"><a class="header-anchor" href="#_06-vue-优化" aria-hidden="true">#</a> 06: Vue 优化</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>你在实际工作中，做过哪些 Vue 优化？</p><h3 id="前端通用的优化策略-1" tabindex="-1"><a class="header-anchor" href="#前端通用的优化策略-1" aria-hidden="true">#</a> 前端通用的优化策略</h3><p>压缩资源，拆包，使用 CDN ，http 缓存等。本节只讨论首屏，这些先不讲。</p><h3 id="v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-show" aria-hidden="true">#</a> v-if 和 v-show</h3><p>区别</p><ul><li><code>v-if</code> 组件销毁/重建</li><li><code>v-show</code> 组件隐藏（切换 CSS <code>display</code>）</li></ul><p>场景</p><ul><li>一般情况下使用 <code>v-if</code> 即可，普通组件的销毁、渲染不会造成性能问题</li><li>如果组件创建时需要大量计算，或者大量渲染（如复杂的编辑器、表单、地图等），可以考虑 <code>v-show</code></li></ul><h3 id="v-for-使用-key" tabindex="-1"><a class="header-anchor" href="#v-for-使用-key" aria-hidden="true">#</a> v-for 使用 key</h3><p><code>key</code> 可以优化内部的 diff 算法。注意，遍历数组时 <code>key</code> 不要使用 <code>index</code> 。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 而且，key 不要用 index --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(id, name) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="computed-缓存" tabindex="-1"><a class="header-anchor" href="#computed-缓存" aria-hidden="true">#</a> computed 缓存</h3><p><code>computed</code> 可以缓存计算结果，<code>data</code> 不变则缓存不失效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msgList</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">...</span> <span class="token punctuation">]</span> <span class="token comment">// 消息列表</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 未读消息的数量</span>
    <span class="token function">unreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msgList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>read <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive" aria-hidden="true">#</a> keep-alive</h3><p><code>&lt;keep-alive&gt;</code> 可以缓存子组件，只创建一次。通过 <code>activated</code> 和 <code>deactivated</code> 生命周期监听是否显示状态。<br> 代码参考 components/KeepAlive/index.vue</p><p>场景</p><ul><li>局部频繁切换的组件，如 tabs</li><li>不可乱用 <code>&lt;keep-alive&gt;</code> ，缓存太多会占用大量内存，而且出问题不好 debug</li></ul><h3 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h3><ul><li>对于体积大的组件（如编辑器、表单、地图等）可以使用异步组件</li><li>拆包，需要时异步加载，不需要时不加载</li><li>减少 main 包的体积，页面首次加载更快</li></ul><p>vue3 使用 <code>defineAsyncComponent</code> 加载异步组件，代码参考如下</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AsyncComponent&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Child</span><span class="token operator">:</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;async-child&quot; */</span> <span class="token string">&#39;./Child.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由懒加载-1" tabindex="-1"><a class="header-anchor" href="#路由懒加载-1" aria-hidden="true">#</a> 路由懒加载</h3><p>对于一些补偿访问的路由，或者组件提交比较大的路由，可以使用路由懒加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;About&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 路由懒加载</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="token string">&#39;../views/About.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ssr" tabindex="-1"><a class="header-anchor" href="#ssr" aria-hidden="true">#</a> SSR</h3><ul><li>可以使用 Nuxt.js</li><li>按需优化，使用 SSR 的成本比较高</li></ul><p>SSR 让网页访问速度更快，对 SEO 友好。</p><p>但 SSR 使用和调试成本高，不可乱用。例如，一个低代码项目（在线制作 H5 网页），toB 部分不可用 SSR ， toC 部分适合用 SSR 。</p><h3 id="答案-4" tabindex="-1"><a class="header-anchor" href="#答案-4" aria-hidden="true">#</a> 答案</h3><ul><li>v-if 和 v-show</li><li>v-for 使用 key</li><li>computed 缓存数据</li><li>keep-alive 缓存组件</li><li>异步组件</li><li>路由懒加载</li><li>SSR</li></ul><h3 id="扩展-3" tabindex="-1"><a class="header-anchor" href="#扩展-3" aria-hidden="true">#</a> 扩展</h3><p>网上看到过一些“较真”的性能优化，对比普通组件和函数组件，JS 执行多消耗了几 ms 。</p><ul><li>如果这些是为了探索、学习前端技术，非常推荐</li><li>但在实际项目中要慎用，不要为了优化而优化。肉眼不可见的 ms 级的优化，对项目没有任何实际价值</li></ul><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>性能优化要按需进行，不要为了优化而优化</li><li>面试是面试，工作是工作。工作中用不到，面试中也要答出来</li></ul><h2 id="_07-连环问-vue-遇到过哪些坑" tabindex="-1"><a class="header-anchor" href="#_07-连环问-vue-遇到过哪些坑" aria-hidden="true">#</a> 07: 连环问：Vue 遇到过哪些坑？？？</h2><p>全局事件、自定义事件要在组件销毁时解除绑定</p><ul><li>内存泄漏风险</li><li>全局事件、全局变量、全局定时器（如 <code>window.resize</code>）不解除，则会继续监听，而且组件再次创建时会重复绑定</li><li>自定义事件</li></ul><p>Vue2.x 中，无法监听 data 属性的新增和删除，以及数组的部分修改 —— Vue3 不会有这个问题</p><ul><li>新增 data 属性，需要用 <code>Vue.set</code></li><li>删除 data 属性，需要用 <code>Vue.delete</code></li><li>修改数组某一元素，不能 <code>arr[index] = value</code> ，要使用 <code>arr.splice</code> API 方式</li></ul><p>路由切换时，页面会 scroll 到顶部。例如，在一个新闻列表页下滑到一定位置，点击进入详情页，在返回列表页，此时会 scroll 到顶部，并重新渲染列表页。所有的 SPA 都会有这个问题，并不仅仅是 Vue 。</p>`,65),A=n("li",null,[s("在列表页缓存数据和 "),n("code",null,"scrollTop")],-1),E={href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"from",-1),I=n("code",null,"scrollTo(scrollTop)",-1),q=t(`<h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>日常要注意记录总结，遇到坑就记录下，下次面试时就能用到</li></ul><h2 id="_08-在实际工作中-你对-react-做过哪些优化" tabindex="-1"><a class="header-anchor" href="#_08-在实际工作中-你对-react-做过哪些优化" aria-hidden="true">#</a> 08: 在实际工作中，你对 React 做过哪些优化</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p>你在实际工作中，做过哪些 React 优化？</p><h3 id="前端通用的优化策略-2" tabindex="-1"><a class="header-anchor" href="#前端通用的优化策略-2" aria-hidden="true">#</a> 前端通用的优化策略</h3><p>压缩资源，拆包，使用 CDN ，http 缓存等。本节只讨论首屏，这些先不讲。</p><h3 id="循环使用-key" tabindex="-1"><a class="header-anchor" href="#循环使用-key" aria-hidden="true">#</a> 循环使用 key</h3><p><code>key</code> 可以优化内部的 diff 算法。注意，遍历数组时 <code>key</code> 不要使用 <code>index</code> 。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> todoItems <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token punctuation">{</span><span class="token comment">/* key 不要用 index */</span><span class="token punctuation">}</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改-css-模拟-v-show" tabindex="-1"><a class="header-anchor" href="#修改-css-模拟-v-show" aria-hidden="true">#</a> 修改 css 模拟 <code>v-show</code></h3><p>条件渲染时，可以通过设置 css 来处理显示和隐藏，不用非得销毁组件。模拟 Vue <code>v-show</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token comment">/* 模拟 v-show */</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token operator">!</span>flag <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  flag <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token comment">/* 模拟 v-show */</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">display</span><span class="token operator">:</span> flag <span class="token operator">?</span> <span class="token string">&#39;block&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;none&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-fragment-减少层级" tabindex="-1"><a class="header-anchor" href="#使用-fragment-减少层级" aria-hidden="true">#</a> 使用 Fragment 减少层级</h3><p>组件层级过多，如果每个组件都以 <code>&lt;div&gt;</code> 作为 root ，则 DOM 层级太多而难以调试。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsx-中不要定义函数" tabindex="-1"><a class="header-anchor" href="#jsx-中不要定义函数" aria-hidden="true">#</a> JSX 中不要定义函数</h3><p>JSX 是一个语法糖，它和 Vue template 一样，最终将变为 JS render 函数，用以生成 vnode 。<br> 所以，如果在 JSX 中定义函数，那么每次组件更新时都会初始化该函数，这是一个不必要的开销。<br> 可回顾之前的面试题： <code>for 和 forEach 哪个更快</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span><span class="token comment">/* Bad */</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更好的解决方案是提前定义函数，在 JSX 中只引用执行。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Good</span>
<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/*  */</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意</p><ul><li>如果你的系统不够复杂，这个优化几乎看不出效果，因为 JS 执行非常快 —— 但是，面试说出来肯定是一个加分项～</li><li>如果你用的是函数组件，这个优化方案不适用。如下代码：</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数组件，每次组件更新都会重新执行 App 函数，所以内部的 clickHandler 函数也会被重新创建，这跟在 JSX 中定义是一样的</span>
  <span class="token comment">// 不过 React 提供了 useCallback 来缓存函数，下文讲</span>

  <span class="token keyword">function</span> <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在构造函数-bind-this" tabindex="-1"><a class="header-anchor" href="#在构造函数-bind-this" aria-hidden="true">#</a> 在构造函数 bind this</h3><p>同理，如果在 JSX 中 bind this ，那每次组件更新时都要 bind 一次。在构造函数中 bind 更好。<br> 或者，直接使用箭头函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 要在构造函数中 bind this ，而不是在 JSX 中</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickHandler1</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">clickHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 如果 JSX 中直接调用，则 this 不是当前组件。所以要 bind this */</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">clickHander2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 使用箭头函数，不用 bind this */</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点击</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：如果是函数组件，则不用 bind this</p><h3 id="使用-shouldcomponentupdate-控制组件渲染" tabindex="-1"><a class="header-anchor" href="#使用-shouldcomponentupdate-控制组件渲染" aria-hidden="true">#</a> 使用 shouldComponentUpdate 控制组件渲染</h3><p>React 默认情况下，只要父组件更新，其下所有子组件都会“无脑”更新。如果想要手动控制子组件的更新逻辑</p><ul><li><p>可使用 <code>shouldComponentUpdate</code> 判断</p></li><li><p>或者组件直接继承 <code>React.PureComponent</code> ，相当于在 <code>shouldComponentUpdate</code> 进行 props 的<strong>浅层</strong>比较</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// React 默认会让所有的子组件都更新，无论涉及的数据是否变化</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;list updated&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> todo
          <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TodoList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>但此时，必须使用<strong>不可变数据</strong>，例如不可用 <code>arr.push</code> 而要改用 <code>arr.concat</code>。考验工程师对 JS 的熟悉程度。<br> 代码参考 components/SimpleTodos/index.js 的 class 组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token comment">// import TodoList from &#39;./TodoList&#39;</span>
<span class="token keyword">import</span> FunctionalTodoList <span class="token keyword">from</span> <span class="token string">&#39;./FunctionalTodoList&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">SimpleTodos</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;吃饭&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;睡觉&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">inputValue</span><span class="token operator">:</span> newValue<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">createTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">return</span>

    <span class="token comment">// 新增 todo - 正确处理 （ 不可变数据 - React ）</span>
    <span class="token keyword">const</span> curList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">list</span><span class="token operator">:</span> curList<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> curList<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        title<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// // 错误的处理示范</span>
    <span class="token comment">// this.state.list.push({</span>
    <span class="token comment">//     id: this.state.list.length,</span>
    <span class="token comment">//     title</span>
    <span class="token comment">// })</span>

    <span class="token comment">// 清空输入框</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">inputValue</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input
          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>
          onInput<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>createTodo<span class="token punctuation">}</span><span class="token operator">&gt;</span>创建<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

        <span class="token punctuation">{</span><span class="token comment">/* &lt;TodoList list={this.state.list}&gt;&lt;/TodoList&gt; */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>FunctionalTodoList list<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> SimpleTodos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>不可变数据也有相应的第三方库</p>`,35),D={href:"https://www.npmjs.com/package/immutable",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.npmjs.com/package/immer",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>PS：React 默认情况（子组件“无脑”更新）这本身并不是问题，在大部分情况下并不会影响性能。因为组件更新不一定会触发 DOM 渲染，可能就是 JS 执行，而 JS 执行速度很快。所以，性能优化要考虑实际情况，不要为了优化而优化。</p><h3 id="react-memo-缓存函数组件" tabindex="-1"><a class="header-anchor" href="#react-memo-缓存函数组件" aria-hidden="true">#</a> React.memo 缓存函数组件</h3><p>如果是函数组件，没有用 <code>shouldComponentUpdate</code> 和 <code>React.PureComponent</code> 。React 提供了 <code>React.memo</code> 来缓存组件。<br> 代码参考 FunctionalTodoList.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">function</span> <span class="token function">FunctionalTodoList</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;todo list fn...&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> props
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> todo
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>FunctionalTodoList<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>React.memo</code> 也支持自行比较</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自行比较，像 shouldComponentUpdate</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usememo-缓存数据" tabindex="-1"><a class="header-anchor" href="#usememo-缓存数据" aria-hidden="true">#</a> useMemo 缓存数据</h3><p>在函数组件中，可以使用 <code>useMemo</code> 和 <code>useCallback</code> 缓存数据和函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> setNum1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> setNum2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token punctuation">[</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 缓存数据，像 Vue computed</span>

  <span class="token comment">// const fn1 = useCallback(() =&gt; {...}, [...]) // 缓存函数</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>info<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS: 普通的数据和函数，没必要缓存，不会影响性能的。一些初始化比较复杂的数据，可以缓存。</p><h3 id="异步组件-1" tabindex="-1"><a class="header-anchor" href="#异步组件-1" aria-hidden="true">#</a> 异步组件</h3><p>和 Vue 异步组件一样</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token comment">// 记载异步组件</span>
<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span>
  <span class="token comment">/* webpackChunkName: &#39;OtherComponent&#39;*/</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./OtherComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token comment">/* 支持 loading 效果 */</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OtherComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由懒加载-2" tabindex="-1"><a class="header-anchor" href="#路由懒加载-2" aria-hidden="true">#</a> 路由懒加载</h3><p>和 Vue-router 路由懒加载一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>

<span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &#39;Home&#39;*/</span> <span class="token string">&#39;./List&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Router<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&#39;/&#39;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&#39;/list&#39;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ssr-1" tabindex="-1"><a class="header-anchor" href="#ssr-1" aria-hidden="true">#</a> SSR</h3><p>同 Vue SSR</p><h3 id="答案-5" tabindex="-1"><a class="header-anchor" href="#答案-5" aria-hidden="true">#</a> 答案</h3><ul><li>循环使用 key</li><li>修改 css 模拟 <code>v-show</code></li><li>使用 Fragment 减少层级</li><li>JSX 中不要定义函数</li><li>在构造函数 bind this</li><li>使用 shouldComponentUpdate 控制组件渲染</li><li>React.memo 缓存函数组件</li><li>useMemo 缓存数据</li><li>异步组件</li><li>路由懒加载</li><li>SSR</li></ul><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> 划重点</h3><ul><li>要彻底理解 shouleComponentUpdate 及其周边</li><li>在 React 中，要让<strong>不可变数据</strong>深入骨髓</li></ul><h2 id="_09-连环问-你在使用-react-时遇到过哪些坑" tabindex="-1"><a class="header-anchor" href="#_09-连环问-你在使用-react-时遇到过哪些坑" aria-hidden="true">#</a> 09: 连环问-你在使用 React 时遇到过哪些坑</h2><ul><li><p>自定义组件的名称首字母要大写</p><blockquote><p>JSX 中，自定义组件命名，开头字母要大写，html 标签开头字母小写</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token comment">/* 原生 html 组件 */</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token punctuation">/&gt;</span></span>

<span class="token punctuation">{</span>
  <span class="token comment">/* 自定义组件 */</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>JS 关键字的冲突</p><blockquote><p>JSX 中 <code>for</code> 写成 <code>htmlFor</code> ， <code>class</code> 写成 <code>className</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token comment">/* for 改成 htmlFor ，class 要改为 className */</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&quot;input-name&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span><span class="token operator">&gt;</span>
    姓名 <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;input-name&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>state 不可直接修改</p><blockquote><p>state 作为不可变数据，不可直接修改，使用纯函数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// this.state.list.push({...}) // 错误，不符合 React 规范</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">list</span><span class="token operator">:</span> curList<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 使用**不可变数据**</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>JSX 的数据类型</p><blockquote><p>JSX 中，属性要区分 JS 表达式和字符串</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Demo position<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> flag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Demo position<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> flag<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>setState 是异步更新的</p><blockquote><p>state 是异步更新的，要在 callback 中拿到最新的 state 值</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">num</span><span class="token operator">:</span> curNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newNum&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token comment">// 正确</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// console.log(&#39;newNum&#39;, this.state.num) // 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>React Hooks 有很多限制，注意不到就会踩坑。例如，<code>useEffect</code> 内部不能修改 state</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 如果依赖是 [] ，这里 setCount 不会成功</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 只有依赖是 [count] 才可以，这样才会触发组件 update</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>useEffect 第二个参数依赖项目必须是<strong>值类型</strong> 再例如，<code>useEffect</code> 依赖项（即第二个参数）里有对象、数组，就会出现死循环。所以，依赖项里都要是值类型。<br> 因为 React Hooks 是通过 <code>Object.is</code> 进行依赖项的前后比较。如果是值类型，则不妨碍。 如果是引用类型，前后的值是不一样的（纯函数，每次新建值），就类似 <code>{x:100} !== {x:100}</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">,</span> arr<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_10-面试连环问-setstate-是同步还是异步" tabindex="-1"><a class="header-anchor" href="#_10-面试连环问-setstate-是同步还是异步" aria-hidden="true">#</a> 10: 面试连环问：setState 是同步还是异步？</h2><p>前端经典面试题。先作为思考题，后面会结合代码详细讲解。</p><h2 id="_11-如何统一监听-vue-组件报错" tabindex="-1"><a class="header-anchor" href="#_11-如何统一监听-vue-组件报错" aria-hidden="true">#</a> 11: 如何统一监听 Vue 组件报错</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p>如何统一监听 Vue 组件报错？</p><h3 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1" aria-hidden="true">#</a> 分析</h3><p>真实项目需要<strong>闭环</strong>，即考虑各个方面，除了基本的功能外，还要考虑性能优化、报错、统计等。 而个人项目、课程项目一般以实现功能为主，不会考虑这么全面。所以，没有实际工作经验的同学，不会了解如此全面。</p><h3 id="window-onerror" tabindex="-1"><a class="header-anchor" href="#window-onerror" aria-hidden="true">#</a> window.onerror</h3><p>可以监听当前页面所有的 JS 报错，jQuery 时代经常用。<br> 注意，全局只绑定一次即可。不要放在多次渲染的组件中，这样容易绑定多次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window.onerror---------&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意，如果用 window.addEventListener(&#39;error&#39;, event =&gt; {}) 参数不一样！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="errorcaptured-生命周期" tabindex="-1"><a class="header-anchor" href="#errorcaptured-生命周期" aria-hidden="true">#</a> errorCaptured 生命周期</h3><p>会监听所有<strong>下级组件</strong>的错误。可以返回 <code>false</code> 阻止向上传播，因为可能会有多个上级节点都监听错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;errorCaptured--------&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="errorhandler" tabindex="-1"><a class="header-anchor" href="#errorhandler" aria-hidden="true">#</a> errorHandler</h3><p>全局的错误监听，所有组件的报错都会汇总到这里来。PS：如果 <code>errorCaptured</code> 返回 <code>false</code> 则<strong>不会</strong>到这里。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;errorHandler--------&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>errorHandler</code> 会阻止错误走向 <code>window.onerror</code>。</p><p>PS：还有 <code>warnHandler</code></p><h3 id="异步错误" tabindex="-1"><a class="header-anchor" href="#异步错误" aria-hidden="true">#</a> 异步错误</h3><p>组件内的异步错误 <code>errorHandler</code> 监听不到，还是需要 <code>window.onerror</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout 报错&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-6" tabindex="-1"><a class="header-anchor" href="#答案-6" aria-hidden="true">#</a> 答案</h3><p>方式</p><ul><li><code>errorCaptured</code> 监听下级组件的错误，可返回 <code>false</code> 阻止向上传播</li><li><code>errorHandler</code> 监听 Vue 全局错误</li><li><code>window.onerror</code> 监听其他的 JS 错误，如异步</li></ul><p>建议：结合使用</p><ul><li>一些重要的、复杂的、有运行风险的组件，可使用 <code>errorCaptured</code> 重点监听</li><li>然后用 <code>errorHandler</code> <code>window.onerror</code> 候补全局监听，避免意外情况</li></ul><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><ul><li>实际工作中，三者要结合使用</li><li>errorCaptured 监听一些重要、有风险组件的错误</li><li>window.onerror 和 errorHandler 候补全局监听</li></ul><h3 id="扩展-4" tabindex="-1"><a class="header-anchor" href="#扩展-4" aria-hidden="true">#</a> 扩展</h3><p>Promise 未处理的错误监听要使用 <code>window.onunhandledrejection</code> ，后面会有面试题讲解。</p><p>前端拿到错误监听之后，需要传递给服务端，进行错误收集和分析，然后修复 bug 。 后面会有一道面试题专门讲解。</p><h2 id="_12-如何统一监听-react-组件报错" tabindex="-1"><a class="header-anchor" href="#_12-如何统一监听-react-组件报错" aria-hidden="true">#</a> 12: 如何统一监听 React 组件报错</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> 题目</h3><p>如何统一监听 React 组件报错？</p><h3 id="分析-2" tabindex="-1"><a class="header-anchor" href="#分析-2" aria-hidden="true">#</a> 分析</h3><p>真实项目需要<strong>闭环</strong>，即考虑各个方面，除了基本的功能外，还要考虑性能优化、报错、统计等。 而个人项目、课程项目一般以实现功能为主，不会考虑这么全面。所以，没有实际工作经验的同学，不会了解如此全面。</p><h3 id="errorboundary" tabindex="-1"><a class="header-anchor" href="#errorboundary" aria-hidden="true">#</a> ErrorBoundary</h3><ul><li>React 16+ 引入。可以监听所有<strong>下级</strong>组件报错，同时降级展示 UI 。<br></li><li>只监听组件渲染时报错，不监听 DOM 事件、异步错误</li><li>production 环境生效，dev 会直接抛出错误</li></ul><p>代码参考 ErrorBoundary.js 和 components/ErrorDemo</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 存储当前的报错信息</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;getDerivedStateFromError...&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> errorInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 统计上报错误信息</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidCatch...&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 提示错误</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>报错了<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 没有错误，就渲染子组件</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ErrorBoundary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议应用到最顶层，监听全局错误</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// index.js 入口文件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数组件中也可以使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ErrorBoundary<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ErrorBoundary<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dev-和-build" tabindex="-1"><a class="header-anchor" href="#dev-和-build" aria-hidden="true">#</a> dev 和 build</h3><p>dev 环境下无法看到 ErrorBoundary 的报错 UI 效果。会显示的提示报错信息。<br><code>yarn build</code> 之后再运行，即可看到 UI 效果。</p><h3 id="事件报错" tabindex="-1"><a class="header-anchor" href="#事件报错" aria-hidden="true">#</a> 事件报错</h3><ul><li>React 不需要 ErrorBoundary 来捕获事件处理器中的错误。与 <code>render</code> 方法和生命周期方法不同，事件处理器不会在渲染期间触发。</li><li>如果你需要在事件处理器内部捕获错误，使用普通的 <code>try-catch</code> 语句。</li><li>也可以使用全局的 <code>window.onerror</code> 来监听。</li></ul><h3 id="异步错误-1" tabindex="-1"><a class="header-anchor" href="#异步错误-1" aria-hidden="true">#</a> 异步错误</h3><p>ErrorBoundary 无法捕捉到异步报错，可使用 <code>window.onerror</code> 来监听。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window.onerror---------&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意，如果用 window.addEventListener(&#39;error&#39;, event =&gt; {}) 参数不一样！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-7" tabindex="-1"><a class="header-anchor" href="#答案-7" aria-hidden="true">#</a> 答案</h3><ul><li>ErrorBoundary 监听组件渲染时报错</li><li>事件报错使用 <code>try-catch</code> 和 <code>window.onerror</code></li><li>异步报错等使用 <code>window.onerror</code></li></ul><h3 id="扩展-5" tabindex="-1"><a class="header-anchor" href="#扩展-5" aria-hidden="true">#</a> 扩展</h3><p>Promise 未处理的报错监听需要使用 <code>window.onunhandledrejection</code> ，后面会有面试题讲解。</p><p>前端拿到错误监听之后，需要传递给服务端，进行错误收集和分析，然后修复 bug 。 后面会有一道面试题专门讲解。</p><h2 id="_13-如果一个-h5-很慢-如何排查性能问题-通过-chrome-performance-分析" tabindex="-1"><a class="header-anchor" href="#_13-如果一个-h5-很慢-如何排查性能问题-通过-chrome-performance-分析" aria-hidden="true">#</a> 13: 如果一个 H5 很慢，如何排查性能问题-通过 Chrome Performance 分析</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>如果一个 h5 很慢，你该如何排查问题？</p><h3 id="分析-3" tabindex="-1"><a class="header-anchor" href="#分析-3" aria-hidden="true">#</a> 分析</h3><p>注意审题，看面试官问的是哪方面的慢。如果他没有说清楚，你可以继续追问一下。</p><ul><li>加载速度慢。则考虑网页文件、数据请求的优化，即本文所讲</li><li>运行卡顿，体验不流畅。则考虑内存泄漏、节流防抖、重绘重排的方面，此前面试题已经讲过</li></ul><h3 id="前端性能指标" tabindex="-1"><a class="header-anchor" href="#前端性能指标" aria-hidden="true">#</a> 前端性能指标</h3><p>能搜索到的性能指标非常多，也有很多非标准的指标。最常用的指标有如下几个：</p><h4 id="first-paint-fp" tabindex="-1"><a class="header-anchor" href="#first-paint-fp" aria-hidden="true">#</a> First Paint (FP)</h4><p>从开始加载到浏览器<strong>首次绘制像素</strong>到屏幕上的时间，也就是页面在屏幕上首次发生视觉变化的时间。但此变化可能是简单的背景色更新或不引人注意的内容，它并不表示页面内容完整性，可能会报告没有任何可见的内容被绘制的时间。</p><h4 id="first-contentful-paint-fcp" tabindex="-1"><a class="header-anchor" href="#first-contentful-paint-fcp" aria-hidden="true">#</a> First Contentful Paint（FCP）</h4><p>浏览器<strong>首次绘制来自 DOM 的内容</strong>的时间，内容必须是文本、图片（包含背景图）、非白色的 canvas 或 SVG，也包括带有正在加载中的 Web 字体的文本。</p><h4 id="first-meaningful-paint-fmp" tabindex="-1"><a class="header-anchor" href="#first-meaningful-paint-fmp" aria-hidden="true">#</a> First Meaningful Paint（FMP）</h4><p>页面的<strong>主要内容</strong>绘制到屏幕上的时间。这是一个更好的衡量用户感知加载体验的指标，但无法统一衡量，因为每个页面的主要内容都不太一致。<br> 主流的分析工具都已弃用 FMP 而使用 LCP</p><h4 id="domcontentloaded-dcl" tabindex="-1"><a class="header-anchor" href="#domcontentloaded-dcl" aria-hidden="true">#</a> DomContentLoaded（DCL）</h4><p>即 <code>DOMContentLoaded</code> 触发时间，DOM 全部解析并渲染完。</p><h4 id="largest-contentful-paint-lcp" tabindex="-1"><a class="header-anchor" href="#largest-contentful-paint-lcp" aria-hidden="true">#</a> Largest Contentful Paint（LCP）</h4><p><strong>可视区域中最大的内容元素</strong>呈现到屏幕上的时间，用以估算页面的主要内容对用户可见时间。</p><h4 id="load-l" tabindex="-1"><a class="header-anchor" href="#load-l" aria-hidden="true">#</a> Load（L）</h4><p>即 <code>window.onload</code> 触发时间，页面内容（包括图片）全部加载完成。</p><h3 id="性能分析工具-chrome-devtools" tabindex="-1"><a class="header-anchor" href="#性能分析工具-chrome-devtools" aria-hidden="true">#</a> 性能分析工具 - Chrome devtools</h3><p>PS：建议在 Chrome 隐身模式测试，避免其他缓存的干扰。</p><p>Performance 可以检测到上述的性能指标，并且有网页快照截图。</p><p><img src="`+v+'" alt=""></p><p>NetWork 可以看到各个资源的加载时间</p><p><img src="'+m+'" alt=""></p><h3 id="性能分析工具-lighthouse" tabindex="-1"><a class="header-anchor" href="#性能分析工具-lighthouse" aria-hidden="true">#</a> 性能分析工具 - Lighthouse</h3>',110),O={href:"https://www.npmjs.com/package/lighthouse",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> i lighthouse <span class="token parameter variable">-g</span>

<span class="token comment"># 检测一个网页，检测完毕之后会打开一个报告网页</span>
lighthouse https://imooc.com/ <span class="token parameter variable">--view</span> <span class="token parameter variable">--preset</span><span class="token operator">=</span>desktop <span class="token comment"># 或者 mobile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试完成之后，lighthouse 给出测试报告</p><p><img src="`+h+'" alt=""></p><p>并且会给出一些优化建议</p><p><img src="'+b+'" alt=""></p><h3 id="识别问题" tabindex="-1"><a class="header-anchor" href="#识别问题" aria-hidden="true">#</a> 识别问题</h3><p>网页慢，到底是加载慢，还是渲染慢？—— 分清楚很重要，因为前后端不同负责。</p><p>如下图是 github 的性能分析，很明显这是加载慢，渲染很快。</p><p><img src="'+g+'" alt=""></p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><p>加载慢</p><ul><li>优化服务端硬件配置， 使用 CDN</li><li>路由懒加载，大组件异步加载 - 减少主包体积</li><li>优化 HTTP 缓存策略</li><li>压缩文件</li></ul><p>渲染慢（可参考“首屏优化”）</p><ul><li>优化服务端接口（如 Ajax 获取数据慢）</li><li>继续分析，优化前端组件内部的逻辑（参考 vue react 优化）</li><li>根据业务功能，继续打点监控</li><li>如果是 SPA 异步加载资源，需要特别关注网络请求的时间</li><li>服务端渲染 SSR</li></ul><h3 id="持续跟进" tabindex="-1"><a class="header-anchor" href="#持续跟进" aria-hidden="true">#</a> 持续跟进</h3><ul><li>性能优化是一个循序渐进的过程，不像 bug 一次性解决</li><li>持续跟进统计结果，在逐步分析性能瓶颈，持续优化</li><li>可使用第三方统计服务，如阿里云 ARMS、百度统计</li></ul><p>分析、解决、测试，都是在你本地进行，网站其他用户的情况你看不到。 所以要增加性能统计，看全局，不只看自己。</p><p>JS 中有 Performance API 可供获取网页的各项性能数据，对于性能统计非常重要。 如 <code>performance.timing</code> 可以获取网页加载各个阶段的时间戳。</p><p>如果你的公司没有内部的统计服务（一般只有大厂有），没必要自研，成本太高了。可以使用第三方的统计服务，例如阿里云 ARMS 。</p><h3 id="答案-8" tabindex="-1"><a class="header-anchor" href="#答案-8" aria-hidden="true">#</a> 答案</h3><ul><li>通过工具分析性能参数</li><li>识别问题：加载慢？渲染慢？</li><li>对症下药，解决问题</li><li>增加性能统计，持续跟进、优化</li></ul><h3 id="划重点-6" tabindex="-1"><a class="header-anchor" href="#划重点-6" aria-hidden="true">#</a> 划重点</h3><ul><li>性能指标，性能检测工具</li><li>使用“二分法”，可逐步找出问题根源</li><li>要有监控，持续跟进的思维。解决了问题，还得保持住</li></ul><h2 id="_14-工作中遇到过哪些项目难点-是如何解决的" tabindex="-1"><a class="header-anchor" href="#_14-工作中遇到过哪些项目难点-是如何解决的" aria-hidden="true">#</a> 14: 工作中遇到过哪些项目难点，是如何解决的</h2><h3 id="题目-9" tabindex="-1"><a class="header-anchor" href="#题目-9" aria-hidden="true">#</a> 题目</h3><p>你工作经历中，印象比较深的项目难点，以及学到了什么？</p><h3 id="日常积累的习惯" tabindex="-1"><a class="header-anchor" href="#日常积累的习惯" aria-hidden="true">#</a> 日常积累的习惯</h3><p>大家在日常工作和学习中，如果遇到令人头秃的问题，解决完之后一定要记录下来，这是你宝贵的财富。<br> 如果你说自己没遇到过，那只能说明：你没有任何工作经验，甚至没有认真学习过。</p><p>下面给出几个示例，我做 wangEditor 富文本编辑器时的一些问题和积累</p><ul><li>编辑器 embed 设计 https://juejin.cn/post/6939724738818211870</li><li>编辑器扩展 module 设计 https://juejin.cn/post/6968061014046670884#heading-18</li><li>编辑器拼音输入问题和 toHtml 的问题 https://juejin.cn/post/6987305803073978404#heading-33</li></ul><h3 id="如果之前没积累" tabindex="-1"><a class="header-anchor" href="#如果之前没积累" aria-hidden="true">#</a> 如果之前没积累</h3><p>如果此前没有积累，又要开始面试了，请抓紧回顾一下近半年让你困惑的一个问题。做程序员总会有那么几个问题折腾好久才能解决，不难找的。</p><p>就抓住这一个问题（不要太多），认真复盘，详细写出一篇博客文章</p><ul><li>光想、光看没用，写出来才能印象深刻</li><li>文章要有内容有深度，要耐心写，不要求快（找个周末，闷在家里，一天时间写出来）</li><li>文章不求别人看，只求自己积累</li></ul><h3 id="复盘和成长" tabindex="-1"><a class="header-anchor" href="#复盘和成长" aria-hidden="true">#</a> 复盘和成长</h3><p>要通过问题，最终体现出自己的解决方案、复盘和成长。而不是只抛出问题</p><h3 id="答案模板" tabindex="-1"><a class="header-anchor" href="#答案模板" aria-hidden="true">#</a> 答案模板</h3><p>找到一个问题，按照下面的套路回答</p><ul><li>描述问题：背景 + 现象 + 造成的影响</li><li>问题如何被解决：分析 + 解决</li><li>自己的成长：从中学到了什么，以后会怎么避免</li></ul><p>PS：这不是知识点，没法统一传授，我的经验你拿不走，只能靠你自己总结。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>PS：工作中有保密协议，所以只能说一些开源的，但也决定具有参考价值。</p>',42),B={href:"https://www.wangeditor.com/v5/guide/display.html",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"问题描述",-1),z=n("ul",null,[n("li",null,"新版编辑器只能输入 JSON 格式内容，无法输入 html"),n("li",null,"旧版编辑器却只能输入 html 格式"),n("li",null,"影响：旧版编辑器无法直接升级到新版编辑器")],-1),X=n("p",null,"问题如何解决",-1),G=n("li",null,"文档写清楚，争取大家的理解",-1),Q={href:"https://github.com/wangeditor-team/wangEditor-v5/issues/233",target:"_blank",rel:"noopener noreferrer"},W=n("li",null,[s("后续会增加 "),n("code",null,"editor.dangerouslyInsertHTML"),s(" API 尽量兼容 html 格式")],-1),$=t('<p>自己的成长</p><ul><li>要考虑一个产品完整的输入输出，而不只考虑编辑功能</li><li>要考虑旧版用户的升级成本</li><li>要参考其他竞品的设计，尽量符合用户习惯</li></ul><h2 id="_15-扩展-处理沟通冲突" tabindex="-1"><a class="header-anchor" href="#_15-扩展-处理沟通冲突" aria-hidden="true">#</a> 15: 扩展：处理沟通冲突</h2><h3 id="题目-10" tabindex="-1"><a class="header-anchor" href="#题目-10" aria-hidden="true">#</a> 题目</h3><p>项目中有没有发生过沟通的冲突（和其他角色）？如何解决的</p><h3 id="分析-4" tabindex="-1"><a class="header-anchor" href="#分析-4" aria-hidden="true">#</a> 分析</h3><p>有项目有合作，有合作就有沟通，有沟通就有冲突，这很正常。哪怕你自己单独做一个项目，你也需要和你的老板、客户沟通。</p><p>面试官通过考察这个问题，就可以从侧面得知你是否有实际工作经验。 因为即便你是一个项目的“小兵”，不是负责人，你也会参与到一些沟通和冲突中，也能说出一些所见所闻。</p><p>当然，如果你之前是项目负责人，有过很多沟通和解决冲突的经验，并在面试中充分表现出来。 相信面试官会惊喜万分（前提是技术过关），因为“技术 + 项目管理”这种复合型人才非常难得。</p><h3 id="常见的冲突" tabindex="-1"><a class="header-anchor" href="#常见的冲突" aria-hidden="true">#</a> 常见的冲突</h3><ul><li>需求变更：PM 或者老板提出了新的需求</li><li>时间延期：上游或者自己延期了</li><li>技术方案冲突：如感觉服务端给的接口格式不合理</li></ul><h3 id="正视冲突" tabindex="-1"><a class="header-anchor" href="#正视冲突" aria-hidden="true">#</a> 正视冲突</h3><p>从个人心理上，不要看到冲突就心烦，要拥抱变化，正视冲突。冲突是项目的一部分，就像 bug 一样，心烦没用。</p><p>例如，PM 过来说要修改需求，你应该回答：<strong>“可以呀，你组织个会议讨论一下吧，拉上各位领导，因为有可能会影响工期。”</strong></p><p>再例如，自己开发过程中发现可能会有延期，要及早的汇报给领导：<strong>“我的工期有风险，因为 xxx 原因，不过我会尽量保证按期完成。”</strong><br> 千万不要不好意思，等延期了被领导发现了，这就不好了。</p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突</h3><p>合作引起的冲突，最终还是要通过沟通来解决。</p><p>一些不影响需求和工期的冲突，如技术方案问题，尽量私下沟通解决。实在解决不了再来领导开会。<br> 需求变更和时间延期一定要开会解决，会议要有各个角色决定权的领导去参与。</p><p>注意，无论是私下沟通还是开会，涉及到自己工作内容变动的，一定要有结论。 最常见的就是发邮件，一定要抄送给各位相关的负责人。这些事情要公开，有记录，不要自己偷偷的就改了。</p><h3 id="如何规避冲突" tabindex="-1"><a class="header-anchor" href="#如何规避冲突" aria-hidden="true">#</a> 如何规避冲突</h3><ul><li>预估工期留有余地</li><li>定期汇报个人工作进度，提前识别风险</li></ul><h3 id="答案-9" tabindex="-1"><a class="header-anchor" href="#答案-9" aria-hidden="true">#</a> 答案</h3><ul><li>经常遇到哪些冲突</li><li>解决冲突</li><li>自己如何规避冲突</li></ul><p>PS：最好再能准备一个案例或者故事，效果会非常好，因为人都喜欢听故事。</p><h2 id="_16-总结" tabindex="-1"><a class="header-anchor" href="#_16-总结" aria-hidden="true">#</a> 16: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解实际工作经验的面试题。无论是校招还是社招，企业都希望得到工作经验丰富的候选人。 体现工作经验的有：性能分析和优化、设计模式应用、错误监听等。</p><h3 id="划重点-7" tabindex="-1"><a class="header-anchor" href="#划重点-7" aria-hidden="true">#</a> 划重点</h3><ul><li>性能优化的实践</li><li>设计模式的应用</li><li>错误监控的实践</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li>应届毕业生也需要工作经验 —— 你的毕业设计，实习经历</li></ul>',31);function K(Y,Z){const a=o("ExternalLinkIcon");return c(),i("div",null,[y,n("ul",null,[n("li",null,[n("a",x,[s("vue-virtual-scroll-list"),e(a)])]),n("li",null,[n("a",w,[s("react-virtualized"),e(a)])])]),j,n("p",null,[s("再例如，网页中常用的字号，如果你有工作经验就知道，最常用的是 "),_,s(),S,s(),C,s(),R,s(),P,s(" 等。你如果不了解，可以多去看看各种 UI 框架，例如 "),n("a",V,[s("antDesign 排版"),e(a)]),s("。")]),M,n("p",null,[s("以下代码可以在 "),n("a",L,[s("ts playground"),e(a)]),s(" 中运行。")]),H,n("ul",null,[A,n("li",null,[s("返回列表页时（用 Vue-router "),n("a",E,[s("导航守卫"),e(a)]),s("，判断 "),T,s("），使用缓存数据渲染页面，然后 "),I])]),q,n("ul",null,[n("li",null,[n("a",D,[s("immutable.js"),e(a)])]),n("li",null,[n("a",J,[s("immer"),e(a)]),s(" —— 更加推荐，学习成本低")])]),N,n("p",null,[n("a",O,[s("Lighthouse"),e(a)]),s(" 是非常优秀的第三方性能评测工具，支持移动端和 PC 端。 它支持 Chrome 插件和 npm 安装，国内情况推荐使用后者。")]),F,n("p",null,[s("以编辑器 "),n("a",B,[s("toHtml"),e(a)]),s(" 的问题作为一个示例，找个功能比较好理解。")]),U,z,X,n("ul",null,[G,n("li",null,[s("给出一些其他的升级"),n("a",Q,[s("建议"),e(a)])]),W]),$])}const sn=p(f,[["render",K],["__file","index-07.html.vue"]]);export{sn as default};
