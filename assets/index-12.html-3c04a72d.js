import{_ as t,M as o,p as l,q as c,R as n,t as s,N as e,a1 as p}from"./framework-e8cb8151.js";const i="/assets/image-20230903234631956-09763a17.png",r="/assets/image-20230903234937080-8133668a.png",u="/assets/image-20230903234948440-b416edf2.png",d="/assets/image-20230903234959311-87ce0174.png",k="/assets/image-20230903235452248-8430024b.png",v="/assets/image-20230903235726410-ff90872f.png",m="/assets/image-20230903235736336-ff253e59.png",g={},b=p('<h1 id="_12-使用-webpack-管理项目中的静态资源" tabindex="-1"><a class="header-anchor" href="#_12-使用-webpack-管理项目中的静态资源" aria-hidden="true">#</a> 12-使用 Webpack 管理项目中的静态资源</h1><p><img src="'+i+`" alt="image-20230903234631956"></p><blockquote><p>低头要有勇气，抬头要有底气。—— 韩寒</p></blockquote><p>前端项目离不开各种静态资源，静态资源指前端中常用的图片、富媒体（Video、Audio 等）、字体文件等。</p><p>Webpack 中静态资源也是可以作为模块直接使用的，本小节将介绍下 Webpack 中对静态资源的管理。</p><h2 id="图片引入方式" tabindex="-1"><a class="header-anchor" href="#图片引入方式" aria-hidden="true">#</a> 图片引入方式</h2><p>图片是前端项目必不可少的静态资源，在日常开发中，我们可能会在下面三种情况使用图片：</p><ol><li>HTML 中通过<code>&lt;img&gt;</code>标签等方式引入；</li><li>CSS 中通过<code>src</code>等方式引入；</li><li>JavaScript 中使用图片的 URL 或者内容（比如 Canvas 等）。</li></ol><p>最笨最直接的方式就是直接写死线上的地址，例如在页面中，我们引入<code>&lt;img&gt;</code>如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://s.bxstatic.com/foo/bar.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),h=n("code",null,"http://s.bxstatic.com",-1),x={href:"https://baike.baidu.com/item/CDN",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>这样操作想想就很费劲，而且 CDN 每次静态资源更新都要需要刷新缓存，如果我们使用 MD5 命名图片的时候就更麻烦了。</p><p>我们在 Webpack 中，则可以使用 loader 的方式完成图片的引入。</p><p>例如在 CSS 文件中，直接相对路径使用背景图片：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bg-img</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./foo/bar.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 HTML 中也可以直接使用相对路径：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../foo/bar.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还记得我们之前学过的<code>resolve.alias</code>方式创建一个目录的<code>alias</code>引用，这种方式不仅仅可以在 JavaScript 中使用，在 HTML 和 CSS 中也可以使用的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.confg.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@assets&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./src/assets&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&#39;@assets/img/foo/bar.png&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-loader-来加载图片资源" tabindex="-1"><a class="header-anchor" href="#使用-loader-来加载图片资源" aria-hidden="true">#</a> 使用 loader 来加载图片资源</h3>`,9),f={href:"https://www.npmjs.com/package/file-loader",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.npmjs.com/package/url-loader",target:"_blank",rel:"noopener noreferrer"},j=p(`<p><code>file-loader</code>和<code>url-loader</code>是经常在一些 Webpack 配置中看到的两个 loader，并且两个 loader 在一定应用场景上是可以相互替代的，但是对于两者的区别，很少有人能够说得清楚，下面介绍下两者的区别。</p><ul><li><code>file-loader</code>：能够根据配置项复制使用到的资源（不局限于图片）到构建之后的文件夹，并且能够更改对应的链接；</li><li><code>url-loader</code>：包含 file-loader 的全部功能，并且能够根据配置将符合配置的文件转换成 Base64 方式引入，将小体积的图片 Base64 引入项目可以减少 http 请求，也是一个前端常用的优化方式。</li></ul><p>下面以<code>url-loader</code>为例说明下 Webpack 中使用方法。</p><p>首先是安装对应的 loader：<code>npm install -D url-loader</code>。</p><p>下面我们创建一个项目，目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── package.json            # npm package.json
├── src
│   ├── assets              # 静态资源
│   │   └── img             # 图片资源
│   │       ├── large.png   # 大图图片 超过1M
│   │       ├── small-02.png # 小图图片
│   │       ├── small-03.png
│   │       ├── small-04.png
│   │       ├── small-05.png
│   │       └── small.png  # 小图图片
│   ├── index.css           # css 文件
│   ├── index.html          # html
│   └── index.js            # js
└── webpack.config.js       # webpack 配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们在<code>index.css</code>中引入 <code>small.png</code>，</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bg-img</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./assets/img/small.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>index.js</code>中引入了<code>index.css</code>和<code>large.png</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">&#39;./assets/img/large.png&#39;</span>
<span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">&#39;./index.css&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> style<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们在<code>index.html</code>中通过<code>&lt;img&gt;</code>引入<code>large.png</code>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./assets/img/large.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>背景图<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们修改<code>webpack.config.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> HTMLPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|svg|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HTMLPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>webpack</code>之后的 log：</p><p><img src="`+r+'" alt="image-20230903234937080"></p><p>这时候发现，打包出来的文件都比较大，通过查看内容发现，我们的图片被<code>Base64</code>处理了，然后直接引入了：</p><p><img src="'+u+`" alt="image-20230903234948440"></p><p><strong>这是因为<code>url-loader</code>本身优先是将资源<code>Base64</code>引入的</strong>。虽然图片<code>Base64</code>可以减少 http 请求，但是对于<code>1M+</code>这么大的图片都<code>Base64</code>处理，范围增加了 CSS、JavaScript 等文件的大小，而且将这么大的<code>Base64</code>反解成可以使用的图片渲染出来，时间消耗也是很大的。</p><p>所以这时候需要使用<code>url-loader</code>的<code>limit</code>选项来控制<strong>不超过</strong>一定限制的图片才使用<code>Base64</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|svg|jpg|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token comment">// 3k</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候再执行<code>webpack</code>，发现多打出一个<code>ad19429dc9b3ac2745c760bb1f460892.png</code>的图片，这张图片就是<code>large.png</code>的图片，因为超过了<code>limit=3*1024</code>显示所以没有被处理成<code>Base64</code>。</p><p><img src="`+d+`" alt="image-20230903234959311"></p><p>继续查看<code>index.html</code>和<code>main.js</code>（<code>index.js</code>打包出来的文件)，发现我们使用<code>large.png</code>的地址都被 Webpack 自动替换成了新的路径<code>ad19429dc9b3ac2745c760bb1f460892.png</code>。</p><h3 id="配置-cdn-域名" tabindex="-1"><a class="header-anchor" href="#配置-cdn-域名" aria-hidden="true">#</a> 配置 CDN 域名</h3><p>一般静态资源上线的时候都会放到 CDN，假设我们的 CDN 域名和路径为：<code>http://bd.bxstatic.com/img/</code>，这时候只需要修改<code>output.publicPath</code>即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//..</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;http://bd.bxstatic.com/img/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后执行<code>webpack</code>打包后的结果如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bd.bxstatic.com/img/ad19429dc9b3ac2745c760bb1f460892.png<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>背景图<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bd.bxstatic.com/img/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明 Webpack 为我们自动替换了路径，并且加上了 CDN 域名。</p><h3 id="html-和-css-中使用-alias" tabindex="-1"><a class="header-anchor" href="#html-和-css-中使用-alias" aria-hidden="true">#</a> HTML 和 CSS 中使用 alias</h3><p>前面提到过，除了使用相对路径的方式引入静态资源，还可以使用别名（<code>alias</code>）的方式，<code>url-loader</code>也会给我们处理这种情况的引用。</p><p>修改<code>index.html</code>和<code>index.css</code>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@assets/img/large.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>背景图<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.bg-img</span> <span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>@assets/img/small.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改<code>webpack.config.js</code>增加<code>resolve.alias</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@assets&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/assets&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候执行<code>webpack</code>发现报错了：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token level error important">ERROR</span> in <span class="token file-path string">./src/index.css</span> <span class="token operator">(</span><span class="token file-path string">/webpack-tutorial/node_modules/css-loader/dist/cjs.js!./src/index.css</span><span class="token operator">)</span>
<span class="token property">Module not found:</span> <span class="token property">Error:</span> Can&#39;t resolve <span class="token string">&#39;./@assets/img/small.png&#39;</span> in <span class="token string">&#39;/webpack-tutorial/packages/chapter-02/static/src&#39;</span>
 <span class="token operator">@</span> <span class="token file-path string">./src/index.css</span> <span class="token operator">(</span><span class="token file-path string">/webpack-tutorial/node_modules/css-loader/dist/cjs.js!./src/index.css</span><span class="token operator">)</span> <span class="token number">4</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">-</span><span class="token number">75</span>
 <span class="token operator">@</span> <span class="token file-path string">./src/index.css</span>
 <span class="token operator">@</span> <span class="token file-path string">./src/index.js</span>

<span class="token level error important">ERROR</span> in   Error<span class="token operator">:</span> Child compilation failed<span class="token operator">:</span>
  <span class="token property">Module not found:</span> <span class="token property">Error:</span> Can&#39;t resolve <span class="token string">&#39;./@assets/img/large.png&#39;</span> in <span class="token string">&#39;/webpack-tutorial/packages/chapter-02/static/src&#39;</span><span class="token operator">:</span>
  <span class="token property">Error:</span> Can&#39;t resolve <span class="token string">&#39;./@assets/img/large.png&#39;</span> in <span class="token string">&#39;/webpack-tutorial/packages/chapter-02/static/src&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为在 HTML 和 CSS 使用<code>alias</code>必须要前面添加<code>~</code>，即：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>~@assets/img/large.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>背景图<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.bg-img</span> <span class="token punctuation">{</span> 
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>~@assets/img/small.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完后，直接执行<code>webpack</code>既可以看到正确的结果了。</p><blockquote><p>Tips：HTML 中使用<code>&lt;img&gt;</code>引入图片等静态资源的时候，需要添加<code>html-loader</code>配置，不然也不会处理静态资源的路径问题。</p></blockquote>`,42),q={href:"https://www.npmjs.com/package/svg-url-loader",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"url-loader",-1),S={href:"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>对于 SVG 图片这是有效的，因为 SVG 文件恰好是纯文本，这种编码规模效应更加明显，使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;svg-url-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 小于 10kB(10240字节）的内联文件</span>
          <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
          <span class="token comment">// 移除 url 中的引号</span>
          <span class="token comment">// (在大多数情况下它们都不是必要的)</span>
          <span class="token literal-property property">noquotes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：svg-url-loader 拥有改善 IE 浏览器支持的选项，但是在其他浏览器中更糟糕。如果你需要兼容 IE 浏览器，设置 <code>iesafe: true</code>选项。</p></blockquote><h2 id="图片优化" tabindex="-1"><a class="header-anchor" href="#图片优化" aria-hidden="true">#</a> 图片优化</h2><p>图片体积是个经常诟病的问题，一个页面中，完全一样内容的图片，在肉眼可见的范围内并不一定有差异但是体积却相差甚大，例如下面的图片：</p><p><img src="`+k+'" alt="image-20230903235452248"></p>',6),N={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},T=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> <span class="token function">install</span> image-webpack-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"url-loader",-1),D=n("code",null,"svg-url-loader",-1),L=p(`<p>为了避免同时将它复制粘贴到两个规则中（一个针对 JPG/PNG/GIF 图片， 另一个针对 SVG ），我们使用 <code>enforce: &#39;pre&#39;</code> 作为单独的规则涵盖在这个 loader：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpe?g|png|gif|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;image-webpack-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 这会应用该 loader，在其它之前</span>
        <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>enforce: &#39;pre&#39;</code>我们提高了 img-webpack-loader 的优先级，保证在<code>url-loader</code>和<code>svg-url-loader</code>之前就完成了图片的优化。</p>`,3),B={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},V={href:"https://images.guide/",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"css-sprite-雪碧图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css-sprite-雪碧图","aria-hidden":"true"},"#"),s(" CSS Sprite 雪碧图")],-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/CSS_Image_Sprites",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"background-position",-1),$=n("p",null,"在 Webpack 中我们可以借助 PostCSS 来给图片做雪碧图，经过简单的配置之后，生成雪碧图就是全自动的过程了。下面来看看怎么操作。",-1),H={href:"https://github.com/2createStudio/postcss-sprites",target:"_blank",rel:"noopener noreferrer"},J=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> postcss-sprites <span class="token parameter variable">-D</span>
<span class="token comment"># 如果没有安装 postcss-loader 那么也安装它</span>
<span class="token function">npm</span> <span class="token function">install</span> postcss-loader <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z={href:"http://phantomjs.org/",target:"_blank",rel:"noopener noreferrer"},I=p(`<p>然后修改 PostCSS 的<code>postcss.config.js</code>，增加插件的调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
<span class="token keyword">const</span> postcssSprites <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-sprites&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">postcssSprites</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 在这里制定了从哪里加载的图片被主动使用css sprite</span>
      <span class="token comment">// 可以约定好一个目录名称规范，防止全部图片都被处理</span>
      <span class="token literal-property property">spritePath</span><span class="token operator">:</span> <span class="token string">&#39;./src/assets/img/&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改<code>webpack.config.js</code>在<code>css-loader</code>之前配置上<code>postcss-loader</code>（注意 loader 加载顺序，从后往前）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token comment">// rules</span>

<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
    <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，下面我们的 CSS 中使用了<code>spritePath: &#39;./src/assets/img/&#39;</code>路径的图片就会被处理了，例如下面的文件：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bg-img02</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./assets/img/small-02.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img03</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./assets/img/small-03.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img04</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./assets/img/small-04.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img05</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./assets/img/small-05.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过打包之后，输出 log 如下，可见生成了一个新的图片文件<code>99b0de3534d3e852ea4ce83b15cbad60.png</code>：</p><p><img src="`+v+'" alt="image-20230903235726410"></p><p>打开<code>99b0de3534d3e852ea4ce83b15cbad60.png</code>文件，我们看到图片被合并到了一起：</p><p><img src="'+m+`" alt="image-20230903235736336"></p><p>在打开打包之后的 CSS 文件，发现内容被主动替换成了 CSS Sprite 写法，并且设置了正确的<code>background-position</code>和<code>background-size</code>了：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bg-img02</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>99b0de3534d3e852ea4ce83b15cbad60.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0px 0px<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 320px 320px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img03</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>99b0de3534d3e852ea4ce83b15cbad60.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> -160px 0px<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 320px 320px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img04</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>99b0de3534d3e852ea4ce83b15cbad60.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0px -160px<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 320px 320px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg-img05</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>99b0de3534d3e852ea4ce83b15cbad60.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> -160px -160px<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 320px 320px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他资源处理" tabindex="-1"><a class="header-anchor" href="#其他资源处理" aria-hidden="true">#</a> 其他资源处理</h2><h3 id="字体、富媒体" tabindex="-1"><a class="header-anchor" href="#字体、富媒体" aria-hidden="true">#</a> 字体、富媒体</h3><p>对于字体、富媒体等静态资源，可以直接使用<code>url-loader</code>或者<code>file-loader</code>进行配置即可，不需要额外的操作，具体配置内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// 文件解析</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(eot|woff|ttf|woff2|appcache|mp4|pdf)(\\?|$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这么多文件，ext不同，所以需要使用[ext]</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;assets/[name].[hash:7].[ext]&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：如果不需要 Base64，那么可以直接使用 file-loader，需要的话就是用<code>url-loader</code>，还需要注意，如果将正则（test）放在一起，那么需要使用<code>[ext]</code>配置输出的文件名。</p></blockquote><h3 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h3><p>如果我们项目需要加载的类似 JSON、CSV、TSV 和 XML 等数据，那么我们需要单独给它们配置相应的 loader。</p>`,19),O=n("code",null,"import Data from'./data.json'",-1),U={href:"https://www.npmjs.com/package/csv-loader",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.npmjs.com/package/xml-loader",target:"_blank",rel:"noopener noreferrer"},F=p(`<p>首先是安装它们的 loader：<code>npm i -D xml-loader csv-loader</code>，然后增加文件 loader 配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(csv|tsv)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  	<span class="token string">&#39;csv-loader&#39;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.xml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  	<span class="token string">&#39;xml-loader&#39;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，您可以导入这四种类型的数据中的任何一种（JSON，CSV，TSV，XML），并且导入它的 Data 变量将包含已解析的 JSON 以便于使用。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节主要介绍 Webpack 中的图片、字体、富媒体、数据等多种静态资源的管理方式。页面经常用到的图片是页面的重点，Webpack 提供了很多插件和 loader 对图片进行压缩、合并（CSS Sprite）。</p><p>Webpack 还会使用<code>url-loader</code>等插件，将较小的资源通过 Base64 的方式引入。</p><p>当项目足够大了之后，配置太多的静态资源处理流程也会影响 Webpack 的打包速度，想突破压缩和合并这类前端常见优化，我们可以通过让视觉人员提供最优图片格式等方式来人工解决。当然如果项目组一直没有优化的意识，担心一不小心上到线上一个很大的图片，那么使用 Webpack 来兜底也是个很不错的方案。</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li>Webpack 中怎么给静态资源添加上 CDN 域名？</li><li>url-loader 和 file-loader 有什么区别？</li></ol><p>相同点：</p><p>file-loader与url-loader都是在webpack中引入图片的解决方案。</p><p>不同点：</p><p>1、file-loader：返回的是图片的public URL。 2、url-loader：与file-loader不同，url-loader可以在图片大小小于设定的limit的时候返回的是一个bDataURL（base64码），大于limit时会调用file-loader对图片进行处理。</p><p>简答地说，url-loader 封装了 file-loader。url-loader 不依赖于 file-loader，即使用 url-loader 时，只需要安装 url-loader 即可，不需要安装 file-loader，因为 url-loader 内置了 file-loader。</p></blockquote>`,8);function A(Y,K){const a=o("ExternalLinkIcon");return l(),c("div",null,[b,n("p",null,[s("上面地址的"),h,s("是一个 "),n("a",x,[s("CDN"),e(a)]),s(" 静态域名，后面是我们完整的路径，这样我们上线的时候地址就可以直接看了，我们线下开发的时候可以提前将静态资源打包好上传到线上。")]),y,n("p",null,[s("怎么使用图片我们了解了，但是怎么让 Webpack 识别图片，并且能够打包输出呢？这时候就需要借助 loader 了，这里有两个 loader 可以使用："),n("a",f,[s("file-loader"),e(a)]),s("和"),n("a",_,[s("url-loader"),e(a)]),s("。")]),j,n("p",null,[n("a",q,[s("svg-url-loader"),e(a)]),s(" 的工作原理类似于 "),w,s("，除了它利用 "),n("a",S,[s("URL encoding"),e(a)]),s(" 而不是 Base64 对文件编码。")]),C,n("p",null,[s("所以图片优化也是我们在前端项目中经常做的事情，在 Webpack 中可以借助 "),n("a",N,[s("img-webpack-loader"),e(a)]),s("来对使用到的图片进行优化。它支持 JPG、PNG、GIF 和 SVG 格式的图片，因此我们在碰到所有这些类型的图片都会使用它。")]),T,n("p",null,[n("a",W,[s("image-webpack-loader"),e(a)]),s("这个 loader 不能将图片嵌入应用，所以它必须和 "),M,s(" 以及 "),D,s(" 一起使用。")]),L,n("p",null,[s("另外"),n("a",B,[s("img-webpack-loader"),e(a)]),s("默认的配置就已经适用于日常开发图片的压缩优化需求了，但是如果你想更进一步去配置它，参考"),n("a",P,[s("插件选项"),e(a)]),s("。要选择指定选项，请查看国外牛人写的一个"),n("a",V,[s("图像优化指南"),e(a)]),s("。")]),E,n("p",null,[s("CSS 使用小图标图片的时候，我们经常做的优化项目是将小图标的图片合并成"),n("a",G,[s("雪碧图"),e(a)]),s("（CSS Sprite），雪碧图的好处是将页面用到的小图片合并到一张大图中，然后使用"),R,s("重新定位，这样节省了 HTTP 的请求数。")]),$,n("p",null,[s("首先安装 "),n("a",H,[s("postcss-sprites"),e(a)])]),J,n("blockquote",null,[n("p",null,[s("Tips：postcss-sprites 安装需要安装"),n("a",z,[s("phantomjs"),e(a)]),s("可能需要正确上网。")])]),I,n("p",null,[s("对 JSON 的支持实际上是内置的，类似于 Node.js，这意味着"),O,s("导入数据默认情况将起作用。要导入 CSV，TSV 和 XML，可以使用"),n("a",U,[s("csv-loader"),e(a)]),s("和"),n("a",X,[s("xml-loader"),e(a)]),s("。")]),F])}const Z=t(g,[["render",A],["__file","index-12.html.vue"]]);export{Z as default};
