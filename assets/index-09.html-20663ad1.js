import{_ as e,p as a,q as i,a1 as s}from"./framework-e8cb8151.js";const t="/assets/image-20230728150630652-bfaa0de0.png",p="/assets/image-20230728150642240-514b44e5.png",c="/assets/image-20230728150650618-d1ff3fec.png",r="/assets/image-20230728150806652-0b9f0f38.png",d="/assets/image-20230728150901372-b7c462d6.png",o="/assets/image-20230728150911121-480bf948.png",n="/assets/image-20230728150919452-b17574eb.png",m="/assets/image-20230728150928504-69809970.png",g="/assets/image-20230728150936416-170eb50e.png",h="/assets/image-20230728150945699-28522d5f.png",_="/assets/image-20230728150956129-d3c7c339.png",l="/assets/image-20230728151004313-2b2bb028.png",f="/assets/image-20230728151026768-058d4fc5.png",b="/assets/image-20230728151038025-dd44a237.png",u="/assets/image-20230728151047443-e4aa296b.png",x="/assets/image-20230728151100291-6ffd18d6.png",G="/assets/image-20230728151112181-693e8a6c.png",v="/assets/image-20230728151124828-2a9d0c4f.png",k="/assets/image-20230728151133926-e349e406.png",T="/assets/image-20230728151143554-6a5bc45d.png",w="/assets/image-20230728151156749-431aa638.png",q="/assets/image-20230728151210533-d32db415.png",B={},E=s(`<h1 id="_09-图形工具使用-各系统通过图形管理git代码仓库" tabindex="-1"><a class="header-anchor" href="#_09-图形工具使用-各系统通过图形管理git代码仓库" aria-hidden="true">#</a> 09-图形工具使用：各系统通过图形管理git代码仓库</h1><p><img src="https://img4.mukewang.com/5d9bf70f0001fe8406400359.jpg" alt="img"></p><blockquote><p>我们有力的道德就是通过奋斗取得物质上的成功；这种道德既适用于国家，也适用于个人。 ——罗素</p></blockquote><p>在 Windows 中很多人都习惯使用图形化操作，在这一节中，我教大家怎么使用图形化来操作 Git，主要包含图形化工具安装、图形化的常用操作，经过前面章节的知识后，图形化操作理解起来就非常简单；</p><p>大部分般情况下，我依然并不推荐大家使用图形化操作，因为命令行操作用习惯之后，操作速度会更快。</p><h2 id="_9-1-安装软件" tabindex="-1"><a class="header-anchor" href="#_9-1-安装软件" aria-hidden="true">#</a> 9.1 安装软件</h2><p>首先，我们需要安装一个图形化的 Git 管理工具，在 Windows 中 <code>TortoiseGit</code> 非常流行，因此，我们在这节中主要使用它来进行讲解，主要包含主程序安装、配置向导、软件汉化三个部分。</p><p>下载地址：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://download.tortoisegit.org/tgit/2.8.0.0/TortoiseGit-2.8.0.0-64bit.msi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-1-1-主程序安装" tabindex="-1"><a class="header-anchor" href="#_9-1-1-主程序安装" aria-hidden="true">#</a> 9.1.1 主程序安装</h3><p>打开安装包，可以看到一个安装向导，点击 <code>next</code> 按钮即可，如下图所示</p><p><img src="`+t+'" alt="image-20230728150630652"></p><p>当点击下一步之后，会进入一个确认安装位置界面，我一般喜欢将软件安装到 D 盘当中，你也可以默认，然后单击 <code>next</code> 按钮，如下图所示：</p><p><img src="'+p+'" alt="image-20230728150642240"></p><p>在选择软件安装位置，点击下一步之后，就会开始进行安装，安装的过程大概在 30 秒作业，具体时间会根据你电脑的 CPU 和硬盘速度所决定，如下图所示：</p><p><img src="'+c+'" alt="image-20230728150650618"></p><h3 id="_9-1-2-配置向导" tabindex="-1"><a class="header-anchor" href="#_9-1-2-配置向导" aria-hidden="true">#</a> 9.1.2 配置向导</h3><p>当软件自己安装完成之后，就会进入配置向导页面，在这个页面当中会让你选择语言，但因为你还没有安装语言包，所以其实只有一个 <code>English</code> 可以选择，如下图所示</p><p><img src="'+r+'" alt="image-20230728150806652"></p><p>在上图点击下一步之后，又会出现一些提示信息，无需理会它直接点击下一步，如下图所示：</p><p><img src="'+d+'" alt="image-20230728150901372"></p><p>接着会进入一个关键的页面，小乌龟是基于 Git 的，所以这里需要你选择 Git 的安装位置，不过一般他会自动识别 Git 目录的，如下图所示</p><p><img src="'+o+'" alt="image-20230728150911121"></p><p>在前面，我们学过使用命令配置昵称和邮箱，使用图形界面也同样会让你输入昵称和邮箱，如下图所示</p><p><img src="'+n+'" alt="image-20230728150919452"></p><p>接着，会让你配置一些权限认证方式，这里你可以忽略它，直接点击下一步即可，如下图所示</p><p><img src="'+m+'" alt="image-20230728150928504"></p><h3 id="_9-1-3-软件汉化" tabindex="-1"><a class="header-anchor" href="#_9-1-3-软件汉化" aria-hidden="true">#</a> 9.1.3 软件汉化</h3><p>打开汉化的可执行文件之后，会弹出一个欢迎页，点击 <code>下一步</code> 按钮即可，如下图所示</p><p><img src="'+g+'" alt="image-20230728150936416"></p><p>在欢迎页点击下一步之后，会自动进行汉化，汉化完成之后会提示你汉化完成，如下图所示 <img src="'+h+'" alt="image-20230728150945699"></p><h2 id="_9-2-图形基本操作" tabindex="-1"><a class="header-anchor" href="#_9-2-图形基本操作" aria-hidden="true">#</a> 9.2 图形基本操作</h2><p>Git 的功能比较多，这里讲解图形化的几个常规操作，主要是拉取代码、提交代码、推送代码。</p><h3 id="_9-2-1-克隆-clone-代码" tabindex="-1"><a class="header-anchor" href="#_9-2-1-克隆-clone-代码" aria-hidden="true">#</a> 9.2.1 克隆 (clone) 代码</h3><p>在一个文件里面单击鼠标右键，可以看到，右键菜单当中多出了三个选项，其中有一个 <code>Git 克隆...</code>，这个其实对应的就是命令行中的 <code>git clone</code>，如下图所示</p><p><img src="'+_+'" alt="image-20230728150956129"></p><p>在右键菜单中，选择 <code>git clone</code> 之后，会弹出一个确认框，再确认框中会显示你要拉去仓库的地址，以及本地存放路径等相关信息（如果你剪贴板中有一个 Git 地址，它会自动将地址放入确认框中)，如下图所示</p><p><img src="'+l+'" alt="image-20230728151004313"></p><p>在确认框中点击<code>确定</code>按钮，Git 就会开始工作，如果你是通过 HTTPS 拉取，并且第一次去拉取会弹出一个验证框，让你输入用户名和密码，如下图所示：</p><p><img src="'+f+'" alt="image-20230728151026768"></p><p>在弹出的认证框中，输入你的认证用户名和密码，然后点击确定，就完成了拉取步骤，如下图所示：</p><p><img src="'+b+'" alt="image-20230728151038025"></p><p>在图中可以看到成功的提示，以及整个克隆代码的时间。</p><h3 id="_9-2-2-拉取-pull-代码" tabindex="-1"><a class="header-anchor" href="#_9-2-2-拉取-pull-代码" aria-hidden="true">#</a> 9.2.2 拉取 (pull) 代码</h3><p><img src="'+u+'" alt="image-20230728151047443"></p><p><img src="'+x+'" alt="image-20230728151100291"></p><p><img src="'+G+'" alt="image-20230728151112181"></p><h3 id="_9-2-3-提交-commit-代码" tabindex="-1"><a class="header-anchor" href="#_9-2-3-提交-commit-代码" aria-hidden="true">#</a> 9.2.3 提交 (commit) 代码</h3><p>在修改文件后，如果我们在命令行中提交代码的命令为 <code>git commit 文件名 -m &#39;备注&#39;</code>, 在图形操作中则是在 Git 的工作目录中，单击鼠标右键，然后在弹出的菜单中选择 <code>Git 提交...</code> 选项，如下图所示：</p><p><img src="'+v+'" alt="image-20230728151124828"></p><p>接着会出现一个确认框，然你输出注释，下面还有一个变更列表，在变更列表中你可以勾选需要提交的文件，如下图所示：</p><p><img src="'+k+'" alt="image-20230728151133926"></p><h3 id="_9-2-4-推送-push-代码" tabindex="-1"><a class="header-anchor" href="#_9-2-4-推送-push-代码" aria-hidden="true">#</a> 9.2.4 推送 (push) 代码</h3><p>在点击<code>提交</code>按钮之后，会看到一个提交成功的输出信息，在下方还有一个<code>推送</code>按钮，点击这个按钮就会将代码推送到远端仓库，如下图所示</p><p><img src="'+T+'" alt="image-20230728151143554"></p><h3 id="_9-3-查看历史修改" tabindex="-1"><a class="header-anchor" href="#_9-3-查看历史修改" aria-hidden="true">#</a> 9.3 查看历史修改</h3><p>Git 命令行与图形界面操作我觉得大部分情况下都是命令行比较好用，但也有少数几个功能图形化更加有优势，比如查看仓库历史改动情况用命令行操作起来比较繁琐，而图形化操作就比较方便；下面介绍主要介绍怎么使用图形化查看提交记录和对比代码差异。</p><h3 id="_9-3-1-提交记录" tabindex="-1"><a class="header-anchor" href="#_9-3-1-提交记录" aria-hidden="true">#</a> 9.3.1 提交记录</h3><p>有时候你提交了代码，单想回过头来看下刚查提交了哪几个文件，这个时候你可以在代码仓库中，单击鼠标右键，在 Git 的选项中找到 <code>显示日志</code> 这个选项，如下图所示</p><p><img src="'+w+'" alt="image-20230728151156749"></p><h3 id="_9-3-2-查看详情" tabindex="-1"><a class="header-anchor" href="#_9-3-2-查看详情" aria-hidden="true">#</a> 9.3.2 查看详情</h3><p>点击显示日志之后，会弹出一个窗口，在窗口主要有两部分内容，提交日志，和变动详情如下图所示</p><p><img src="'+q+'" alt="image-20230728151210533"></p><p>在图中可以看到提交记录中会显示操作类型、备注信息、作者、日期等信息，在下方的窗口中则是当前选中的提交记录改动详情。</p><h2 id="_9-4-小结" tabindex="-1"><a class="header-anchor" href="#_9-4-小结" aria-hidden="true">#</a> 9.4 小结</h2><p>在这一节中主要讲到了如何安装 Git 的图形化工具、以及工具的常用操作方式，有以下几点需要注意：</p><ol><li>安装 TortoiseGit 工具之前需要先安装 Git</li><li>图形化工具操作速度，不如命令行操作</li><li>比较适合用于最终历史改动记录</li></ol>',67),P=[E];function S(W,j){return a(),i("div",null,P)}const D=e(B,[["render",S],["__file","index-09.html.vue"]]);export{D as default};
