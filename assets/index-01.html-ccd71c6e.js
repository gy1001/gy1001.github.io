import{_ as e,M as o,p as l,q as c,R as s,t as n,N as t,a1 as p}from"./framework-e8cb8151.js";const i={},u=p(`<h1 id="_01-框架设计前瞻-框架设计的基本概念" tabindex="-1"><a class="header-anchor" href="#_01-框架设计前瞻-框架设计的基本概念" aria-hidden="true">#</a> 01-框架设计前瞻--框架设计的基本概念</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01: 前言</h2><p>在了解 Vue3 框架设计之前，我们需要做两件事情，而这两件事情也是本章的主要内容</p><ol><li>我们需要同步并明确一些词汇的概念，比如：<code>声明式</code>、<code>命令式</code>、<code>运行时</code>、<code>编译时</code>... 等。这些词汇在后面的框架设计中被经常涉及到</li><li>我们需要了解一些关于<strong>前端框架</strong>的一些基础的改变，框架的设计原则，开发者开发体验原则，还有一些同学比较关注的 <strong>vue3 中 ts 支持友好</strong>的问题。以此来帮助大家解决一些固有的疑惑，从而揭开 vue 神秘的面纱 let us begin</li></ol><h2 id="_02-编程范式之命令式编程" tabindex="-1"><a class="header-anchor" href="#_02-编程范式之命令式编程" aria-hidden="true">#</a> 02: 编程范式之命令式编程</h2><p>针对目前的前端开发规范，主要存在两种<strong>编程范式</strong></p><ol><li>命令式编程</li><li>声明式编程 这两种<strong>范式</strong>一般是相对来说的</li></ol><h3 id="命令式" tabindex="-1"><a class="header-anchor" href="#命令式" aria-hidden="true">#</a> 命令式</h3><p>什么叫做命令式呢？</p><blockquote><p>张三的妈妈让张三去买酱油，</p></blockquote><p>那么张三会怎么做呢？</p><blockquote><ol><li>张三拿起钱</li><li>打开门</li><li>下了楼</li><li>到商店</li><li>拿钱买酱油</li><li>回到家</li></ol></blockquote><p>以上的流程详细的描述了，张三在买酱油的过程中，每一步都做了什么。那么这样一种：<strong>详细描述做事过程</strong>的方式就可以被叫做<strong>命令式</strong></p><p>那么如果把这样的方式放在具体的代码之中，又应该怎么做呢？</p><p>我们来看这样的一个事情</p><blockquote><p>在指定的 div 中展示 &quot;hello world&quot;</p><p>那么如果想要完成这样的事情，通过命令式的方式如何实现呢？</p><p>我们知道命令式的核心在于：<strong>关注过程</strong></p><p>所以，以上事情通过命令式实现则可得出以下逻辑代码</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.获取到指定的div</span>
<span class="token keyword">const</span> divEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 为该 div 设置 innerHTML 为 hello world</span>
divEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码虽然只有两步，但是它清楚的描述了：<strong>完成这件事情，所需要经历的过程</strong></p><p>那么假如我们所做的事情，变得更加复杂了，则整个过程也会显得更加复杂</p><p>比如：</p><blockquote><p>为指定的 div 字元素的 div 子元素的 p 标签，展示变量 msg</p></blockquote><p>那么通过命令式完成以上功能，则会得出如下逻辑与代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 获取到第一层的 div</span>
<span class="token keyword">const</span> divEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div#app&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 获取它的子  div</span>
<span class="token keyword">const</span> subDivEle <span class="token operator">=</span> divEle<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 获取第三层的 p</span>
<span class="token keyword">const</span> subPEl <span class="token operator">=</span> subDivEle<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 4. 定义变量 msg</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token comment">// 5. 设置 p 元素的 innerHTML</span>
subPEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么通过以上例子，相信大家可以对命令式的概念有了一个基础的认识</p><p>最后做一个总结，什么叫做命令式呢？</p><p>命令式是：<strong>关注过程</strong>的一种编程范式，他描述了完成一个功能的<strong>详细逻辑与步骤</strong></p><h2 id="_03-编程范式之声明式编程" tabindex="-1"><a class="header-anchor" href="#_03-编程范式之声明式编程" aria-hidden="true">#</a> 03：编程范式之声明式编程</h2><p>针对于声明式而言，大家其实都是非常熟悉的 比如以下代码，就是一个典型的 <strong>声明式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就是 Vue 中非常常见的双大括号语法。所以我们在写 Vue <strong>模板语法</strong>的时候，其实一直写的就是 <strong>声明式</strong>编程</p><p>那么声明式编程具体指的是什么意思呢？</p><p>还以刚才的例子为例</p><blockquote><p>张三的妈妈让张三去买酱油</p></blockquote><p>那么张三会怎么做呢？</p><blockquote><ol><li>张三拿起钱</li><li>打开门</li><li>下了楼</li><li>到商店</li><li>拿钱买酱油</li><li>回到家</li></ol></blockquote><p>在这个例子中，我们说：张三所做的事情就是 命令式， 那么张三妈妈做的事情就是<strong>声明式</strong></p><p>在这样一个事情中，张三妈妈只是发布了一个声明，她并不关心张三如何去买的酱油，只关心最后的结果</p><p>所以说，所谓的声明式指的是：<strong>不关注过程，只关注结果</strong>的范式</p><p>同样，如果我们通过代码形式来表示的话，以下例子</p><blockquote><p>为指定的 div 字元素的 div 子元素的 p 标签，展示变量 msg</p></blockquote><p>将会得到以下代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再这样的代码中，我们完全不关心 msg 是怎么被渲染到 p 标签中的，我们所关心的只是：在 p 标签中，渲染指定 文本而已。</p><p>最后做一个总结，什么叫做声明式呢？</p><p>声明式是：<strong>关注结果</strong>的一种编程式，他 <strong>并不关心</strong>完成一个功能的<strong>详细逻辑与步骤</strong>(注意：这并不是意味着声明式不需要过程！声明式只是把过程进行了隐藏而已)</p><h2 id="_04-命令式-vs-声明式" tabindex="-1"><a class="header-anchor" href="#_04-命令式-vs-声明式" aria-hidden="true">#</a> 04：命令式 VS 声明式</h2><p>那么这个章节我们来对比一下，是声明式好，还是命令式更好？</p><p>那么想要弄清楚这个问题，我们首先要先搞清楚，评价一种编程范式好还是不好的标准是什么？</p><p>通常情况下，我们评价一个编程范式好还是不好的标准 会从两个方面入手：</p><ol><li>性能</li><li>可维护性</li></ol><p>那么，接下来我们就通过这两个方面，来分析一下命令式和声明式</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>性能一直是我们在进行项目开发时特别关注的方向，那么我们通常如何来表述一个功能的性能好坏呢？</p><p>我们来看一个例子</p><blockquote><p>在指定的 div 中展示 &quot;hello world&quot;</p></blockquote><p>那么针对于这个需求而言，最简单的代码就是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span> <span class="token comment">// 耗时比作为 1 （PS: 耗时越少，性能越强）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们来看声明式，声明式的代码为</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
// 耗时为 1 + n, 将 msg 修改为 hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么：<strong>已知修改 text 最简单的方式就是 innerText</strong>, 所以说无论声明式的代码是如何实现的文本切换，那么它的耗时一定是 &gt; 1 的，我们把它比作 1+n</p><p>所以，由以上举例可以得到：<strong>命令式的性能</strong> &gt; <strong>声明式的性能</strong></p><h3 id="可维护性" tabindex="-1"><a class="header-anchor" href="#可维护性" aria-hidden="true">#</a> 可维护性</h3><p>可维护性代表的维度非常多，但是通常情况下，所谓的可维护性指的是：对代码可以方便 <strong>阅读、修改、删除、增加</strong></p><p>那么想要达到这个目的，说白了就是 <strong>代码的逻辑要足够简单</strong>，让人一看就懂</p><p>那么明确了这个概念，我们来看下声明式和命令式在同一段业务下的代码逻辑</p><blockquote><p>命令式</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 获取到第一层的 div</span>
<span class="token keyword">const</span> divEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div#app&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 获取它的子  div</span>
<span class="token keyword">const</span> subDivEle <span class="token operator">=</span> divEle<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 获取第三层的 p</span>
<span class="token keyword">const</span> subPEl <span class="token operator">=</span> subDivEle<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 4. 定义变量 msg</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token comment">// 5. 设置 p 元素的 innerHTML</span>
subPEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>声明式</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比以上代码而言，<strong>声明式</strong>代码更加利于阅读，所以也更加利于维护</p><p>所以，由以上举例子可知，<strong>命令式的可维护性</strong> &lt; <strong>声明式的可维护性</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h3><p>由以上分析可知两点内容：</p><ol><li><strong>命令式的性能</strong> &gt; <strong>声明式的性能</strong></li><li><strong>命令式的可维护性</strong> &lt; <strong>声明式的可维护性</strong></li></ol><p>那么双方各有优劣，我们在日常开发中应该使用那种范式呢？</p><p>想要明白这点，我们还需要学习更多的知识</p><h2 id="_05-企业应用的开发与设计原则" tabindex="-1"><a class="header-anchor" href="#_05-企业应用的开发与设计原则" aria-hidden="true">#</a> 05：企业应用的开发与设计原则</h2><p>企业引用的设计原则，想要描述起来比较复杂，为什么呢？</p><p>因为对于 <strong>不同的企业类型</strong>(大厂、中小长、人员外包、项目外包),不同的项目类型(前台、后台、中台)来说，对应的企业应用设计原则上可能会存在一些差异</p><p>所以我们这里所做的描述，会抛弃一些细微的差异，仅仅抓住核心的重点来进行阐述</p><p>无论什么类型的企业，也无论他们在开发什么类型的项目，那么最关注的点无非就是两个</p><ol><li>项目成本</li><li>开发体验</li></ol><h3 id="项目成本" tabindex="-1"><a class="header-anchor" href="#项目成本" aria-hidden="true">#</a> 项目成本</h3><p>项目成本非常好理解，他决定了一个公司完成 ”这件事“所付出的代价，从而直接决定了这个项目是否可以盈利（大厂的烧钱项目除外）</p><p>那么既然项目成本如此重要，大家可以思考一下，决定项目成本的又是什么</p><hr><p>没错，就是你的<strong>开发周期</strong></p><p>开发周期越长，所付出的人员成本越高，从而导致项目成本变得越高</p><p>通过前面的分析我们可知，声明式的开发范式在<strong>可维护性</strong>上，是<strong>大于</strong>命令式的。</p><p>而可维护性从一定程度上就决定了，它会使项目的：<strong>开发周期变短</strong>、<strong>升级变得更容易</strong> 从而大量节约开发成本</p><p>所以这就是为什么 Vue 会变得越来越受欢迎的原因</p><h3 id="开发体验" tabindex="-1"><a class="header-anchor" href="#开发体验" aria-hidden="true">#</a> 开发体验</h3><p>决定开发体验的核心要素，主要就是在开发时和阅读时的难度，这个被叫做：<strong>心智负担</strong></p><p>心智负担可以作为衡量开发难易度的一个标准，心智负担高则证明开发的难度较高，心智负担低则表示开发的难度较低，开发更加舒服</p><p>那么根据我们之前所说，声明式的开发难度明显低于命令式的开发难度</p><p>所以，对于开发体验而言，声明式的开发体验更好，也就是 <strong>心智负担更低</strong></p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>综合本小节所描述的内容，在企业级项目开发中，<strong>声明式明显优于命令式</strong></p><p>但是有人可能会说：“你说的是不是太片面了？命令式一无是处吗？” “命令式在性能上不是优于声明式吗？，项目开发者不考虑性能吗？”</p><p>当然不是，如果大家也有疑惑，请继续往下看</p><h2 id="_06-为什么说框架的设计过程其实是一个不断取舍的过程" tabindex="-1"><a class="header-anchor" href="#_06-为什么说框架的设计过程其实是一个不断取舍的过程" aria-hidden="true">#</a> 06：为什么说框架的设计过程其实是一个不断取舍的过程</h2><p>Vue 作者尤大 再一次演讲中说到：<strong>框架的设计过程其实是一个不断取舍的过程</strong></p><p>这句话代表什么意思呢？</p><p>想要搞明白这个，那么再来明确一下之前说过的概念：</p><ol><li>命令式的性能 &gt; 声明式的性能</li><li>命令式的可维护性 &lt; 声明式的可维护性</li><li>声明式的框架本质上是由命令式的代码来实现的</li><li>企业项目开发时，大多使用声明式框架</li></ol><p>当我们明确好了这样的一个问题之后，那么我们接下来思考一个问题：<strong>框架的开发与设计原则是什么呢？</strong></p><p>我们知道对于 Vue 而言，当我们使用它的是通过 <strong>声明式</strong>的方式进行使用，但是对于 Vue 内部而言，是通过 <strong>命令式</strong> 来进行的实现</p><p>所以我们可以理解为：<strong>Vue 封装了命令式的逻辑，而对外暴露了声明式的接口</strong></p><p>那么，既然如此，我们明知 <strong>命令式的性能</strong> &gt; <strong>声明式的性能</strong>, 那么 Vue 为什么还要选择声明式的方案呢？</p><p>其实原因非常的简单，那就是因为：<strong>命令式的可维护性</strong> &lt; <strong>声明式的可维护性</strong></p><p>以下面这个例子为例</p><blockquote><p>为指定的 div 字元素的 div 子元素的 p 标签，展示变量 msg</p></blockquote><p>对于开发者而言，不需要关注实现过程，只需要关注最终的结果即可</p><p>而对于 Vue 而言，他所需要做的就是:封装命令式逻辑，同时<strong>尽可能的减少性能的损耗!<strong>它需要再 <strong>性能</strong>与 <strong>可维护性</strong>之间找到一个平衡点，从而找到一个</strong>可维护性更好，性能相对更优</strong>的一个点</p><p>所以，对于 Vue 而言，它的设计原则就是：<strong>在保证可维护性的基础上，尽可能的减少性能的损耗</strong></p><p>那么回到标题，为什么说：为什么说框架的设计过程其实是一个不断取舍的过程</p><p>答案就呼之欲出了，因为：</p><blockquote><p>我们需要在可维护性和性能之间，找到一个平衡点，在保证可维护性的基础上，尽可能的减少性能的损耗</p><p>所以框架的设计其实是一个不断在 <strong>可维护性和性能</strong> 之间进行取舍的过程</p></blockquote><h2 id="_07-vue-中的-html-是真实的-html-吗" tabindex="-1"><a class="header-anchor" href="#_07-vue-中的-html-是真实的-html-吗" aria-hidden="true">#</a> 07: .vue 中的 html 是真实的 html 吗</h2><p>本小节思考一个问题：<strong>在.vue 文件中的 template 中写入的 html 是真实的 html 标签节点吗？</strong></p><hr><p>答案是：不是的</p><p>原因非常简单，如果我们写入的事真实的 html 节点，那么对于其中的 v-if v-bind keep-alive 这些东西，浏览器明显是不认识的，所以这些东西理应无法解析</p><p>但是现实中这些指令或者组件被正确解析了，所以 <strong>vue 一定在中间做了什么</strong>，让假的 html 标签节点 被渲染成了 真实的 html 标签节点</p><p>那么，Vue 在中间做了什么事情呢？</p><p>简单来说可以分为两件事（排序按照执行顺序）:</p><ol><li>编译时：<code>compiler</code></li><li>运行时：<code>runtime</code></li></ol>`,127),r={href:"https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#runtime-vs-compile-time-reactivity",target:"_blank",rel:"noopener noreferrer"},k=p('<p>这些概念一共有三个，如果我们想要学习 vue 的框架设计，那么必须要了解它们，它们分别是</p><ol><li>运行时：<code>runtime</code></li><li>编译时：<code>compiler</code></li><li>运行时 + <code>编译时：runtime + compiler</code></li></ol><h2 id="_08-什么是运行时" tabindex="-1"><a class="header-anchor" href="#_08-什么是运行时" aria-hidden="true">#</a> 08: 什么是运行时</h2><p>在 vue3 的源代码中存在一个 runtime-core 文件夹，该文件夹内存放的就是 运行时 的核心代码逻辑</p><p>runtime-core 中对外暴露一个函数，叫做 渲染函数 render</p>',5),d={href:"https://cn.vuejs.org/api/options-rendering.html#render",target:"_blank",rel:"noopener noreferrer"},v=p(`<blockquote><p>有些同学可能看不懂当前代码是什么意思，没有关系，这不重要，后续我们会详细去讲</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>Vue
    <span class="token comment">// 生成 vnode</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 拿到 承载的容器</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，在 Vue 的项目中，我们可以通过 template 渲染 DOM 节点，如下</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello render<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是对于 render 的例子而言，我们并没有使用 template，而是通过一个名字叫做 render 的函数，返回了一个不知道是什么的东西，为什么也可以渲染出 DOM 呢？</p><p>带着这样的问题，我们来看</p><p>我们知道在上面的代码中，存在一个核心函数：渲染函数 render，这个 render 在这里到底做了什么事情呢？</p><p>我们通过一段代码示例来看下</p><blockquote><p>假如有一天你们领导跟你说：我希望你根据以下数据 <code>{ type: &#39;div&#39;, props: { class: &#39;test&#39; },children: &#39;hello render&#39; }</code></p><p>渲染出来这样一个 div: <code>&lt;div class=&quot;test&quot;&gt;hello render&lt;/div&gt;</code></p></blockquote><p>那么针对这样的一个需求你会如何进行实现呢？大家可以在这里先思考一下，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VNode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 创建 render 函数</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据type 生成 element</span>
  <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
  <span class="token comment">// 把 props 中的 class 赋值给 ele 的 className</span>
  ele<span class="token punctuation">.</span>className <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>class
  <span class="token comment">// 把 children 赋值给 ele 的 innerText</span>
  ele<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
  <span class="token comment">// 把 ele 作为子节点插入 body 中</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span>VNode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再这样一个代码中，我们成功的通过一个 render 函数渲染出了对应的 DOM, 和前面的 render 示例类似，它们都是渲染了一个 vnode, 你觉得这样的代码真是 妙极了</p><blockquote><p>但是你的领导用了一段时间你的 render 之后，却说：天天这样写太麻烦了，每次都得写一个复杂的 vnode ,能不能直接让我写<strong>HTML 标签结构的方式</strong>，你来进行渲染呢</p><p>你想了想之后，说：如果是这样的话，那就不是以上 运行时的代码可以解决的</p></blockquote><p>没错，我们刚刚所编写的这样一个&quot;框架&quot;，就是<strong>运行时</strong>的代码框架</p><p>那么最后，我们做一个总结：<strong>运行时可以利用 render 把 vnode 渲染成真是的 dom 节点</strong></p><h2 id="_09-什么是编译时" tabindex="-1"><a class="header-anchor" href="#_09-什么是编译时" aria-hidden="true">#</a> 09: 什么是编译时</h2><p>在上一节中，我们明确了，如果只靠<strong>运行时</strong>,那么是没有办法通过 <strong>HTML 标签结构的方式</strong>来进行渲染的</p><p>那么想要实现这一点，我们就需要借助另外一个东西，就是 <strong>编译时</strong></p><p>VUe 中的编译时，更准确的说法应该是 <strong>编译器</strong>的意思，它的代码主要在于 <code>compiler-core</code>模块下 我们来看如下代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> compiler<span class="token punctuation">,</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>Vue
    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;div class=&quot;test&quot;&gt;hello compiler&lt;/div&gt;
    </span><span class="token template-punctuation string">\`</span></span>
    <span class="token comment">// 利用 compile 函数，生成 render 函数</span>
    <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compiler</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    <span class="token comment">// 创建实例</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 利用 render 函数进行渲染</span>
      <span class="token literal-property property">render</span><span class="token operator">:</span> renderFn<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 挂载</span>
    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于编译器而言，它的主要作用就是：<strong>把 template 中的 html 编译成 render 函数</strong>。然后再利用 <strong>运行时</strong> 通过 render 挂载对应的 DOM</p><p>最后，我们做一个总结：<strong>编译时可以把 html 的节点，编译成 render 函数</strong></p><h2 id="_10-运行时-编译时" tabindex="-1"><a class="header-anchor" href="#_10-运行时-编译时" aria-hidden="true">#</a> 10: 运行时 + 编译时</h2><p>前面两小节我们分别已经了解了 <strong>运行时 和 编译时</strong>, 同时我们也知道了:<strong>vue 是一个运行时 + 编译时的框架</strong></p><blockquote><p>vue 通过 compiler 解析 html 模板，生成 render 函数，然后通过 runtime 解析成 render, 从而挂载真实 dom</p></blockquote><p>那么看到这里有些童鞋就会有疑惑了，既然 <strong>compiler 可以直接解析 html 模板</strong>，那么为什么还要生成 render 函数，然后再去渲染呢？为什么不直接利用 compiler 进行渲染呢？</p><p>即：<strong>为什么 vue 要设计为一个 运行时 + 编译时 的框架呢？</strong></p><p>那么想要弄清楚这个问题，我们就需要知道 <strong>dom 渲染是如何进行的</strong></p><p>对于 dom 而言，可以被分为两个部分</p><ol><li>初次渲染，我们可以把它叫做 <strong>挂载</strong></li><li>更新渲染，我们可以把他叫做 <strong>打补丁</strong></li></ol><h3 id="初次渲染" tabindex="-1"><a class="header-anchor" href="#初次渲染" aria-hidden="true">#</a> 初次渲染</h3><p>那么什么是初次渲染呢？</p><p>当初始 div 的 innerHTML 为空时，</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们在该 div 中渲染如下节点</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这样的一次渲染，就是<strong>初识渲染</strong>，在这样的一个渲染中，我们会生成一个 <code>ul</code> 标签，同时生成 三个 <code>li</code> 标签，并且把他们挂载到 <code>div</code> 中</p><h3 id="更新渲染" tabindex="-1"><a class="header-anchor" href="#更新渲染" aria-hidden="true">#</a> 更新渲染</h3><p>如果此时 ul 标签内部发生了变化</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>li-3</code>上升到了第一位，那么此时大家可以想一下，我们期望浏览器如何来更新这个渲染呢？</p><p>浏览器更新此次渲染无非有两种方式</p><ol><li>删除原有的所有节点，重新渲染新的节点</li><li>删除原位置的 <code>li-3</code> ,在新位置插入 <code>li-3</code></li></ol><p>那么大家觉得这两种方式哪一种更好呢，我们来分析一下</p><ol><li>首先对于第一种方式而言：它的好处在于不需要进行任何的对比，仅仅需要执行 6 次(删除 3 次，重新渲染三次) dom 处理即可</li><li>第二种方式，在逻辑上相对比较复杂，他需要分为两步来做 2.1 对比 <strong>旧节点</strong> 和 <strong>新节点</strong>之间的差异 2.2 根据差异，删除一个<strong>旧节点</strong>,增加一个<strong>新节点</strong></li></ol><p>那么根据以上分析，我们知道了</p><ol><li>第一种方式：会涉及到更多的 dom 操作</li><li>第二种方式：会涉及到 js 计算 + 少量的 DOM 操作</li></ol><p>那么这两种方式，哪一种更快呢？？我们来实验一下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lenth <span class="token operator">=</span> <span class="token number">10000</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;element&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newEle<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;element&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> divList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newEle <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span> <span class="token punctuation">}</span>
  divList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newEle<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果上看， <strong>dom 的操作要比 js 的耗时多得多</strong>,即<strong>dom 操作比 js 更加耗费性能</strong></p><p>那么根据这样的一个结论，回到我们刚才所说的场景中，就可以得出如下结论</p><p><strong>方式一 会比 方式二 更加消耗性能(即：性能更差)</strong></p><p>那么得出这样的结论之后，我们回过头再来看最初的问题：<strong>为什么 vue 要设计成一个 运行时 + 编译时 的框架呢？</strong> 答案</p>`,53),g=s("li",null,[n("针对于 "),s("strong",null,"纯运行时"),n("而言：因为不存在编译器，所以我们只能够提供一个复杂的 js 对象")],-1),m=s("strong",null,"纯编译",-1),b=s("strong",null,"编译时",-1),h={href:"https://cn.vuejs.org/guide/extras/render-function.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.sveltejs.cn/",target:"_blank",rel:"noopener noreferrer"},x=s("li",null,[s("strong",null,"运行时 + 编译时"),n("：比如 vue 或者 react 都是通过这种方式类进行构建的，使其可以在保持灵活性的基础上，尽量的进行性能的优化，从而达到一种平衡")],-1),w=p(`<h2 id="_11-什么是副作用" tabindex="-1"><a class="header-anchor" href="#_11-什么是副作用" aria-hidden="true">#</a> 11：什么是副作用</h2><p>在 vue 的源码中，会大量的涉及到一个概念，就是 <strong>副作用</strong>，所以我们需要先了解一下副作用代表的什么意思</p><p>副作用指的是：当我们<strong>对数据进行 setter 或者 getter 操作时，所产生的一系列后果</strong></p><p>那么具体是什么意思呢？我们分别来说下</p><h3 id="setter" tabindex="-1"><a class="header-anchor" href="#setter" aria-hidden="true">#</a> setter</h3><p><code>setter</code> 所表示的是 <code>赋值</code>操作，比如说，当我们执行以下代码时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>msg <span class="token operator">=</span> <span class="token string">&#39;你好，世界&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候，msg 就触发了一次 <code>setter</code> 的行为</p><p>那么假如说，msg 是一个响应性数据，那么这样的一次数据改变，就会影响到对应的视图改变</p><p>那么我们就可以说，msg 的 setter 行为，触发了一次副租用，导致视图跟随发生了变化</p><h3 id="getter" tabindex="-1"><a class="header-anchor" href="#getter" aria-hidden="true">#</a> getter</h3><p>getter 所表示的就是 取值 操作，比如说，当我们执行如下代码时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> msg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时对于变量 msg 而言，就触发了一次 getter 操作，那么这样的一次取值操作，同样会导致 element 的 innerText 发生改变</p><p>所以我们说，msg 的 getter 行为触发了一次副作用，导致了 element 的 innerText 发生了变化</p><h3 id="副作用会产生多个吗" tabindex="-1"><a class="header-anchor" href="#副作用会产生多个吗" aria-hidden="true">#</a> 副作用会产生多个吗？</h3><p>那么明确了副租用的基本概念以后，那么大家想一想：副租用可以会有多个吗</p><p>答案是：可以的</p><p>举个简单的例子</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>姓名：{{ obj.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>年龄：{{ obj.age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>vaule <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再这样的一个代码中， obj.value 触发了一次 setter 行为，但是会导致两个 p 标签的内容发生变化，也就是产生了两次 副作用</p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><ol><li>副作用指的是：<strong>对数据进行 setter 或者 getter 操作时，所产生的一系列后果</strong></li><li>副作用可能是会有多个的</li></ol><h2 id="vue3-框架设计概述" tabindex="-1"><a class="header-anchor" href="#vue3-框架设计概述" aria-hidden="true">#</a> Vue3 框架设计概述</h2><p>根据前面的学习我们已经知道了</p><ol><li>什么是声明式</li><li>什么是命令式</li><li>什么是运行时</li><li>什么是编译时</li><li>什么是运行时 + 编译时</li><li>同时也知道了框架的设计过程是一个 不断取舍的过程</li></ol><p>那么了解了这些内容之后，下来 Vue3 的一个基本框架设计:</p><p>对于 Vue3 而言，核心大致可以分为三大模块</p><ol><li>响应式：<code>reactivity</code></li><li>运行时：<code>runtime</code></li><li>编译器： <code>compiler</code></li></ol><p>我们可以以以下基本结构来描述一下三者之间的关系</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ proxyTarget.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> proxyTarget <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      proxyTarget<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-所谓良好的额-typescript-支持-是如何提供的" tabindex="-1"><a class="header-anchor" href="#_13-所谓良好的额-typescript-支持-是如何提供的" aria-hidden="true">#</a> 13：所谓良好的额 Typescript 支持，是如何提供的？</h2><p>目前在网上对于 vue3 的讨论是非常多的，我印象中看到类似的如下内容（包括面试中也有人说过）：</p><blockquote><p>说：vue3 对 ts 的支持好，是因为 vue3 本身是使用 ts 编写的（ps:这是一个错误的概念）</p></blockquote><p>所以说才会有这样的一块内容，其目的就是纠正这样一个问题</p><h3 id="良好的-typescript-支持-是如何提供的" tabindex="-1"><a class="header-anchor" href="#良好的-typescript-支持-是如何提供的" aria-hidden="true">#</a> 良好的 Typescript 支持，是如何提供的</h3><p>Typescript（简称:TS）是微软发布的一个 js 的超集，大家可以理解为这是一个包含类型的 Javascript</p><p>我们来看如下通过 ts 来写的一个例子</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用 ts 声明了一个方法，他期望接受两个数字，并且返回两者相加的和</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>s1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> s2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> s1 <span class="token operator">+</span> s2
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 这里会提示错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这样的例子告诉我们：ts 编写的程序 和 ts 类型支持友好是两回事情。如果想要让你的程序拥有更好的 ts 支持，那么你需要做很多额外的事情</p><p>为了 vue 拥有良好的 ts 类型支持，vue 内部做了非常多的事情， 比如如下代码(来自于：packages/runtime-core/scr/componentPublicInstance.ts 这样的代码很多，绝不限于一个文件)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">IsDefaultMixinComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentOptionsMixin</span>
  <span class="token operator">?</span> ComponentOptionsMixin <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span>
    <span class="token operator">?</span> <span class="token boolean">true</span>
    <span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token keyword">type</span> <span class="token class-name">MixinToOptionTypes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentOptionsBase<span class="token operator">&lt;</span>
  <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> <span class="token constant">B</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> <span class="token constant">D</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> <span class="token constant">C</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> <span class="token constant">M</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Mixin<span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Extends<span class="token punctuation">,</span>
  <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Defaults
<span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> OptionTypesType<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Defaults <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
      IntersectionMixin<span class="token operator">&lt;</span>Mixin<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
      IntersectionMixin<span class="token operator">&lt;</span>Extends<span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token comment">// ExtractMixin(map type) is used to resolve circularly references</span>
<span class="token keyword">type</span> <span class="token class-name">ExtractMixin<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  Mixin<span class="token operator">:</span> MixinToOptionTypes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentOptionsMixin</span> <span class="token operator">?</span> <span class="token string">&#39;Mixin&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">IntersectionMixin<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> IsDefaultMixinComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
  <span class="token operator">?</span> OptionTypesType<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> UnionToIntersection<span class="token operator">&lt;</span>ExtractMixin<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span>

<span class="token keyword">type</span> <span class="token class-name">UnwrapMixinsType<span class="token operator">&lt;</span>
  <span class="token constant">T</span><span class="token punctuation">,</span>
  Type <span class="token keyword">extends</span> OptionTypesKeys
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">OptionTypesType</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name">EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">void</span></span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ComponentPublicInstanceConstructor<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> ComponentPublicInstance<span class="token operator">&lt;</span>
    Props<span class="token punctuation">,</span>
    RawBindings<span class="token punctuation">,</span>
    <span class="token constant">D</span><span class="token punctuation">,</span>
    <span class="token constant">C</span><span class="token punctuation">,</span>
    <span class="token constant">M</span>
  <span class="token operator">&gt;</span> <span class="token operator">=</span> ComponentPublicInstance<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  Props <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  RawBindings <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token constant">D</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token constant">C</span> <span class="token keyword">extends</span> ComputedOptions <span class="token operator">=</span> ComputedOptions<span class="token punctuation">,</span>
  <span class="token constant">M</span> <span class="token keyword">extends</span> MethodOptions <span class="token operator">=</span> MethodOptions
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  __isFragment<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">never</span>
  __isTeleport<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">never</span>
  __isSuspense<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">never</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CreateComponentPublicInstance<span class="token operator">&lt;</span>
  <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">D</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">C</span> <span class="token keyword">extends</span> ComputedOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">M</span> <span class="token keyword">extends</span> MethodOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  Mixin <span class="token keyword">extends</span> ComponentOptionsMixin <span class="token operator">=</span> ComponentOptionsMixin<span class="token punctuation">,</span>
  Extends <span class="token keyword">extends</span> ComponentOptionsMixin <span class="token operator">=</span> ComponentOptionsMixin<span class="token punctuation">,</span>
  <span class="token constant">E</span> <span class="token keyword">extends</span> EmitsOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  PublicProps <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">,</span>
  Defaults <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  MakeDefaultsOptional <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token constant">I</span> <span class="token keyword">extends</span> ComponentInjectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  PublicMixin <span class="token operator">=</span> IntersectionMixin<span class="token operator">&lt;</span>Mixin<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> IntersectionMixin<span class="token operator">&lt;</span>Extends<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicP <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;P&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicB <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicD <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicC <span class="token keyword">extends</span> ComputedOptions <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
    EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicM <span class="token keyword">extends</span> MethodOptions <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
    EnsureNonVoid<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  PublicDefaults <span class="token operator">=</span> UnwrapMixinsType<span class="token operator">&lt;</span>PublicMixin<span class="token punctuation">,</span> <span class="token string">&#39;Defaults&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>
    EnsureNonVoid<span class="token operator">&lt;</span>Defaults<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> ComponentPublicInstance<span class="token operator">&lt;</span>
  PublicP<span class="token punctuation">,</span>
  PublicB<span class="token punctuation">,</span>
  PublicD<span class="token punctuation">,</span>
  PublicC<span class="token punctuation">,</span>
  PublicM<span class="token punctuation">,</span>
  <span class="token constant">E</span><span class="token punctuation">,</span>
  PublicProps<span class="token punctuation">,</span>
  PublicDefaults<span class="token punctuation">,</span>
  MakeDefaultsOptional<span class="token punctuation">,</span>
  ComponentOptionsBase<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token punctuation">,</span> Mixin<span class="token punctuation">,</span> Extends<span class="token punctuation">,</span> <span class="token constant">E</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Defaults<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">I</span>
<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些代码的存在的目的只是为了进行更好的 ts 支持，所以说要得到一个良好的 ts 支持，是需要进行非常多的努力的</p><h2 id="_14-总结" tabindex="-1"><a class="header-anchor" href="#_14-总结" aria-hidden="true">#</a> 14：总结</h2><p>在本章节中，我们对整个 vue 框架设计中的一些基本概念都做了一个了解</p><p>明确了如下概念</p><ol><li>命令式</li><li>声明式</li><li>心智负担</li><li>框架设计于取舍之间的关系</li><li>运行时</li><li>编译时</li><li>运行时 + 编译时</li><li>副作用</li><li><code>reactivity</code> <code>runtime</code> <code>compiler</code> 三者之间的运行关系</li><li>扩展：良好的 ts 支持</li></ol><p>当我们把这些基本概念了解清楚以后，那么下一章我们就可以开始构建我们的 <code>vue3</code>框架了</p>`,48);function q(f,_){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,s("p",null,[n("这两个东西对于大家而言，可能比较陌生，但是在 "),s("a",r,[n("Vue 官网"),t(a)]),n("中就提到了这几个概念")]),k,s("p",null,[n("我们可以通过 "),s("a",d,[n("render"),t(a)]),n(" 代替 template 来完成 DOM 的渲染")]),v,s("ol",null,[g,s("li",null,[n("针对于 "),m,n("而言：因为缺少运行时，所以它只能把分析差异的操作，放到"),b,n("进行，同样因为省略了运行时，所以速度可能会更快。但是这种方式将损失灵活性（具体查看第六章：虚拟 DOM，或者点击"),s("a",h,[n("这里"),t(a)]),n("查看官方示例） 比如 "),s("a",y,[n("svelte"),t(a)]),n("，他就是一个纯编译时的框架，但是它的实际运行速度可能达不到理论上的速度")]),x]),w])}const T=e(i,[["render",q],["__file","index-01.html.vue"]]);export{T as default};
