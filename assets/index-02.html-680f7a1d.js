import{_ as t,M as o,p as c,q as d,R as e,t as i,N as a,a1 as r}from"./framework-e8cb8151.js";const n={},h=r('<h1 id="_02-场景二-前端工程化如何入门到进阶" tabindex="-1"><a class="header-anchor" href="#_02-场景二-前端工程化如何入门到进阶" aria-hidden="true">#</a> 02-场景二：前端工程化如何入门到进阶？</h1><blockquote><p>随着前端工程的复杂度变高，现在前端工程化已经是绕不过去的坎了。本章带领大家全面概览前端工程化工具发展现状，了解各个工具的应用场景，掌握基础的 webpack，gulp 等脚手架及 CLI 工具的核心概念，打下工程化基础，转变开发思维。从重复劳动中解放，以不变应万变。</p></blockquote><h2 id="_01-什么是前端工程化" tabindex="-1"><a class="header-anchor" href="#_01-什么是前端工程化" aria-hidden="true">#</a> 01: 什么是前端工程化？</h2><p><strong>前端工程化</strong>是指将前端开发的流程<strong>规范化、标准化</strong>，包括开发流程、技术选型、代码规范、构建发布等，用于提升前端工程师的开发效率和代码质量。</p><h3 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h3><ul><li>需求分析</li><li>版本控制</li><li>缺陷管理</li><li>文档管理</li><li>自动化</li><li>性能检测</li><li>发布部署</li><li>…</li></ul><h3 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h3><ul><li>UI 框架</li><li>JS 框架</li></ul><h3 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范" aria-hidden="true">#</a> 代码规范</h3><ul><li>标准 <ul><li>Standard</li><li>aribnb</li><li>Prettier</li></ul></li><li>公司 <ul><li>谷歌、百度</li><li>腾讯、美团</li><li>饿了么</li></ul></li><li>模块化</li></ul><h3 id="构建发布" tabindex="-1"><a class="header-anchor" href="#构建发布" aria-hidden="true">#</a> 构建发布</h3><ul><li>Jekins</li><li>Webpack</li><li>Gulp</li><li>Yarn</li><li>Docker</li><li>Rancher</li><li>Kubernetes</li><li>Harbor</li><li>ECS</li><li>…</li></ul><h3 id="为什么要前端工程化" tabindex="-1"><a class="header-anchor" href="#为什么要前端工程化" aria-hidden="true">#</a> 为什么要前端工程化？</h3><ul><li>复杂度高：前端项目的多功能、多页面、多状态、多系统</li><li>规模大：团队开发、多人协作、代码质量管理</li><li>要求高：页面性能优化（CDN/异步加载/请求合并），CSS 兼容性、单页面应用、服务端渲染。。。</li></ul><h3 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做" aria-hidden="true">#</a> 怎么做</h3><ul><li>从业务着手 <ul><li>简单的单页面应用，使用 gulp 打包 + 同步工具实现开发全流程</li></ul></li><li>从复杂程度考虑 <ul><li><code>jekins</code>、<code>git/gitlab</code>、<code>webpack</code>、<code>React/Vue/Angular</code></li></ul></li><li>从一致向未知扩展 <ul><li>不同的技术点有不同的适应点，选择合适的才是最好的</li></ul></li><li>考虑 <ul><li>前后端技术是否更好的融合</li><li>前后端分离，接口的安全性</li><li>vue 或者 react 是否适合制作静态页面</li><li>php 是否更好的集合</li></ul></li></ul><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><ul><li>组件化、脚手架、工程 <code>ClI</code> 工具</li><li><code>git flow</code></li><li><code>webpack</code></li><li><code>Jekins + Docker</code></li></ul><h2 id="_02-webpack-五大核心概念" tabindex="-1"><a class="header-anchor" href="#_02-webpack-五大核心概念" aria-hidden="true">#</a> 02：webpack 五大核心概念</h2><blockquote><p>grunt gulp rollup 等</p></blockquote><h2 id="_03-脚手架及-cli-工具" tabindex="-1"><a class="header-anchor" href="#_03-脚手架及-cli-工具" aria-hidden="true">#</a> 03：脚手架及 CLI 工具</h2>',21),u={href:"https://cli.vuejs.org/zh/guide/",target:"_blank",rel:"noopener noreferrer"},s={href:"https://create-react-app.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},p=r('<h2 id="_04-cli-脚手架工作原理" tabindex="-1"><a class="header-anchor" href="#_04-cli-脚手架工作原理" aria-hidden="true">#</a> 04：CLI 脚手架工作原理</h2><p>什么是脚手架？</p><blockquote><p>脚手架是为了保证各施工过程顺利进行而搭设的工作平台。——百度百科</p></blockquote><p>下面看一段 vue-cli 的官方解释：</p><blockquote><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，Vue CLI 致力于将 Vue 生态中的 <strong>工具基础标准化</strong>,。它确保了各种构建工具能够基于智能的<strong>默认配置</strong>, 即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p></blockquote><p>简单来说，脚手架就是「<strong>为了减少重复性工作而做的工具</strong>」</p><h3 id="基本组成" tabindex="-1"><a class="header-anchor" href="#基本组成" aria-hidden="true">#</a> 基本组成</h3><p>通常来说，cli 工具都必须用到下面的一些插件。</p><ul><li>commander：作用：解析参数</li><li>inquirer：作用：交互式命令作用</li><li>download-git-report：作用：在官网上下载模板</li><li>chalk：作用：在命令行增加色彩</li><li>metalsmith：作用：读取文件，实现模板渲染</li><li>consoledate：作用：统一的模板引擎（比如：对 ejs 的解析）</li></ul>',9);function b(_,k){const l=o("ExternalLinkIcon");return c(),d("div",null,[h,e("ul",null,[e("li",null,[e("a",u,[i("Vue-cli"),a(l)])]),e("li",null,[e("a",s,[i("Create-react-app"),a(l)])])]),p])}const g=t(n,[["render",b],["__file","index-02.html.vue"]]);export{g as default};
