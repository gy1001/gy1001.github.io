import{_ as t,M as e,p as o,q as c,R as s,t as n,N as l,a1 as a}from"./framework-e8cb8151.js";const i="/assets/image-20230808133646185-57bd0c04.png",u={},r=a('<h1 id="_04-es6-中可能遇到的知识点" tabindex="-1"><a class="header-anchor" href="#_04-es6-中可能遇到的知识点" aria-hidden="true">#</a> 04-ES6 中可能遇到的知识点</h1><p><img src="https://img4.mukewang.com/5d0af9ee00010b9106400359.jpg" alt="img"></p><blockquote><p>青年是学习智慧的时期，中年是付诸实践的时期。—— 卢梭</p></blockquote><p><strong>ES6</strong>（ECMAScript 6，ES2015）原来指的是 ESMA 组织在 2015 年发布的 ECMAScript 2015 标准，以后发布的 ECMAScript 2016 对应 ES7，依此类推。今年发布的 ECMAScript 2019 标准对应的就是 ES10。相比于之后发布的这些版本，ES6 的改变幅度非常大，因此我们通常说的 ES6 广义上也包括 ES5 之后的所有更新。</p><blockquote><p><strong>注意：</strong> 本文属于基础篇，如果你已经对本文相关知识点非常了解，那么可以跳过本文。如果你不够了解，或者了解得还不完整，那么可以通过本文来复习一下 ~</p></blockquote><p>下面介绍几个会在后文设计模式中用到的 ES6 知识点，简单一起过一遍吧。</p>',6),k={href:"https://babeljs.io/repl",target:"_blank",rel:"noopener noreferrer"},d=a('<p><img src="'+i+`" alt="image-20230808133646185"></p><h2 id="_1-let、const" tabindex="-1"><a class="header-anchor" href="#_1-let、const" aria-hidden="true">#</a> 1. let、const</h2><p>一个显而易见特性是 <code>let</code> 声明的变量还可以更改，而 <code>const</code> 一般用来声明常量，声明之后就不能更改了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 报错 TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-作用域差别" tabindex="-1"><a class="header-anchor" href="#_1-1-作用域差别" aria-hidden="true">#</a> 1.1 作用域差别</h3><p>刚学 JavaScript 的时候，我们总是看到类似于「JavaScript 中没有块级作用域，只有函数作用域」的说法。举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token comment">// 期望值：2，输出: 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>i</code> 变量是 <code>var</code> 命令声明的，<code>var</code> 声明的变量的作用域是函数作用域，因此此时 <code>i</code> 变量是在全局范围内都有效，也就是说全局只有一个变量 <code>i</code>，每次循环只是修改<strong>同一个变量</strong> <code>i</code> 的值。虽然函数的定义是在循环中进行，但是每个函数的 <code>i</code> 都指向这个全局唯一的变量 <code>i</code>。在函数执行时，<code>for</code> 循环已经结束，<code>i</code> 最终的值是 <code>4</code>，所以无论执行数组里的哪个函数，结果都是 <code>i</code> 最终的值 <code>4</code>。</p><p>ES6 引入的 <code>let</code>、<code>const</code> 声明的变量是仅在块级作用域中有效：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token comment">// 期望值：2，输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码中，变量 <code>i</code> 是 <code>let</code> 声明的，也就是说 <code>i</code> 只在本轮循环有效，所以每次循环 <code>i</code> 都是一个<strong>新的变量</strong>，最后输出的是 <code>2</code>。</p><p>那如果我们不使用 ES6 的 <code>let</code>、<code>const</code> 怎样去实现？可以使用函数的参数来缓存变量的值，让闭包在执行时索引到的变量为函数作用域中缓存的函数参数变量值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个做法归根结底还是使用函数作用域来变相实现块级作用域，事实上 Babel 编译器也是使用这个做法，我们来看看 Babel 编译的结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 编译前，ES6 语法</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 2</span>

<span class="token comment">// 编译后，Babel 编译后的 ES5 语法</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">_loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">_loop</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">_loop</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Babel 编译后的代码，也是使用了这个做法。</p><h3 id="_1-2-不存在变量提升" tabindex="-1"><a class="header-anchor" href="#_1-2-不存在变量提升" aria-hidden="true">#</a> 1.2 不存在变量提升</h3><p><code>var</code> 命令声明的变量会发生<strong>变量提升</strong>的现象，也就是说变量在声明之前使用，其值为 <code>undefined</code>，<code>function</code> 声明的函数也是有这样的特性。而 <code>let</code>、<code>const</code> 命令声明的变量没有变量提升，如果在声明之前使用，会直接报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var 命令存在变量提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
<span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment">// 1</span>

<span class="token comment">// let、const 命令不存在变量提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span>  <span class="token comment">// 报错 ReferenceError</span>
<span class="token keyword">let</span> boo <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-暂时性死区" tabindex="-1"><a class="header-anchor" href="#_1-3-暂时性死区" aria-hidden="true">#</a> 1.3 暂时性死区</h3><p>在一个块级作用域中对一个变量使用 <code>let</code>、<code>const</code> 声明前，该变量都是不可使用的，这被称为<strong>暂时性死区</strong>（Temporal Dead Zone, TDZ）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tmp <span class="token operator">=</span> <span class="token string">&#39;asd&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 虽然在这之前定义了一个全局变量 tmp，但是块内重新定义了一个 tmp</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错 ReferenceError</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-不允许重复声明" tabindex="-1"><a class="header-anchor" href="#_1-4-不允许重复声明" aria-hidden="true">#</a> 1.4 不允许重复声明</h3><p><code>let</code>、<code>const</code> 命令是不允许重复声明同一个变量的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>  <span class="token comment">// 报错 SyntaxError</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// 因为已经有一个 arg 变量名的形参了</span>
  <span class="token keyword">let</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 报错 SyntaxError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-箭头函数" tabindex="-1"><a class="header-anchor" href="#_2-箭头函数" aria-hidden="true">#</a> 2. 箭头函数</h2><h3 id="_2-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本用法" aria-hidden="true">#</a> 2.1 基本用法</h3><p>ES6 中可以使用箭头函数来定义函数。下面例子中，同名函数的定义是等价的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 基础用法</span>
<span class="token keyword">const</span> <span class="token function-variable function">test1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> …<span class="token punctuation">,</span> 参数<span class="token constant">N</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 函数声明 <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">test1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> …<span class="token punctuation">,</span> 参数<span class="token constant">N</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 函数声明 <span class="token punctuation">}</span>

<span class="token comment">// 当只有一个参数时，圆括号是可选的</span>
<span class="token keyword">const</span> <span class="token function-variable function">test2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">单一参数</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 函数声明 <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">test2</span> <span class="token operator">=</span> <span class="token parameter">单一参数</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 函数声明 <span class="token punctuation">}</span>

<span class="token comment">// 没有参数时，圆括号不能省略</span>
<span class="token keyword">const</span> <span class="token function-variable function">test3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 函数声明 <span class="token punctuation">}</span>

<span class="token comment">// 当函数体只是 return 一个单一表达式时，可以省略花括号和 return 关键词</span>
<span class="token keyword">const</span> test4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> 表达式（单一） <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">test4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 表达式（单一）

<span class="token comment">// 函数体返回对象字面表达式时，如果省略花括号和 return 关键词，返回值需要加括号</span>
<span class="token keyword">const</span> <span class="token function-variable function">test5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">test5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 输出 {foo: &#39;bar&#39;}</span>
<span class="token keyword">const</span> <span class="token function-variable function">test6</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">}</span>    <span class="token comment">// 输出 undefined，大括号被识别为代码块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>参数如果只有一个，可以不加圆括号 <code>()</code>；</li><li>没有参数时，不能省略圆括号 <code>()</code>；</li><li>如果函数体只返回单一表达式，那么函数体可以不使用大括号 <code>{}</code> 和 <code>return</code>，直接写表达式即可；</li><li>在 3 的基础上，如果返回值是一个对象字面量，那么返回值需要加圆括号 <code>()</code>，避免被识别为代码块。</li></ol><h3 id="_2-2-箭头函数中的-this" tabindex="-1"><a class="header-anchor" href="#_2-2-箭头函数中的-this" aria-hidden="true">#</a> 2.2 箭头函数中的 this</h3><p>箭头函数出来之前，函数在执行时才能确定 <code>this</code> 的指向，所以会经常出现闭包中的 <code>this</code> 指向不是期望值的情况。在以前的做法中，如果要给闭包指定 <code>this</code>，可以用 <code>bind、call、apply</code>，或者把 <code>this</code> 值分配给封闭的变量（一般是 <code>that</code>）。箭头函数出来之后，给我们提供了不一样的选择。</p><p>箭头函数不会创建自己的 <code>this</code>，只会从自己定义位置的作用域的上一层直接继承 <code>this</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// this 正确地指向 p 实例</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1s后打印出 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外因为箭头函数没有自己的 <code>this</code> 指针，因此对箭头函数使用 <code>call</code>、<code>apply</code>、<code>bind</code> 时，只能传递函数，不能绑定 <code>this</code>，它们的第一个参数将被忽略：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>param <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">const</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>param<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">func2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>param<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">func1</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">param</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 1</span>
<span class="token function">func2</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">param</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下：</p><ol><li>箭头函数中的 <code>this</code> 就是<strong>定义时所在的对象</strong>，而不是使用时所在的对象；</li><li>无法作为构造函数，不可以使用 <code>new</code> 命令，否则会抛错；</li><li>箭头函数中不存在 <code>arguments</code> 对象，但我们可以通过 Rest 参数来替代；</li><li>箭头函数无法使用 <code>yield</code> 命令，所以不能作为 Generator 函数；</li><li>不可以通过 <code>bind</code>、<code>call</code>、<code>apply</code> 绑定 <code>this</code>，但是可以通过 <code>call</code>、<code>apply</code> 传递参数。</li></ol><h2 id="_3-class-语法" tabindex="-1"><a class="header-anchor" href="#_3-class-语法" aria-hidden="true">#</a> 3. class 语法</h2><p>在 class 语法出来之前，我们一般通过上一章介绍的一些方法，来间接实现面向对象三个要素：封装、继承、多态。ES6 给我们提供了更面向对象（更 OO，Object Oriented）的写法，我们可以通过 <code>class</code> 关键字来定义一个类。</p><p>基本用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5 方式定义一个类</span>
<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kind <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>

Foo<span class="token punctuation">.</span><span class="token function-variable function">staticMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doThis</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">实例方法 kind:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kind <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// ES6 方式定义一个类</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 构造函数 */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kind <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>

  <span class="token comment">/* 静态方法 */</span>
  <span class="token keyword">static</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;静态方法&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

  <span class="token comment">/* 实例方法 */</span>
  <span class="token function">doThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">实例方法 kind:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kind <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 方式实现继承：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 接上</span>
<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token function">doThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">实例方法 type:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> kind:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kind <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
bar<span class="token punctuation">.</span><span class="token function">doThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 实例方法 type:bar kind:foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下：</p><ol><li><code>static</code> 关键字声明的是静态方法，不会被实例继承，只可以直接通过类来调用；</li><li><code>class</code> 没有变量提升，因此必须在定义之后才使用；</li><li><code>constructor</code>为构造函数，子类构造函数中的<code>super</code> 代表父类的构造函数，必须执行一次，否则新建实例时会抛错；</li><li><code>new.target</code> 一般用在构造函数中，返回 <code>new</code> 命令作用于的那个构造函数；</li><li><code>class</code> 用 <code>extends</code> 来实现继承，子类继承父类所有实例方法和属性。</li></ol><h2 id="_4-解构赋值" tabindex="-1"><a class="header-anchor" href="#_4-解构赋值" aria-hidden="true">#</a> 4. 解构赋值</h2><p>ES6 允许按照一定方式，从数组和对象中提取值。本质上这种写法属于<strong>模式匹配</strong>，只要等号两边的模式相同，左边的变量就会被赋予相对应的值。</p><p>数组解构基本用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>          <span class="token comment">// a:1 b:2 c:3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment">// a:1 b:2 c:3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>           <span class="token comment">// a:1 b:3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>           <span class="token comment">// a:1 b:[2, 3]</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span><span class="token operator">...</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>              <span class="token comment">// a:1 b:undefined c:[]</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token comment">// a:null b:4</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>						   <span class="token comment">// a:1 b:4</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span>				 <span class="token comment">// a:1 b:null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>解构不成功，变量的值为 <code>undefined</code>；</li><li><strong>解构可以指定默认值，如果被解构变量的对应位置没有值，即为空，或者值为 <code>undefined</code>，默认值才会生效。</strong></li></ol><p>对象解构基本用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>      <span class="token comment">// a:1 b:2</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> c <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>         <span class="token comment">// c:undefined</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> c <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>     <span class="token comment">// c:4</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> c <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>      <span class="token comment">// c:1</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> e <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>   <span class="token comment">// c:1 e:5</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>            <span class="token comment">// length:2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>解构不成功，变量的值为 <code>undefined</code>；</li><li>解构可以指定默认值，如果被解构变量严格为 <code>undefined</code> 或为空，默认值才会生效；</li><li>如果变量名和属性名不一致，可以赋给其它名字的变量 <code>{a:c}</code>，实际上对象解构赋值 <code>{a}</code> 是简写 <code>{a:a}</code>，对象的解构赋值是先找到同名属性，再赋给对应的变量，真正被赋值的是后者。</li></ol><h2 id="_5-扩展运算符" tabindex="-1"><a class="header-anchor" href="#_5-扩展运算符" aria-hidden="true">#</a> 5. 扩展运算符</h2><p>扩展运算符和 Rest 参数的形式一样 <code>...</code>，作用相当于 Rest 参数的逆运算。它将一个数组转化为逗号分割的参数序列。事实上实现了迭代器（Iterator）接口的对象都可以使用扩展运算符，包括 <code>Array</code>、<code>String</code>、<code>Set</code>、<code>Map</code>、<code>NodeList</code>、<code>arguments</code> 等。</p><p>数组可以使用扩展运算符：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment">// 1 2 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">// 1 2 3 4 5</span>
<span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span>
<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                     <span class="token comment">// [1, 2, 3]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                     <span class="token comment">// arr:[1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象也可以使用扩展运算符，通常被用来合并对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment">// {a: 2, b: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-默认参数" tabindex="-1"><a class="header-anchor" href="#_6-默认参数" aria-hidden="true">#</a> 6. 默认参数</h2><p>ES6 允许给函数的参数设置默认值，如果不传递、或者传递为 <code>undefined</code> 则会采用默认值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>             <span class="token comment">// Hello World</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// Hello World</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// Hello China</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// undefined China</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">)</span>           <span class="token comment">// 报错 SyntaxError</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>         <span class="token comment">// Hello</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token comment">// Hello null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>参数不传递或者传递 <code>undefined</code> 会让参数等于默认值，但是如果参数不是最后一个，不传递参数会报错；</li><li>特别注意，传递 <code>null</code> 不会让函数参数等于默认值。</li></ol><p>默认参数可以和解构赋值结合使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// hello World</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// hello China</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// undefined &quot;China&quot;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                      <span class="token comment">// undefined &quot;World&quot;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// undefined &quot;World&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析一下后两种情况：</p><ol><li>传递参数为 <code>{}</code> 时，因为被解构变量既不为空，也不是 <code>undefined</code>，所以不会使用解构赋值的默认参数 <code>{}</code>。虽然最终形参的赋值过程还是 <code>{x, y = &#39;World&#39;} = {}</code>，但是这里等号右边的空对象是调用时传递的，而不是形参对象的默认值；</li><li>不传参时，即被解构变量为空，那么会使用形参的默认参数 <code>{}</code>，形参的赋值过程相当于 <code>{x, y = &#39;World&#39;} = {}</code>，注意这里等号右边的空对象，是形参对象的默认值。</li></ol><p>上面是给被解构变量的整体设置了一个默认值 <code>{}</code>。下面细化一下，给默认值 <code>{}</code> 中的每一项也设置默认值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;yes&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// hello undefined</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// hello China</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;China&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// undefined &quot;China&quot;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                      <span class="token comment">// undefined undefined</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// yes World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也分析一下后两种情况：</p><ol><li>传递参数为 <code>{}</code> 时，被解构变量不为空，也不为 <code>undefined</code>，因此不使用默认参数 <code>{x, y: &#39;World&#39;}</code>，形参的赋值过程相当于 <code>{x, y} = {}</code>，所以 <code>x</code> 与 <code>y</code> 都是 <code>undefined</code>；</li><li>不传参时，等式右边采用默认参数，形参赋值过程相当于 <code>{x, y} = {x: &#39;yes&#39;, y: &#39;World&#39;}</code>。</li></ol><h2 id="_7-rest-参数" tabindex="-1"><a class="header-anchor" href="#_7-rest-参数" aria-hidden="true">#</a> 7. Rest 参数</h2><p>我们知道 <code>arguments</code> 是类数组，没有数组相关方法。为了使用数组上的一些方法，我们需要先 用<code>Array.prototype.slice.call(arguments)</code> 或者 <code>[...arguments]</code> 来将 <code>arguments</code> 类数组转化为数组。</p><p>ES6 允许我们通过 Rest 参数来获取函数的多余参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取函数所有的参数，rest 为数组</span>
<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token comment">// 获取函数第一个参数外其他的参数，rest 为数组</span>
<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，Rest 参数只能放在最后一个，否则会报错：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 报错 SyntaxError: Rest 参数必须是最后一个参数</span>
<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>形参名并不必须是 <code>rest</code>，也可以是其它名称，使用者可以根据自己的习惯来命名。</p></blockquote>`,81);function v(m,b){const p=e("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("另外推介一个网站 "),s("a",k,[n("Babel - ES6在线编译器"),l(p)]),n("，这里可以输入你的 ES6 语法，会实时将你的代码转化成 ES5。")]),d])}const y=t(u,[["render",v],["__file","index-04.html.vue"]]);export{y as default};
