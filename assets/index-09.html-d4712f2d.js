import{_ as t,M as o,p as c,q as i,R as s,t as n,N as e,a1 as p}from"./framework-e8cb8151.js";const l="/assets/5cd9634e0001c59e06400359-47519ba7.jpg",r={},u=s("h1",{id:"_09-webpack-中使用-typescript-开发项目",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_09-webpack-中使用-typescript-开发项目","aria-hidden":"true"},"#"),n(" 09-Webpack 中使用 TypeScript 开发项目")],-1),d=s("p",null,[s("img",{src:l,alt:"img"})],-1),k=s("blockquote",null,[s("p",null,"上天赋予的生命，就是要为人类的繁荣和平和幸福而奉献。 —— 松下幸之助")],-1),v={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>TypeScript 代码可以编译为普通 JavaScript 代码在浏览器或者 Node.js 环境执行。</p><p>本小节主要讨论在 Webpack 中集成 TypeScript 开发环境，不再做 TypeScript 的优劣比较和语法讲解，<strong>日常项目不涉及到 TypeScript 开发，则可以直接跳过本小节内容</strong>。</p><h2 id="typescript-编译器和-tsconfig-json" tabindex="-1"><a class="header-anchor" href="#typescript-编译器和-tsconfig-json" aria-hidden="true">#</a> TypeScript 编译器和 tsconfig.json</h2><p>TypeScript 代码不能直接在浏览器执行，所以需要编译器将 TypeScript 文件转换成可以在浏览器执行的 JavaScript。NPM 安装编译器方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候我们新建一个 ts 文件（TypeScript 文件扩展名是<code>ts</code>）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.ts</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name
<span class="token punctuation">}</span>

<span class="token keyword">let</span> webpack <span class="token operator">=</span> <span class="token string">&#39;Webpack&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>webpack<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用 <code>tsc hello.tc</code>，执行编译后<code>hello.ts</code>被编译成了<code>hello.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name
<span class="token punctuation">}</span>
<span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token string">&#39;Webpack&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>webpack<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便编译器和编辑器识别 TypeScript 项目，TypeScript 约定了<code>tsconfig.json</code>文件来存储项目配置，如果运行 <code>tsc</code> 时不指定输入文件，编译器则会查找项目目录中的这个文件，如果找不到则会依次向父级目录查找。</p><p>比如这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/main.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/index.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/source.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),m=s("code",null,"tsconfig.json",-1),g={href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="webpack-集成-typescript" tabindex="-1"><a class="header-anchor" href="#webpack-集成-typescript" aria-hidden="true">#</a> Webpack 集成 TypeScript</h2><p>如果要让 Webpack 来识别<code>ts</code>文件，需要配合 <code>TypeScript</code> 的 <code>loader</code>，使用<code>ts-loader</code>可以方便地构建浏览器可以运行的 JS 代码。</p><p>安装<code>ts-loader</code>的命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ts-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后配置项目目录中的 webpack.config.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/app.ts&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.webpack.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.web.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> 
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> 
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span> 
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便配置 TypeScript 项目，还可以在 Webpack 的项目根目录创建一个<code>tsconfig.json</code>文件。</p><h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5><p>本小节主要介绍 TypeScript 的简单概念和<code>tsconfig.json</code>，最后通过配置<code>webpack.config.js</code>来让 webpack 集成 TypeScript 编译功能。</p>`,9),h={href:"https://github.com/ksky521/webpack-tutorial",target:"_blank",rel:"noopener noreferrer"};function f(_,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,d,k,s("p",null,[s("a",v,[n("TypeScript"),e(a)]),n(" 是微软公司提出来的一个 JavaScript 的超集语言，主要作用是为 JavaScript 增加静态类型检测系统和 ECMAScript 语法的扩展。")]),b,s("p",null,[n("关于"),m,n("更多配置，可以继续浏览"),s("a",g,[n("官方文档"),e(a)]),n("。")]),y,s("p",null,[n("专栏代码已经整理好给大家共享出来： "),s("a",h,[n("https://github.com/ksky521/webpack-tutorial"),e(a)])])])}const x=t(r,[["render",f],["__file","index-09.html.vue"]]);export{x as default};
