import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t={},o=e(`<h1 id="_17-前后端如何有效沟通" tabindex="-1"><a class="header-anchor" href="#_17-前后端如何有效沟通" aria-hidden="true">#</a> 17-前后端如何有效沟通？</h1><p>在第 14 课时中，我们重点介绍了前后端通信的重要协议 <code>HTTP</code>，但在实际通信场景中，光有协议是不够的。假设有下面的 <code>GET</code> 请求，返回结果是用户列表数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">GET</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>lagou<span class="token punctuation">.</span>com<span class="token operator">/</span>a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于浏览器而言，可以通过头部字段 <code>Content-Type</code> 轻松判断出来，然后进行对应的逻辑处理。但对于工程师而言是不可读的，不知道 <code>/a </code>代表什么。</p><p>解决这个问题的方法就是制定一种规范，让请求具有语义化，这种规范就是我们常说的 <strong>API 设计规范</strong>。</p><p>下面就来介绍前后端通信中出现过的 3 种 API 规范。</p><h2 id="rpc—远程过程调用" tabindex="-1"><a class="header-anchor" href="#rpc—远程过程调用" aria-hidden="true">#</a> RPC—远程过程调用</h2><p><code>RPC</code>（Remote Procedure Call，远程过程调用）常用于后端服务进程之间的通信。“远程”指的是不同服务器上的进程，“过程调用”里的“过程”可以理解为“函数”，这种接口设计和函数命名很相似，名称为<strong>动宾结构短语</strong>，类似下面的样子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">GET</span> <span class="token operator">/</span> getUsers
<span class="token constant">POST</span> <span class="token operator">/</span> deleteUser
<span class="token constant">POST</span> <span class="token operator">/</span> createUser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能有的前端工程师对 RPC 比较陌生，但在 Web 开发早期，编写页面逻辑的工作由后端（或全栈）工程师完成，自然而然的，<code>RPC</code> 风格就被移植到了前后端通信中。</p><p>从接口命名上不难看出，RPC 风格和我们平常编写模块的思路很像，提供了一个函数作为接口，供其他模块调用。这明显是站在后端工程师的视角而设置的：为了像在本地调用一个函数那样调用远程的代码。</p><p><code>RPC</code> 这种设计规范对前端工程师而言是不够友好的，具体表现在以下 2 个方面。</p><ul><li><strong>紧耦合</strong>：当前端工程师需要获取或修改某个数据时，他有可能需要先调用接口 A ，再调用接口 B，这种调用需要对系统非常熟悉，让前端工程师熟悉后端逻辑和代码显然是难以办到的。</li><li><strong>冗余</strong>：把执行动作写在 URL 上实际是冗余的，因为 HTTP 的 Method 头部可以表示不同的动作行为。</li></ul><h2 id="rest—表现层状态转换" tabindex="-1"><a class="header-anchor" href="#rest—表现层状态转换" aria-hidden="true">#</a> REST—表现层状态转换</h2><p><code>REST</code>（Representational State Transfer），即表现层状态转换 。</p><h3 id="什么是-表现层" tabindex="-1"><a class="header-anchor" href="#什么是-表现层" aria-hidden="true">#</a> 什么是“表现层”？</h3><p>在理解“表现层”之前，我们先理解另一个概念“<code>资源</code>”。资源指的是一个实体信息，一个文本文件、一段 JSON 数据都可以称为<code>资源</code>。</p><p>而一个资源可以有不同的呈现形式，比如一份数据可以是 XML 格式，也可以是 JSON 格式，这种呈现形式叫作“<strong>表现层（Representation）</strong>”。</p><h3 id="什么又是-状态转移" tabindex="-1"><a class="header-anchor" href="#什么又是-状态转移" aria-hidden="true">#</a> 什么又是“状态转移”？</h3><p>当用户通过浏览器访问网站时，通常会涉及<code>状态的变化</code>，比如登录。</p><p><code>HTTP</code> 本身是无状态的，因此，如果客户端想要操作服务器，则必须通过某种手段让服务器发生“状态转移（State Transfer）”。而这种转移是建立在表现层之上的，即“<code>表现层状态转移</code>”。</p><p><code>REST</code> 的核心要点有两个，那就是<strong>资源</strong>和<strong>方法</strong>。</p><p><code>REST</code> 的 <code>URL</code> 指向某个或某类资源，所以不再是类似 <code>RPC</code> 的动宾结构，而是名词。比如像下面这些都是 REST 的设计风格，通常，当 URL 的路径以 ID 结尾则表示指代某个资源，无 ID 则指向一类资源。路径分隔符表示资源之间的嵌套关系。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">/</span>orgs
<span class="token operator">/</span>orgs<span class="token operator">/</span><span class="token number">123</span>asdf12d
<span class="token operator">/</span>orgs<span class="token operator">/</span>ss1212sdf<span class="token operator">/</span>users
<span class="token operator">/</span>orgs<span class="token operator">/</span>ss1212sdf<span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">111</span>asdl234l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以像下面这些 URL 是不符合 REST 规范的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">/</span>createUser
<span class="token operator">/</span>samples<span class="token operator">/</span>export
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而要进行状态转移的时候，使用的是 HTTP 默认的语义化头部 Method 字段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">GET</span>（<span class="token constant">SELECT</span>）：获取资源
<span class="token constant">POST</span>（<span class="token constant">CREATE</span>）：新建一个资源
<span class="token constant">PUT</span>（<span class="token constant">UPDATE</span>）：更新资源
<span class="token constant">DELETE</span>（<span class="token constant">DELETE</span>）：从服务器删除资源
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 <code>REST</code> 的低耦合、高度语义化的设计风格比较适合前后端通信，但也存在 3 个不足，具体如下。</p><ul><li><strong>弱约束</strong>: <code>REST</code> 定义请求路径和方法，但对非常重要的请求体和响应体并没有给出规范和约束。这就意味着需要借助工具来重新定义和校验这些内容，而不同工具之间的定义格式和校验方式都不相同，给工程师带来了一定的学习负担。</li><li><strong>接口松散</strong>: <code>REST</code> 风格的数据粒度一般都非常小，前端要进行复杂查询的时候可能会涉及多个 API 查询，那么会产生多个网络请求，很容易造成性能问题。通常的解决方案是通过类似 API 网关的<code>中转服务器</code>来实现对接口的<code>聚合</code>和<code>缓存</code>。</li><li><strong>数据冗余</strong>: 前端对网络请求性能是比较敏感的，所以传输的数据量尽可能小，但 <code>REST API</code> 在设计好之后，返回的字段值是固定的。所以很容易出现这样一个场景，对于后端工程师而言，为了减少代码修改，会尽可能地在返回结果中添加更多的字段；对于前端工程师而言，使用数据的场景往往是多变的，即使是调用同一个 API，在不同场景下也只会用到某些特定的字段。所以不可避免地产生数据冗余，从而造成带宽浪费，影响用户体验。</li></ul><p>如果要改进上述不足，该怎样定义 API 规范呢？</p><h2 id="graphql—图表查询语言" tabindex="-1"><a class="header-anchor" href="#graphql—图表查询语言" aria-hidden="true">#</a> GraphQL—图表查询语言</h2><p>我们再次将关注点从资源转移到 API 的调用者上，从调用者的角度来思考 API 设计。对于调用者而言，最关心的不是资源和方法，而是<code>响应内容</code>。</p><p>在前后端的交互中，请求体和响应内容一般都采用 <code>JSON 格式</code>。</p><p>下面是 <code>GitHub REST API</code> 的响应内容示例，由于响应内容字段太多，只截取了部分字段。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1296269</span><span class="token punctuation">,</span>
  <span class="token property">&quot;stargazers_count&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello-World&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;full_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;octocat/Hello-World&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;login&quot;</span><span class="token operator">:</span> <span class="token string">&quot;octocat&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>，
    <span class="token property">&quot;avatar_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/images/error/octocat_happy.gif&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设上面的响应内容是前端所需要的内容，现在来思考一个问题，该如何告诉后端所期望得到的数据结构呢？</p><p>如果只考虑对 JSON 数据的描述，其实已经有现成的规范来实现了，即用 <code>JSON-Schema</code> 来描述上面的 <code>JSON</code> 数据，代码如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;stargazers_count&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stargazers_count&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;full_name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;full_name&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;owner&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;login&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;avatar_url&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avatar_url&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;avatar_url&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stargazers_count&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;full_name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;owner&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，描述信息本身大小已经超过了数据内容，所以这种烦琐的描述方式显然不适用于前后端通信，因为会占据较多的带宽。</p><p>既然不能做加法，那么就尝试做减法。对于 JSON 数据而言，重要的是描述其结构，值是可变的，所以可以把值去除。上述示例数据会变成下面的结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;stargazers_count&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;full_name&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;id&quot;</span>，
    <span class="token string">&quot;avatar_url&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行结构描述的时候，我们关注的是字段名称和层级关系，所以还有进一步的优化空间，那就是去掉一些不必要的符号，变成下面的形式。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>
  id
  stargazers_count
  name
  full_name
  owner <span class="token punctuation">{</span>
    login
    id
    avatar_url
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而这个结构已经是最基础的 <code>GraphQL 查询语句</code>了，当然 <code>GraphQL</code> 并不止如此，还有更多的高级功能，比如参数变量、片段。下面就来介绍一下 <code>GraphQL</code>。</p><p><code>GraphQL</code>（Graph Query Language） 是图表查询语言，在 <code>REST</code> 规范中，请求路径表示资源之间的嵌套关系，那么很容易形成树型结构，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/07/Ciqc1F8WoxOAdBPEAACqLbjGIac092.png" alt="6.png"> REST 风格的树结构 API</p><p>GraphQL 中不同类型之间的关联关系通过图来表示。下面是一张通过 <code>GraphQL</code> 工具生成的示例图，描述了不同类型之间的关系。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/12/CgqCHl8Wo1WAearCAANIR7MjhAg120.png" alt="Drawing 1.png"> GraphQL Voyager 示例图</p><p>虽然 <code>GraphQL</code> 的设计理念和 <code>REST</code> 有较大差别，而且还上升到了“语言”层面，但核心概念其实就两个：<strong>查询语句和模式</strong>，分别对应 API 的调用者和提供者。</p><p><code>GraphQL</code> 的查询语句提供了 3 种操作：<code>查询（Query）</code>、<code>变更（Mutation）</code>和<code>订阅（Subscription）</code>。</p><p>查询是最常用的操作，变更操作次之，订阅操作则使用场景就比较少了。</p><p>下面重点介绍一下查询操作中 3 个常用的高级功能。</p><h3 id="别名-aliases" tabindex="-1"><a class="header-anchor" href="#别名-aliases" aria-hidden="true">#</a> 别名（Aliases）</h3><p>别名看上去是一个锦上添花的功能，但在开发中也会起到非常重要的作用。考虑一个场景，前端通过请求 <code>GET /user/:uid</code> 获取一个关于用户信息的 JSON 对象，并使用了返回结果中的 name 字段。</p><p>如果后端调整了接口数据，将 <code>name</code> 字段改成了 <code>username</code>，那么对于前端来说只能被动地修改代码；而如果使用 <code>GraphQL</code>，只需要修改查询的别名即可。</p><p>下面是一个使用别名将 <code>GitHub GraphQL API</code> 的 <code>createdAt</code> 改为 <code>createdTime</code> 的代码示例。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/13/CgqCHl8Wo1-AA9T0AABKgupgzvE288.png" alt="Drawing 2.png"></p><h3 id="片段-fragments" tabindex="-1"><a class="header-anchor" href="#片段-fragments" aria-hidden="true">#</a> 片段（Fragments）</h3><p>如果我们在查询中有重复的数据结构，可以通过片段来对它们进行抽象。</p><p>下面是一个使用 <code>GitHub GraphQL API</code> 来查询当前仓库第一位 star 用户和最后一位 star 用户的例子。将 <code>StargazerEdge</code> 类型的部分字段抽取成了 <code>Fragment</code>，然后在查询中通过扩展符“...”来使用。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/07/Ciqc1F8Wo2eAWQKRAABuxFd9qHg398.png" alt="Drawing 3.png"></p><h3 id="内省-introspection" tabindex="-1"><a class="header-anchor" href="#内省-introspection" aria-hidden="true">#</a> 内省（Introspection）</h3><p>调用 <code>REST API</code> 非常依赖文档，但 <code>GraphQL</code> 则不需要，因为它提供了一个内省系统来描述后端定义的类型。</p><p>比如我要通过 GitHub GraphQL API 来查询某个仓库的 star 数量，可以先通过查询 <strong>schema 字段来向 GraphQL 询问哪些类型是可用的</strong>。因为每个查询的根类型总是有 schema 字段的。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/07/Ciqc1F8Wo2-AT2HWAACaIf1oGHY694.png" alt="Drawing 4.png"><code>__schema 查询根类型</code></p><p>通过搜索和查看描述信息 description 字段可以发现，其提供了一个 <code>Repository</code> 类型。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/07/Ciqc1F8Wo32ARrwHAAAO3toZwNE658.png" alt="Drawing 5.png"> 在返回的模式中找到 “Repository” 类型定义</p><p>然后再通过 <code>__type</code> 来查看 <code>Repository</code> 类型的字段，找到和 <code>star</code> 有关的 <code>stargazers</code> 字段描述，发现这个字段属于 <code>StargazerConnection</code> 类型，以此类推继续查找，后面的嵌套子类型查找过程就不一一截图了。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/13/CgqCHl8Wo4aAR-jZAACPhMdzzyI323.png" alt="Drawing 6.png"> 通过 <code>__type</code> 查找 <code>Repository</code> 类型字段</p><p>最终通过下面的查询语句获得了第一页的查询结果。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/13/CgqCHl8Wo46Act65AAB9YZfeB7U087.png" alt="Drawing 7.png"> 查询 <code>Repository</code> 的前 100 个关注者</p><p>后端的模式与 <code>Mongoose</code> 及 <code>JSON-Schema</code> 的模式有些类似，都是通过声明数据类型来定义数据结构的。数据类型又可以分为默认的标量类型，如 Int、String 及自定义的对象类型。下面是一个类型声明的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>type <span class="token class-name">User</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token constant">ID</span><span class="token operator">!</span>
  name<span class="token operator">:</span> <span class="token class-name">String</span><span class="token operator">!</span>
  books<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码定义了一个 User 类型，包含 3 个字段：ID 类型的 id 字段，String 类型的 name 字段以及 Book 类型列表 的 books 字段。其中 ID 和 String 为标量类型，Book 为对象类型，惊叹号表示字段值不能为 null。</p><p>GraphQL 的类型声明和 TypeScript 的类型定义除了在写法上有些类似，在一些高级功能上也有异曲同工之处，比如联合类型和接口定义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>union <span class="token class-name">Owner</span> <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token operator">|</span> <span class="token class-name">Organization</span>
<span class="token keyword">interface</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token constant">ID</span><span class="token operator">!</span>
  name<span class="token operator">:</span> <span class="token class-name">String</span>
<span class="token punctuation">}</span>
type <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
type <span class="token class-name">Organization</span> <span class="token keyword">implements</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好模式之后，就要实现数据操作了。在 GraphQL 中这一部分逻辑称为<strong>解析器（Resolver）</strong>，解析器与类型相对应，下面是类型定义以及对应的解析器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> schemaStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
type Hero {
  id: String
  name: String
}
# 根类型
type Query {
  hero(id: String, name: String): [Hero]
}
</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> resolver <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">hero</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">.</span>hero<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>hero
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总体而言，GraphQL 在弥补 REST 不足的同时也有所增强，表现在：</p><ul><li><strong>高聚合</strong>。GraphQL 提倡将系统所有请求路径都聚合在一起形成一个统一的地址，并使用 POST 方法来提交查询语句，比如 GitHub 使用的请求地址就是：https://api.github.com/graphql。</li><li><strong>无冗余</strong>。后端会根据查询语句来返回值，不会出现冗余字段。</li><li><strong>类型校验</strong>。由于有模式的存在，可以轻松实现对响应结果及查询语句进行校验。</li><li><strong>代码即文档</strong>。内省功能可以直接查询模式，无须查询文档也可以通过命名及描述信息来进行查询。</li></ul><p>对于前端而言，GraphQL 提供了一种基于特定语言的查询模式，让前端可以随心所欲地获得想要的数据类型，是相当友好的；而对于后端而言，把数据的查询结果编写成 REST API 还是 GraphQL 的解析器，工作量相差不大，最大的问题是带来的收益可能无法抵消学习和改造成本。这在很大程度上增加了 GraphQL 的推广难度。</p><p>所以 GraphQL 的大多数实际使用场景分为两类，一类是前端工程师主导的新项目，后端采用 Node.js 来实现，用 GraphQL 来替代 REST；另一类就是将 Node.js 服务器作为中转服务器，为前端提供一个 GraphQL 查询，但实际上仍然是调用后端的 REST API 来获取数据。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从 RPC 到 REST 再到 GraphQL，可以看到 API 规范上的一些明显变化。</p><ul><li>关注点发生了明显的转移。从 API 的提供者，到 API 数据，再到 API 的使用者。</li><li>语义化的特性更加明显。从最初通过路径命名的方式，到利用 HTTP 头部字段 Method，再到直接定义新的查询语言。</li><li>带来的副作用，约束更多，实现起来更加复杂。</li></ul><p>站在前端工程师的角度再来看这些 API 规范，对于 RPC 风格，了解即可；对于 REST API，需要重点理解它通过路径指向资源，以及利用 HTTP 方法来指代动作的特性；对于 GraphQL，应该从 API 调用者和 API 提供者两个角度来分别学习查询语句和模式。</p><p>最后布置一道思考题：在谈到 REST 规范时，提到一个反例“/samples/export”，你还能找到常见的不符合 REST 规范的例子吗？</p><hr><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h4 id="杰" tabindex="-1"><a class="header-anchor" href="#杰" aria-hidden="true">#</a> **杰：</h4><blockquote><p>login register 就是典型的反例</p></blockquote><h4 id="聪" tabindex="-1"><a class="header-anchor" href="#聪" aria-hidden="true">#</a> *聪：</h4><blockquote><p>这一讲没搞懂，没理解是开发中的哪个环节用到的，我工作中怎么没接触到 😂</p></blockquote><h4 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>这一讲是定义接口的过程，在前后端分离的开发方式中，只有在定义接口之后，前端工程师和后端工程师才会分别进入编码阶段。</p></blockquote><h4 id="童" tabindex="-1"><a class="header-anchor" href="#童" aria-hidden="true">#</a> **童：</h4><blockquote><p>如果接口是要导出用户信息为 Excel 文件，符合 REST 规范的话，不写/export 那应该写什么呢</p></blockquote><h4 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>以本讲内容为例，提供一种实现思路供参考：仍然使用 GET /samples，然后在头部添加一些字段进行区分~</p></blockquote><h4 id="_1508" tabindex="-1"><a class="header-anchor" href="#_1508" aria-hidden="true">#</a> **1508：</h4><blockquote><p>请问老师能再详细讲一下关于 RPC 的缺点 -冗余：把执行动作写在 URL 上实际是冗余的，因为 HTTP 的 Method 头部可以表示不同的动作行为。到底是什么意思吗？</p></blockquote><h4 id="讲师回复-2" tabindex="-1"><a class="header-anchor" href="#讲师回复-2" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>比如 REST API 发送的请求： <code>GET /user</code> ，使用 RPC 风格可能写成： <code>GET /getUser</code> <code>，“getUser”</code> 中的 “get” 就是冗余的，因为 <code>GET</code> 方法本身表示的就是获的意思 ion 字段可以发现，其提供了一个 <code>Repository</code> 类型。</p></blockquote>`,104),p=[o];function c(i,r){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","index-17.html.vue"]]);export{d as default};
