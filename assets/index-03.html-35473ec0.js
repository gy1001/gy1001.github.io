import{_ as o,M as l,p as c,q as i,Q as p,R as n,t as s,N as t,a1 as a}from"./framework-e8cb8151.js";const u={},d=a('<h1 id="_03-flexbox-布局基础使用" tabindex="-1"><a class="header-anchor" href="#_03-flexbox-布局基础使用" aria-hidden="true">#</a> 03-Flexbox 布局基础使用</h1><p>自 2009 年 W3C 发布 <strong>Flexible Box Layout Module</strong> （WD 版本）至今已有十多年了，在近十年来，该模块得到了快速发展，现已成为最流行的 Web 布局技术之一。在 Web 开发者中，该模块也常称为 <strong>Flexbox 布局</strong> 。</p><p>Flexbox 是一种布局机制，它被设计为一维布局模型，并作为一种可以提供界面中项目之间的空间分配和强大功能的方法。正因如此，Flexbox 布局对于很多 Web 开发者而言，并不是容易的，甚至有很多困惑。</p><p>接下来，将分为几节课和大家一起开启 Flexbox 布局的探讨，帮助大家更好地掌握 Flexbox 布局技术。</p><h2 id="flexbox-布局简介" tabindex="-1"><a class="header-anchor" href="#flexbox-布局简介" aria-hidden="true">#</a> Flexbox 布局简介</h2><blockquote><p><strong>Flexbox 布局 是一种布局机制，用于在一个维度上为项目组设置布局！</strong></p></blockquote><p>Flexbox 模块中的主要功能就是 Web 布局。Flexbox 布局可以明确地指明容器空间的分布方式、内容对齐和元素的视觉顺序。使用 Flexbox 布局，可以轻易地实现横向或纵向布局，还可以沿着一个轴布局，或折断成多行。可以说，<strong>使用 Flexbox 布局可以轻易地构建你想要的任何布局</strong>。</p><p>另外，使用 Flexbox 布局还可以让 Web 内容的渲染不再受 HTML 文档源码顺序的限制。然而，这只是视觉上的调整，Flexbox 模块中的相关属性并不会改变屏幕阅读器对内容的读取顺序。</p><p>和以往的 Web 布局技术相比，Flexbox 布局所涉及的概念更多、更复杂，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c30bdb31294e40f8a98768024de75e09~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>看上去有很多东西，其实也没有大家想象的那么难。接下来的内容能很好地让你掌握 Flexbox 布局。</p><h2 id="一些术语和概念" tabindex="-1"><a class="header-anchor" href="#一些术语和概念" aria-hidden="true">#</a> 一些术语和概念</h2><p>我想你对 Flexbox 布局有一定的了解，而且在互联网上有关于 Flexbox 布局的教程也是玲琅满目，为此我想从 Flexbox 布局相关的术语和概念开始，因为术语的统一更有助于我们后面更好地讨论和解决问题。</p><p>用下图来描述 Flexbox 中的术语：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/573539dfa0a4447bba9e78a5f676bb63~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>首先要理解的概念就是 <strong>Flex</strong> <strong>容器</strong> （也常称为 <strong>Flexbox</strong> <strong>容器</strong> ）。简单地说，HTML 上的大多数元素都可以是 Flex 容器，比如 <code>div</code> 、<code>ul</code> 、<code>main</code> 块元素，<code>span</code> 、<code>em</code> 这样的内联元素。只需要在 HTML 元素上显式设置 <code>display</code> 的值为 <code>flex</code> 或 <code>inline-flex</code> 即可。</p><blockquote><p><strong>注意，HTML 中的可替代元素是无法成为 Flex 容器的，比如<code>img</code>、 <code>input</code>、 <code>select</code>等元素！</strong></p></blockquote><p>当一个元素变成了 Flex 容器之后，它的子元素，包括其伪元素 <code>::before</code> 、<code>::after</code> 和 文本节点 都将成为 <strong>Flex 项目</strong> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b4d9872f994445d9a16ff66cae810bf~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>有一点非常的重要，<strong>在 Flexbox 布局中， Flex 容器和 Flex 项目之间的关系永远是父子关系。</strong> 因此，Flex 项目也可以是它的子元素的 Flex 容器，即 显式地在 Flex 项目设置 <code>display</code> 属性值为 <code>flex</code> 或 <code>inline-flex</code> ，该 Flex 项目就成为一个 Flex 容器，而它的子元素就成为 Flex 项目。但它将是一个单独的 Flex 容器，它不会继承祖辈的 Flex 容器上的属性（Flexbox属性）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8afb306f1a4f4574a48dc584b542c898~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在 CSS 坐标系中，物理坐标系有 <code>x</code> 轴（水平轴）和 <code>y</code> 轴（垂直轴）之分，逻辑坐标系有内联轴（Inline Axis） 和块轴（Block Axis）之分。在 Flexbox 中，Flex 容器内也有两个轴，而且这两个轴只存在于 Flex 容器中，分别叫 <strong>主轴</strong> （Main Axis）和 <strong>侧轴</strong> （Cross Axis）。</p><p>Flexbox 中的主轴由 <code>flex-direction</code> 属性设置，默认情况下，主轴沿行方向（内联轴 Inline Axis）分布，如果该属性为 <code>column</code> ，则主轴沿列方向（块轴 Block Axis）分布：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68666475866b47989c495d453f057e52~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>需要注意的是，Flexbox 布局中的主轴、主方向、侧轴和侧方向不是固定不变的，它们会随着<code>writing-mode</code>（书写模式）和 <code>direction</code>（阅读方向）而改变。 也就是说，Flex 项目在 Flex 容器中的排列方向同时会受 <code>flex-direction</code> 属性和 CSS 的书写模式 <code>writing-mode</code> 或 阅读模式 <code>direction</code> 影响。</p><p>另外，在 Flexbox 布局中，不管是主轴还是侧轴，都有方向性。既然有方向，就有开始处（即起点）和结束处（即终点）之分。根据起点和终点之分，Flex 容器中的每根轴又有 <strong>主轴起点</strong> 、<strong>主轴终点</strong> 、<strong>侧轴起点</strong> 和 <strong>侧轴终点</strong> 之分。而且每根轴的起点和终点是由 <code>flex-direction</code> 和 <code>writing-mode</code> (或 <code>direction</code>) 来决定的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d75744e3adb9450298eba491b5ee884e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>如果 <code>flex-direction</code> 为默认值 <code>row</code> 时，书写模式和阅读模式分别是：</p><ul><li><code>ltr</code> （Left-To-Right），如英文，主轴起点在 Flex 容器左侧边缘，主轴的终点在 Flex 容器右侧边缘；</li></ul>',29),r=a("<ul><li><code>rtl</code> （Right-To-Left），如阿拉伯文，主轴起点在 Flex 容器右侧边缘，主轴的终点在 Flex 容器的左侧边缘。</li></ul><p>在这两种情况下，侧轴的起点都在 Flex 容器的顶部，而终点都在 Flex 容器的底部，这主要是因为两种语言都是水平书写模式。</p><blockquote><p>注意，Flex 容器两轴的起点和终端同样受 <code>flex-direction</code> 、<code>writing-mode</code> 或 <code>direction</code> 属性值的影响。</p></blockquote><p>众所周之， CSS 中的每个元素都是一个容器，是容器它就有大小。Flexbox 布局中的 Flex 容器 和 Flex 项目同样是元素，它们也有大小。不同的是，对于 Flex 容器而言，它有 <strong>主轴尺寸</strong> （Main Size）和 <strong>侧轴尺寸</strong> （Cross Size）之分。它们的差别是：</p><ul><li><strong>主轴尺寸</strong> 是指主轴起点到终点之间的距离；</li></ul>",5),k=a("<ul><li><strong>侧轴尺寸</strong> 是指侧轴起点到终点之间的距离 。</li></ul><p>也就是说，主轴尺寸和侧轴尺寸可以用来决定一个 Flex 容器的大小。但它们并不完全等同于 Flex 容器的宽高（<code>width x height</code> ）。这是因为 <code>flex-direction</code> 和 <code>writing-mode</code> 或 <code>direction</code> 属性值不同时，用于描述 Flex 容器的物理属性 <code>width</code> 和 <code>height</code> 有可能会互换的。比如：</p><ul><li>当 <code>flex-direction</code> 为 <code>row</code> ，且书写模式和阅读模式是 LTR 时，主轴的尺寸对应的就是 Flex 容器的宽度，侧轴的尺寸对应的则是 Flex 容器的高度；</li></ul>",3),v=a('<ul><li>当 <code>flex-direction</code> 为 <code>column</code> ，且书写模式和阅读模式是 LTR 时，主轴的尺寸对应的就是 Flex 容器的高度，侧轴的尺寸对应的则是 Flex 容器的宽度。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b07d9b08b3ca487a84ad054aa7bd8910~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>另外，可以在 Flex 容器上显式使用 CSS 的物理属性 <code>width</code> 和 <code>height</code> ，或使用 CSS 的逻辑属性 <code>inline-size</code> 和 <code>block-size</code> 设置 Flex 容器主轴和侧轴的尺寸 ，也可以使用 <code>min-*</code> 和 <code>max-*</code> 对 Flex 容器主轴和侧轴的尺寸加以限制。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97f114cfde4e4f46a9b8e39f52e4171c~tplv-k3u1fbpfcp-watermark.image?" alt="fig-02-09.png"></p><p>如果没有显式给 Flex 容器设置尺寸，则会根据所有 Flex 项目的大小来决定，或根据 Flex 容器的父容器来决定。</p><blockquote><p><strong>注意，如果需要显式设置 Flex 容器尺寸的话，使用逻辑属性</strong> <strong><code>inline-size</code></strong> <strong>或</strong> <strong><code>block-size</code></strong> <strong>更符合多语言的 Web 布局！</strong></p></blockquote><p>现在，我们已经知道了， <strong><code>主轴尺寸 x 侧轴尺寸</code></strong> <strong>可以决定一个 Flex 容器的大小。</strong> 在一个 Flex 容器中可能会包含一个或多个 Flex 项目，且每个 Flex 项目也会有其自身的尺寸大小，这样一来，就有可能造成：</p><ul><li>所有 Flex 项目宽度（或高度）小于 Flex 容器的宽度（或高度），Flex 容器就会有多余的空间没有被填充，那么这个多出来的空间常称为 <strong>Flex 容器的剩余空间</strong> （Positive Free Space）。</li></ul>',8),m=n("ul",null,[n("li",null,[s("所有 Flex 项目宽度（或高度）大于 Flex 容器的宽度（或高度），Flex 项目将会溢出 Flex 容器，那么这个溢出的空间常称为 "),n("strong",null,"Flex 容器的不足空间"),s(" （Negative Free Space），也称为 "),n("strong",null,"负空间"),s(" 。")])],-1),g=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d934f676b6a421cb451c42aa4f0432f~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),b=n("p",null,"Flexbox 布局中有一个强大的特性，当 Flex 容器有剩余空间时：",-1),x=n("ul",null,[n("li",null,[s("可以使用主轴的对齐方式 "),n("code",null,"justify-content"),s(" 来分配主尺寸的剩余空间；")])],-1),f=a(`<ul><li>可以使用侧轴的对齐方式 <code>align-content</code> 来分配侧尺寸的剩余空间。</li></ul><p>也可以使用 <code>flex</code> 属性中的 <code>flex-grow</code> 按比例因子来扩展 Flex 项目的尺寸；当 Flex 容器是不足空间（Flex 项目溢出 Flex 容器），你可以使用 <code>flex</code> 属性中的 <code>flex-shrink</code> 按比例因子来对 Flex 项目进行收缩。这个计算在 Flexbox 布局中是复杂的，而且会涉及一定的数学计算，后面我们将会有一个节课专门来介绍这方面的知识。</p><p>到此，你对 Flexbox 布局中的主要术语和概念有了一定的了解了，接下来，我们一起来探讨 Flexbox 布局中的几个重要特性。</p><h2 id="flexbox-布局模块相关特性" tabindex="-1"><a class="header-anchor" href="#flexbox-布局模块相关特性" aria-hidden="true">#</a> Flexbox 布局模块相关特性</h2><p>Flexbox 布局模块除了概念多之外，就是可用于 Flexbox 布局的属性也多，这些属性分为两个部分，其中一部分用于 <strong>Flex 容器</strong> 上，另一部分用于 <strong>Flex 项目</strong> 上。</p><p>可用于 Flex 容器上的属性主要有：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/584b5a15ed2b45bba8615773ca4291cc~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>可用于 Flex 项目上的属性相比于 Flex 容器上要少一点，它主要有：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d832f3e72844710b90bfb3f067cb0c7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>注意，在这里我们并不会针对每个属性进行介绍！</p></blockquote><h2 id="控制-flex-项目的方向" tabindex="-1"><a class="header-anchor" href="#控制-flex-项目的方向" aria-hidden="true">#</a> 控制 Flex 项目的方向</h2><p>在 Flex 容器中，即使你没有显式设置 <code>flex-direction</code> 属性的值，Flex 容器中的所有 Flex 项目也会显式为一行，因为 <code>flex-direction</code> 属性的初始值是 <code>row</code> 。如果你希望 Flex 项目在 Flex 容器中不是按行呈现，而是按列呈现，则可以将其设置为 <code>column</code> 或 <code>column-reverse</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e355c20b12a47b89c7d100f04f7080a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>来看一个简单的示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目1&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目2&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目3&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    --direction: row;
    display: flex;
    flex-direction: var(--direction);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),F={href:"https://codepen.io/airen/full/MWGeyLw",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>尝试改变 Demo 中 <code>flex-direction</code> 属性的值，你将看到的效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/057f3e4f17c548898a4ad7b806fa617a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>前面我们说过，默认情况下，Flex 项目排成一行，这一行与书写模式（或阅读模式）的方向是相同的，比如上面示例，使用的是英文，它的阅读模式是 <code>ltr</code> ，Flex 项目紧挨着 Flex 容器左侧边缘（左对齐）。这意味着，如果我们使用的是阿拉伯语系，即书写模式是 <code>rtl</code> ，则 Flex 项目将紧挨着 Flex 容器的右侧边缘（右侧对齐）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目1&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目2&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;Flex项目3&lt;/div&gt;
&lt;/div&gt;
​
&lt;div class=&quot;container&quot; dir=&quot;rtl&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;عنصر فليكس1&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;عنصر فليكس2&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;عنصر فليكس3&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    --direction: row;
    display: flex;
    flex-direction: var(--direction);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_={href:"https://codepen.io/airen/full/MWGeeLo",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad5d213431894ffaa8f07cb529586fe8~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),w=n("p",null,[s("另外，CSS 的 "),n("code",null,"writing-mode"),s(" 属性的值也将影响 "),n("code",null,"flex-direction"),s(" 属性最终呈现的效果：")],-1),j=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae3b869319834fbd9c9832f6cdefe73e~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),S={href:"https://codepen.io/airen/full/rNvLLgJ",target:"_blank",rel:"noopener noreferrer"},y=a(`<p>因此，默认情况下，Flex 项目的行为与文档的书写模式相关。大多数教程使用英语编写，或者采用另一种从左到右的水平书写模式编写。这样就可以很容易地假设弹性项目<strong>在左侧</strong>对齐并沿<strong>水平方向</strong>分布。</p><p>在实际的业务开发中，使用 Flexbox 布局时，<code>flex-direction</code> 是非常有用的，比如下图这个布局效果，红色虚线框中的 Flex 项目是按行排列，<code>flex-direction</code> 不需要显式设置，但黑色虚线框是按列排列，需要显式将 <code>flex-direction</code> 属性的值设置为 <code>column</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a74db025d40949dbb09675e6725b3424~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>flex-direction</code> 中的 <code>row</code> 和 <code>row-reverse</code> （或 <code>column</code> 和 <code>column-reverse</code>）可以让主轴的起点和终点（或侧轴的起点和终点）互换。它们在一些布局中也是非常有用的，比如像下图这样的效果，希望双数的卡片的缩略图靠右，单数的缩略图居左。我们只需要一行代码即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.card:nth-child(2n) {
    flex-direction: row-reverse;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3b45f29e8744b02baa24c9cf26c6a39~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),z={href:"https://codepen.io/airen/full/oNdLzov",target:"_blank",rel:"noopener noreferrer"},I=a('<p>不过，在使用 <code>flex-direction</code> 属性值 <code>row-reverse</code> 和 <code>column-reverse</code> 时，会对 Web 可访问性造成负面影响，因为该属性只是对<strong>视觉呈现</strong>进行重排，其对应的 HTML 文档的源码顺序是不受该属性影响的。</p><h2 id="flex-项目换行" tabindex="-1"><a class="header-anchor" href="#flex-项目换行" aria-hidden="true">#</a> Flex 项目换行</h2><p>默认情况之下，Flex 容器中的所有 Flex 项目沿着主轴方向依次排列（不会换行的或换列），即使是 Flex 项目溢出了 Flex 容器也是如此。这主要是因为 <code>flex-wrap</code> 属性的默认值为 <code>nowrap</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0ef9f273ec5443d82442739086e2aab~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>需要注意的是，如果 Flex 容器没有足够多的空间，Flex 项目在溢出之前，每一个 Flex 项目将会尽可能缩小到其最小内容（<code>min-content</code>）的尺寸。即 <strong>Flex 项目一旦达到最小内容（<code>min-content</code>）大小， Flex 项目将开始溢出 Flex 容器</strong> ！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bdcaaabc2fe4909b7ca695f25efe45a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',6),L={href:"https://codepen.io/airen/full/ZEoOpPV",target:"_blank",rel:"noopener noreferrer"},C=a(`<p>如果你希望避免这个现象，只需要在 Flex 容器上显式设置 <code>flex-wrap</code> 属性的值为 <code>wrap</code> ：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.flex-container {
    flex-wrap: wrap;
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),W={href:"https://codepen.io/airen/full/XWqKNrL",target:"_blank",rel:"noopener noreferrer"},M=a(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24549d3c13624bfa9df4a5bf7672dd57~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>Flex 容器在换行后会创建多个 <strong>Flex 行</strong> 。在空间分布方面，每一行就像一个新的 Flex 容器。因此，如果你要换行，则无法让第 2 行中的某些内容与它上面第 1 行中的某些内容对齐。这就是所谓的 Flex 容器是一维框（盒子）。你只可以在独立的轴上（主轴或侧轴）也就是一行或一列上对齐 Flex 项目，但不能像 CSS Grid 那样同时在两个轴上控制 Grid 项目。</p><p>为此，在使用 Flexbox 布局时，为了让你的布局更具灵活性（代码更健壮，具有一定的防御性），个人建议你在显式声明的 Flex 容器上同时加上 <code>flex-wrap</code> 的值为 <code>wrap</code> :</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 不具防御性的 CSS */
.flex-container {
    display: flex; /* 或 inline-flex */
}
​
/* 具有防御性的 CSS */
.flex-container {
    display: flex; /* 或 inline-flex */
    flex-wrap: wrap;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你的布局不需要换行，那么 Flex 容器的 <code>flex-wrap</code> 采用默认值 <code>nowrap</code> 更理想。如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1df9b812fd045aa90c265c12b09aeb4~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>事实上它并不是我们所期望的效果，我们所期望的效果是下图这样的，布局需要换行，就需要显式的设置 <code>flex-wrap</code> 为 <code>wrap</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68c26d40fbe541269c6b1297f537007c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>flex-wrap</code> 属性除了取值为 <code>wrap</code> 会让 Flex 项目换行排列之外，其另一个属性 <code>wrap-reverse</code> 也会让 Flex 项目换行排列，只不过行的排列方向和 <code>wrap</code> 相反。假如你使用的语言是英文，即书写模式和阅读模式都是 <code>ltr</code> ，那么 <code>flex-wrap</code> 取值为 <code>wrap</code> 时，Flex 行的排列将会沿着 Flex 容器侧轴方向从开始处（Flex 容器顶部）向下排列；反之 <code>flex-wrap</code> 取值为 <code>wrap-reverse</code> 时， Flex 行的排列将会沿着 Flex 容器侧轴方向从终点处（Flex 容器底部）向上排列：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84081b99393446f9a696e4a047e81e35~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>flex-wrap: wrap-reverse</code> 同样也受 <code>flex-direction</code> 属性取值的影响：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff43e82c27794ccbbb4cafeb3b16e985~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,12),D={href:"https://codepen.io/airen/full/KKRadzb",target:"_blank",rel:"noopener noreferrer"},T=a(`<p>还有一点需要特别的注意，<strong><code>flex-wrap: wrap</code></strong> <strong>(或</strong> <strong><code>flex-wrap: wrap-reverse</code>)碰到了设置 <code>flex:1</code> 项目时，只有在 Flex 容器没有足够空间容纳 Flex 项目时（即，同一 Flex 行所有 Flex 项目最小内容宽度总和大于 Flex 容器宽度），才会让 Flex 项目换行（或列），另外使用</strong> <strong><code>flex-wrap: wrap</code></strong> <strong>要有一个心理预判，不然也有可能会让</strong> <strong>UI</strong> <strong>视觉上不美，但不会撑破布局（如上例所示）！</strong> 选择总是痛苦的（^_^）。</p><p>CSS 中有很多简写属性，简写属性可以包含多个子属性。 如果你在编写 CSS 的时候，需要同时显式设置 <code>flex-direction</code> 和 <code>flex-wrap</code> 属性时，那么可以使用它们的简写属性 <strong><code>flex-flow</code></strong> :</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
  display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  flex-flow<span class="token punctuation">:</span> column wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
​
<span class="token comment">/* 等同于 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用 <code>flex-flow</code> 属性时，<strong>可以只显式设置一个值，也可以显式设置两个值：</strong></p><ul><li><code>flex-flow</code> 只显式设置一个值，并且该值和 <code>flex-direction</code> 相匹配时， <code>flex-wrap</code> 会取值 <code>initial</code> ；</li></ul>`,5),N=n("ul",null,[n("li",null,[n("code",null,"flex-flow"),s(" 只显式设置一个值，并且该值和 "),n("code",null,"flex-wrap"),s(" 相匹配时，"),n("code",null,"flex-direction"),s(" 会取值 "),n("code",null,"initial"),s(" ；")])],-1),H=a(`<ul><li><code>flex-flow</code> 显式设置两个值时， <code>flex-direction</code> 和 <code>flow-wrap</code> 没有先后顺序之分，即 <code>flex-flow: column wrap</code> 和 <code>flex-flow: wrap column</code> 所起作用是等同的。</li></ul><p>来看具体代码：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-flow<span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    
    <span class="token comment">/* flex-flow 等同于 */</span>
    flex-direction<span class="token punctuation">:</span> colmun<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-flow<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    
    <span class="token comment">/* flex-flow 等同于 */</span>
    flex-direction<span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-flow<span class="token punctuation">:</span> column wrap<span class="token punctuation">;</span>
    
    <span class="token comment">/* flex-flow 等同于 */</span>
    flex-flow<span class="token punctuation">:</span> wrap column<span class="token punctuation">;</span>
    
    <span class="token comment">/* flex-flow 还等同于 */</span>
    flex-direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flex-项目排序" tabindex="-1"><a class="header-anchor" href="#flex-项目排序" aria-hidden="true">#</a> Flex 项目排序</h2><p>Web 页面是由多个 HTML 元素组建而成，HTML 文档中的元素是按照其在文档中出现的先后顺序决定的，比如下面这样的一个 HTML 文档：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有任何 CSS 约束之下，它呈现的顺序将会是如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f02937df03a642b3aaa58f7a269b4015~tplv-k3u1fbpfcp-watermark.image?" alt="fig-03-23.jpg"></p><p>通过前面的内容我们知道了 Flexbox 布局中，我们可以在 Flex 容器上使用 <code>flex-direction</code> 属性的值 <code>row-reverse</code> 和 <code>column-reverse</code> 来改变主轴和侧轴上 Flex 项目的排列顺序。但不能单独改变某个 Flex 项目的顺序。如果仅是单独对某个（或某几个） Flex 项目重新排序的话，就需要使用可用于 Flex 项目上的 <code>order</code> 属性。</p><p>使用 <code>order</code> 属性可以为 Flex 容器中的项目重新排序。此属性可用于对<strong>有序组</strong>中的项目进行排序。项目按照 <code>flex-direction</code> 指定的方向排列，最小值在最前面。如果多个项目具有相同的值，它将与具有该值的其他项目一起显示（按其在源码文档的顺序排列）。</p><p><code>order</code> 初始值是 <code>0</code> ，可以是正值，也可以是负值，属性值越大，越排在主轴的后面，反之越在主轴的前面。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af09ce83d2964b56ab3e449ea74c5c6d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>如上图所示。</p><ul><li>第一组中所有 Flex 项目未显式设置 <code>order</code> 值（即默认值为<code>0</code>），Flex 项目按照 HTML 文档的源码顺序沿着主轴排列 。</li></ul>`,14),R=n("ul",null,[n("li",null,[s("第二组中第二个 Flex 项目显式设置 "),n("code",null,"order"),s(" 的值为 "),n("code",null,"1"),s("，这个时候该 Flex 项目会排列在最末尾 。")])],-1),E=a(`<ul><li>第三组中第四个 Flex 项目显式设置 <code>order</code> 的值为 <code>-1</code>，这个时候该 Flex 项目会排列在最前面 。</li></ul><p>来看一个简单的示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    display: flex:
    flex-wrap: wrap;
}
​
:root {
  --order: 0;
}
​
.item:nth-child(2) {
  order: -1;
}
​
.item:nth-child(3) {
  order: var(--order);
}
​
.item:nth-child(4) {
  order: 3;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),V={href:"https://codepen.io/airen/full/ZEoORVY",target:"_blank",rel:"noopener noreferrer"},A=a(`<p>示例中我们显式指定了第二个 Flex 项目的 <code>order</code> 值为 <code>-1</code> ，第四个 Flex 项目的 <code>order</code> 值为 <code>3</code> ，并且动态调整第三个 Flex 项目的 <code>order</code> 值，你将看到的效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32c99570323b4684a86188b3bfdba637~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在 Flexbox 布局中，在 Flex 项目上使用 <code>order</code> 属性可以和在 Flex 容器上使用 <code>flex-direction</code> 的 <code>row-reverse</code> （或 <code>column-reverse</code> ）等同的效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b88537414eb24c65a8463ef7ed9d084b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>order</code> 属性也适用于页面级别的布局，比如下面这个示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>Header Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span>Article Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>Nav Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">&gt;</span></span>Aside Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>Footer Section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>&lt;article&gt;</code> 放在 <code>&lt;nav&gt;</code> 和 <code>&lt;aside&gt;</code> 前面，主要是为了内容为先。针对这样的 DOM 结构，如果我们希望 <code>&lt;nav&gt;</code> 在 <code>&lt;article&gt;</code> 左侧，<code>&lt;aside&gt;</code> 在 <code>&lt;article&gt;</code> 右侧时，<code>order</code> 属性就可以起关键性的作用：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">nav</span> <span class="token punctuation">{</span>
    order<span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
main:hover nav</span> <span class="token punctuation">{</span>
    order<span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
main:hover aside</span> <span class="token punctuation">{</span>
    order<span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),B={href:"https://codepen.io/airen/full/MWGeBKa",target:"_blank",rel:"noopener noreferrer"},G=a(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab2d833ec8464ee28b045b2b0be87b94~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>需要注意的是，<code>order</code> 在使用时与 <code>flex-direction</code> 的值 <code>row-reverse</code> 和 <code>column-reverse</code> 存在相同的问题。它对 Web 可访问性是不友好的。请勿使用 <code>order</code>，因为你需要修复文档中的乱序问题。</p><h2 id="flex-项目之间的间距" tabindex="-1"><a class="header-anchor" href="#flex-项目之间的间距" aria-hidden="true">#</a> Flex 项目之间的间距</h2><p>以往在 CSS 中，常常使用 <code>margin</code> 属性来设置元素与元素之间的间距。在今天，Flexbox 布局中，你可以使用 <code>gap</code> 属性来设置元素与元素之间的间距。实质上，<code>gap</code> 是用来定义<strong>列与列</strong> 或 <strong>行与行</strong> 之间的间距。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af369fe12e87402ea1d0080a6b9354a7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>gap</code> 属性的使用非常的简单，只需要在 Flex 容器显式指定<code>gap</code> 属性值即可：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  --gap<span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  --columns<span class="token punctuation">:</span> 5<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.container</span> <span class="token punctuation">{</span>
  gap<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--gap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.item</span> <span class="token punctuation">{</span>
  flex-basis<span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>100% - <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--columns<span class="token punctuation">)</span> - 1<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--gap<span class="token punctuation">)</span><span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--columns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),K={href:"https://codepen.io/airen/full/LYmZJjo",target:"_blank",rel:"noopener noreferrer"},Z=a(`<p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5af4dd37046748fdb143c7d448d3f08f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>gap</code> 属性可接受一个值，也可以接受两个值，当只显式设置一个值时，那么第二个值和第一个值等同，如果显式设置两个值，第一个值是 <code>row-gap</code> 属性的值，第二个则是 <code>column-gap</code> 属性的值：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    gap<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    row-gap<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    column-gap<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.flex-container</span> <span class="token punctuation">{</span>
    gap<span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    row-gap<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    column-gap<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面我们介绍 Flexbox 术语和概念时提到过，<code>gap</code> 和 <code>margin</code> 虽然都可以设置元素与元素之间的间距，但它们之间有明显的差异：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23af3fc956fd4b71a952065dee652177~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>margin</code> 除了难以达到设计预期效果之外，它们使用的地方也略有差异：</p><ul><li><code>gap</code> 运用在 Flex 容器上，但它无法给 Flex 项目设置不同的外间距；</li></ul>`,8),O=a(`<ul><li><code>margin</code> 运用在 Flex 项目上，可以给 Flex 项目设置不同的外间距。</li></ul><p>另外，使用 <code>margin</code> 会让 Flex 项目与 Flex 容器之间有空白间距：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecc6f70f8f4649439ef9ca6a512841c8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在 <code>gap</code> 属性还没出现之前，往往都是使用 <code>margin</code> 来模拟 <code>gap</code> 属性的效果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__container flex__container--margin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-gutter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>margin<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__container flex__container--gap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-gutter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex__item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Flex Item 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>:root {
  --flexDirection: row;
  --flexWrap: wrap;
  --item-basis: 100px;
  --gap: 1rem;
  --columns: 5;
}
​
.container {
  width: calc(
    var(--item-basis) * var(--columns) + var(--gap) * (var(--columns) - 1) + 6px
  );
}
​
.flex__container {
  display: flex;
  flex-flow: var(--flexDirection) var(--flexWrap);
}
​
.flex__container--margin {
  margin: calc(-1 * var(--gap)) 0 0 calc(-1 * var(--gap));
}
​
.flex__container--margin &gt; .flex__item {
  margin: var(--gap) 0 0 var(--gap);
}
​
.flex__container--gap {
  gap: var(--gap);
}
​
.flex__item {
  inline-size: var(--item-basis);
  aspect-ratio: 1;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),J={href:"https://codepen.io/airen/full/wvjWERe",target:"_blank",rel:"noopener noreferrer"},Y=a('<p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e1f4925940143f4aca7f422f2ad035e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>通过这一节的学习，我想你对 Flexbox 布局应该有了进一步的了解。知道了如何使用 <code>flex-direction</code> 和 <code>order</code> 来控制 Flex 项目的排序；如何使用 <code>flex-wrap</code> 属性让 Flex 项目换行以及使用 <code>gap</code> （或 <code>margin</code>）控制 Flex 项目之间的间距等。</p><p>这些只是 Flexbox 布局基础知识的几个关键功能，其实 Flexbox 布局中还有另一个关键功能，那就是 Flex 容器空间分配。接下来的课程中，我将着重和大家一起探讨 Flex 容器的空间是如何分配的，也就是 Flexbox 布局中对齐模式。</p>',5);function P(X,Q){const e=l("ExternalLinkIcon");return c(),i("div",null,[d,p(""),r,p(""),k,p(""),v,p(""),m,g,b,x,p(""),f,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",F,[s("https://codepen.io/airen/full/MWGeyLw"),t(e)])])]),h,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",_,[s("https://codepen.io/airen/full/MWGeeLo"),t(e)])])]),q,w,j,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",S,[s("https://codepen.io/airen/full/rNvLLgJ"),t(e)])])]),y,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",z,[s("https://codepen.io/airen/full/oNdLzov"),t(e)])])]),I,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",L,[s("https://codepen.io/airen/full/ZEoOpPV"),t(e)])])]),C,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",W,[s("https://codepen.io/airen/full/XWqKNrL"),t(e)])])]),M,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",D,[s("https://codepen.io/airen/full/KKRadzb"),t(e)])])]),T,p(""),N,p(""),H,p(""),R,p(""),E,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",V,[s("https://codepen.io/airen/full/ZEoORVY"),t(e)])])]),A,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",B,[s("https://codepen.io/airen/full/MWGeBKa"),t(e)])])]),G,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",K,[s("https://codepen.io/airen/full/LYmZJjo"),t(e)])])]),Z,p(""),O,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",J,[s("https://codepen.io/airen/full/wvjWERe"),t(e)])])]),Y])}const $=o(u,[["render",P],["__file","index-03.html.vue"]]);export{$ as default};
