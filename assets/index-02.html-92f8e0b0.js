import{_ as e,M as t,p,q as o,R as n,t as c,N as i,a1 as s}from"./framework-e8cb8151.js";const l={},r=s('<h1 id="_02-全栈思维全面深度掌握-ts-类" tabindex="-1"><a class="header-anchor" href="#_02-全栈思维全面深度掌握-ts-类" aria-hidden="true">#</a> 02- 全栈思维全面深度掌握 TS 类</h1><h2 id="_01-【ts-类准备】ts-类底层根基-不一样的方式理解-js-原型" tabindex="-1"><a class="header-anchor" href="#_01-【ts-类准备】ts-类底层根基-不一样的方式理解-js-原型" aria-hidden="true">#</a> 01:【TS 类准备】TS 类底层根基，不一样的方式理解 JS 原型</h2><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>',3),u={href:"https://juejin.cn/post/7128712557031850020JS%E5%8E%9F%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="为什么要用原型-好处" tabindex="-1"><a class="header-anchor" href="#为什么要用原型-好处" aria-hidden="true">#</a> 为什么要用原型(好处)</h3><blockquote><p>原型上所有的方法和属性都可以被构造函数【实际开发原型主要是共享方法和所有实例公用引起属性】的实例共享，那么为什么要共享呢？先来看一个案例【先不管什么是原型】</p></blockquote><h3 id="没有使用原型会有什么问题" tabindex="-1"><a class="header-anchor" href="#没有使用原型会有什么问题" aria-hidden="true">#</a> 没有使用原型会有什么问题？</h3><blockquote><p>总结问题：所有 QQUser 对象【也叫做 QQUser 实例】都有相同的好友属性，好友属性 commonfriends 英文表示，所有 QQUser 对象都有相同的 show 方法。但是我们发现每一个 QQUser 对象【也叫做 QQUser 实例】都单独分配一个 commonfriends 属性空间和 show 方法空间，导致了大量的空间浪费</p><p>答案：使用原型解决，解决了所有实例上的方法，还有所有实例上的共同属性都可以放到原型上去定义</p></blockquote><h2 id="_02-【ts-类准备】ts-类底层根基-深入-js-原型【不同以往的讲解-给你带去全新收】" tabindex="-1"><a class="header-anchor" href="#_02-【ts-类准备】ts-类底层根基-深入-js-原型【不同以往的讲解-给你带去全新收】" aria-hidden="true">#</a> 02：【TS 类准备】TS 类底层根基，深入 JS 原型【不同以往的讲解，给你带去全新收】</h2><h3 id="原型图" tabindex="-1"><a class="header-anchor" href="#原型图" aria-hidden="true">#</a> 原型图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62924ca06ae400a9c945cb8c3df62b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">QQUser</span><span class="token punctuation">(</span>QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQNo <span class="token operator">=</span> QQNo_ <span class="token comment">// QQ 号码</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQAeg <span class="token operator">=</span> QQAge_ <span class="token comment">// QQ 年龄</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQMark <span class="token operator">=</span> QQMark_ <span class="token comment">// QQ 标签</span>
  <span class="token comment">// 引用类型、对象类型</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>commoneFriends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;骑驴看海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;大漠上的英雄&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;坚实的果子&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小草&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 共同好友</span>
  <span class="token comment">// 函数也是一种引用数据类型</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">QQ号码：{this.QQNo},QQ龄: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,QQ标注：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commoneFriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// QQZhangSan 叫做对象变量，对象是等号右边通过 new 出来的一个实例</span>
<span class="token comment">// 而且是运行期间才在堆中开辟内存空间</span>
<span class="token keyword">let</span> QQZhangSan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;王阳明传人&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> QQLisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;袁隆平的徒弟&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> QQLiuwu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUser</span><span class="token punctuation">(</span><span class="token string">&#39;刘武&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;飞起来的鸭子&#39;</span><span class="token punctuation">)</span>

QQZhangSan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-1" tabindex="-1"><a class="header-anchor" href="#_03-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-1" aria-hidden="true">#</a> 03：【原型】深度透彻掌握原型 【为深度透彻掌握 TS 类，继承扎根】-1</h2><h3 id="认识函数-原型定义" tabindex="-1"><a class="header-anchor" href="#认识函数-原型定义" aria-hidden="true">#</a> 认识函数 + 原型定义</h3><ol><li><p>函数也是一个对象，当真正开始执行函数，执行环境【开发时为浏览器或者控制台】会为函数分配一个函数对象变量空间和函数对象空间，函数对象变量用函数名表示，存在栈空间中，函数对象空间是再堆中开辟的一个内存空间，这个空间中有一个默认的 prototype 属性，这个 prototype 属性就是一个原型对象属性【也叫做对象变量】</p></li><li><p>函数和构造函数的区别</p><blockquote><p>当通过 new 函数（）时，此刻这个函数就是构造函数【日后会演变成 TS 类的构造器】</p></blockquote></li><li><p>定义：原型【prototype】是定义函数由 js 自动分配给函数的一个可以被所有构造函数实例对象变量共享的对象变量【也叫对象属性】</p></li></ol><h3 id="如何访问原型对象空间上的属性和方法" tabindex="-1"><a class="header-anchor" href="#如何访问原型对象空间上的属性和方法" aria-hidden="true">#</a> 如何访问原型对象空间上的属性和方法</h3><ol><li>构造函数所有实例对象都可以访问原型对象空间上的属性和方法【每一个实例都有默认的 proto 属性，这个 proto 属性指向原型对象空间】</li><li>关于__proto__: new 在创建新对象的时候，会赋于新对象一个属性指向构造函数的 prototype 属性对象空 间，这个属性就是 proto</li><li>可以直接通过构造函数 .prototype 对象属性来访问原型对象空间上的属性和方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">QQUser</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> f <span class="token function">QQUser</span><span class="token punctuation">(</span>QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_<span class="token punctuation">)</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> Object
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数实例-也叫对象-如何访问原型对象上的属性和方法" tabindex="-1"><a class="header-anchor" href="#构造函数实例-也叫对象-如何访问原型对象上的属性和方法" aria-hidden="true">#</a> 构造函数实例[也叫对象]如何访问原型对象上的属性和方法</h3><ol><li>构造函数实例访问一个属性和方法，首先从实例空间上查找[当执行环境执行 new 构造函数时，构造函数中通过 this 定义的属性和方法会分配在这个空间中]，如果找到改属性和方法，就停止查找，表示找到了。如果没有找到，就继续在该实例的对象空间中去查找改属性和方法【实例中的默认的 proto 对象属性指向原型对象空间】</li><li>实例正是借助自身的 __proto__ 对象属性来查找对象空间中的属性和方法，有点像儿子去和爸爸要它本身没有的东西一样，讲到这里，这其实就是 TS 继承的原模型图</li><li>增加或者修改原型独享的属性或者方法后，所有的实例或者叫做对象立即可以访问的到[但创建实例后在覆盖原型除外]</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把共同的属性挂在原型属性上</span>
<span class="token class-name">QQUser</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commoneFriends <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;骑驴看海&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;大漠上的英雄&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;坚实的果子&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;小草&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token comment">// 共同好友</span>
<span class="token class-name">QQUser</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">QQ号码：{this.QQNo},QQ龄: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,QQ标注：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commoneFriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">QQUser</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commoneFriends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;大叔&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-2" tabindex="-1"><a class="header-anchor" href="#_04-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-2" aria-hidden="true">#</a> 04：【原型】深度透彻掌握原型 【为深度透彻掌握 TS 类，继承扎根】-2</h2><h3 id="高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么" tabindex="-1"><a class="header-anchor" href="#高频面试题-创建实例后再覆盖原型-实例对象无法访问到-为什么" aria-hidden="true">#</a> 高频面试题：创建实例后再覆盖原型，实例对象无法访问到，为什么？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 覆盖对象：</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> objnew <span class="token operator">=</span> obj<span class="token punctuation">;</span>

obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;北京海淀区西三环&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span> <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;obj:&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;obj2:&quot;</span><span class="token punctuation">,</span> objnew<span class="token punctuation">)</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// obj: { address: &#39;北京海淀区西三环&#39;, age: 39 }</span>
<span class="token comment">// objnew: { username: &#39;wangwu&#39;, age: 23 }</span>

obj指向了新的内存空间，原来的内存空间还在被objnew使用，所以未被垃圾回收机制回收，objnew依然能访问到它
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-3" tabindex="-1"><a class="header-anchor" href="#_05-【原型】深度透彻掌握原型-【为深度透彻掌握-ts-类-继承扎根】-3" aria-hidden="true">#</a> 05：【原型】深度透彻掌握原型 【为深度透彻掌握 TS 类，继承扎根】-3</h2><h3 id="覆盖原型" tabindex="-1"><a class="header-anchor" href="#覆盖原型" aria-hidden="true">#</a> 覆盖原型：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">QQUsers</span><span class="token punctuation">(</span><span class="token parameter">QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQNo <span class="token operator">=</span> QQNo_ <span class="token comment">//QQ号</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQAge <span class="token operator">=</span> QQAge_ <span class="token comment">//Q龄</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>QQMark <span class="token operator">=</span> QQMark_ <span class="token comment">//QQ标签</span>
<span class="token punctuation">}</span>
<span class="token comment">//方法栈--执行方法时的栈区</span>

<span class="token class-name">QQUsers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commonfriends <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;骑驴看海&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;大漠上的英雄&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;坚实的果子&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;小草&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token class-name">QQUsers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">QQ号:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,QQ龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,QQ标注:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commonfriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> QQZhangSan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">&#39;37834522&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;王阳明传人&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> QQLisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">&#39;30424232&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;袁隆平的徒弟&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//QQUsers.prototype.commonfriends.push(&quot;大树&quot;);</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>QQZhangSan<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>QQLisi<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span>

<span class="token class-name">QQUsers</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">commonfriends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bcd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;骑驴看海&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;QQUsers.prototype:&#39;</span><span class="token punctuation">,</span> <span class="token class-name">QQUsers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;QQZhangSan.commonfriends:&#39;</span><span class="token punctuation">,</span> QQZhangSan<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;QQUsers.prototype.commonfriends:&#39;</span><span class="token punctuation">,</span> <span class="token class-name">QQUsers</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// QQUsers.prototype: { commonfriends: [ &#39;abc&#39;, &#39;bcd&#39;, &#39;骑驴看海&#39; ] }</span>
<span class="token comment">// QQZhangSan.commonfriends: [ &#39;骑驴看海&#39;, &#39;大漠上的英雄&#39;, &#39;坚实的果子&#39;, &#39;小草&#39; ]</span>
<span class="token comment">// QQUsers.prototype.commonfriends: [ &#39;abc&#39;, &#39;bcd&#39;, &#39;骑驴看海&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题:</h3><h3 id="qqzhangsan-proto-show-和qqzhangsan-show-输出的结果完全一样吗-为什么呢" tabindex="-1"><a class="header-anchor" href="#qqzhangsan-proto-show-和qqzhangsan-show-输出的结果完全一样吗-为什么呢" aria-hidden="true">#</a> <code>QQZhangSan.__proto__.show()</code>和<code>QQZhangSan.show()</code> 输出的结果完全一样吗？ 为什么呢？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>QQZhangSan<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// QQ号:undefined,QQ龄:undefined,QQ标注:undefined</span>
<span class="token comment">// 共同的好友是:骑驴看海,大漠上的英雄,坚实的果子,小草</span>

QQZhangSan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// QQ号:37834522,QQ龄:15,QQ标注:王阳明传人</span>
<span class="token comment">// 共同的好友是:骑驴看海,大漠上的英雄,坚实的果子,小草</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>QQZhangSan.__proto__.show()</code> 执行的是构造函数原型上初始的 show()方法，<code>QQZhangSan.show()</code> 执行对象变量个性化传参之后的 show()方法。</p><h2 id="_05-环境搭建】搭建-ts-自动更新-ts-自动运行-parcel-自动打包环境" tabindex="-1"><a class="header-anchor" href="#_05-环境搭建】搭建-ts-自动更新-ts-自动运行-parcel-自动打包环境" aria-hidden="true">#</a> 05：环境搭建】搭建 TS 自动更新+TS 自动运行+Parcel 自动打包环境</h2><h3 id="步骤如下" tabindex="-1"><a class="header-anchor" href="#步骤如下" aria-hidden="true">#</a> 步骤如下</h3><ol><li><p>初始化<code>npm init -y</code>,建立<code>package.json</code></p></li><li><p>安装相关依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> typescript <span class="token parameter variable">-D</span>
或者
<span class="token function">npm</span> <span class="token function">install</span> typescript <span class="token parameter variable">-g</span>
<span class="token function">npm</span> <span class="token function">install</span> ts-node nodemon <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成<code>tsconfig.json</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>tsconfig.json</code>中的配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ts 编译后生成js文件保存的目录</span>
    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span> <span class="token comment">// 自己编写的 ts 源文件所在目录</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意 dist src package.json 必须是在同一个目录下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装<code>ts-node</code></p><blockquote><p>ts-node 可以让 node 能直接运行 ts 代码，无需使用 tsc 先将 ts 代码编译成 js 代码。[ts-node 包装了 node, 它可以直接运行 ts 代码]</p></blockquote></li><li><p>安装 nodemon 工具【自动检测工具】</p><blockquote><p>nodemon 作用：nodemon 可以自动检测到目录中的文件更改时通过重新启动应用程序来调试基于 nodejs 的应用程序</p></blockquote></li><li><p>在<code>package.json</code>中配置自动检测，自动重启应用程序</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon --watch src/ -e ts --exec ts-node ./src/app.ts&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nodemon --watch src/</code> 表示检测目录是 <code>package.json</code> 同级目录</p><p><code>-e ts</code> 表示 <code>nodemon</code> 命令准备将要监听的是 <code>ts</code> 后缀的文件</p><p><code>-exec ts-node ./src/project/app.ts</code> 表示检测到 <code>src</code> 目录下有任何变化，都要重新执行 <code>app.ts</code> 文件</p></li></ol><h3 id="parcel-打包支持浏览器运行-ts-文件" tabindex="-1"><a class="header-anchor" href="#parcel-打包支持浏览器运行-ts-文件" aria-hidden="true">#</a> Parcel 打包支持浏览器运行 TS 文件</h3><ol><li><p>安装 <code>parcel</code>打包工具：<code>npm install parcel-bundler --save-dev</code></p></li><li><p>在<code>package.json</code>中给<code>npm</code>添加启动项，支持启动<code>parcel</code>工具包</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;parcel ./public/index.html&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动<code>parcel</code>工具包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_06-全栈思维全面掌握-ts-类" tabindex="-1"><a class="header-anchor" href="#_06-全栈思维全面掌握-ts-类" aria-hidden="true">#</a> 06: 全栈思维全面掌握 TS 类</h2><h3 id="学习-typescript-类的深远意义" tabindex="-1"><a class="header-anchor" href="#学习-typescript-类的深远意义" aria-hidden="true">#</a> 学习 TypeScript 类的深远意义</h3><ul><li>TypeScript 类的出现完全改变了前端领域项目代码编写模式，配合 TypeScript 静态语言，编译期间就能检查语法错误的优势【项目上线后隐藏语法错误的风险几乎为零，相比不用 TypeScript 开发项目，使用 TS 后对前端项目尤其是大中项目的开发或者底层第三方插件，组件库的开发带来的优势已经超乎了想象】</li><li>相对以前 js 不得不用构造函数来充当“类”，TypeScript 类的出现就可以说试一次技术革命，让开发出来的项目尤其是大中项目的可读性好，可扩展性好了不是一点点</li><li>TypeScript 类让前端开发人员和组织项目或者于都各大框架源码的思维方式变得先进和生活了许多。因为是 OOP【面向对象编程】的技术基石</li><li>在前端各大流行框架开发的项目中，比如 Vue3 项目、Angular 项目、基于 Antd 库的项目还是后端 nodejs 框架。比如 Nest.js 亦或者 Vue3 底层源码，都可以频频见到类的身影</li><li>尽管 TypeScript 类照搬了 java 后端语言的四星，但是 TypeScript 的底层依然是基于 js 的，这一点对于 前端开发工程师更加深入理解 TS 打开了一条理解之道，提升他们更深厚的 js 功底从而为面试加分都有很大帮助</li></ul><h3 id="typescript-哪些技能基于类" tabindex="-1"><a class="header-anchor" href="#typescript-哪些技能基于类" aria-hidden="true">#</a> TypeScript 哪些技能基于类</h3><p>TypeScript 类是 OOP 的技术基石，包括类、属性封装、继承、多态、抽象、泛型、紧密关联的技术包括方法重写，方法审核、构造器、构造器重载、类型守卫、自定义守卫、静态方法、属性、关联引用属性，多种设计模式等</p><h3 id="什么是类" tabindex="-1"><a class="header-anchor" href="#什么是类" aria-hidden="true">#</a> 什么是类</h3><p>定义：类就是拥有相同属性和方法的一系列对象的集合，类是一个模具，是从这类包含的所有具体对象中抽离出的一个概念，类定义了它所包含的全对象的静态特征和动态特征</p><ul><li>类有静态特征和动态特征【以大家最熟悉的人类为例】</li><li>静态特征【软件界叫做属性】姓名、年龄、地址、身份号码、联系方式、家庭地址、微信号</li><li>动态特征【软件界叫做方法】吃饭、走路</li></ul><p>【再看桌子类】</p><p>静态属性【属性】：高度、宽度、颜色、价格、品牌、材质</p><p>动态特征【方法】承载</p><p>【来看订单类】</p><p>静态属性【属性】订单号、下单时间、下单顾客、订单详情、顾客微信、收件地址、负责客服</p><p>动态特征【方法】下单、修改订单、增加订单、删除订单、查询订单、退单【这一些方法真正开发会归位 OrderService 类】但是从广义来说都同属于订单系列类的方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;唐僧&#39;</span>
  <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">public</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;11222&#39;</span>

  <span class="token function">doEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">110</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="理解子类" tabindex="-1"><a class="header-anchor" href="#理解子类" aria-hidden="true">#</a> 理解子类</h3><h4 id="什么是子类" tabindex="-1"><a class="header-anchor" href="#什么是子类" aria-hidden="true">#</a> 什么是子类</h4><ol><li><p>有两个类，比如 A 类和 B 类，如果满足 A 类 is kind of B 类，那么 A 类就是 B 类的子类，比如 A 类是顾客类，B 类是人类，因为顾客类 a kind of 人类成立【顾客类是人类的一种】，所以顾客类是人类的子类</p></li><li><p>子类如何继承父类的属性和方法</p><blockquote><p>以顾客为例子：顾客类继承了父类【人类】的非私有的属性和方法，也具备了子类独有的属性和方法</p></blockquote></li></ol><p>顾客类继承父类：【人类】的全部私有属性和方法外，还有哪些独有的属性和方法呢？</p><p>顾客类独有属性：顾客登记、顾客编号</p><p>顾客类独有方法：购买</p><h3 id="什么是对象【对象也叫-instance-实例-对象变量也叫实例变量】" tabindex="-1"><a class="header-anchor" href="#什么是对象【对象也叫-instance-实例-对象变量也叫实例变量】" aria-hidden="true">#</a> 什么是对象【对象也叫 instance 实例，对象变量也叫实例变量】</h3><p>创建对象一共做了三件事</p><ul><li>在堆中为类的某个对象【实例】分配一个空间</li><li>调用对应的构造函数【构造器】并且把构造器中的各个参数数值赋值给对象属性 new Person() 自动匹配无参数的构造器</li><li>把对象赋值给对象变量【把实例赋值给实例变量】</li></ul><ol><li><p>什么是对象（实例）</p><blockquote><p>就是一个拥有具体属性值和方法的实体，是类的一个具体表现表现，一个类可以创建一个或者多个对象</p></blockquote></li><li><p>如何通过类来创建对象【实例】？</p><blockquote><p>let 对象变量名 = new 类名()</p><p>const 对象变量名 = new 类名()</p></blockquote></li><li><p>如何根据 People 类来创建叫做张三对象【实例】的人？</p><blockquote><p>let kateCust = new Customer()</p><p>kateCust 是对象变量名，new Customer() 表示 new 出来的是一个 Customer 对象，而是运行期间才在堆中分配 Customer 对象的内存空间【new 就是分配内存空间的意思】</p></blockquote></li><li><p>类的对象变量、对象内存图展示</p></li><li><p>类的对象变量、对象的关系</p><blockquote><p>类的对象变量存在栈中，对象变量存储着对象的首地址，对象变量通过这个地址找到它的对象</p></blockquote></li></ol><h2 id="_07-【ts-类源码】详解-ts-类底层源码【原生-es5-语法】" tabindex="-1"><a class="header-anchor" href="#_07-【ts-类源码】详解-ts-类底层源码【原生-es5-语法】" aria-hidden="true">#</a> 07：【TS 类源码】详解 TS 类底层源码【原生 ES5 语法】</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> _address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
  <span class="token punctuation">}</span>
  <span class="token function">doEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过 ts playground 转换后的代码如下：输出配置改为 es5</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> People <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _age<span class="token punctuation">,</span> _address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doStep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> People<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-【ts类晋级】深入typescript引用属性和它的4个真实应用场景" tabindex="-1"><a class="header-anchor" href="#_08-【ts类晋级】深入typescript引用属性和它的4个真实应用场景" aria-hidden="true">#</a> 08:【TS类晋级】深入TypeScript引用属性和它的4个真实应用场景</h2><h3 id="如何理解类的引用属性【引用类型属性】" tabindex="-1"><a class="header-anchor" href="#如何理解类的引用属性【引用类型属性】" aria-hidden="true">#</a> 如何理解类的引用属性【引用类型属性】</h3><ol><li><p>什么是引用属性：如果类的属性的类型是引用类型，那么这个属性就是引用属性</p><blockquote><p>引用属性的数据类型一般有数组、函数、类、对象、对象数组、集合类[Set、Map、自定义集合类]</p></blockquote></li><li><p>引用属性的经典应用场景</p><p>我们举几个经典的案例</p><p><strong>真实应用场景1</strong>：底层经典案例：如果我们使用 TypeScript 来开发一个ES6的set 集合类就是对数组的二次包装，在这个 Set 集合类中就需要包含一个数组的引用属性供整个类的各个方法来使用</p><p><strong>真实应用场景2</strong>：底层经典案例：Promise 是前端很重要的技术，Promise 底层类中就采用了函数类型的引用属性【大家只需要知晓，本课程后面章节会自己动手实现一个 Promise】</p><p><strong>真实应用场景3</strong>：二次封装应用场景：Set集合虽好，但是不能使用 get(index)直接取值，这也就造成了取值不方便，如果我们自己动手封装了一个包含 add、get、remove、delete、query的集合类【ArrayList】,这时也需要借助数组引用属性</p><p><strong>真实应用场景4</strong>：各种 NodeJs 后端项目构建的应用场景：我们以同学们相对熟悉的订单详情类和订单类为例，下面我们说明并定义电商平台比用的两个类---订单详情类【OrderDetail】和订单类【订单类】</p><p><strong>真实应用场景5</strong>：跨前端领域的 Java 后端大量使用了引用属性</p></li></ol><h2 id="_09-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-2" tabindex="-1"><a class="header-anchor" href="#_09-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-2" aria-hidden="true">#</a> 09:【TS类晋级】深入TypeScript引用属性和它的4个真实应用场景-2</h2><h3 id="类的引用属性真实应用场景-订单详情类和订单类" tabindex="-1"><a class="header-anchor" href="#类的引用属性真实应用场景-订单详情类和订单类" aria-hidden="true">#</a> 类的引用属性真实应用场景：订单详情类和订单类</h3><p>【一个订单对象有多个订单详情对象】</p><ol><li><p>在说明订单产生过程</p><blockquote><p>每个顾客每下一次订单，都会生成一个或者多个订单详情【一件商品生成一个订单详情】但每次只能生成一个订单，也就是一个订单中包含了一个或多个订单详情，我们可以定一个订单类【Order】</p></blockquote></li></ol><p>​ 订单类包含了订单id、订单日期、顾客地址、顾客微信、顾客手机号、客服</p><ol start="2"><li><p>先说明订单详情类产生过程</p><p>顾客在淘宝上下一次订单购买了三件产品，用三条记录来表示</p><p>第一个订单详情记录：1 “笔记本” 6898 8</p><p>第二个订单详情记录：2 “电脑桌” 7878 9</p><p>第三个订单详情记录：3 “手机” 3789 2</p><p>每一个订单详情都可以用一个对象来表示【订单详情对象】</p><p>创建一个订单详情类【OrderDetail】然后 new 出三个订单详情类的实例【当然可以new 出n个】</p></li></ol><h3 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> orderId<span class="token operator">:</span> <span class="token builtin">number</span> 
  <span class="token keyword">public</span> date<span class="token operator">:</span> Date 
  <span class="token keyword">public</span> custname<span class="token operator">:</span> <span class="token builtin">string</span> 
  <span class="token keyword">public</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> 
  <span class="token keyword">public</span> orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OerderDetail<span class="token operator">&gt;</span> 
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    _orderId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    _date<span class="token operator">:</span> Date<span class="token punctuation">,</span>
    _custname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    _phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    _orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OerderDetail<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> _orderId
    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> _date
    <span class="token keyword">this</span><span class="token punctuation">.</span>custname <span class="token operator">=</span> _custname
    <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> _phone
    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetail <span class="token operator">=</span> _orderDetail
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">OerderDetail</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> orderDetailId<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token keyword">public</span> productName<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">public</span> price<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token keyword">public</span> count<span class="token operator">:</span> <span class="token builtin">number</span> 
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    _orderDetailId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    _productName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    _price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    _count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetailId <span class="token operator">=</span> _orderDetailId
    <span class="token keyword">this</span><span class="token punctuation">.</span>productName <span class="token operator">=</span> _productName
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> _price
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> _count
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> orderDetailOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OerderDetail</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;电视机&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> orderDetailTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OerderDetail</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&#39;桌子&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> orderDetailArrayOne <span class="token operator">=</span> <span class="token punctuation">[</span>orderDetailOne<span class="token punctuation">,</span> orderDetailTwo<span class="token punctuation">]</span>
<span class="token keyword">const</span> orderDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> orderDate<span class="token punctuation">,</span> <span class="token string">&#39;李伍&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;119&#39;</span><span class="token punctuation">,</span> orderDetailArrayOne<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-3" tabindex="-1"><a class="header-anchor" href="#_10-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-3" aria-hidden="true">#</a> 10:【TS类晋级】深入TypeScript引用属性和它的4个真实应用场景-3</h2><h2 id="_11-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-4" tabindex="-1"><a class="header-anchor" href="#_11-【ts类晋级】深入typescript引用属性和它的4个真实应用场景-4" aria-hidden="true">#</a> 11:【TS类晋级】深入TypeScript引用属性和它的4个真实应用场景-4</h2><h2 id="_12-【ts类构造器】ts类构造器赋值-ts4新赋值方式" tabindex="-1"><a class="header-anchor" href="#_12-【ts类构造器】ts类构造器赋值-ts4新赋值方式" aria-hidden="true">#</a> 12: 【TS类构造器】TS类构造器赋值+TS4新赋值方式</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">public</span> orderId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> date<span class="token operator">:</span> Date<span class="token punctuation">,</span>
    <span class="token keyword">public</span> custname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OerderDetail<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74);function k(v,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[c("JS 原型"),i(a)])]),d])}const h=e(l,[["render",k],["__file","index-02.html.vue"]]);export{h as default};
