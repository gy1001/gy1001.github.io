import{_ as t,M as o,p as c,q as l,R as s,t as n,N as p,a1 as e}from"./framework-e8cb8151.js";const i={},r=e(`<h1 id="_19-把路由放在前端意味着什么" tabindex="-1"><a class="header-anchor" href="#_19-把路由放在前端意味着什么" aria-hidden="true">#</a> 19-把路由放在前端意味着什么？</h1><p>当浏览器地址栏中的 URL 发生变化时，会请求对应的网络资源，而负责响应这个网络资源的服务就称为<strong>路由</strong>。</p><p>在早期的 Web 开发中，路由都是交由服务端处理，但随着前端技术的快速发展，路由模块逐渐转移交给了前端进行控制，而路由转移到前端，正是前后端分离和单页应用架构 的 基石。</p><p>这一课时我们来深入理解前端路由的技术细节。</p><h2 id="前端路由实现基础" tabindex="-1"><a class="header-anchor" href="#前端路由实现基础" aria-hidden="true">#</a> 前端路由实现基础</h2><p>默认情况下，当地址栏的 URL 发生变化时，浏览器会向服务端发起新的请求。所以实现前端路由的重要基础就是在修改 URL 时，不引起浏览器向后端请求数据。根据浏览器提供的 API，有下面两种实现方案。</p><h3 id="基于-hash-实现" tabindex="-1"><a class="header-anchor" href="#基于-hash-实现" aria-hidden="true">#</a> 基于 hash 实现</h3><p>前面提到当 URL 变化时浏览器会发送请求，但有一种特例，那就是 hash 值的变化不会触发浏览器发起请求。</p><p>hash 值是指 URL“#”号后面的内容，通过 <code>location.hash</code> 属性可以读写 hash 值，这个值可以让浏览器将页面滚动到 ID 与 hash 值相等的 DOM 元素位置，不会传给服务端。</p><p>要监听它的变化也比较简单，通过监听 window 对象的 <code>hashchange</code> 事件就可以感知到它的变化。</p><p>这种实现方式占用了 hash 值，导致默认的页面滚动行为失效，对于有滚动定位需求的情况需要自行手动获取元素的位置并调用 BOM 相关 API 进行滚动。</p><h3 id="基于-history-实现" tabindex="-1"><a class="header-anchor" href="#基于-history-实现" aria-hidden="true">#</a> 基于 history 实现</h3><p>HTML 5 提出了一种更规范的前端路由实现方式，那就是通过 history 对象。</p><p>history 提供了两个函数来修改 URL，即 <code>history.pushState()</code> 和 history.replaceState()，这两个 API 可以在不进行刷新的情况下，来操作浏览器的历史 记录 。</p><p>唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录。</p><p>监听 URL 变化则可以通过监听 window 对象上的 <code>popstate 事件</code>来实现。但需要注意的是，history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面渲染。</p><p>虽然能通过这种方式实现前端路由功能，但<strong>并不能拦截浏览器默认的请求行为</strong>，当用户修改地址栏网址时还是会向服务端发起请求，所以<strong>还需要服务端进行设置</strong>，将所有 URL 请求转向前端页面，交给前端进行解析。</p><p>下面是 vue-router 官网的 Nginx 配置例子：表示对于匹配的路径，按照指定顺序依次检查对应路径文件是否存在，对应路径目录是否存在，如果没有找到任何文件 或目录 ，就返回 index.html。而 index.html 就会引入对应的 JavaScript 代码在浏览器端进行路由解析。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location <span class="token operator">/</span> <span class="token punctuation">{</span>
  try_files $uri $uri<span class="token operator">/</span> <span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由解析" tabindex="-1"><a class="header-anchor" href="#路由解析" aria-hidden="true">#</a> 路由解析</h2><p>阻止浏览器在 URL 变化时向后端发送请求之后，就需要对路由进行解析了。</p>`,21),u={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://reactrouter.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/pillarjs/path-to-regexp",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/pillarjs/path-to-regexp/archive/v1.8.0.zip",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>路由解析又分为两个操作：<strong>路由匹配</strong>和<strong>路由生成</strong>。</p><h3 id="路由匹配" tabindex="-1"><a class="header-anchor" href="#路由匹配" aria-hidden="true">#</a> 路由匹配</h3><p>路由匹配就是当获取到请求路径后，如何找到对应的配置路径。在 <code>path-to-regexp</code> 源码中对应的是默认导出函数 <code>pathToRegexp()</code>，该函数接收 3 个参数：</p><ul><li><strong>path</strong>: 必传参数，值可以为自定义的请求路径，如 <code>/user/:id</code>，也可以是正则表达式，还可以是两者组成的数组；</li><li><strong>keys</strong>: 可选参数， 值为数组， 数组元素为 解析 正则表达式风格的字符串或冒号开头的占位符（下文简称为“特殊字符串”） 生成的令牌 ，比如字符串 <code>/user/:id</code> 对应的 keys 为 <code>{ name: &#39;id&#39;, delimiter: &#39;/&#39;, optional: false, repeat: false }</code> ，这个参数的值最终会被保存到返回的正则表达式对象的 keys 属性中，可用于后面的路由生成；</li><li><strong>options</strong>: 可选参数，执行过程中的配置信息，比如是否大小写敏感。</li></ul><p>函数返回值是一个带有 <code>keys</code> <code>属性的正则表达式，keys</code> 属性值类型和 <code>keys</code> 参数相同，也是一个包含特殊字符串描述信息的数组。</p><p>由于 path 参数可以是<code>正则表达式</code>、<code>字符串</code>、<code>数组</code> 3 种类型数据，所以在处理 path 参数的时候分别对应 3 个函数 <code>regexpToRegexp()</code>、<code>stringToRegexp()</code>、<code>arrayToRegexp()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pathToRegexp</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isarray</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>!Object<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>keys <span class="token operator">||</span> options<span class="token punctuation">)</span>
    keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">regexpToRegexp</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>!Array<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isarray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">arrayToRegexp</span><span class="token punctuation">(</span><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>!Array<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>!Array<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">stringToRegexp</span><span class="token punctuation">(</span><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>!Array<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>arrayToRegexp()</code> 函数会遍历 path 数组然后递归调用函数 <code>pathToRegexp()</code>，将所得的结果拼接成一个新的正则表达式并赋值 <code>keys</code> 属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">arrayToRegexp</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">pathToRegexp</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span>source<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(?:&#39;</span> <span class="token operator">+</span> parts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token function">flags</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">attachKeys</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> keys<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>regexpToRegexp()</code> 函数会找寻正则表达式中的负向后行断言，记录到正则表达式实例的 <code>keys</code> 属性中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">regexpToRegexp</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> groups <span class="token operator">=</span> path<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\((?!\\?)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>groups<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groups<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> i<span class="token punctuation">,</span>
        <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">delimiter</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">optional</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">partial</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">asterisk</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">attachKeys</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> keys<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下会调用 <code>stringToRegexp()</code> 函数来将字符串转换成正则表达式。函数 <code>stringToRegexp()</code> 只是调用了两个函数 <code>tokensToRegexp () </code>和 <code>parse()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">stringToRegexp</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">tokensToRegExp</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到 parse() 这个函数不知道是否会让你想起前面几讲中提到的编译器，该函数的主要作用和编译器中的词法分析比较像，它会将字符串转化为令牌数组。</p><p>这些令牌分为两类，一类是<strong>非特殊字符串</strong>，不需要做任何处理，直接以字符串形式放入数组；另一类是<strong>特殊字符串</strong>，需要依赖一个正则表达式来进行处理。</p><p>这个核心的正则表达式如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">PATH_REGEXP</span> <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\\\.)|([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这个正则表达式中有多个通过圆括号形成的分组，通过调用 exec() 函数分别提取不同的信息，放入一个长度为 8 的数组中，对于不匹配的字符串则会返回 null。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">PATH_REGEXP</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;/:test(\\\\d+)?&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;/:test(\\d+)?&quot;, undefined, &quot;/&quot;, &quot;test&quot;, &quot;\\d+&quot;, undefined, &quot;?&quot;, undefined]</span>
<span class="token constant">PATH_REGEXP</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;/route(\\\\d+)&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;(\\d+)&quot;, undefined, undefined, undefined, undefined, &quot;\\d+&quot;, undefined, undefined]</span>
<span class="token constant">PATH_REGEXP</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;/*&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;/*&quot;, undefined, &quot;/&quot;, undefined, undefined, undefined, undefined, &quot;*&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>词法分析过程和前面提到的一致，即利用 while 循环以及正则匹配，将匹配到的 子串 转换成令牌对象。例如，字符串 /user/:id，会被转换成包含一个非特殊字符串和特殊字符串的令牌数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">asterisk</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token literal-property property">delimiter</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span>
    <span class="token literal-property property">optional</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token literal-property property">partial</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&quot;[^\\/]+?&quot;</span>
    <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span>
    <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在得到令牌数组之后，下一步是调用函数 <code>tokensToRegExp()</code> 将它转换成正则表达式。对于字符串令牌，直接转化成转义后的字符串，这个转义的过程也很简单，即在“<code>/</code>”“<code>[</code>”这类具有正则表达式功能的特殊字符前加上“<code>\\</code>”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> token <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  route <span class="token operator">+=</span> <span class="token function">escapeString</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token keyword">function</span> <span class="token function">escapeString</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([.+*?=^!:\${}()[\\]|\\/\\\\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于正则表达式令牌，首先放到前面提到的 <code>keys</code> 数组中，然后再对正则表达式令牌的内容进行标准化处理，拼接到最终的正则表达式字符串 <code>route</code> 中，再将 <code>route</code> 实例化为正则表达式对象，并附上 <code>keys</code> 属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">var</span> prefix <span class="token operator">=</span> <span class="token function">escapeString</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>prefix<span class="token punctuation">)</span>
<span class="token keyword">var</span> capture <span class="token operator">=</span> <span class="token string">&#39;(?:&#39;</span> <span class="token operator">+</span> token<span class="token punctuation">.</span>pattern <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  capture <span class="token operator">+=</span> <span class="token string">&#39;(?:&#39;</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> capture <span class="token operator">+</span> <span class="token string">&#39;)*&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>optional<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span>partial<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    capture <span class="token operator">=</span> <span class="token string">&#39;(?:&#39;</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> capture <span class="token operator">+</span> <span class="token string">&#39;))?&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    capture <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> capture <span class="token operator">+</span> <span class="token string">&#39;)?&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  capture <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> capture <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
<span class="token punctuation">}</span>
route <span class="token operator">+=</span> capture
<span class="token operator">...</span>
<span class="token keyword">return</span> <span class="token function">attachKeys</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;^&#39;</span> <span class="token operator">+</span> route<span class="token punctuation">,</span> <span class="token function">flags</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keys<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由生成" tabindex="-1"><a class="header-anchor" href="#路由生成" aria-hidden="true">#</a> 路由生成</h3><p>路由生成是指通过配置的请求路径字符串和参数生成对应的请求路径，比如配置的请求路径字符串 <code>/user/:id</code> 和参数 <code>{id: &quot;lagou&quot;}</code> 可以生成 <code>/user/lagou</code>，在 <code>path-to-regexp</code> 源码中对应的是函数 <code>compile()</code>。</p><p>compile() <code>函数接收两个参数：str</code> 和 <code>options</code>。</p><p>str 为字符串，可能包含特殊字符串；options 同 pathToRegexp() 函数的 options 参数。</p><p>从参数可以看出，compile() 函数并不直接生成结果字符串，而是返回一个生成函数，将参数传入这个函数中可以生成<strong>结果字符串</strong>。</p><p>compile() 函数的内部只调用了两个函数 parse() 和 tokensToFunction()，parse() 函数前面已经分析过了，下面来分析函数 tokensToFunction()。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">tokensToFunction</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 tokensToFunction() 的核心代码在于返回的匿名函数，匿名函数内部会遍历令牌数组，</p><ul><li>对于字符串令牌，直接拼接到生成的路径中；</li><li>而对于正则表达式令牌，则会通过令牌 token.name 属性来找到参数对象 obj 对应的值。</li></ul><p>如果这个值为字符串，则判断是否匹配 token 中的正则表达式，匹配之后进行 URI 编码并拼接到结果字符串 path 中；</p><p>如果为数组，则循环执行字符串匹配过程。返回的匿名函数部分代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>typeof token <span class="token operator">==</span><span class="token operator">=</span> <span class="token char">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path <span class="token operator">+=</span> token
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> value <span class="token operator">=</span> data<span class="token punctuation">[</span>token<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
  <span class="token keyword">var</span> segment
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isarray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      segment <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
      path <span class="token operator">+=</span> <span class="token punctuation">(</span>j <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">?</span> token<span class="token punctuation">.</span>prefix <span class="token operator">:</span> token<span class="token punctuation">.</span>delimiter<span class="token punctuation">)</span> <span class="token operator">+</span> segment
    <span class="token punctuation">}</span>
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
  segment <span class="token operator">=</span> token<span class="token punctuation">.</span>asterisk <span class="token operator">?</span> <span class="token function">encodeAsterisk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  path <span class="token operator">+=</span> token<span class="token punctuation">.</span>prefix <span class="token operator">+</span> segment
<span class="token punctuation">}</span>
<span class="token keyword">return</span> path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这一课时我们先介绍了前端路由的实现基础，包括基于 <code>hash</code> 实现和 <code>history</code> 实现。</p><p>基于 <code>hash</code> 方式兼容性较好，但是占用了浏览器默认的定位行为，同时会加长 URL 字符串；</p><p>基于 history 方式可以直接修改 URL 路径，较为美观。</p><p>然后分析了 <code>vue-router</code> 和 <code>react-router</code> 共同的依赖库 <code>path-to-regexp</code> 中的两个核心函数 <code>pathToRegexp()</code> 和 <code>compile()</code>。</p><p><code>pathToRegexp()</code> 会先将配置的请求路径字符串拆分成令牌数组，然后再转化成正则表达式对象，路由库可以通过正则表达式来进行路由匹配，从而将对应的组件渲染到页面；</p><p><code>compile()</code> 函数会将配置的请求路径字符串转化成一个匿名函数，这个函数可以传入参数并生成一个请求路径字符串。</p><p>最后留一道思考题：你在使用前端路由的时候碰到过哪些问题，又是怎么解决的呢？欢迎在留言区写下你的答案和大家一起交流学习。</p><hr><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h4 id="飞" tabindex="-1"><a class="header-anchor" href="#飞" aria-hidden="true">#</a> **飞：</h4><blockquote><p>路由放前端到底意味着什么？</p></blockquote><h4 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>意味着 web 应用的解耦，前后端真正分离，只通过 API 进行交互~</p></blockquote>`,51);function g(h,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[s("a",u,[n("vue-router"),p(a)]),n("和 "),s("a",k,[n("react-router"),p(a)]),n("都同时依赖了一个第三方库 "),s("a",d,[n("Path-to-RegExp"),p(a)]),n("进行路由解析，")]),s("p",null,[n("下面通过分析 "),s("a",v,[n("path-to-regexp 1.8 版本"),p(a)]),n("的源码来理解路由是如何被解析的。")]),m])}const f=t(i,[["render",g],["__file","index-19.html.vue"]]);export{f as default};
