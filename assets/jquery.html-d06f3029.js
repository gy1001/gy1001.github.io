import{_ as t,M as e,p,q as o,R as n,t as c,N as l,a1 as s}from"./framework-e8cb8151.js";const i={},u=s(`<h1 id="jquery-源码解读" tabindex="-1"><a class="header-anchor" href="#jquery-源码解读" aria-hidden="true">#</a> jQuery 源码解读</h1><h2 id="_1-基本结构" tabindex="-1"><a class="header-anchor" href="#_1-基本结构" aria-hidden="true">#</a> 1. 基本结构</h2><ol><li><p>自执行函数：</p><ul><li><p>好处</p><ul><li>创建一个独立的作用域,保护内部变量不受污染</li><li>立即执行</li></ul></li><li><p>代码展示(这里下载的是 jQuery 3.6.0 版本的)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对于 CommonJS 和 类似 CommonJS 的环境，其中有一个属性 window ,执行工厂函数然后获得 jQuery</span>
    <span class="token comment">//  对于一些没有 document 的 window （例如 nodejs），将通过 module.exports 暴露一个 factory</span>
    <span class="token comment">// 这个需要创建一个真的 window ，例子 var jQuery = require(&quot;jquery&quot;)(window);</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> global<span class="token punctuation">.</span>document
      <span class="token operator">?</span> <span class="token function">factory</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>w<span class="token punctuation">.</span>document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;jQuery requires a window with a document&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token function">factory</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">factory</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> window <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> noGlobal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是factory函数&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 内部逻辑</span>
    <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token string">&#39;3.6.0&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> noGlobal <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> window<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> jQuery
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>内容结构整理</p><ul><li><p>(43, 152) 定义了一些变量和函数 jQuery = function(){ }</p></li><li><p>(154, 248) 给 JQ 对象，添加一些方法和属性</p></li><li><p>(250, 326) extend：JQ 的继承方法</p></li><li><p>(328, 495) jQuery.extend(): 扩展一些工具方法</p></li><li><p>(530, 3148) Sizeele: 复杂选择器的实现</p></li><li><p>(3618, 3795) Callbacks: 回调对象：函数的统一管理</p></li><li><p>(3834, 4190) Deferred: 延迟对象：对异步的统一管理</p></li><li><p>(4605, 4693) data(): 数据缓存</p></li><li><p>(4763, 4829) queue(): 队列管理</p></li><li><p>(5014, 5034) show() hide() toggle() 隐藏/显示/切换操作</p></li><li><p>(5316, 5776) jQuery.event</p></li><li><p>(5873, 5960) jQuery.Event</p></li><li><p>(6075, 6115) on()、one()、off() 事件处理</p></li><li><p>(6328, 6615) DOM 操作：添加、删除、获取、包装等</p></li><li><p>(7089 ,7398) CSS 操作：</p></li><li><p>(7508, 8224) 动画</p></li><li><p>(8265, 8361) attr() 针对元素属性的操作</p></li><li><p>(8398, 8476) prop() 针对元素属性的操作</p></li><li><p>(8551, 8721) addClass() removeClass() toggleClass() hasClass()</p></li><li><p>(9083, 9095) trigger() 事件触发操作</p></li><li><p>(9247, 11014) ajax() 相关方法</p></li><li><p>(10763, 10878) offset() position() offsetParent()</p></li><li><p>(11016, 11037) bind() unbind() delegate() undelegate() hover()</p></li></ul></li></ol><h2 id="_2、其中的一些注释" tabindex="-1"><a class="header-anchor" href="#_2、其中的一些注释" aria-hidden="true">#</a> 2、其中的一些注释</h2><ol><li><p>为什么里面使用<code>use strict</code></p><blockquote><p>Edge &lt;= 12 - 13+, Firefox &lt;=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1 throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common enough that all such attempts are guarded in a try block.</p><p>Edge&lt;=12-13+、Firefox&lt;=18-45+、IE 10-11、Safari 5.1-9+、iOS 6-9.1 当非严格代码（例如 ASP.NET 4.5）访问严格模式时引发异常</p><p>arguments.callee。呼叫者（trac-13335）。但从 jQuery 3.0（2016）开始，严格模式应该是常见的足以使所有此类尝试在 try 块中受到保护。</p></blockquote></li></ol><h2 id="_3、一些神奇的代码片段" tabindex="-1"><a class="header-anchor" href="#_3、一些神奇的代码片段" aria-hidden="true">#</a> 3、一些神奇的代码片段</h2>`,6),r=s(`<li><p><code>jQuery.prototype.init</code></p><p>逻辑分析：这里 <code>jQuery</code>函数返回器原型上的<code>prototype.init()</code>，同时<code>jQuery.prototype.init.prototype = jQuery.prototype</code>,这样就可以保证<code>jQuery()</code>身上拥有其原型上的方法。也就是其中的<code>css</code>方法等，这里算是一个利用原型设计的一个巧妙之处。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是init 初始化&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">css</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是css方法&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),d=s(`<p>分析 Init 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> rootjQuery<span class="token punctuation">,</span>
  <span class="token comment">// rquickExpr包含两个分组，一个匹配HTML、一个匹配ID。</span>
  rquickExpr <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:\\s*(&lt;[\\w\\W]+&gt;)[^&gt;]*|#([\\w-]+))$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  init <span class="token operator">=</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//参数selector可以是任意类型的值，但只有undefined、DOM元素、</span>
    <span class="token comment">//字符串、函数、jQuery对象、普通JavaScript对象这几种类型是有效的，</span>
    <span class="token comment">//其他类型的值也可以接受但没有意义。</span>
    <span class="token comment">//参数context可以不传，或传入DOM元素、jQuery对象、普通JavaScript对象之一。</span>
    <span class="token comment">//参数root用于document.getElementById()查找失败、selector是选择器表达式且未指定context、selector是函数三种情况情况。</span>
    <span class="token keyword">var</span> match<span class="token punctuation">,</span> elem
    <span class="token comment">// 排除: $(&quot;&quot;), $(null), $(undefined), $(false), 直接返回this。这时this是空jQuery对象，其属性length为0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重置root：rootjQuery包含了document对象的jQuery对象，以此支持jquery.sub</span>
    root <span class="token operator">=</span> root <span class="token operator">||</span> rootjQuery
    <span class="token comment">// 处理HTML字符串参数</span>
    <span class="token comment">// $(&#39;#div1&#39;) $(&quot;.box&quot;) $(&quot;div&quot;) $(&quot;#div div.box&quot;)</span>
    <span class="token comment">// $(&quot;&lt;li&gt;&quot;) $(&quot;&lt;li&gt;hello&quot;) $(&quot;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&quot;)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果参数selector以“&lt;”开头以“&gt;”结尾，且长度大于3。</span>
      <span class="token comment">// 则“假设”这个字符串是HTML片段，跳过正则表达式检查。</span>
      <span class="token comment">// 否则就用正则rquickExpr检查字符串是否是ID、标签、类选择器，匹配的结果放到match数组中。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        selector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span> <span class="token operator">&amp;&amp;</span>
        selector<span class="token punctuation">[</span>selector<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&gt;&#39;</span> <span class="token operator">&amp;&amp;</span>
        selector<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">3</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 匹配如下方式的</span>
        <span class="token comment">// 处理 html 字符串</span>
        <span class="token comment">// $(&quot;&lt;li&gt;&quot;): match = [null, &quot;&lt;li&gt;&quot;, null]</span>
        <span class="token comment">// $(&quot;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&quot;) match = [null, &lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;, null]</span>
        match <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> selector<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// $(&#39;#div1&#39;): match = [&#39;#div1&#39;, undefined, &#39;div1&#39;]</span>
        <span class="token comment">// $(&quot;.box&quot;):  macth = null</span>
        <span class="token comment">// $(&quot;div&quot;)    match = null</span>
        <span class="token comment">// $(&quot;#div div.box&quot;) match = null</span>
        <span class="token comment">// $(&quot;&lt;li&gt;hello&quot;) match = [&#39;&lt;li&gt;hello&#39;, &#39;&lt;li&gt;&#39;, undefined]</span>
        match <span class="token operator">=</span> rquickExpr<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 匹配 html 元素 或者确保 没有为 id 选择器指定 context</span>
      <span class="token comment">// 如果match[1]不是undefined，即参数selector是HTML代码，</span>
      <span class="token comment">// 或者match[2]不是undefined，即参数selector是#id，并且未传入参数context。</span>
      <span class="token comment">// 完整版的判断如下 if (match &amp;&amp; (match[1] || match[2] &amp;&amp; !context)) {} ，为什么省略了对//match[2]的判断？</span>
      <span class="token comment">// 因为如果match不是null且match[1]是undefined，那么此时match[2]必然不是undefined，所以对match[2]的判断可以省略。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// HANDLE: $(html) -&gt; $(array)</span>
        <span class="token comment">// 判断字符串是HTML</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 修正context：context = context instanceof jQuery ? context[0] : context;。</span>
          <span class="token comment">// 先判断第二个参数的类型在将context赋值成原生的节点。例如输入的是：$(&#39;li&#39;,document)或$(&#39;li&#39;,$(document))。</span>
          context <span class="token operator">=</span> context <span class="token keyword">instanceof</span> <span class="token class-name">jQuery</span> <span class="token operator">?</span> context<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> context
          <span class="token comment">// Option to run scripts is true for back-compat</span>
          <span class="token comment">// Intentionally let the error be thrown if parseHTML is not present</span>
          <span class="token comment">//判断能否向后兼容：jQuery.merge(this, jQuery.parseHTML())。</span>
          <span class="token comment">// jQuery.parseHTML()用于将HTML字符串解析为对应的DOM节点数组。有三个参数：htmlString,context,keepScripts。HTMLString，string类型，需要解析并转为DOM节点数组的字符串。context，element类型。指定在那个document中创建元素。默认为当前文档的document。keepscript，boolean类型，指定传入的字符串中是否包含脚本，默认为false。</span>
          <span class="token comment">// 我们传入了三个参数：&quot;match[ 1 ],context &amp;&amp; context.nodeType ? context.ownerDocument || context : document,true&quot;。如果context与context的节点存在，使用context或context的owner document，否则用默认参数domcument。</span>
          <span class="token comment">// jQuery.merge()用于合并两个数组内容到第一个数组。注意这时传入的this是个json对象而不是数组，通过这种方式也能进行合并并返回jQuery想要的json格式。</span>
          <span class="token comment">// 这里的this 结构类似于对象性数组，比如 $(&quot;li&quot;) 选中一组元素，其本身this是 { 0:&quot;li&quot;, 1: &quot;li&quot;,length: 2, version:&quot;3.0.6&quot; ... }</span>
          jQuery<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">,</span>
            jQuery<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span>
              match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              context <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>nodeType
                <span class="token operator">?</span> context<span class="token punctuation">.</span>ownerDocument <span class="token operator">||</span> context
                <span class="token operator">:</span> document<span class="token punctuation">,</span>
              <span class="token boolean">true</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
          <span class="token comment">// HANDLE: $(html, props)</span>
          <span class="token comment">// 解析$(HTML, props)格式</span>
          <span class="token comment">// 如果正则rsingleTag验证&quot;match[1]&quot;是否是一个单独的标签，且context是一个纯粹的对象条件成立。循环这个json对象，并判断json里的属性是否是jq自带的方法，如果是，则直接调用方法，否则，用jq的attr方法为这个标签加一个“match”属性。</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>rsingleTag<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>match <span class="token keyword">in</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// Properties of context are called as methods if possible</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">(</span>context<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment">// ...and otherwise set as attributes</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> context<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span>
          <span class="token comment">// HANDLE: $(#id)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 判断字符串是ID且未指定参数</span>
          <span class="token comment">//使用getElementById()方法查找含有Id属性的DOM元素</span>
          elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token comment">//如果DOM元素存在，设置第一个元素，属性length，并返回当前对象。</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Inject the element directly into the jQuery object</span>
            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> elem
            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 返回当前对象</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// HANDLE: $(expr, $(...))</span>
        <span class="token comment">// 判断字符串是选择器表达式</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context <span class="token operator">||</span> context<span class="token punctuation">.</span>jquery<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果没有指定上下文，则执行root.find(selector);</span>
        <span class="token comment">// 如果指定了上下文，且上下文是jQuery对象，则执行context.find(selector);</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>context <span class="token operator">||</span> root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
        <span class="token comment">// HANDLE: $(expr, context)</span>
        <span class="token comment">// (which is just equivalent to: $(context).find(expr)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果制定了上下文，但上下文不是jQuery对象，则执行this.constructor(context).find(selector)</span>
        <span class="token comment">// 即先创建一个包含了context的jQuery对象，然后在该对象上调用find()方法。</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// HANDLE: $(DOMElement)</span>
      <span class="token comment">// 如果参数selector含有属性nodeType，则认为selector是DOM元素，设置第一个元素指向该DOM元素、属性length为1，然后返回包含了改DOM元素引用的jQuery对象。nodeType声明了文档树中节点的类型，例如，element节点的该属性值是1，text节点是3，comment是9，document是9, documentfragment节点是11。</span>
      <span class="token comment">// 参数selector是节点，设置第一个元素、属性length，并返回当前对象。</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> selector
      <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
      <span class="token comment">// HANDLE: $(function)</span>
      <span class="token comment">// Shortcut for document ready</span>
      <span class="token comment">// 参数selector是函数</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断root.ready是否存在，存在则执行root.ready(selector)，否则执行该方法；</span>
      <span class="token keyword">return</span> root<span class="token punctuation">.</span>ready <span class="token operator">!==</span> <span class="token keyword">undefined</span>
        <span class="token operator">?</span> root<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token comment">// Execute immediately if ready is not present</span>
          <span class="token function">selector</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果selector是JavaScript对象，则作为第一个元素放入当前jQuery对象中；</span>
    <span class="token comment">// 如果是其他类型的值，则作为第一个元放入当前jQuery对象中。最后返回当前对象。</span>
    <span class="token comment">// 参数selector是任意值，如果selector是数组或伪数组（如jQuery对象），则都添加到当前jQuery对象中；</span>
    <span class="token keyword">return</span> jQuery<span class="token punctuation">.</span><span class="token function">makeArray</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Give the init function the jQuery prototype for later instantiation</span>
<span class="token comment">// 通过 init.prototype = jQuery.fn; 用jQuery()原型对象覆盖了jQuery.fn.init()的原型对象。</span>
init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn
<span class="token comment">// Initialize central reference</span>
<span class="token comment">// 初始化rootjQuery</span>
rootjQuery <span class="token operator">=</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考链接:</p>`,3),k={href:"https://blog.csdn.net/chunchun1230/article/details/104123590",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("ol",null,[r,n("li",null,[d,n("p",null,[n("a",k,[c("jQuery 源码之构造 jQuery 对象——jQuery.fn.init(selector, context, root)"),l(a)])])])])])}const h=t(i,[["render",m],["__file","jquery.html.vue"]]);export{h as default};
