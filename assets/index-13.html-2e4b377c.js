import{_ as i,M as t,p as a,q as l,R as e,t as d,N as n,a1 as o}from"./framework-e8cb8151.js";const r={},s=o(`<h1 id="_13-可用于-grid-布局中的函数" tabindex="-1"><a class="header-anchor" href="#_13-可用于-grid-布局中的函数" aria-hidden="true">#</a> 13-可用于 Grid 布局中的函数</h1><p>在 CSS 中有很多种类型的函数，其中可用于尺寸属性的函数主要有 <code>calc()</code> 、<code>min()</code> 、<code>max()</code> 、<code>clamp()</code> 等。这些 CSS 函数都可用来设置网格轨道尺寸，除此之外，还有一些专门用于设置网格轨道的函数，比如 <code>repeat()</code> 、<code>minmax()</code> 和 <code>fit-content()</code> 等。接下来，我们主要来看看这些函数是如何用于设置网格轨道尺寸的，它们给网格布局又能带来哪些不一样。</p><h2 id="repeat-函数" tabindex="-1"><a class="header-anchor" href="#repeat-函数" aria-hidden="true">#</a> repeat() 函数</h2><p>我们先从 <code>repeat()</code> 函数开始。</p><p>在前面介绍网格轨道尺寸设置的课程中，常会看到给 <code>grid-template-columns</code> 、<code>grid-tempalte-rows</code> 、 <code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 设置多个相同的长度值，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: 1fr 1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示列轨道设置了三个相同的值。针对于这样的场景，网格布局中提供了一个 <code>repeat()</code> 函数，可以让上面的代码变得更简洁：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: 1fr 1fr 1fr;
    
    /* 等同于 */
    grid-template-columns: repeat(3, 1fr);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网格中的 <code>repeat()</code> 函数主要用来设置网格轨道列表（<code>&lt;track-lists&gt;</code>）的重复片段，允许以更紧凑的形式写入大量显示重复模式的网格轨道（列或行）。该函数可以用于 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性，用来设置网格轨道尺寸大小，但它不能用于 <code>grid-auto-rows</code> 和 <code>grid-auto-columns</code>。</p><p><code>repeat()</code> 函数具有一定的语法规则，它接受两个参数：</p><ul><li>第一个参数表示重复的次数，比如 <code>repeat(3, 1fr)</code> 中的 <code>3</code> ，该参数除了可以是<strong>正整数</strong>之外，还可以是 <strong><code>auto-fit</code></strong> 和 <strong><code>auto-fill</code></strong> 两关键词。</li><li>第二个参数是一个长度列表值，即重复的网格轨道的列表值，比如 <code>repeat(3, 1fr)</code> 中的 <code>1fr</code> ；另外该参数的值还可以是一个复合值，比如 <code>repeat(3, 1fr 20px [col])</code> 中的 <code>1fr 20px [col]</code>。</li></ul><p>我们通过几个示例来向大家展示 <code>repeat()</code> 函数的几种常用的使用方式。先从最简单的开始，即：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: 1fr 1fr 1fr 1fr;
    
    /* 使用 repeat() 函数 */
    grid-template-columns: repeat(4, 1fr);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce95f8f9bfc64e3f805ef32ab9fef539~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,14),m={href:"https://codepen.io/airen/full/xxjNjeL",target:"_blank",rel:"noopener noreferrer"},p=o(`<p><code>repeat()</code> 函数中的第二个参数还可以是一个列表值，比如 <code>1fr 200px</code>：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: repeat(3, 1fr 200px);
    
    /* 等同于 */
    grid-template-columns: 1fr 200px 1fr 200px 1fr 200px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中的 <code>repeat(3, 1fr 200px)</code> 意思是 <code>1fr 200px</code> 会重复 <code>3</code> 次，相当于创建了一个六列的网格：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66eb94f3d15e423698a0e0fa8a550d0f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),u={href:"https://codepen.io/airen/full/RwymJZO",target:"_blank",rel:"noopener noreferrer"},g=o(`<p><code>repeat()</code> 函数的第二个值除了可以是网格轨道列表值之外，也可以显式给网格线命名，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: repeat(3, 1fr [col]);
    
    /* 等同于 */
    grid-template-columns: 1fr [col] 1fr [col] 1fr [col];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要是在 <code>repeat()</code> 函数中重复网格线名称的话，结束的网格线名称最终会与下一条开始网格线名称共享同一个网格线名称：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40c4dae0850747a3b25343fdb6bf0de6~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),v={href:"https://codepen.io/airen/full/WNJBKVg",target:"_blank",rel:"noopener noreferrer"},b=o(`<p>如果你在使用 <code>repeat()</code> 给网格轨道设置尺寸时需要显式命名网格线名称，还可以像下面这样使用：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: repeat(3, [col-start] 1fr [col-end]);
    
    /* 等同于 */
    grid-template-columns: 
        [col-start] 1fr
        [col-end col-start] 1fr
        [col-end col-start] 1fr
        [col-end];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，可用于设置网格轨道尺寸的值，都可以被用于 <code>repeat()</code> 函数的第二个参数，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: repeat(3, minmax(min(300px, 100%), 1fr));
    
    /* 等同于 */
    grid-template-columns: 
        minmax(min(300px, 100%), 1fr) 
        minmax(min(300px, 100%), 1fr) 
        minmax(min(300px, 100%), 1fr);
}

.container {
    grid-template-columns: repeat(3, min-content auto max-content);
    
    /* 等同于 */
    grid-template-columns: 
        min-content auto max-content 
        min-content auto max-content
        min-content auto max-content;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但需要注意的是，<strong><code>repeat()</code></strong> <strong>函数中不能嵌套</strong> <strong><code>repeat()</code></strong> <strong>函数！</strong></p><h3 id="auto-fill-vs-auto-fit" tabindex="-1"><a class="header-anchor" href="#auto-fill-vs-auto-fit" aria-hidden="true">#</a> auto-fill vs. auto-fit</h3><p>你可能已经发现了，前面几个示例中 <code>repeat()</code> 函数的第一个参数都是整数值。一般在你已经知道网格轨道要重复的次数时才用，但很多时候，你可能并不知道网格轨道重复的数量，更希望的是它能自动匹配。</p><p>庆幸的是，<code>repeat()</code> 函数的第一个参数除了可以接受一个整数值之外，还可以接受 <strong><code>atuto-fit</code></strong> 和 <strong><code>auto-fill</code></strong> 两个关键词。它们会告诉浏览器处理网格轨道的大小和断行（或断列），以便当容器空间不足以容纳元素时，元素会自动换行（或列）而不会造成溢出。但 <code>auto-fill</code> 和 <code>auto-fit</code> 两者之间还是有一些细微差异的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d21f9de878af480cb3895bc65fa6a7e0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><ul><li><strong><code>auto-fill</code></strong> ：在同一行中填充尽可能多的列。因此，只要能容纳新的列，就会自动创建隐式列，因为它试图在同一行中填充尽可能多的列。新添加的列（隐式列）可以是空的，但是它们仍然会在行中占据指定的空间。</li><li><strong><code>auto-fit</code></strong> ：将当前可用的列扩展到空间中，以便它们占用容器可用空间。当容器有可用空间时，浏览器会将可用空间均分给列，让列自动变宽填满整个容器；当容器可用空间为负值时，会另起一行排列。</li></ul><p>简单地说，<strong><code>auto-fit</code></strong> <strong>将扩展网格项目以填补可用空间，而</strong> <strong><code>auto-fill</code></strong> <strong>不会扩展网格项目。相反，<code>auto-fill</code></strong> <strong>将保留可用的空间，而不改变网格项目的宽度</strong> 。</p><p>在实际使用过程中，网格容器中有多个和仅有一个网格项目时，使用 <code>auto-fill</code> 与 <code>auto-fit</code> 的差异：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fd772d07e1742c699a3038b2a5a15f4~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上面两张图展示了 <code>auto-fit</code> 和 <code>auto-fill</code> 在网格布局中的差异。那它们两者又是如何工作的呢？我们以一个实例来向大家介绍 <code>auto-fit</code> 和 <code>auto-fill</code> 是如何工作的。</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;
    &lt;!-- 此处省略两个 Item --&gt;
    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    --width: 100%,
    --auto-size: auto-fit;
    
    display: grid;
    grid-template-columns: repeat(var(--auto-size), 120px);
    gap: 10px;
    
    width: var(--width); /* 它的父元素 width = 1000px */
    padding: 10px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中网格容器的宽度是 <code>1000px</code> ，并且设置了 <code>10px</code> 的内距（<code>padding</code>），<code>grid-template-columns</code> 指定的列网格轨道尺寸是 <code>120px</code> ，网格沟槽（列网格轨道之间的间距）是 <code>10px</code> 。</p><p>你会发现，<code>repeat()</code> 函数的第一个参数不管是 <code>auto-fit</code> 还是 <code>auto-fill</code> ，浏览器都会根据相关的参数（比如网格容器的宽度、网格轨道尺寸和网格沟槽等）创建出最适合于网格容器可用空间的网格列轨道数量，即，<strong>在保证网格项目不溢出网格容器之下，创建最多数量的网格列（或行）轨道</strong> 。</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>网格容器宽度 = 网格列轨道尺寸 × 网格列轨道数量 + (网格列轨道数量 - 1) × 网格沟槽
980       =   120px      ×     ?          (     ?      - 1) × 10     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器计算出这个“<strong><code>?</code></strong> ” 大约会是 <code>7.66667</code> ，所以浏览创建了一个七列的网格。不同的是 <code>auto-fit</code> 会把空的网格轨道折叠在一起（空网格轨道是指没有放置网格项目的网格轨道）。折叠的轨道尺寸大小会被视为 <code>0px</code>。浏览器为了找到自动重复的轨道数，会将轨道尺寸限制为用户代理指定的值（比如 <code>1px</code>），来避免被零除。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19a88ff0221a4759a89a9471fd9e606c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>auto-fill</code> 则不会将创建的空网格轨道折叠在一起：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/750ab74773d148709b2275d655f85c58~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>repeat()</code> 函数中使用 <code>auto-fit</code> 或 <code>auto-fill</code> 关键词替代重复的次数时，又被称为<strong>自动换行</strong> 。当网格容器无法容纳网格轨道时（有网格项目的），就会自动创建新的一行：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7abdedb5027468d825615feb7d66b07~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,25),f={href:"https://codepen.io/airen/full/PoevxOp",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>虽然在 <code>repeat()</code> 函数中使用 <code>auto-fit</code> 或 <code>auto-fill</code> 都可能创建尽可能多的列，但每个网格轨道的尺寸是固定的，它并不是一个自动尺寸。不过，可以将 <code>fr</code> 单位值和 <code>minmax()</code> 函数结合在一起，让网格轨道尺寸是<strong>自动的</strong> ，即网格轨道尺寸是自动匹配的（在一个范围内）。</p><p>把上面示例稍微调整一下，将 <code>repeat(var(--auto-size), 120px)</code> 中的 <code>120px</code> 替换成 <code>minmax(120px, 1fr)</code> ，即：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    --width: 100%,
    --auto-size: auto-fit;
    
    display: grid;
    
    grid-template-columns: repeat(var(--auto-size), minmax(120px, 1fr));
    
    gap: 10px;
    
    width: var(--width); /* 它的父元素 width = 1000px */
    padding: 10px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>auto-fit</code> 时，创建的重复轨道尺寸是 <code>0</code> ，网格轨道的尺寸会介于 <code>120px ~ 1fr</code> 之间，最小是 <code>120px</code> ，最大是 <code>1fr</code> ，而且 <code>1fr</code> 会根据网格容器可用空间计算出网格轨道尺寸。由于创建的重复轨道尺寸是 <code>0</code> ，所以网格容器可用空间更大（<code>1000px - 10px × 2 - 10px × 3 = 950px</code>），对应的 <code>1fr = 1 / 4 = 25% × 950px = 237.5px</code> ，所以你将看到的网格项目被拉伸了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcad7d6b673443798c6becc0dfb59948~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>auto-fill</code> 创建的重复轨道尺寸也是 <code>minmax(120px, 1fr)</code> ，而且不会被折叠，所以网格容器的可用空间分的等份就更多（因为创建的三个空网格轨道，它位置占着），即 <code>7</code> 个 <code>fr</code> 。同时网格容器可用空间也更小 （<code>1000px - 10px × 2 - 10px × 6 = 920px</code>），对应的 <code>1fr = 1 / 7 = 14.28% × 920px = 131.43px</code> ，即网格轨道尺寸是介于 <code>120px ~ 1fr</code> （相当于 <code>120px ~ 131.43px</code>）之间：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c60767dffe4c42cf903f85b053c79e6f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),h={href:"https://codepen.io/airen/full/mdLZwey",target:"_blank",rel:"noopener noreferrer"},S=o(`<p>你要是将 <code>repeat()</code> 函数和 <code>minmax(min,max)</code>、<code>1fr</code> 和 <code>auto-fill</code>（或 <code>auto-fit</code>）结合起来，可以很容易帮我们实现像下图这样的响应式布局效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75f1124edc114dac903e13aababe952e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>实现上图这样的效果，代码很简单：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container { 
    display: grid; 
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); 
    gap: 20px; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa65abf944fe46178f5e64a4ec3a7563~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),M={href:"https://codepen.io/airen/full/mdLZMBp",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>这种布局技术也被称为 <strong>RAM（Repeat, Auto, Minmax）</strong> 布局，一种无需依赖任何 CSS 媒体查询特性的响应式布局。</p><h2 id="minmax-函数" tabindex="-1"><a class="header-anchor" href="#minmax-函数" aria-hidden="true">#</a> minmax() 函数</h2><p><code>minmax()</code> 函数是用于设置网格轨道尺寸的另一个函数，它可以用于 <code>grid-template-columns</code> 、 <code>grid-template-rows</code> 、<code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 属性上。该函数可以接受两个参数值，即 <strong><code>MIN</code></strong> 和 <strong><code>MAX</code></strong> 。每个参数都可以是：</p><ul><li><code>&lt;length-percentage&gt;</code> 值，比如 <code>px</code> 和 <code>%</code>；</li><li><code>&lt;flex&gt;</code> 值，比如 <code>fr</code>；</li><li>关键词，比如 <code>auto</code> 、<code>min-content</code> 、<code>max-content</code>；</li><li>函数表达式，比如 <code>min()</code> 、<code>max()</code> 、<code>clamp()</code> 和 <code>clac()</code>。</li></ul><p><code>minmax(MIN, MAX)</code> 可以输出一个范围值，<strong>它定义了一个大于或等于</strong> <strong><code>MIN</code></strong> <strong>值且小于或等于</strong> <strong><code>MAX</code></strong> <strong>值的尺寸范围</strong> 。简单地说，<code>minmax(MIN, MAX)</code> 函数将返回<code>MIN ~ MAX</code> 范围中的一个值。我们可以像下面这样使用 <code>minmax(MIN, MAX)</code> 函数：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>grid-template-columns: minmax(200px, 300px);
grid-template-columns: minmax(min-content, 320px);
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
grid-template-columns: minmax(min(200px, 100%), 1fr);
grid-template-columns: minmax(300px, 50%);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们花点时间来看看， <code>minmax(MIN, MAX)</code> 函数取不同类型值是如何工作的。</p><p>先来看最简单的 <code>&lt;length&gt;</code> 值类型，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(100px, 220px) 1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7f756cb2b124a6288fe56576a71375d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,10),k={href:"https://codepen.io/airen/full/JjvQrJp",target:"_blank",rel:"noopener noreferrer"},C=o(`<p>使用 <code>minmax(100px, 220px)</code> 指定网格第一列的列宽保持在 <code>100px</code> 至 <code>220px</code> 之间，随着网格容器尺寸的变化，该列的宽度也会有改变，但总是在这两个值的范围内变化：</p><ul><li>当网格容器宽度足够宽时，<code>minmax(100px, 220px)</code> 返回的值是 <code>220px</code>，即第一列的网格轨道宽度是 <code>220px</code>（<code>MAX</code>的值）。</li><li>当网格容器宽度调到很小时（比如 <code>222.5px</code>），<code>minmax(100px, 220px)</code> 返回的值是 <code>100px</code>，即第一列的网格轨道宽度是 <code>100px</code>（<code>MIN</code>的值）。</li><li>另外，<code>minmax(100px, 220px)</code> 还会返回一个 <code>100px ~ 220px</code> 之间的值，比如当容网格容器宽度是 <code>300px</code> 时，<code>minmax(100px, 220px)</code> 返回的值就是 <code>177.34px</code>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0990112159dc40c9bb61bf62fa15b869~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>正如你所看到的，示例中网格的第二、第三列的收缩和扩展会根据网格容器可用空间变化（因为它们的轨道宽度设置的值是 <code>1fr</code>），但第一列网格轨道的宽度总是保持在 <code>100px</code> 至 <code>220px</code> 之间，最小不小于 <code>100px</code> ，最大不大于 <code>220px</code> 。</p><p>我们把上面这个示例中的 <code>220px</code> 换成一个<code>&lt;percentage&gt;</code> （<code>%</code> 值），比如 <code>50%</code> ：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(100px, 50%) 1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec222bbeffdd4457a9fda7874c9f18b9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),N={href:"https://codepen.io/airen/full/QWrXOJm",target:"_blank",rel:"noopener noreferrer"},X=o(`<p>当<code>minmax(MIN, MAX)</code> 的值为百分比值时（示例中的 <code>MAX=50%</code>），那么它们就是一个动态值。上一节课程中我们聊到过，网格轨道的值是一个百分比值时：</p><ul><li><code>grid-template-columns</code> 或 <code>grid-auto-columns</code> 值是百分比值时，它相对于网格容器内联轴（<code>inline-size</code>）尺寸计算；</li><li><code>grid-template-rows</code> 或 <code>grid-auto-rows</code> 值是百分比值时，它相对于网格容器块轴（<code>block-size</code>）尺寸计算。</li></ul><p>所以我们示例中的 <code>MAX</code> 值相对于网格容器宽度来计算，即示例中的 <code>MAX</code> 的值等于 <code>W × 50%</code> （其中 <code>W</code> 是网格容器的宽度）：</p><ul><li>当 <code>W = 1000px</code> 时，<code>MAX = 50% × (1000px - 20px) = 490px</code>；</li><li>当 <code>W = 800px</code> 时， <code>MAX = 50% × (800px - 20px) = 390px</code>；</li><li>当 <code>W = 500px</code> 时， <code>MAX = 50% × (500px - 20px) = 240px</code>；</li><li>当 <code>W = 300px</code> 时， <code>MAX = 50% × (300px - 20px) = 140px</code>；</li><li>当 <code>W = 200px</code> 时， <code>MAX = 50% × (200px - 20px) = 90px</code>。</li></ul><p>这样一来，<code>minmax(100px, 50%)</code> 代表的范围值也会随着网格容器宽度而变化，并且计算出来的 <code>MAX</code> 值也有可能会比 <code>MIN</code> 值小，比如当你把网格容器宽度调整到 <code>200px</code> 时，计算出来的 <code>MAX</code> 值就要比 <code>MIN</code> 值小。出现这种现象时，<code>MAX</code> 值将会被忽略，<code>minmax(MIN, MAX)</code> 函数最终会取 <code>MIN</code> 值作为函数的返回值。</p><p>这个观点是通用的：</p><blockquote><p><strong><code>minmax(MIN, MAX)</code> 函数，如果 <code>MAX</code> 小于 <code>MIN</code> 时， <code>MAX</code></strong> <strong>将会被忽略，最终</strong> <strong><code>minmax(MIN, MAX)</code></strong> <strong>函数将会返回</strong> <strong><code>MIN</code></strong> <strong>的值</strong> 。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48808eb7bd614295bfee7c08e75a38c7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>minmax(MIN, MAX)</code> 函数中的两个参数都可以取百分比（<code>%</code>）值，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(30%, 50%) 1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样使用，有可能计算出来的值会比网格轨道中网格项目内容（元素）的最小尺寸（<code>min-content</code>）还会小，甚至网格列宽会趋于 <code>0</code> ，将会造成网格项目溢出网格列轨道：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e1355afd66447708e4a31ea70d30c80~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,12),A={href:"https://codepen.io/airen/full/BaxXydr",target:"_blank",rel:"noopener noreferrer"},I=o(`<p>因此，在使用 <code>minmax(MIN, MAX)</code> 函数设置网格轨道时，不建议 <code>MIN</code> 和 <code>MAX</code> 都取 <code>&lt;percentage&gt;</code> （<code>%</code>）值，更建议在 <code>minmax(MIN, MAX)</code> 中把 <code>%</code> 值和其他类型值结合起来使用，比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>/* &lt;inflexible-breadth&gt;, &lt;track-breadth&gt; 值 */ 
minmax(400px, 50%)        /* ~&gt; MIN = 400px;         MAX = 50% */
minmax(30%, 300px)        /* ~&gt; MIN = 30%;           MAX = 300px */

/* &lt;fixed-breadth&gt;, &lt;track-breadth&gt; 值 */ 
minmax(1fr, 50%)           /* ~&gt; MIN = 1fr;          MAX = 50% */ 
minmax(400px, 50%)         /* ~&gt; MIN = 400px;        MAX = 50% */
minmax(30%, 300px)         /* ~&gt; MIN = 30%;          MAX = 300px */ 
minmax(50%, min-content)   /* ~&gt; MIN = 50%;          MAX = min-content */ 

/* &lt;inflexible-breadth&gt;, &lt;fixed-breadth&gt; 值 */ 
minmax(400px, 50%)         /* ~&gt; MIN = 400px;        MAX = 50% */ 
minmax(30%, 300px)         /* ~&gt; MIN = 30%;          MAX = 300px */
minmax(min-content, 50%)   /* ~&gt; MIN = min-content   MAX = 50% */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>minmax(MIN, MAX)</code> 函数中的参数值还可以是一个 <code>&lt;flex&gt;</code> 值（<code>fr</code> 单位值），如果该函数的有一个值是 <code>fr</code> 单位的值时，它会按 <code>fr</code> 计算来取值，而且和其他设置了 <code>fr</code> 单位值一起计算，分配网格容器可用空间。比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(100px, 1fr) 1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>minmax(100px, 1fr)</code> 取 <code>MIN</code> 值时，则返回的是 <code>100px</code> ；当它取 <code>MAX</code> 值时，则返回的是 <code>1fr</code> ，此时 <code>grid-template-columns</code> 的值相当于 <code>1fr 1fr 1fr</code> 。每个 <code>fr</code> 则等于网格容器可用空间的三分之一（因为总共有<code>3</code> 个 <code>fr</code> ，即 <code>1fr + 1fr + 1fr</code>）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1abc1ad323243348635bf45d4bae92b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),j={href:"https://codepen.io/airen/full/VwxoYor",target:"_blank",rel:"noopener noreferrer"},y=o(`<p>当你改变网格容器尺寸时，你会发现，如果网格容器有足够空间，<code>minmax(100px, 1fr)</code> 则会取 <code>1fr</code> ，反之则会取 <code>100px</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a770ad430c0c4d73b3019bf555f665b2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>不过需要注意的是，<code>minmax(MIN, MAX)</code> 函数取 <code>fr</code> 单位值时，不能同时给 <code>MIN</code> 和 <code>MAX</code> 都设置 <code>fr</code> 单位的值，因为两个参数值都取 <code>fr</code> 单位值，浏览器会视该属性值无效：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd1ca9bac4b642ef89425b5559052de1~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>针对这一点，W3C 规范中有做过相应的描述：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba52f4c5236c4ae78813c829be5b8d8f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>也就是说，<strong>在</strong> <strong><code>minmax(MIN, MAX)</code></strong> <strong>函数中使用</strong> <strong><code>fr</code></strong> <strong>单位值时，只能用于</strong> <strong><code>MAX</code></strong> <strong>值中</strong> 。换句话说，<code>minmax(MIN, MAX)</code> 中 <code>MAX</code> 取 <code>fr</code> 单位值，可以和其他单位（除 <code>fr</code>之外）类型 <code>MIN</code> 值混合使用，比如示例中的 <code>minmax(100px, 1fr)</code>。即使是这样，也有可能 <code>1fr</code> 计算出来的值会小于<code>100px</code>，要是出现这种现象，<code>minmax(100px, 1fr)</code>并不会无效，它最终会返回 <code>MIN</code> 的值（即 <code>100px</code> ）。</p><p>在介绍 <code>fr</code> 的时候，我们聊到所有设置 <code>1fr</code> 值的列网格轨道，并不一定能让所有网格列轨道宽度相等，但可以使用 <code>minmax(0, 1fr)</code> 来替代 <code>1fr</code> ，实现列相等（均分列）的布局效果：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr); 
    
    /* 等同于 */
    grid-template-columns: repeat(3, minmax(0, 1fr));
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b03dbeeb5d2342949d69da397f3a0dc0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,10),z={href:"https://codepen.io/airen/full/xxjvwqQ",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>正如你所看到的，设置 <code>minmax(0, 1fr)</code> 的网格轨道的宽度是在 <code>0 ~ 1fr</code> 之间变化，最小为 <code>0</code>，最大不会超过 <code>1fr</code>。</p><p>当然，你也可以将 <code>MAX</code> 设置为<code>0</code> ，比如 <code>minmax(100px, 0)</code> 、<code>minmax(30%, 0)</code> 都是有效的，只不过最终会取 <code>MIN</code> 的值作为 <code>minmax(MIN, MAX)</code> 函数的返回值，这也符合前面的规则，<strong>当 <code>minmax(MIN, MAX)</code></strong> <strong>函数中的</strong> <strong><code>MAX</code></strong> <strong>值小于</strong> <strong><code>MIN</code></strong> <strong>值时，会返回</strong> <strong><code>MIN</code></strong> <strong>值</strong> 。</p><p>另外需要注意的是，示例中 <code>minmax(0, 1fr)</code> 是一个有效值，但 <strong><code>minmax(1fr, 0)</code> 则是一个无效值。这是因为 <code>minmax(MIN, MAX)</code> 函数只能在 <code>MAX</code> 参数设置 <code>fr</code> 单位值，否则 <code>minmax(MIN, MAX)</code> 也将是一个无效值</strong> 。</p><p><code>minmax(MIN, MAX)</code> 函数参数除了可以取长度值之外，还可以取一些描述长度的关键词，比如 <code>auto</code> 、<code>min-content</code> 、<code>max-content</code> 等。比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>grid-template-columns: minmax(auto, auto) minmax(min-content, min-content) minmax(max-content, max-content);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>依旧通过几个简单的示例向大家展示 <code>minmax(MIN, MAX)</code> 函数取关键词作为值时，对网格轨道尺寸有何影响。先来看 <code>auto</code> 值：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(auto, auto)  1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>minmax(MIN, MAX)</code> 函数中使用关键词 <code>auto</code> 时：</p><ul><li>当 <code>auto</code> 作为 <code>MAX</code>值（<code>minmax(100px, auto)</code>），<code>auto</code>值相当于 <code>max-content</code>（<code>minmax(100px, max-content)</code>），即 <code>minmax(100px, auto)</code> 等同于 <code>minmax(100px, max-content)</code>。</li><li>当 <code>auto</code> 作为 <code>MIN</code> 值（<code>minmax(auto, 1fr)</code>），它的值由对应网格轨道中内容的最小尺寸指定，<code>auto</code> 有时相当于 <code>min-content</code> （<code>minmax(min-content, 1fr)</code>），即 <code>minmax(auto, 1fr)</code> 等同于 <code>minmax(min-content, 1fr)</code>，但并非总是如此，因为有时候会受网格项目的 <code>min-width</code> （ <code>min-inline-size</code>）或 <code>min-height</code> （ <code>min-block-size</code>）值影响。如果显式指定网格项目的<code>min-width</code> 或 <code>min-inline-size</code> ，那么 <code>min-content</code> 等于 <code>min-width</code> 或 <code>min-inline-size</code>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce624f9266e0407db568c15b5fb2974b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,10),w={href:"https://codepen.io/airen/full/VwxovVY",target:"_blank",rel:"noopener noreferrer"},L=o(`<p>当 <code>minmax(MIN, MAX)</code> 函数取 <code>min-content</code> 值时，它的大小由相应网格轨道中的内容来决定，在网格列轨道中，<code>min-content</code> 的值将等同于所在列网格轨道中网格项目的内容最小尺寸。</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(min-content, min-content)  1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中的第一列尺寸始终等于所有列的内容最小尺寸：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7351bf5bf48140e69fb388c0f45f8e4b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),V={href:"https://codepen.io/airen/full/oNdKjKX",target:"_blank",rel:"noopener noreferrer"},D=o('<p><code>min-content</code> 值可以只是 <code>minmax(MIN, MAX)</code> 函数当中的某一个参数值，它可以和其他值类型混合使用，但需要注意：</p><ul><li>当 <code>minmax(MIN, MAX)</code> 中的 <code>MAX</code> 值为 <code>min-content</code> 时，如果<code>min-content</code> 计算出来的值小于 <code>MIN</code> ，<code>minmax(MIN, MAX)</code> 函数返回的则是 <code>MIN</code> 值，反之则返回的是 <code>MIN</code> 至 <code>min-content</code> 之间的一个范围值。</li><li>当 <code>minmax(MIN, MAX)</code> 中的 <code>MIN</code> 值为 <code>min-content</code> 时，如果 <code>min-content</code> 计算出来的值大于 <code>MAX</code> ，<code>minmax(MIN, MAX)</code>函数返回的是 <code>min-content</code>，反之则返回的是 <code>min-content</code> 至 <code>MAX</code> 之间的一个范围值。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5c63b2b1e164594b5f1f9ee8ec38e0d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',3),K={href:"https://codepen.io/airen/full/Vwxoejj",target:"_blank",rel:"noopener noreferrer"},W=o(`<p><code>minmax(MIN, MAX)</code> 取 <code>max-content</code> 值时有点类似于 <code>min-content</code> ，不同的是取最大长度，这个长度也称为“理想大小”，它可以容纳它包含的内容。比如网格项目是一个句子，那么理想长度就是这个句子长度，而且不用考虑长度，也不会换行：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(max-content, max-content)  1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07765b02ba14240853634e81b011c47~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,3),B={href:"https://codepen.io/airen/full/rNvXxvN",target:"_blank",rel:"noopener noreferrer"},Z=o('<p>同样的，<code>max-content</code> 在 <code>minmax(MIN, MAX)</code> 函数中与其他类型值混合使用，需要注意的是：</p><ul><li>当 <code>minmax(MIN, MAX)</code> 函数中的 <code>MAX</code> 值为 <code>max-content</code> 时，如果 <code>max-content</code> 的计算值大于 <code>MIN</code> 值时，<code>minmax(MIN, MAX)</code> 函数返回的值是一个 <code>MIN</code> 至 <code>max-content</code> 计算值之间的范围值；反之会忽略 <code>max-content</code> ，函数返回的是 <code>MIN</code> 值。</li><li>当 <code>minmax(MIN, MAX)</code> 函数中的 <code>MIN</code> 值为 <code>max-content</code> 时，如果 <code>max-content</code> 的计算值小于 <code>MAX</code> 值时，<code>minmax(MIN, MAX)</code> 函数返回的值是一个 <code>max-content</code> 至 <code>MAX</code> 之间的范围值；反之则会返回 <code>max-content</code>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21df176dfdb749e6a8c60748ccb83a82~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',3),J={href:"https://codepen.io/airen/full/poVMgxm",target:"_blank",rel:"noopener noreferrer"},O=o(`<p>这样一来，在 <code>minmax(MIN, MAX)</code> 函数中同时使用 <code>min-content</code> 和 <code>max-content</code> 时，你可以得到一个响应式极强的布局效果，网格项目的内容永远不会溢出所在网格轨道：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    grid-template-columns: minmax(min-content, max-content)  1fr 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/251ffdf7aed14968a8f08ded4aff26b6~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,3),R={href:"https://codepen.io/airen/full/zYjgrVq",target:"_blank",rel:"noopener noreferrer"},Y=o(`<p>我们来看一个真实的 Web 布局案例。使用 <code>minmax(MIN, MAX)</code> 函数来构建一个博客文章展示的页面：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e2e7378215a4af8913e428ec0bd365c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>实现上图这种带有响应式布局效果，仅仅使用几行 CSS 代码即可：</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;body&gt;
    &lt;main&gt;
        &lt;h2&gt;现代 Web 布局&lt;/h2&gt;
    &lt;/main&gt;
&lt;/body&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
    grid-template-columns: minmax(1rem, 1fr)  minmax(auto, 70ch)  minmax(1rem, 1fr);
}

main {
    grid-column: 2 / 3;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5725dcadda8e470188c67379296dcd5b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),G={href:"https://codepen.io/airen/full/BaxXKNv",target:"_blank",rel:"noopener noreferrer"},T=o(`<p>示例中的 <code>grid-template-columns</code> 创建了一个三列网格布局，其中第一列和第三列的宽度是由 <code>minmax(1rem, 1fr)</code> 决定，当视窗足够宽时，这两列的宽度是 <code>1fr</code> ，当视窗没有足够宽的时候，这两列的宽度是 <code>1rem</code> ，所以你会看到，在桌面端上，<code>mian</code> （主内容）两侧有很大的空白空间，实现了类似主内容水平居中的效果；在平板和手机端上时，两侧只有 <code>1rem</code> 的间距。而主内容（即第二列）列宽是 <code>minmax(auto, 70ch)</code> ，浏览器有足够空间时，它的宽度是 <code>70ch</code> ，如果浏览器视窗空间不足时，则由 <code>main</code> 自己的内容来决定（即 <code>auto</code> ）。</p><p>网格布局中，使用 <code>repeat()</code> 函数，<code>minmax(MIN, MAX)</code> 和 <code>auto-fit</code> 或 <code>auto-fill</code> （<strong>RAM布局技术</strong> ）可以构建一个无媒体查询的响应式布局。</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然效果上看上去不错，但它有一个缺陷存在，当浏览器视窗的宽度小于 <code>minmax(MIN, MAX)</code> 中的 <code>MIN</code> 值时，浏览器就会出现水平滚动条或溢出内容被裁剪：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0aee213420f46e39356f991ea5327e0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),H={href:"https://codepen.io/airen/full/mdLZMBp",target:"_blank",rel:"noopener noreferrer"},Q=o(`<p>其实，我们可以在 <code>minmax(MIN, MAX)</code> 函数中嵌套 CSS 的比较函数（<code>min()</code> 、<code>max()</code> 、<code>clamp()</code>），可以让该布局更为完美。比如，你可以在 <code>minmax(MIN, MAX)</code> 函数中嵌套一个 <code>min()</code> 函数：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 250px), 1fr));
    gap: 1.5rem;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>minmax(MIN, MAX)</code> 函数中嵌套了一个 <code>min(100%, 250px)</code> 函数。在我们这个示例中，<code>min()</code> 函数中的百分比也是相对于网格容器的内联轴方向尺寸（即宽度）计算，<code>min()</code> 函数中的两个参数会相互比较，并且取更小的值作为该函数的返回值，它有点类似于设置了一个 <code>max-width</code> 值，即 <code>min(100%, 250px)</code> 相当于 <code>max-width: 250px</code> 。</p><p>就该例而言，网格容器的宽度会随着浏览器视窗宽度变小，也就是说，当浏览器视窗宽度小到一个临界值时，<code>min(100%, 250px)</code> 返回的值就会小于 <code>250px</code> ，此时， <code>min(100%, 250px)</code> 函数返回的值就是 <code>100%</code> ，这样一来，就可以避免浏览器出现水平滚动条（除非小到无法容纳内容）：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0fd4242e3d84cbca975e75066873c1f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),E={href:"https://codepen.io/airen/full/NWzKwwN",target:"_blank",rel:"noopener noreferrer"},P=o(`<h2 id="min-、-max-和-clamp-函数" tabindex="-1"><a class="header-anchor" href="#min-、-max-和-clamp-函数" aria-hidden="true">#</a> min() 、 max() 和 clamp() 函数</h2><blockquote><p><strong><code>min()</code> 、 <code>max()</code></strong> <strong>和</strong> <strong><code>clamp()</code></strong> <strong>统称为 CSS 比较函数，可以给这些函数传入一个列表值，并对这些值做相应的比较，最终返回一个最适合的值。它们也可以像</strong> <strong><code>clac()</code></strong> <strong>函数，<strong><strong>支持</strong></strong>使用加法 (<strong><strong><code>+</code></strong></strong>)、减法 (<strong><strong><code>-</code></strong></strong>)、乘法 (<strong><strong><code>\\*</code></strong></strong>) 和除法 (<strong><strong><code>/</code></strong></strong>) 的数学表达式作为值</strong> 。</p></blockquote><p>CSS 网格布局中，这些函数都可以用于设置网格轨道和网格沟槽的大小。比如：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.container{
    grid-template-columns: 1fr min(65ch, 100%) 1fr;
    gap: clamp(1.5rem, 6vmax, 3rem);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>min()</code> 、<code>max()</code> 和 <code>clamp()</code> 函数用来设置网格轨道尺寸时和 <code>minmax(MIN, MAX)</code> 是有一定差异的：</p><ul><li><code>minmax(MIN, MAX)</code> 返回的是 <code>MIN ~ MAX</code> 之间的一个值，最小是 <code>MIN</code>，最大是 <code>MAX</code>；</li><li><code>min()</code> 返回的是函数列表参数中最小的值，比如 <code>min(100px, 200px)</code> 返回的是 <code>100px</code>；</li><li><code>max()</code> 返回的是函数列表参数中最大的值，比如 <code>max(100px, 200px)</code> 返回的是 <code>200px</code>；</li><li><code>clamp(MIN, VAL, MAX)</code> 更类似于 <code>minmax(MIN, MAX)</code>，返回的是一个区间值。即 <code>clamp(MIN, VAL, MAX)</code>，其中 <code>MIN</code> 表示最小值，<code>VAL</code> 表示首选值，<code>MAX</code> 表示最大值。如果 <code>VAL</code> 在 <code>MIN</code> 和 <code>MAX</code> 之间（<code>MIN &lt; VAL &lt; MAX</code>），则使用 <code>VAL</code> 作为函数的返回值；如果<code>VAL</code> 大于 <code>MAX</code> （<code>VAL &gt; MAX</code>），则使用 <code>MAX</code> 作为函数的返回值；如果 <code>VAL</code> 小于 <code>MIN</code> （<code>VAL &lt; MIN</code>），则使用 <code>MIN</code> 作为函数的返回值。</li></ul><p>我们来看一个 CSS 比较函数用于网格轨道尺寸设置的示例。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ad2f311e5484263893cf3f5b595075d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,8),F={href:"https://codepen.io/airen/full/BaxXKNv",target:"_blank",rel:"noopener noreferrer"},U=o(`<p>这个示例是前面介绍 <code>minmax(MIN, MAX)</code> 函数的示例：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
  display: grid;
  grid-template-columns: minmax(1rem, 1fr) minmax(auto, 70ch) minmax(1rem, 1fr);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>minmax(auto, 70ch)</code> 设置了主内容列的尺寸，对于同等效果，我们还可以使用 <code>min()</code> 函数来替换：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
  display: grid;
  grid-template-columns: minmax(1rem, 1fr) min(100% - 2rem, 70ch) minmax(1rem, 1fr);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/404c7f79b25549979f9a3c7662b22c60~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),$={href:"https://codepen.io/airen/full/dyKbZLB",target:"_blank",rel:"noopener noreferrer"},ee=o(`<p>两个方法构建出来的布局效果是等同的。这里使用 <code>min(100% - 2rem, 70ch)</code> 替代了 <code>minmax(auto, 70ch)</code> ，它所起的作用是：</p><ul><li>当浏览器视窗宽度足够大时（宽屏），<code>100% - 2rem</code> 计算出值会大于 <code>70ch</code> ，因此 <code>min(100% - 2rem, 70ch)</code> 将返回 <code>70ch</code>；</li><li>当浏览器视窗宽度不够大时（窄屏），<code>100% - 2rem</code> 计算出值就会小于 <code>70ch</code> ，因此 <code>min(100% - 2rem, 70ch)</code> 将返回 <code>100% - 2rem</code>。</li></ul><p>你可能会好奇，为什么会是 <code>100% - 2rem</code> 呢？这是因为示例中第一列和第三列，它设置值是 <code>minmax(1rem, 1fr)</code> ，输出的最小值就是 <code>1rem</code>，而且只有在浏览器视窗宽度较小时才会出现。在这种现象下，如果 <code>min()</code> 函数设置 <code>min(100%, 70ch)</code>， 就会造成浏览器出现水平滚动条或内容溢出。为了避免该现象，把 <code>min()</code> 函数中的 <code>100%</code> 替换成 <code>100% - 2rem</code> 。</p><p>你还可以使用 <code>clamp()</code> 函数来替代上面示例中的 <code>min()</code> 函数，让布局在一个尺寸范围具有一个更好的效果：</p><ul><li>设置一个最小屏尺寸，比如 <code>320px - 2rem</code> （浏览器视窗最小宽度是 <code>320px</code>）；</li><li>设置一个最大屏尺寸，比如 <code>70c</code>；</li><li>设置一个最佳值，比如 <code>100vw - 2rem</code>。</li></ul><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
  display: grid;
  grid-template-columns:
    minmax(1rem, 1fr) 
    clamp(320px - 2rem, 100vw - 2rem, 70ch) 
    minmax(1rem, 1fr);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果几乎是一样的，但浏览器视窗小于 <code>320px</code> 时，将会出现水平滚动条：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54ae20bbd0d14fa48dfa6ae4ac1b1edb~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,8),de={href:"https://codepen.io/airen/full/GRGKygZ",target:"_blank",rel:"noopener noreferrer"},oe=o(`<p>在实际使用的时候，更建议将 CSS 的比较函数与 <code>minmax(MIN, MAX)</code> 以及关键词 <code>min-content</code> 或 <code>max-content</code> 结合起来使用。这样能更好地帮助你构建一个内在 Web 布局。</p><h2 id="fit-content-函数" tabindex="-1"><a class="header-anchor" href="#fit-content-函数" aria-hidden="true">#</a> fit-content() 函数</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60623a8491c446dca01fdc76ff09690c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上图这样的两列布局是一种很常见的布局，即 <strong>侧边栏固定尺寸，主内容栏能随浏览器视窗尺寸进动调整</strong> 。你可以像下面这样使用 CSS Grid 来构建：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: 250px 1fr;
    grid-template-areas: &quot;sidebar  main&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果浏览器的视窗尺寸较小，有可能因为缺少足够的空间导致样式出现问题。为了避免这种情况发生，通常会在 CSS Grid 布局中使用媒体查询：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body { 
    display: grid; 
    gap: 1.5rem; 
    grid-template-areas: 
        &quot;sidebar&quot; 
        &quot;main&quot;; 
} 

@media (min-width: 760px) { 
    body { 
        grid-template-columns: 250px 1fr; 
        grid-template-areas: &quot;sidebar main&quot;; 
    } 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35b23501ff344a9ba03eabcab7a18d92~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,8),ce={href:"https://codepen.io/airen/full/PoaYEpp",target:"_blank",rel:"noopener noreferrer"},ne=o(`<p>示例中的侧边栏（网格第一列）是一个固定尺寸，即 <code>250px</code> 。不过，我们希望它的尺寸能更灵活些：</p><ul><li>当浏览器视窗足够宽的时候，它的宽度能大一些，比如是 <code>250px</code>；</li><li>当浏览器视窗比较窄时，它的宽度能小一些，比如根据内容来决定。</li></ul><p>你可能会想到使用 <code>minmax(min-content, 250px)</code> 来实现。在网格布局中除了使用 <code>minmax(MIN, MAX)</code> 函数之外，还可以使用 <code>fit-content()</code> 函数。你可以给 <code>fit-content()</code> 函数传一个 <code>&lt;length-percentage&gt;</code> 值，比如上面的示例，可以将 <code>250px</code> 换成 <code>fit-content(250px)</code> ：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>body {
    grid-template-columns: fit-content(250px) 1fr;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5baca12885fc44d39fdbca4460d23dba~tplv-k3u1fbpfcp-watermark.image?" alt="fig-12-37.png"></p>`,5),ie={href:"https://codepen.io/airen/full/jOKNZXO",target:"_blank",rel:"noopener noreferrer"},te=o(`<p>示例中的 <code>fit-content(250px)</code> 其实相当于：</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>fit-content(250px) = min(min(max-content, available-size), max(min-content, 250px)) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>公式中的 <strong><code>available-size</code></strong> <strong>指的是网格中的可用宽度</strong> 。</p><p>除此之外，规范中还提供了另一种公式来描述 <code>fit-content()</code>:</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>fit-content(&lt;length-percentage&gt;) = max(minimum, min(limit, max-content))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li>①：<code>minimum</code> 代表自动最小值（通常但不总是等于 <code>min-content</code> 最小值）；</li><li>②：<code>limit</code> 是作为参数传给 <code>fit-content()</code> 参数，即 <code>&lt;length-percentage&gt;</code>，比如示例中的 <code>250px</code>；</li><li>③：<code>min()</code> 返回 <code>limit</code> 和 <code>max-content</code> 中更小的值，比如这个示例，<code>min()</code> 返回的是 <code>250px</code> 和 <code>max-content</code> 更小的一个；</li><li>④：<code>max()</code> 返回是 <code>minimum</code> 和 <code>min(limit, max-content)</code> 两个值中更大的一个。</li></ul><p>如果上面的描述不易于理解的话，我们可以这样来理解。比如示例中的 <code>fit-content(250px)</code>，表示该列网格轨道宽度不会超过 <code>250px</code>，并且可以在内容很短的情况下缩小到 <code>250px</code> 以下。</p><p>另外，一般使用 <code>fit-content()</code> 函数时，传递给该函数的参数 <code>&lt;length-percentage&gt;</code> 一般都是小于元素的 <code>max-content</code> 值。比如 <code>fit-content(250px)</code>，其中 <code>250px</code> 是小于元素 <code>max-content</code> 值。</p><p>在这种情况下，元素最终的渲染尺寸介于 <code>min-content</code> 和 <code>250px</code> 之间。具体是多少，还要看当前的可用空间尺寸（<code>available-size</code>），如果可用空间充足，会使用最大的 <code>250px</code>，如果可用空间小，就会取 <code>min-content</code> 到 <code>250px</code> 之间的某个值，如果可用空间不充足（比 <code>min-content</code> 还小），那就会使用最小值 <code>min-content</code>，不能再小。</p><p>当然，如果 <code>fit-content()</code> 函数中的值比元素的 <code>max-content</code> 还大，那么元素最终渲染尺寸介于 <code>min-content</code> 和 <code>max-content</code> 之间。具体是多少还要看当前的可用空间大小，与上面类似。</p><p>总之，<code>fit-content()</code> 返回的最小值是 <code>min-content</code>，不能比 <code>min-content</code> 值更小。</p><p>需要注意的是，使用 <code>fit-content()</code> 函数设置网格轨道时，该函数只能接受一个 <code>&lt;length-percentage&gt;</code> （即 <code>&lt;length&gt;</code> 值，比如 <code>250px</code>；或 <code>&lt;percentage&gt;</code> 值，比如 <code>25%</code>）。其他值用于该函数将会被视为一个无效值，比如一个 <code>&lt;flex&gt;</code> 类型的值 <code>1fr</code> 。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>在这一节课程中，主要和大家一起探讨了可用于网格轨道尺寸设置的 CSS 函数，其中 <code>repeat()</code> 、<code>minmax()</code> 和 <code>fit-content()</code> 函数是 CSS 网格布局中独有的，而 <code>min()</code> 、<code>max()</code> 和 <code>clamp()</code> 函数（<strong>CSS 比较函数</strong> ）类似于 CSS 的 <code>calc()</code> 函数，除了可以用来设置网格轨道尺寸之外，还可以用于其他长度属性上，比如 <code>padding</code> 、<code>margin</code> 、<code>width</code> 和 <code>font-size</code> 等。</p><p>除了 <code>repeat()</code> 函数之外，其他函数都可以用于 <code>grid-template-columns</code> 、<code>grid-template-rows</code> 、<code>grid-auto-columns</code> 和 <code>grid-auto-rows</code> 属性上。 <code>repeat()</code> 函数只用于 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性上设置显式网格轨道尺寸。</p><p>在 CSS 网格布局中，我们应该尽可能避免使用像 <code>&lt;length&gt;</code> 和 <code>&lt;percentage&gt;</code> 这样的长度值来设置网格轨道尺寸，尽可能地使用这些函数与关键词 <code>min-content</code> 、<code>max-content</code> 、<code>auto</code> 和 <code>&lt;flex&gt;</code> （<code>fr</code>）值来设置网格轨道大小，这样做可能让你的网格更灵活，不容易造成内容溢出打破 Web 布局！</p>`,17);function ae(le,re){const c=t("ExternalLinkIcon");return a(),l("div",null,[s,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",m,[d("https://codepen.io/airen/full/xxjNjeL"),n(c)])])]),p,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",u,[d("https://codepen.io/airen/full/RwymJZO"),n(c)])])]),g,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",v,[d("https://codepen.io/airen/full/WNJBKVg"),n(c)])])]),b,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",f,[d("https://codepen.io/airen/full/PoevxOp"),n(c)])])]),x,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",h,[d("https://codepen.io/airen/full/mdLZwey"),n(c)])])]),S,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",M,[d("https://codepen.io/airen/full/mdLZMBp"),n(c)])])]),_,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",k,[d("https://codepen.io/airen/full/JjvQrJp"),n(c)])])]),C,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",N,[d("https://codepen.io/airen/full/QWrXOJm"),n(c)])])]),X,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",A,[d("https://codepen.io/airen/full/BaxXydr"),n(c)])])]),I,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",j,[d("https://codepen.io/airen/full/VwxoYor"),n(c)])])]),y,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",z,[d("https://codepen.io/airen/full/xxjvwqQ"),n(c)])])]),q,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",w,[d("https://codepen.io/airen/full/VwxovVY"),n(c)])])]),L,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",V,[d("https://codepen.io/airen/full/oNdKjKX"),n(c)])])]),D,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",K,[d("https://codepen.io/airen/full/Vwxoejj"),n(c)])])]),W,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",B,[d("https://codepen.io/airen/full/rNvXxvN"),n(c)])])]),Z,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",J,[d("https://codepen.io/airen/full/poVMgxm"),n(c)])])]),O,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",R,[d("https://codepen.io/airen/full/zYjgrVq"),n(c)])])]),Y,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",G,[d("https://codepen.io/airen/full/BaxXKNv"),n(c)])])]),T,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",H,[d("https://codepen.io/airen/full/mdLZMBp"),n(c)])])]),Q,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",E,[d("https://codepen.io/airen/full/NWzKwwN"),n(c)])])]),P,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",F,[d("https://codepen.io/airen/full/BaxXKNv"),n(c)])])]),U,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",$,[d("https://codepen.io/airen/full/dyKbZLB"),n(c)])])]),ee,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",de,[d("https://codepen.io/airen/full/GRGKygZ"),n(c)])])]),oe,e("blockquote",null,[e("p",null,[d("Demo 地址："),e("a",ce,[d("https://codepen.io/airen/full/PoaYEpp"),n(c)])])]),ne,e("blockquote",null,[e("p",null,[d("Demo 地址： "),e("a",ie,[d("https://codepen.io/airen/full/jOKNZXO"),n(c)])])]),te])}const me=i(r,[["render",ae],["__file","index-13.html.vue"]]);export{me as default};
