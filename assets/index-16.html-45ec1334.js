import{_ as t,M as o,p as c,q as i,R as s,t as n,N as p,a1 as a}from"./framework-e8cb8151.js";const l="/assets/5cd963cd0001682f06400359-6fd1c240.jpg",r={},u=a('<h1 id="_16-webpack-环境相关配置及配置文件拆分" tabindex="-1"><a class="header-anchor" href="#_16-webpack-环境相关配置及配置文件拆分" aria-hidden="true">#</a> 16-Webpack 环境相关配置及配置文件拆分</h1><p><img src="'+l+`" alt="img"></p><blockquote><p>最聪明的人是最不愿浪费时间的人。 —— 但丁</p></blockquote><p>在实际开发实践中，为了方便开发调试和上线，项目中我们一般配置两个 Webpack 配置，一个是<strong>开发环境</strong>一个是<strong>生产环境</strong>，开发环境帮助我们快速开发测试联调，生产环境保证上线环境的打包流程是最优化体验，这就是配置文件根据环境进行拆分。</p><p><strong>配置文件拆分</strong> 最重要的收益是我们可以提取不同目标之间的共性，将经常改动的配置跟公共配置分开。</p><p>并且还可以识别 <strong>要组合的较小配置部件</strong>，这些配置不仅可以推送到自己的软件包以跨项目使用。</p><p>另外，配置拆分还可以将配置作为依赖项进行管理，而不是在多个项目中复制类似的配置。</p><h2 id="开发环境和生产环境需要注意的区别" tabindex="-1"><a class="header-anchor" href="#开发环境和生产环境需要注意的区别" aria-hidden="true">#</a> 开发环境和生产环境需要注意的区别</h2><ul><li>生产环境可能需要分离 CSS 成单独的文件，以便多个页面共享同一个 CSS 文件；</li><li>生产环境需要压缩 HTML/CSS/JS 代码；</li><li>生产环境需要压缩图片；</li><li>开发环境需要生成 SourceMap 文件；</li><li>开发环境需要打印 debug 信息；</li><li>开发环境需要 HMR、devServer 等功能…</li></ul><h2 id="按环境划分-webpack-配置文件" tabindex="-1"><a class="header-anchor" href="#按环境划分-webpack-配置文件" aria-hidden="true">#</a> 按环境划分 Webpack 配置文件</h2><ul><li><code>webpack.config.js</code>：所有环境的默认入口配置文件；</li><li><code>webpack.base.js</code>：基础部分，即多个文件中共享的配置；</li><li><code>webpack.development.js</code>：开发环境使用的配置；</li><li><code>webpack.production.js</code>：生产环境使用的配置。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.base.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> devWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.development.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> devWebpackConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack-development-config" tabindex="-1"><a class="header-anchor" href="#webpack-development-config" aria-hidden="true">#</a> webpack development config</h3><p><code>webpack.development.js</code>文件里面的配置多数跟开发环境相关的配置，例如<code>devServer</code>和一些开发环境中需要的 plugin，比如 hmr、devServer、devtool 等。</p><h3 id="webpack-production-config" tabindex="-1"><a class="header-anchor" href="#webpack-production-config" aria-hidden="true">#</a> webpack production config</h3><p>这里的配置主要包括了跟生产环境相关的配置项，例如<code>optimization</code>、<code>devtool</code>等。</p><h3 id="webpack-base-config" tabindex="-1"><a class="header-anchor" href="#webpack-base-config" aria-hidden="true">#</a> webpack base config</h3><p><code>webpack.base.js</code>是公共部分的配置，除了完全一致的内容之外，还可能会涉及到一些根据不同环境做的事情，比如 <code>style-loader</code>在开发环境用，而开发环境是用<code>mini-css-extract-plugin</code>的 loader，这时候需要使用环境变量来判断。</p><p>有两种方式来判断当前的环境变量：</p>`,19),d={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"NODE_ENV",-1),v=s("li",null,[n("使用 Webpack 配置文件的"),s("code",null,"function"),n(" 方式。")],-1),m=a('<blockquote><p>Tips：这是因为我们所有的入口文件都是<code>webpack.config.js</code>。</p><p>当然如果我们使用 Webpack 的时候，就已经在<code>npm scripts</code>里面区分了配置文件（<code>webpack --config webpack.production.js</code>），就不在讨论范围之内了。</p><p>这里只是顺着之前的逻辑继续分析下去。</p></blockquote><h3 id="cross-env" tabindex="-1"><a class="header-anchor" href="#cross-env" aria-hidden="true">#</a> cross-env</h3>',2),b={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> cross-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改<code>npm scripts</code>内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack --config webpack.config.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在<code>webpack.base.js</code>中使用环境变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.base.js</span>
<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>
<span class="token comment">//....</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> isProduction <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function配置" tabindex="-1"><a class="header-anchor" href="#function配置" aria-hidden="true">#</a> <code>function</code>配置</h3><p>根据前面的章节我们知道，Webpack 的配置可以是对象，也可以是函数，如果是 function 则接受一个<code>mode</code>参数，即开发环境打包还是生产环境打包。</p><p>利用这一点我们可以做下面的配置。</p><p>首先是修改<code>npm scripts</code>添加<code>--mode</code>选项：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production --config webpack.config.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以将配置文件改成 <code>function</code> 类型的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以webpack.config.js为例</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 生产环境</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开发环境</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将零件配置进行拆分" tabindex="-1"><a class="header-anchor" href="#将零件配置进行拆分" aria-hidden="true">#</a> 将零件配置进行拆分</h2><p>除了按照开发环境拆分出<code>development</code>和<code>production</code>之外，我们还可以将公共的配置按照 loader、devServer 等相关配置拆到<code>webpack.parts.js</code>文件中，在其他项目直接组装想用的内容即可。</p><p>例如下面的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.parts.js</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取 css-loader 配置</span>
exports<span class="token punctuation">.</span>getCssLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">,</span>
  test <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  include<span class="token punctuation">,</span>
  exclude<span class="token punctuation">,</span>
  uses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  test<span class="token punctuation">,</span>
  include<span class="token punctuation">,</span>
  exclude<span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span>
        mode <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader <span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>uses<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 获取 devServer 配置</span>
exports<span class="token punctuation">.</span>getDevServerConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> host <span class="token operator">=</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token number">8888</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token string">&#39;errors-only&#39;</span><span class="token punctuation">,</span>
  host<span class="token punctuation">,</span>
  port<span class="token punctuation">,</span>
  <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overlay</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 获取 url-loader 配置</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">getUrlLoader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  test<span class="token punctuation">,</span>
  largeAssetSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  assetsDir<span class="token punctuation">,</span>
  dir<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  test<span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">limit</span><span class="token operator">:</span> largeAssetSize<span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token function">getAssetPath</span><span class="token punctuation">(</span>
        assetsDir<span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/[name]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>isProduction <span class="token operator">?</span> <span class="token string">&#39;.[hash:8]&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.[ext]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// .....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候，直接调用对应的方法即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> partsConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.parts.js&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> partsConfig<span class="token punctuation">.</span><span class="token function">getDevServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      partsConfig<span class="token punctuation">.</span><span class="token function">getCssLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      partsConfig<span class="token punctuation">.</span><span class="token function">getUrlLoader</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp|svg)(\\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// ....</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>在一个 Webpack 项目中，根据不同的使用环境合理划分 Webpack 的配置文件是很有必要的。</p><p>本文介绍了如何按照开发环境和生产环境划分 Webpack 配置文件，并且介绍了公共配置部分拆分规则，可以使用 cross-env 模块来传入不同的环境变量，这样在公共配置文件内可以根据不同的环境变量进行配置。</p><p>我们甚至可以将 Webpack 的配置拆成一个个的零件进行自由的搭配。</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li>你们项目是如何管理 Webpack 的配置文件的？</li></ol></blockquote>`,23);function h(f,y){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,s("ol",null,[s("li",null,[n("使用环境变量，例如 "),s("a",d,[n("cross-env"),p(e)]),n(" + "),k,n(";")]),v]),m,s("p",null,[n("首先安装 "),s("a",b,[n("cross-env"),p(e)]),n("：")]),g])}const x=t(r,[["render",h],["__file","index-16.html.vue"]]);export{x as default};
