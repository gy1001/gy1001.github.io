import{_ as e,M as o,p as c,q as l,R as n,t as p,N as t,a1 as s}from"./framework-e8cb8151.js";const i={},u=s(`<h1 id="源码探秘之虚拟-dom-和-diff-算法" tabindex="-1"><a class="header-anchor" href="#源码探秘之虚拟-dom-和-diff-算法" aria-hidden="true">#</a> 源码探秘之虚拟 Dom 和 Diff 算法</h1><p>现代的框架 React、Vue 都有几个重要的概念，其中就包含了 <strong>虚拟 DOM</strong> 和 <strong>DIff 算法</strong>。后者我们知道是为了实现精细化比较、完成最小量的更新任务，达到优化性能的目的，而 diff 算法是基于 虚拟 Dom 来完成的。因为对真实的 DOM 进行处理开销是比较大的，在目前的项目中往往存在频繁更新 DOM 的情况，显然直接操作真实 DOM 会产生一定的性能问题。虚拟 DOM 就是为了解决这个问题而产生的。</p><h2 id="什么是虚拟-dom" tabindex="-1"><a class="header-anchor" href="#什么是虚拟-dom" aria-hidden="true">#</a> 什么是虚拟 Dom</h2><blockquote><p>虚拟 DOM 就是一个描述一个 DOM 节点特征的 JS 对象。</p></blockquote><p>而操作 JS 对象，显然性能影响更小。其实虚拟 DOM 带来的一个最大的优势是实现了<strong>跨平台</strong>，因为基于此，抽象了原本的渲染过程，是他能够不仅仅局限于浏览器的 DOM, 还可以是安卓和 IOS 的原生组件，以及各类小程序，还可以是各种 GUI。</p><p>虚拟 DOM 包含了 <code>tag</code> 、<code>props</code>、<code>children</code> 三个属性 , 用代码展示如下</p><p>比如真实的 DOM 节点如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello world!!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而上面的真实 DOM 节点如果转换为虚拟 DOM 以后，大概得结构类似如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chidren</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chidren</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;hello world!!!&#39;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该对象就是我们常说的虚拟 DOM 了，因为 DOM 是树形结构，所以使用 JavaScript 对象就能很简单的表示。而原生 DOM 因为浏览器厂商需要实现众多的规范（各种 HTML5 属性、DOM 事件），即使创建一个空的 div 也要付出昂贵的代价。虚拟 DOM 提升性能的点在于 DOM 发生变化的时候，通过 diff 算法比对 JavaScript 原生对象，计算出需要变更的 DOM，然后只对变化的 DOM 进行操作，而不是更新整个视图。</p></blockquote><h2 id="_1、snabbdom-简介" tabindex="-1"><a class="header-anchor" href="#_1、snabbdom-简介" aria-hidden="true">#</a> 1、Snabbdom 简介</h2><blockquote><p>snabbdom 是著名的虚拟 DOM 库，是 diff 算法的鼻祖，vue 源码借鉴了 snabbdom</p></blockquote>`,13),d={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>使用以下官方 Demo</p><h3 id="_1-1-搭配基础环境" tabindex="-1"><a class="header-anchor" href="#_1-1-搭配基础环境" aria-hidden="true">#</a> 1.1 搭配基础环境</h3><ol><li><p>安装基础依赖包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> snabbdom-demo
<span class="token builtin class-name">cd</span> snabbdom-demo
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli webpack-dev-server --save-dev
<span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin <span class="token parameter variable">--save</span>
// 安装 snabbdom
<span class="token function">npm</span> <span class="token function">install</span> snabbdom <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>webpack.config.js</code>文件，并修改内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;bu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>src目录</code>，并创建 <code>index.html</code>、 <code>index.js</code> 文件: 这里利用官方的 demo 例子来查看实现 diff 后的效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.html， 页面内容基本通用即可，不过要创建一个 &lt;div id=&quot;container&quot;&gt;&lt;/div</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  init<span class="token punctuation">,</span>
  classModule<span class="token punctuation">,</span>
  propsModule<span class="token punctuation">,</span>
  styleModule<span class="token punctuation">,</span>
  eventListenersModule<span class="token punctuation">,</span>
  h<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span>

<span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token comment">// Init patch function with chosen modules</span>
  classModule<span class="token punctuation">,</span> <span class="token comment">// makes it easy to toggle classes</span>
  propsModule<span class="token punctuation">,</span> <span class="token comment">// for setting properties on DOM elements</span>
  styleModule<span class="token punctuation">,</span> <span class="token comment">// handles styling on elements with support for animations</span>
  eventListenersModule<span class="token punctuation">,</span> <span class="token comment">// attaches event listeners</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
  <span class="token string">&#39;div#container.two.classes&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;This is bold&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39; and this is just normal text&#39;</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;I&#39;ll take you places!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span>
<span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>

<span class="token keyword">const</span> newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
  <span class="token string">&#39;div#container.two.classes&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我点击被更新替换了&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span>
      <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">&#39;normal&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontStyle</span><span class="token operator">:</span> <span class="token string">&#39;italic&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&#39;This is now italic type&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39; and this is still just normal text&#39;</span><span class="token punctuation">,</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;/bar&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;I&#39;ll take you places!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// 3s后进行 新老节点的更新替换</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Second \`patch\` invocation</span>
  <span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span> <span class="token comment">// Snabbdom efficiently updates the old view to the new state</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_1-2-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_1-2-虚拟-dom" aria-hidden="true">#</a> 1.2 虚拟 DOM</h3><p><strong>虚拟 DOM</strong>： 用 JavaScript 对象描述 DOM 的层次结构。DOM 中的一切属性都在虚拟 DOM 中有对应的属性。</p><p><strong>Diff 是发生在虚拟 DOM 上的</strong> : <em>新虚拟 DOM 和老虚拟 DOM 进行 diff（精细化比较），算出应该如何最小量更新，最后反映到真正 DOM 上</em></p><h2 id="_2、-snabbdom-的-h-函数如何工作" tabindex="-1"><a class="header-anchor" href="#_2、-snabbdom-的-h-函数如何工作" aria-hidden="true">#</a> 2、 Snabbdom 的 h 函数如何工作</h2><p>问题：虚拟 DOM 如何被渲染函数（h 函数）产生？</p><ol><li><p>h 函数用来产生<strong>虚拟节点(vnode)</strong></p><p>示例：比如这样调用 h 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;http://www.atguigu.com&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将得到这样的虚拟节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token string-property property">&quot;sel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&quot;http://www.atguigu.com&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;尚硅谷&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它表示的真正的 DOM 节点是</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.atguigu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>尚硅谷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>h 函数也可以嵌套使用，从而得到虚拟 DOM 树(重要)</p><p>比如这样嵌套使用 h 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;牛奶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 第二个参数没有值时，也可以省略</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>，<span class="token string">&quot;咖啡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;可乐&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将得到这样的虚拟 DOM 树</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;sel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string-property property">&quot;sel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;牛奶&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string-property property">&quot;sel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;咖啡&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string-property property">&quot;sel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;可乐&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3、感受-diff-算法" tabindex="-1"><a class="header-anchor" href="#_3、感受-diff-算法" aria-hidden="true">#</a> 3、感受 diff 算法</h2><h3 id="_3-1-代码示例展示" tabindex="-1"><a class="header-anchor" href="#_3-1-代码示例展示" aria-hidden="true">#</a> 3.1 代码示例展示</h3>`,11),r=s(`<li><p><code>index.js</code> 内容修改为如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  init<span class="token punctuation">,</span>
  classModule<span class="token punctuation">,</span>
  propsModule<span class="token punctuation">,</span>
  styleModule<span class="token punctuation">,</span>
  eventListenersModule<span class="token punctuation">,</span>
  h<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span>

<span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token comment">// Init patch function with chosen modules</span>
  classModule<span class="token punctuation">,</span> <span class="token comment">// makes it easy to toggle classes</span>
  propsModule<span class="token punctuation">,</span> <span class="token comment">// for setting properties on DOM elements</span>
  styleModule<span class="token punctuation">,</span> <span class="token comment">// handles styling on elements with support for animations</span>
  eventListenersModule<span class="token punctuation">,</span> <span class="token comment">// attaches event listeners</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;点击我更改内容&#39;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">patch</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>点击后，发现试图进行了变更。但是又如何判断是最小更新了，而不是全部推到重新渲染的呢，可以进行如下操作，</p><blockquote><p>此时在页面中打开浏览器控制台，把 第一个元素的内的 A 内容进行替换 , 比如替换为 “A 被改变了”。再次点击按钮，就会发现页面视图被全部替换为 F、A、B、C、D、E。显然这不是最小更新，而是全部删除重建。为什么呢？？？</p></blockquote><p><strong>因为少了一个 key 的属性，上述示例是全部删除重新渲染的操作，这时候体现了 key 属性的重要性</strong>。</p></li><li><p>下面对 <code>index.js</code>中的数据进行更新处理(添 加 <code>key</code> 属性) ，变为如下结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;C&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;F&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;C&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;E&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 其余的保持不变，</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果：再次进行控制台的修改，把 第一个元素的内的 A 内容进行替换 , 比如替换为 “A 被改变了”（其他几个也可以进行类似操作）。然后点击按钮，就会发现 把 A 修改为 &quot;A 被改变了&quot;这个字符串进行了保留，而前面增加了 F ，说明 <strong>相同的节点定是没有做任何处理的</strong>，只对新增的 F、E 节点做了新增处理。这样就体现了 diff 算法的应用。</p><p>Tips: 如果不在乎性能，当然可以全部清空，然后用新的数据重新渲染。</p></li>`,4),v=n("p",null,"具体操作可以参考下图",-1),m={href:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76f3c164a16f4dabbf0c7f33829029d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",target:"_blank",rel:"noopener noreferrer"},b=s(`<h3 id="_3-2-感受-diff-算法的心得" tabindex="-1"><a class="header-anchor" href="#_3-2-感受-diff-算法的心得" aria-hidden="true">#</a> 3.2 感受 Diff 算法的心得</h3><ul><li><p>最小量更新太厉害啦！真的是最小量更新！<strong>当然，key 很重要</strong></p></li><li><p><strong>只有是同一个虚拟节点，才进行精细化比较</strong>, 否则就是暴力删除旧的、插入新的。</p><ul><li><strong>延伸问题：如何定义是同一个虚拟节点：答：选择器相同且 key 相同</strong></li></ul></li><li><p><strong>只进行同层比较，不会进行跨层比较。</strong> 即使是同一片虚拟节点，但是跨层了，对不起，精细化比较不 diff 你。而是暴力删除旧的、然后插入新的。</p><div style="color:red;">diff 并不是那么那么“无微不至”啊！ 真的影响效率吗？<br>答: 上面的操作在实际 Vue 开发中，基本不会遇见，所以这是合理的优化机制。</div><p>比如一般没有人会写如下的代码片段</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isFlag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!isFlag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!isFlag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!isFlag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4、梳理一下-diff-比较的流程" tabindex="-1"><a class="header-anchor" href="#_4、梳理一下-diff-比较的流程" aria-hidden="true">#</a> 4、梳理一下 Diff 比较的流程</h2><p><code>patch</code> 函数被调用后的流程：</p><ol><li><p>判断 <code>oldVNode</code> 是虚拟节点还是真实 DOM</p><ul><li>如果是空，说明是 DOM 节点，就处理为空的虚拟节点，然后进行下一步</li><li>如果不是，就不处理，直接进行下一步</li></ul></li><li><p>然后，比较 <code>oldVNode</code> 和 <code>newVNode</code> 是不是同一个节点（参考第 6 节、第 7 节）</p><ul><li>如果是，就不做处理，直接进行下一步</li><li>如果不是，暴力删除旧的，新建新的（创建子节点时，所有子节点需要递归列出来的），然后结束</li></ul></li><li><p>然后，判断 <code>oldVNode</code> 和 <code>newVNode</code> 是不是内存中的同一个对象</p><ul><li>如果是，就不做处理，结束</li><li>如果不是，就进行下一步</li></ul></li><li><p>判断 <code>newVNode</code> 有没有<code>text</code>属性（参考第 8 节）</p><ul><li>有<code>text</code>属性，说明没有<code>children</code><ul><li>在判断 <code>newVNode</code>和 <code>oldVNode</code>的<code>text</code>属性是否相同 <ul><li>如果相同，什么都不做，直接返回</li><li>如果不同，把 <code>oldVNode.elm</code> 中的<code>text</code> 变为 <code>newVNode中的text</code>(即使<code>oldVNode</code>有<code>children</code>属性，<code>innerText</code>一旦改变后，老<code>children</code>也就没了)，然后结束</li></ul></li></ul></li><li>没有<code>text</code>属性，说明有<code>children</code>属性，进行下一步判断</li></ul></li><li><p>判断<code>oldVNode</code>有没有<code>children</code>属性（参考第 8 节）</p><ul><li>如果没有，也也就是<code>oldVNode</code>没有<code>children</code>属性，而<code>newVNode</code>有<code>children</code>属性，那么就<strong>清空老节点的内容，并把 newVNode 的 children 添加到 DOM 中</strong></li><li>如果有，就需要进行下一步判断(此种情况只最复杂的情况，也是<strong>diff 的重点</strong>)</li></ul></li><li><p><code>newVNode</code>和<code>oldVNode</code>均有<code>children</code>（参考第 9 节）</p><blockquote><p>更新子节点大概可以分为 4 种操作：更新节点、新增节点、删除节点、移动节点</p></blockquote><ul><li><strong>创建子节点</strong>：对于<code>newChildren</code>中的新增节点，<strong>我们需要执行创建节点的操作，并将新创建的节点插入到<code>oldChildren</code>中所有未处理节点的前面</strong>。当节点成功插入后，这一轮的循环就结束了。（你可能会说，插入到所有已处理节点的后面不也行吗？不是的，如果这个新节点后面也是一个新增节点呢？答：因为我们使用的是虚拟节点进行比较，而不是真实的 DOM 节点作对比。而对于<code>oldVNode</code>的已处理节点中不包括我们新插入的节点，所以用插入到已处理节点这样的逻辑来插入节点，就会插入一个错误的位置）</li><li><strong>更新子节点</strong>：两个节点是同一个节点并且为之相同，这种情况的操作。更新内容即可。</li><li><strong>移动子节点</strong>：移动子节点通常发生在<code>newChildren</code>中的某个节点和<code>oldChildren</code>中的某个节点是同一个节点，但是位置不同，所以在真实的 DOM 中需要将这个节点的位置以新虚拟节点的位置为基准进行移动。（不难发现，在<code>newChildren</code>中当前被循环到的这个节点的左边都是被处理过的，所以，<strong>只需要把这个需要移动移动的节点移动到所有未处理节点的最前面即可</strong>。）</li><li><strong>删除子节点</strong>：本质就是删除那些<code>oldChildren</code>中存在但是<code>newChildren</code>中不存在的节点。（当<code>newChildren</code>中的所有节点都被循环了一遍后，如果<code>oldChildren</code>中还有剩余的没有被处理的节点，那么这些节点就是被废弃、需要删除的节点）</li><li><strong>优化策略</strong>： <ul><li><code>新前与旧前</code></li><li><code>新后与旧后</code></li><li><code>新后与旧前</code>：如果相同，说明节点被移动了位置。在真实 DOM 中除了做更新操作外，还需要将节点移动到<code>oldChildren</code>中所有未处理节点的最后面（为什么呢？<strong>因为当真是 DOM 子节点左右两侧已经有节点被更新，只有中间这部分未处理时，新后 这个节点是未处理节点中的最后一个，所以真是 DOM 节点移动位置时，需要移动到 oldChildren 所有未处理节点的最后面。只有移动到未处理节点的最后面，它的位置才与新后者节点的位置相同</strong>）</li><li><code>新前与旧后</code>：如果相同，说明节点被移动了位置。在真实 DOM 中除了做更新操作外，还需要将节点移动到<code>oldChildren</code>中所有未处理节点的最前面（为什么呢？<strong>逻辑同上</strong>）</li></ul></li></ul></li></ol><h2 id="_5、diff-处理新旧节点不是同一个节点时" tabindex="-1"><a class="header-anchor" href="#_5、diff-处理新旧节点不是同一个节点时" aria-hidden="true">#</a> 5、Diff 处理新旧节点不是同一个节点时</h2><h3 id="_5-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_5-1-代码示例" aria-hidden="true">#</a> 5.1 代码示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sameVNode</span><span class="token punctuation">(</span><span class="token parameter">vnode1<span class="token punctuation">,</span> vnode2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> vnode1<span class="token punctuation">.</span>key <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> vnode1<span class="token punctuation">.</span>sel <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>sel
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-结论" tabindex="-1"><a class="header-anchor" href="#_5-2-结论" aria-hidden="true">#</a> 5.2 结论</h3><ul><li>旧节点的 <code>key</code> 和 新节点的 <code>key</code> 相同</li><li><strong>并且</strong>， 旧节点的选择器要和新节点的选择器相同</li></ul><h2 id="_6、手写第一次渲染到页面时的逻辑" tabindex="-1"><a class="header-anchor" href="#_6、手写第一次渲染到页面时的逻辑" aria-hidden="true">#</a> 6、手写第一次渲染到页面时的逻辑</h2><ol><li><p><code>index.js</code> 中的内容进行如下修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span>
<span class="token keyword">import</span> patch <span class="token keyword">from</span> <span class="token string">&#39;./patch&#39;</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 这里对 vnode1 进行处理渲染</span>
<span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建 <code>patch.js</code> 文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">&#39;./createElement&#39;</span>
<span class="token keyword">import</span> vNode <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断第一个参数 oldVNode 是虚拟节点还是 DOM 节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是空，说明是 DOM 节点，需要包装为空的虚拟节点</span>
    oldVNode <span class="token operator">=</span> <span class="token function">vNode</span><span class="token punctuation">(</span>
      oldVNode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      oldVNode<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判断 oldVNode 和 newVNode 是不是同一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是同一个节点，需要做精细化比较&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;不是同一个节点，暴力插入新的，删除旧的&#39;</span><span class="token punctuation">)</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上述代码中用到了两个函数， 创建虚拟节点函数的 <code>vnode.js</code> 、以及 创建真实元素并挂载的 <code>createELement.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createElement.js</span>
<span class="token doc-comment comment">/**
 * 真正 创建节点，将 vNode 创建为dom，并插入到 pivot 这个元素之前
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vNode</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">pivot</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> pivot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;目的是把虚拟节点&#39;</span><span class="token punctuation">,</span> vNode<span class="token punctuation">,</span> <span class="token string">&#39;插入到标杆&#39;</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> <span class="token string">&#39;前&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span>
  <span class="token comment">// 判断有子节点还是有文本</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>
    <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 它的内部是文字</span>
    domNode<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vNode<span class="token punctuation">.</span>text
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domNode<span class="token punctuation">)</span>
    <span class="token comment">// 将孤儿节点 插入到 元素前:让标杆节点的父元素调用 insertBefore 方法，插入到标签节点之前</span>
    pivot<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>domNode<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这里进行处理多个子节点的循环处理&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建虚拟节点函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">vNode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行代码后，可以在页面中看到 <code>const vnode1 = h(&#39;h1&#39;, {}, &#39;hello world&#39;)</code> 元素被渲染为 html，并挂载到 <code>const container = document.getElementById(&#39;container&#39;)</code> 的父级元素内部</p></li><li><p>当前这里没有处理 <strong>多个子节点</strong> 的情况，也就是 <code>createElement.js</code> 中 <code>else if </code> 判断没有做更改，下一节进行完善</p></li></ol><h2 id="_7、手写递归创建子节点" tabindex="-1"><a class="header-anchor" href="#_7、手写递归创建子节点" aria-hidden="true">#</a> 7、手写递归创建子节点</h2><ol><li><p>这里就会遇到一个问题，当对虚拟节点中的子节点（存在多个时）进行递归调用时候，会发现要调用<code>createElement.js</code> 中<code>createElement</code>的方法，可是<code>createElement</code> 是有两个参数的，而第二个参数 是要指定一个标杆节点，而对于子节点来说，当然没有标杆节点，这就产生了矛盾，所以要对<code>createElement</code> 函数以及涉及到的其他函数进行修改</p></li><li><p>修改情况如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createElement.js</span>
<span class="token doc-comment comment">/**
 * 真正 创建节点，将 vNode 创建为dom，是孤儿节点，不进行插入，因为子节点需要递归，而子节点有没有标杆
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vNode</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">pivot</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span>
  <span class="token comment">// 判断有子节点还是有文本</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 它的内部是文字</span>
    domNode<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vNode<span class="token punctuation">.</span>text
    <span class="token comment">//--------这是新增的---------------------</span>
    <span class="token comment">// 补充 elm 属性</span>
    vNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode
    <span class="token comment">//-----------------------------</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这里进行处理多个子节点的循环处理&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 它内部是子节点，需要进行 递归创建子节点</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//--------这是新增的---------------------</span>
  <span class="token comment">// 返回 elm，是一个纯 DOM 节点</span>
  <span class="token keyword">return</span> vNode<span class="token punctuation">.</span>elm
  <span class="token comment">//-----------------------------</span>
<span class="token punctuation">}</span>
<span class="token comment">// patch.js</span>
<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是同一个节点，需要做精细化比较&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//--------这是我改变的---------------------</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;不是同一个节点，暴力插入新的，删除旧的&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> newVNodeElm <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode <span class="token operator">&amp;&amp;</span> newVNodeElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newVNodeElm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 删除 老节点</span>
    oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
    <span class="token comment">//-----------------------------</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接下来我们更改<code>index.js</code> 文件中的 虚拟节点内容，使其拥有多个子节点，例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h6&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h7&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>createElement.js</code> 内容就要用做如下更改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这里进行处理多个子节点的循环处理&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 它内部是子节点，需要进行 递归创建子节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
      <span class="token keyword">let</span> nodeDOM <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      domNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>nodeDOM<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    vNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回 vNode.elm，是一个纯 DOM 节点</span>
  <span class="token keyword">return</span> vNode<span class="token punctuation">.</span>elm
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里其实就完成了 <strong>不是同一个虚拟节点</strong> 以后进行的 <strong>暴力删除旧的，新建新的(创建子节点时，所有子节点需要递归列出来的)</strong> 这个分支的流程，可以进行如下代码测试</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对于不同的节点</span>
<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;我是新的H1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;我是新的H2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;点击我进行内容更新&#39;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">patch</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>

<span class="token comment">// 点击按钮后可以看到 页面内容 由虚拟节点 vnode1 产生的 DOM 换成了 由 vnode2 产生的 DOM</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_8、手写新旧节点-text-的不同情况" tabindex="-1"><a class="header-anchor" href="#_8、手写新旧节点-text-的不同情况" aria-hidden="true">#</a> 8、手写新旧节点 text 的不同情况</h2><ol><li><p>这里接着进行<strong>是同一个节点，需要做精细化比较</strong>之后的逻辑处理</p><ul><li><code>newVNode</code>和<code>oldVNode</code>是同一个节点，直接结束</li><li>如果不是同一个节点 <ul><li>判断<code>newVNode</code>有没有<code>text</code>属性</li></ul></li></ul></li><li><p>具体看以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// patch.js</span>
<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是同一个节点，需要做精细化比较&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 在内存中是不是同一个节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    newVNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>elm
    <span class="token comment">// 判断 newVNode 有没有 text 属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;判断 newVNode 有 text 属性&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 把 oldVNode.elm 中的text 变为 newVNode 中的text(即使 oldVNode 有children属性，innerText一旦改变后，老children也就没了)</span>
        oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>text
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果 newVNode 没有 text 属性</span>
      <span class="token comment">// 判断 oldVNode 有没有 children</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 老的节点有 children，此时是最复杂的情况，就是新老节点都有 children</span>

      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 老的没有 children 新的有 children</span>
        oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> newNodeDom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
          oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newNodeDom<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   	<span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试代码</p><p>对于同一个节点，<code>newVNode</code>有<code>tex</code>属性，<code>index.js</code>中的虚拟节点更改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world12222&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于同意节点，<code>newVnode</code>没有<code>text</code>属性，<code>index.js</code>中的虚拟节点更改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;first&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h6&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h7&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_9、diff-算法的字节点更新策略-前篇" tabindex="-1"><a class="header-anchor" href="#_9、diff-算法的字节点更新策略-前篇" aria-hidden="true">#</a> 9、Diff 算法的字节点更新策略（前篇）</h2><h3 id="_9-1-经典的-diff-算法优化策略" tabindex="-1"><a class="header-anchor" href="#_9-1-经典的-diff-算法优化策略" aria-hidden="true">#</a> 9.1 经典的 Diff 算法优化策略</h3><p>这里就需要提到四中命中查找了。<strong>newVNode 的头和尾 ：新前和新后，oldVNode 的头和尾：旧前和旧后。</strong> 为什么这种算法优秀，因为它符合人们的编程习惯。</p><p>定义四个指针 <strong>newStartIndex, newEndIndex, oldStartIndex, oldEndIndex</strong>, 同时四个指针对应四个节点：<strong>newStartNode,、newEndNode、oldStartNode、oldEndNode</strong>; 当 <span style="color:red;">oldStartIndex&lt;=oldEndIndex &amp;&amp; newStartIndex &lt;= newEndIndex</span> 时候就进行 while 循环。循环结束后，就可以根据判断，新的节点是要插入节点还是删除节点，做最后的删除或者新增操作。</p><p>四种命名查找：</p><ul><li>新前与旧前</li><li>新后与旧后</li><li>新后与旧前</li><li>新前与旧后</li></ul><p><strong>命中其中一种就不就行其它三种的判断了</strong>，如果都没有命中，就需要用循环来寻找了。</p><h3 id="_9-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_9-2-代码实现" aria-hidden="true">#</a> 9.2 代码实现</h3><ol><li><p>把<code>patch.js</code>中关于<code>精细化比较</code>的代码移动到新文件<code>patchVNode.js</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">import</span> patchVNode <span class="token keyword">from</span> <span class="token string">&#39;./patchVNode&#39;</span>

<span class="token comment">// 老的节点有 children，此时是最复杂的情况，就是新老节点都有 children</span>
<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
   <span class="token comment">// 判断 oldVNode 和 newVNode 是不是同一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#39;是同一个节点，需要做精细化比较&#39;</span>
    <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  	<span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>patchVnode.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> updateChildren <span class="token keyword">from</span> <span class="token string">&#39;./updateChildren&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patchVNode</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在内存中是不是同一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  newVNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>elm
  <span class="token comment">// 判断 newVNode 有没有 text 属性</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;判断 newVNode 有 text 属性&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 把 oldVNode.elm 中的text 变为 newVNode 中的text(即使 oldVNode 有children属性，innerText一旦改变后，老children也就没了)</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>text
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newVNode 没有 text 属性&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断 oldVNode 有没有 children</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 老的节点有 children，此时是最复杂的情况，就是新老节点都有 children</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;最复杂&#39;</span><span class="token punctuation">)</span>
      <span class="token function">updateChildren</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 老的没有 children 新的有 children</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newNodeDom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newNodeDom<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>updateChildren.js</code>，文件内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> patchVNode <span class="token keyword">from</span> <span class="token string">&#39;./patchVNode&#39;</span>

<span class="token keyword">function</span> <span class="token function">checkSameVNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> vNode1<span class="token punctuation">.</span>sel <span class="token operator">===</span> vNode2<span class="token punctuation">.</span>sel <span class="token operator">&amp;&amp;</span> vNode1<span class="token punctuation">.</span>key <span class="token operator">===</span> vNode2<span class="token punctuation">.</span>key
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  oldChildren<span class="token punctuation">.</span>children <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  newChildren<span class="token punctuation">.</span>children <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 旧前、旧后、新前、新后</span>
  <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> oldEndIndex <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> newStartIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> newEndIndex <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token comment">// 旧前节点、旧后节点、新前节点、新后节点</span>
  <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1旧前与新前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">//  比较新旧节点</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
      oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 比较 旧后与新后</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2旧后与新后相同&#39;</span><span class="token punctuation">)</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span>
      oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
      newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 旧前与新后</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3新后与旧前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 当新后与旧前命中的时候，此时需要移动节点，移动 新后 指向的这个节点到老节点的旧后的后面</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span>
      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>
      oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
      newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 旧后与新前</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4旧后与新前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 此时要移动节点，移动 新前 节点到老节点的旧前的前面</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
      oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;四种方式均没有命中&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;while循环结束&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_10、-手写字节点更新策略-中篇" tabindex="-1"><a class="header-anchor" href="#_10、-手写字节点更新策略-中篇" aria-hidden="true">#</a> 10、 手写字节点更新策略（中篇）</h2><p>本章节来完成 四中方式 均没有命中时候的处理</p><p>理论要点：当之前四中比较逻辑都没有命中时候，就需要拿新子节点的子项，直接取旧子节点中遍历，如果有一样的子节点，就进行移动操作，否则就进行新增处理（添加到所有未处理节点的前面）</p><p>代码展示如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> keyMap<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;四种方式均没有命中&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    keyMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> oldEndNode<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> index
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 寻找当期这项（newStartIndex）在keyMap中映射的位置序号</span>
  <span class="token keyword">const</span> indexInOld <span class="token operator">=</span> keyMap<span class="token punctuation">[</span>newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>indexInOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是新增的&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 如果不存在，说明 当前项目是全新的项,插在未处理节点 oldStartNode 的前面</span>
    parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;如果不是 undefined 说明不是全新的项目，需要移动&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> elmToMove <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>indexInOld<span class="token punctuation">]</span>
    <span class="token function">patchVNode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
    <span class="token comment">// 把这项设置为 undefined， 表示已经处理完这项，所以while循环之前的处理也要做判断，因为节点有可能被置为 undefined</span>
    oldChildren<span class="token punctuation">[</span>indexInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token comment">// 调用 insertBefore 把它移动到 oldStartNode 前面</span>
    parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、-手写字节点更新策略-下篇" tabindex="-1"><a class="header-anchor" href="#_11、-手写字节点更新策略-下篇" aria-hidden="true">#</a> 11、 手写字节点更新策略（下篇）</h2><p>本章节用来完成 <code>while循环</code>后的处理</p><ol><li><p>假如 <code>newStartIdx &gt; newEndIdx</code></p><ul><li><p>说明 新字节点遍历完毕，旧子节点可能还有剩余，所以我们要对可能剩下的旧子节点进行批量删除，就是<strong>遍历剩下的节点，逐个删除 DOM</strong></p></li><li><p>代码展示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 主要这里 oldChildren[index] 有可能也会是 undefinded, 上节中写到</span>
  oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
    oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>假如<code>oldStartIdx &gt; oldEndIdx</code></p><ul><li><p>说明 旧子节点遍历完毕，新子节点可能有剩余，所以要对剩余的新子节点处理，很明显，剩余的新子节点不存在旧子节点中</p></li><li><p>代码展示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;新节点有剩余的，需要新增&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> before <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm
  <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果引用节点为 null，则将指定的节点添加到指定父节点的子节点列表的末尾。</span>
  parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_12、完整的-diff-代码" tabindex="-1"><a class="header-anchor" href="#_12、完整的-diff-代码" aria-hidden="true">#</a> 12、完整的 diff 代码</h2><ol><li><p><code>index.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span>
<span class="token keyword">import</span> patch <span class="token keyword">from</span> <span class="token string">&#39;./patch&#39;</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;E&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span>

<span class="token comment">// 对于不同的节点</span>
<span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;E&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;F&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;FF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;G&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;GG&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;C&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// const vnode2 = h(&#39;h1&#39;, { key: &#39;first&#39; }, &#39;hello world12222&#39;)</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;点击我进行内容更新&#39;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">patch</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>patch.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">&#39;./createElement&#39;</span>
<span class="token keyword">import</span> patchVNode <span class="token keyword">from</span> <span class="token string">&#39;./patchVNode&#39;</span>
<span class="token keyword">import</span> vNode <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断第一个参数 oldVNode 是虚拟节点还是 DOM 节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是空，说明是 DOM 节点，需要包装为空的虚拟节点</span>
    oldVNode <span class="token operator">=</span> <span class="token function">vNode</span><span class="token punctuation">(</span>
      oldVNode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      oldVNode<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判断 oldVNode 和 newVNode 是不是同一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#39;是同一个节点，需要做精细化比较&#39;</span>
    <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;不是同一个节点，暴力插入新的，删除旧的&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> newVNodeElm <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode <span class="token operator">&amp;&amp;</span> newVNodeElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newVNodeElm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 删除 老节点</span>
    oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vnode.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">vNode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    sel<span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    text<span class="token punctuation">,</span>
    elm<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>createElement.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 真正 创建节点，将 vNode 创建为dom，是孤儿节点，不进行插入，因为子节点需要递归，而子节点有没有标杆
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vNode</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">pivot</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> domNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span>
  <span class="token comment">// 判断有子节点还是有文本</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    vNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 它的内部是文字</span>
    domNode<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vNode<span class="token punctuation">.</span>text
    <span class="token comment">// 补充 elm 属性</span>
    vNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#39;这里进行处理多个子节点的循环处理&#39;</span>
    <span class="token comment">// 它内部是子节点，需要进行 递归创建子节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
      <span class="token keyword">let</span> nodeDOM <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      domNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>nodeDOM<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    vNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> domNode
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回 elm，是一个纯 DOM 节点</span>
  <span class="token keyword">return</span> vNode<span class="token punctuation">.</span>elm
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>patchVNode.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> updateChildren <span class="token keyword">from</span> <span class="token string">&#39;./updateChildren&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patchVNode</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在内存中是不是同一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">===</span> newVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  newVNode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>elm
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;判断 newVNode 有 text 属性&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVNode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 把 oldVNode.elm 中的text 变为 newVNode 中的text(即使 oldVNode 有children属性，innerText一旦改变后，老children也就没了)</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>text
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newVNode 没有 text 属性&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断 oldVNode 有没有 children</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 老的节点有 children，此时是最复杂的情况，就是新老节点都有 children</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;最复杂&#39;</span><span class="token punctuation">)</span>
      <span class="token function">updateChildren</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 老的没有 children 新的有 children</span>
      oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      newVNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newNodeDom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        oldVNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newNodeDom<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>updateChildren.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createElement <span class="token keyword">from</span> <span class="token string">&#39;./createElement&#39;</span>
<span class="token keyword">import</span> patchVNode <span class="token keyword">from</span> <span class="token string">&#39;./patchVNode&#39;</span>

<span class="token keyword">function</span> <span class="token function">checkSameVNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> vNode1<span class="token punctuation">.</span>sel <span class="token operator">===</span> vNode2<span class="token punctuation">.</span>sel <span class="token operator">&amp;&amp;</span> vNode1<span class="token punctuation">.</span>key <span class="token operator">===</span> vNode2<span class="token punctuation">.</span>key
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  oldChildren<span class="token punctuation">.</span>children <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  newChildren<span class="token punctuation">.</span>children <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 旧前、旧后、新前、新后</span>
  <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> oldEndIndex <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> newStartIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> newEndIndex <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token comment">// 老节点中的key集合</span>
  <span class="token keyword">let</span> keyMap
  <span class="token comment">// 旧前节点、旧后节点、新前节点、新后节点</span>
  <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span>
  <span class="token keyword">let</span> newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果旧的开始节点不存在，也就是之前设置了 undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 注意 undefined == null  为true</span>
      oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1旧前与新前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">//  比较新旧节点</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
      oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 比较 旧后与新后</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2旧后与新后相同&#39;</span><span class="token punctuation">)</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span>
      oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
      newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 旧前与新后</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3新后与旧前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 当新后与旧前命中的时候，此时需要移动节点，移动 新后 指向的这个节点到老节点的旧后的后面</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">)</span>
      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>
      oldStartNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>
      newEndNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkSameVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 旧后与新前</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4旧后与新前相同&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 此时要移动节点，移动 新前 节点到老节点的旧前的前面</span>
      <span class="token function">patchVNode</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
      oldEndNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;四种方式均没有命中&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keyMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;</span> oldEndNode<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> key <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key
          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            keyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> index
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 寻找当期这项（newStartIndex）在keyMap中映射的位置序号</span>
      <span class="token keyword">const</span> indexInOld <span class="token operator">=</span> keyMap<span class="token punctuation">[</span>newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>indexInOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是新增的&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 如果不存在，说明 当前项目是全新的项,插在未处理节点 oldStartNode 的前面</span>
        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;如果不是 undefined 说明不是全新的项目，需要移动&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> elmToMove <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>indexInOld<span class="token punctuation">]</span>
        <span class="token function">patchVNode</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">,</span> newStartNode<span class="token punctuation">)</span>
        <span class="token comment">// 把这项设置为 undefined， 表示已经处理完这项</span>
        oldChildren<span class="token punctuation">[</span>indexInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
        <span class="token comment">// 调用 insertBefore 把它移动到 oldStartNode 前面</span>
        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elmToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      newStartNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;while循环结束&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 这里要做删除，&lt;或者新增剩余节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;新节点有剩余的，需要新增&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> before <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token operator">?</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm
      <span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果引用节点为 null，则将指定的节点添加到指定父节点的子节点列表的末尾。</span>
      parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环结束了，oldStartIndex 还是小于 oldEndIndex</span>
    <span class="token comment">// 批量删除 oldStartIndex 和 oldEndIndex 之间的项</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,35);function g(h,f){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",d,[p("官方 github 地址"),t(a)])]),k,n("ol",null,[r,n("li",null,[v,n("p",null,[n("a",m,[p("https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76f3c164a16f4dabbf0c7f33829029d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"),t(a)])])])]),b])}const y=e(i,[["render",g],["__file","diff.html.vue"]]);export{y as default};
