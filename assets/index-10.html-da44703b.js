import{_ as p,M as o,p as c,q as i,R as s,t as n,N as t,a1 as e}from"./framework-e8cb8151.js";const l={},u=e(`<h1 id="_10-怎么复用你的代码" tabindex="-1"><a class="header-anchor" href="#_10-怎么复用你的代码" aria-hidden="true">#</a> 10-怎么复用你的代码？</h1><p>作为前端工程师的你，或许早已习惯了在编写浏览器组件时使用 import 和 from 来管理代码模块，在编写 Node.js 服务时通过 require 和 module.exports 来复用代码。但 JavaScript 模块化之路充满了坎坷。这一课时就带你由近及远，看看 JavaScript 模块发展史上那些著名的模块规范与实现。</p><h2 id="es6-模块" tabindex="-1"><a class="header-anchor" href="#es6-模块" aria-hidden="true">#</a> ES6 模块</h2><p>目前最主流的模块化方案应该是 ECMAScript 2015 提出的模块化规范（也称“<strong>ES6 模块</strong>”），这个规范同时适用于 JavaScript 的前后端环境。</p><h3 id="定义和引用" tabindex="-1"><a class="header-anchor" href="#定义和引用" aria-hidden="true">#</a> 定义和引用</h3><p>由于目前大多数项目都使用了 ES6 模块规范，大家对用法应该比较熟悉，这里就不多介绍了，只补充 3 个小知识：</p><ul><li>ES6 模块<strong>强制自动采用严格模式</strong>，所以说不管有没有“user strict”声明都是一样的，换言之，编写代码的时候不必再刻意声明了；</li><li>虽然大部分主流浏览器支持 ES6 模块，但是和引入普通 JS 的方式略有不同，需要在对应 script 标签中将属性 type 值设置为“module”才能被正确地解析为 ES6 模块；</li><li>在 Node.js 下使用 ES6 模块则需要将文件名后缀改为“.mjs”，用来和 Node.js 默认使用的 CommonJS 规范模块作区分。</li></ul><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3><p>ES6 模块有两个重要特性一定要掌握，一个是<strong>值引用</strong>，另一个是<strong>静态声明</strong>。</p><p>值引用是指 export 语句输出的接口，<strong>与其对应的值是动态绑定关系</strong>。即通过该接口，可以取到模块内部实时的值，可以简单地理解为变量浅拷贝。</p><p>下面是一个简单的例子，模块 a 导出变量 a，初始值为空字符串，500 毫秒后赋值为字符串 &#39;a&#39;；模块 b 引用模块 a 并打印，控制台输出空字符串，1 秒后继续打印，控制台输出字符串 &#39;a&#39;。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>

<span class="token comment">// b.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// &#39;a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 模块对于引用声明有严格的要求，</p><ul><li>首先必须在文件的首部，</li><li>不允许使用变量或表达式，</li><li>不允许被嵌入到其他语句中 所以下面 3 种引用模块方式都会报错。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 必须首部声明</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 不允许使用变量或表达式</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;p&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;p&#39;</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 不允许被嵌入语句逻辑</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>moduleName <span class="token operator">===</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./bpp&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义这些严格的要求可不仅仅是为了代码的可读性，更重要的是可以对代码进行静态分析。</p><p><strong>静态分析</strong>是指不需要执行代码，只从字面量上对代码进行分析。例如，在上面的错误代码中，有一段代码需要通过判断变量 moduleName 的值来加载对应的模块，这就意味着需要执行代码之后才能判断加载哪个模块，而 ES6 模块则不需要。这样做的好处是方便优化代码体积，比如通过 <code>Tree-shaking</code> 操作消除模块中没有被引用或者执行结果不会被用到的无用代码。</p><h2 id="延伸-1-import-的动态模块提案" tabindex="-1"><a class="header-anchor" href="#延伸-1-import-的动态模块提案" aria-hidden="true">#</a> 延伸 1：import 的动态模块提案</h2>`,18),r={href:"https://es6.ruanyifeng.com/#docs/module#import",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/467991875",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/tc39/proposal-dynamic-import",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>具体用法如下所示，调用 import() 函数传入模块路径，得到一个 Promise 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./section-modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>link<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>entryModule<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span><span class="token function">loadPageInto</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    main<span class="token punctuation">.</span>textContent <span class="token operator">=</span> err<span class="token punctuation">.</span>message
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>import() 函数违反了上面静态声明的所有要求，并且提供了其他更强大的功能特性。</p><ul><li>违反首部声明要求，那么就意味着可以在代码运行时<strong>按需加载</strong>模块，这个特性就可以用于首屏优化，根据路由和组件只加载依赖的模块。</li><li>违反变量或表达式要求，则意味着可以根据参数<strong>动态加载</strong>模块。</li><li>违反嵌入语句逻辑规则，可想象空间更大，比如可以通过 Promise.race 方式同时加载多个模块，选择加载速度最优模块来使用，从而提升性能。</li></ul><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2><p><code>CommonJS</code> 最初名为 <code>Server.js</code>，是为浏览器之外的 <code>JavaScript</code> 运行环境提供的模块规范，最终被 Node.js 采用。</p><h3 id="定义和引用-1" tabindex="-1"><a class="header-anchor" href="#定义和引用-1" aria-hidden="true">#</a> 定义和引用</h3><p><code>CommonJS</code> 规定每个文件就是一个模块，有独立的作用域。每个模块内部，都有一个 <code>module</code> 对象，代表当前模块。通过它来导出 API，它有以下属性：</p><ul><li><code>id</code> 模块的识别符，通常是带有绝对路径的模块文件名；</li><li><code>filename</code> 模块的文件名，带有绝对路径；</li><li><code>loaded</code> 返回一个布尔值，表示模块是否已经完成加载；</li><li><code>parent</code> 返回一个对象，表示调用该模块的模块；</li><li><code>children</code> 返回一个数组，表示该模块要用到的其他模块；</li><li><code>exports</code> 表示模块对外输出的值。</li></ul><p>引用模块则需要通过 <code>require</code> 函数，它的基本功能是，读入并执行一个 <code>JavaScript</code> 文件，然后返回该模块的 <code>exports</code> 对象。</p><h3 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1" aria-hidden="true">#</a> 特性</h3><p><code>CommonJS</code> 特性和 ES6 恰恰相反，它采用的是<strong>值拷贝</strong>和<strong>动态声明</strong>。值拷贝和值引用相反，一旦输出一个值，模块内部的变化就影响不到这个值了，可以简单地理解为<strong>变量浅拷贝</strong>。</p><p>仍然使用上面的例子，改写成 CommonJS 模块，在 Node.js 端运行，控制台会打印两个空字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> a

<span class="token comment">// b.js</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态声明就很好理解了，就是消除了静态声明的限制，可以“自由”地在表达式语句中引用模块。</p><h2 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h2><p>在 ES6 模块出现之前，<code>AMD</code>（Asynchronous Module Definition，异步模块定义）是一种很热门的浏览器模块化方案。</p><h3 id="定义和引用-2" tabindex="-1"><a class="header-anchor" href="#定义和引用-2" aria-hidden="true">#</a> 定义和引用</h3><p>AMD 规范只定义了一个全局函数 define，通过它就可以定义和引用模块，它有 3 个参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>第 1 个参数 <code>id</code>: 为模块的名称，该参数是可选的。如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字；如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p></li><li><p>第 2 个参数 <code>dependencies</code>: 是个数组，它定义了所依赖的模块。依赖模块必须根据模块的工厂函数优先级执行，并且执行的结果应该按照依赖数组中的位置顺序以参数的形式传入（定义中模块的）工厂函数中。</p></li><li><p>第 3 个参数 <code>factory</code>: 为模块初始化要执行的函数或对象。如果是函数，那么该函数是单例模式，只会被执行一次；如果是对象，此对象应该为模块的输出值。</p></li></ul><p>下面是一个简单的例子，创建一个名为“alpha”的模块，依赖了 require、exports、beta 3 个模块，并导出了 verb 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;alpha&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exports&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beta&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  <span class="token parameter">require<span class="token punctuation">,</span>
  exports<span class="token punctuation">,</span>
  beta</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span><span class="token function-variable function">verb</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> beta<span class="token punctuation">.</span><span class="token function">verb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特性-2" tabindex="-1"><a class="header-anchor" href="#特性-2" aria-hidden="true">#</a> 特性</h3><p>它的重要特性就是<strong>异步加载</strong>。所谓异步加载，就是指同时并发加载所依赖的模块，当所有依赖模块都加载完成之后，再执行当前模块的回调函数。这种加载方式和浏览器环境的性能需求刚好吻合。</p>`,25),v={href:"https://requirejs.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://requirejs.org/docs/release/2.3.6/comments/require.js",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> requirejs<span class="token punctuation">,</span> require<span class="token punctuation">,</span> define<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> setTimeout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span>defQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      context<span class="token punctuation">.</span>defQueueMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      globalDefQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  req<span class="token punctuation">.</span><span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">createNode</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>baseElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> baseElement<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      currentlyAddingScript <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setTimeout <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> setTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h2><p><code>CMD</code>（Common Module Definition，通用模块定义）是基于浏览器环境制定的模块规范。</p><h3 id="定义和引用-3" tabindex="-1"><a class="header-anchor" href="#定义和引用-3" aria-hidden="true">#</a> 定义和引用</h3><p><code>CMD</code> 定义模块也是通过一个全局函数 <code>define</code> 来实现的，但只有一个参数，该参数既可以是函数也可以是对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果这个参数是对象，那么模块导出的就是对象；如果这个参数为函数，那么这个函数会被传入 3 个参数 require 、 exports 和 module。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第 1 个参数 <code>require</code> 是一个函数，通过调用它可以引用其他模块，也可以调用 require.async 函数来异步调用模块。</p></li><li><p>第 2 个参数 <code>exports</code> 是一个对象，当定义模块的时候，需要通过向参数 exports 添加属性来导出模块 API。</p></li><li><p>第 3 个参数 <code>module</code> 是一个对象，它包含 3 个属性：</p><ul><li><code>uri</code>，模块完整的 URI 路径；</li><li><code>dependencies</code>，模块的依赖；</li><li><code>exports</code>，模块需要被导出的 API，作用同第二个参数 exports。</li></ul></li></ul><p>下面是一个简单的例子，定义了一个名为 increment 的模块，引用了 math 模块的 add 函数，经过封装后导出成 increment 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;math&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add
  exports<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  module<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&#39;increment&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特性-3" tabindex="-1"><a class="header-anchor" href="#特性-3" aria-hidden="true">#</a> 特性</h3><p>CMD 最大的特点就是<strong>懒加载</strong>，和上面示例代码一样，不需要在定义模块的时候声明依赖，可以在模块执行时动态加载依赖。当然还有一点不同，那就是 CMD 同时支持同步加载模块和异步加载模块。</p>`,13),g=s("strong",null,"整合了 CommonJS 和 AMD 规范的特点",-1),f={href:"https://github.com/seajs/seajs",target:"_blank",rel:"noopener noreferrer"},_=e(`<h2 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h2><p>UMD（Universal Module Definition，统一模块定义）其实并不是模块管理规范，而是带有前后端同构思想的模块封装工具。通过 UMD 可以在合适的环境选择对应的模块规范。比如在 Node.js 环境中采用 CommonJS 模块管理，在浏览器端且支持 AMD 的情况下采用 AMD 模块，否则导出为全局函数。</p><p>它的实现原理也比较简单：</p><ul><li>先判断是否支持 Node.js 模块格式（exports 是否存在），存在则使用 Node.js 模块格式；</li><li>再判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块；</li><li>若前两个都不存在，则将模块公开到全局（Window 或 Global）。</li></ul><p>大致实现如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//。。。</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="延伸-2-es5-标准下如何编写模块" tabindex="-1"><a class="header-anchor" href="#延伸-2-es5-标准下如何编写模块" aria-hidden="true">#</a> 延伸 2：ES5 标准下如何编写模块</h2><p><strong>模块的核心就是创建独立的作用域</strong>，要实现这个目的，我们在第 08 课时中提到过，可以通过函数来实现。</p><p>如果直接在全局作用域下定义函数会很容易因为命名冲突而导致代码覆盖，为了避免这种情况可以通过对象创建“命名空间”。但是它有个缺点，就是无法创建私有变量，并不符合“高内聚、低耦合”的编码原则，也容易出现 bug。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，立即执行函数的形式也就出现了，这种形式就是在定义函数的时候就调用它并导出模块 API。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
  　　f<span class="token punctuation">,</span>
  　　a
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这两个基础知识点，我们再通过 webpack 编译 ES6 模块的例子加深理解。</p><p>下面的代码定义了 2 个 ES6 模块，分别是 index.js、m.js，其中模块 index.js 依赖 m.js 模块的 API：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> write <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./m&#39;</span>
<span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>


<span class="token comment">// m.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> write <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看编译后的代码我们发现，整个代码就是一个立即执行函数，这个立即执行函数的参数就是对象形式的模块定义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bundle.js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;./index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;./m.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个立即执行函数会加载一个初始模块，也就是 webpack 配置的 entry 模块，按照依赖关系调用模块对应的函数并缓存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> installedModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> module <span class="token operator">=</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">i</span><span class="token operator">:</span> moduleId<span class="token punctuation">,</span>
      <span class="token literal-property property">l</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这些 ES6 模块是怎么转化成函数的呢？</p><p>从上面的代码我们可以看到，每个模块定义函数都会传入 3 个参数，</p><ul><li>其中参数 module 可以理解为当前模块的配置参数，包含模块 id 等信息。</li><li>参数 <code>__webpack_exports__</code> 是一个对象，模块需要导出的 API 都可以添加到这个对象上；</li><li>参数 <code>__webpack_require__</code> 是一个函数，负责引用依赖的模块。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js 中引入 m.js 模块</span>
<span class="token keyword">var</span> _m__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! ./m */</span> <span class="token string">&#39;./m.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// m.js 中导出字符串 text 和函数 write</span>
__webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> text
<span class="token punctuation">}</span><span class="token punctuation">)</span>
__webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token string">&#39;write&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> write
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是通过对象和立即执行函数来实现代码模块化的基本方法，对实现细节有兴趣的同学可以找一段编译后的代码进行研究。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本课时主要介绍了 <code>JavaScript 模块化</code>规范，包括原生规范 <code>ES6 模块</code>、<code>Node.js</code> 采用的 <code>CommonJS</code>，以及开源社区早期为浏览器提供的规范 AMD，具有 <code>CommonJS 特性</code>和 <code>AMD 特性</code>的 <code>CMD</code>，让 <code>CommonJS</code> 和 <code>AMD</code> 模块跨端运行的 <code>UMD</code>。希望你对模块系统有更全面地认识，从而加深对 <code>JavaScript</code> 的理解。</p><p>最后留一道思考题：如果要实现一个支持动态加载的 import() 函数，该怎么做呢？</p><hr><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h4 id="磊" tabindex="-1"><a class="header-anchor" href="#磊" aria-hidden="true">#</a> **磊：</h4><blockquote><p>首先实现一个配置表，当需要某个 JS 时 去匹配配置表，然后用 JSONP 请求过来，eval 执行</p></blockquote><h4 id="鑫" tabindex="-1"><a class="header-anchor" href="#鑫" aria-hidden="true">#</a> *鑫：</h4><blockquote><p>commonjs 是值的深拷贝吧，上面有点问题</p></blockquote><h4 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>属于浅拷贝，被不同模块引用时指向同一个内存空间。</p></blockquote><h4 id="道" tabindex="-1"><a class="header-anchor" href="#道" aria-hidden="true">#</a> *道：</h4><blockquote><p>使用 Promise 来实现 动态加载的 import()。</p></blockquote><h4 id="用户-7763" tabindex="-1"><a class="header-anchor" href="#用户-7763" aria-hidden="true">#</a> **用户 7763：</h4><blockquote><p>直接请求 js 文件可还行，像 script 标签的 src 一样</p></blockquote><h4 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>建议封装成统一的模块，便于模块之间的隔离和引用~</p></blockquote>`,41);function w(y,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[s("a",r,[n("阮一峰：import()"),t(a)])]),s("p",null,[s("a",d,[n("前端模块化——彻底搞懂AMD、CMD、UMD、ESM和CommonJS"),t(a)])]),s("p",null,[n("虽然 ES6 模块设计在 90% 情况下是很有用的，特别是配合一些工具使用，但是却无法应付某些特殊场景。比如，出于性能原因对代码进行动态加载，所以在 ES2020 规范提案中，希望通过 "),s("a",k,[n("import()"),t(a)]),n(" 函数来支持动态引入模块。")]),m,s("p",null,[n("由于 AMD 并不是浏览器原生支持的模块规范，所以需要借助第三方库来实现，其中最有名的就是 "),s("a",v,[n("RequireJS"),t(a)]),n("。它的核心是两个全局函数 define 和 require，define 函数可以将依赖注入队列中，并将回调函数定义成模块；require 函数主要作用是创建 script 标签请求对应的模块，然后加载和执行模块。下面是部分源码，有兴趣的同学可以看完整的"),s("a",b,[n("源码"),t(a)]),n("。")]),h,s("p",null,[n("用一句话来形容就是，它"),g,n("。遵循 CMD 规范的代表开源项目是 sea.js ，它的实现和 requirejs 没有本质差别，有兴趣的同学可以看其"),s("a",f,[n("源码"),t(a)]),n("。")]),_])}const q=p(l,[["render",w],["__file","index-10.html.vue"]]);export{q as default};
