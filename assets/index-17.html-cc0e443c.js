import{_ as a,p as s,q as n,a1 as e}from"./framework-e8cb8151.js";const p="/assets/5f4318f70001336206400426-13ed64e0.jpg",r="/assets/5f431910000158ad05000299-6baf5518.png",t="/assets/5f4319170001fbaa16420434-96cb29a0.png",l={},o=e('<h1 id="_17-docker-网络初探" tabindex="-1"><a class="header-anchor" href="#_17-docker-网络初探" aria-hidden="true">#</a> 17-Docker 网络初探</h1><p><img src="'+p+`" alt="img"></p><blockquote><p>没有智慧的头脑，就象没有腊烛的灯笼。——列夫·托尔斯泰</p></blockquote><p>从本节课开始，我们将正式进入 Docker 网络这一重要环节，在开始介绍 Docker 网络之前，我们先来了解一下 Docker 网络是如何工作的。</p><h2 id="_1-docker0-网桥-bridge" tabindex="-1"><a class="header-anchor" href="#_1-docker0-网桥-bridge" aria-hidden="true">#</a> 1. docker0 网桥（Bridge）</h2><p>我们在 Linux 宿主机上面启动了 Docker Daemon 进程之后，通过 ifconfig 查看，会发现多了一个叫 docker0 的网卡，这个就是 docker0 网桥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># ifconfig</span>
docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255
        ether 02:42:3e:ce:27:81  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">3643</span>  bytes <span class="token number">311618</span> <span class="token punctuation">(</span><span class="token number">304.3</span> KiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">3017</span>  bytes <span class="token number">3388653</span> <span class="token punctuation">(</span><span class="token number">3.2</span> MiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网桥，简而言之，就是<strong>早期的两端口二层网络设备，用来连接不同的局域网，对数据包进行存储、转发操作</strong>。这里的一个关键点就是两端口，<strong>docker0 网桥连接的就是容器网段和宿主机网段</strong>。</p><p><strong>docker0 网桥是在 Docker Daemon 启动的时候自动创建的</strong>，从我们上面的结果 (inet 和 netmask) 可以看出来 docker0 的 IP 为 172.17.0.1/16。<strong>之后使用 bridge 模式（默认）创建出来的 Docker 容器都将在 docker0 子网的范围内选取一个未被占用的 IP 使用</strong>，并连接到 docker0 网桥上。</p><p>docker0 网桥的 IP 地址和子网范围是可以通过参数修改的，使用 CIDR 的格式，感兴趣的同学可以自行查阅 <code>--bip=CIDR</code>。</p><p><img src="`+r+'" alt="图片描述"></p><p>在 Linux 系统中，我们可以通过 brctl 命令来查看网桥的信息（如果提示找不到命令，需要先安装 bridge-utils 软件包）。下面是我的一台运行了多个 Docker 容器的 Centos 机器的 brctl 的显示结果。</p><p><img src="'+t+`" alt="图片描述"></p><p>我们从 brctl 的结果中可以看到网桥上面连接了很多了 veth 设备，同时 veth 设备总是成对出现的，那么也就意味着 veth 的另一端连接的是容器的 eth0，正如上面那幅图所示。</p><h2 id="_2-iptables" tabindex="-1"><a class="header-anchor" href="#_2-iptables" aria-hidden="true">#</a> 2. iptables</h2><p>介绍完了 Bridge 之后，我们还需要了解一下 iptables。</p><p>iptables 可以简单理解为是<strong>一个命令行防火墙（firewall）工具，我们可以设置一些 iptables 规则来达到流量控制</strong>。Docker 会在宿主机系统上增加一些 iptables 规则，以用来管理 Docker 容器和容器之间以及和外界的通信。</p><p>下面我们通过命令 <code>iptables-save</code> 命令来查看一下我的这台虚拟机（运行着多个 Docker 容器）上面的 iptable 规则情况，下面是全部命令输出，我们下面就看看 Docker 的数据转发是怎么做的？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># clear</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># iptables-save</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Sun Mar 29 14:28:38 2020</span>
*nat
:PREROUTING ACCEPT <span class="token punctuation">[</span><span class="token number">904001</span>:54226848<span class="token punctuation">]</span>
:INPUT ACCEPT <span class="token punctuation">[</span><span class="token number">904000</span>:54226788<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span><span class="token number">60846644</span>:3691707360<span class="token punctuation">]</span>
:POSTROUTING ACCEPT <span class="token punctuation">[</span><span class="token number">60846645</span>:3691707420<span class="token punctuation">]</span>
:DOCKER - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
<span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-m</span> addrtype --dst-type LOCAL <span class="token parameter variable">-j</span> DOCKER
<span class="token parameter variable">-A</span> OUTPUT <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token number">127.0</span>.0.0/8 <span class="token parameter variable">-m</span> addrtype --dst-type LOCAL <span class="token parameter variable">-j</span> DOCKER
<span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.0/16 <span class="token operator">!</span> <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> MASQUERADE
<span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.4/32 <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.4/32 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> MASQUERADE
<span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.5/32 <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.5/32 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6379</span> <span class="token parameter variable">-j</span> MASQUERADE
<span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.6/32 <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.6/32 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">5000</span> <span class="token parameter variable">-j</span> MASQUERADE
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-j</span> RETURN
<span class="token parameter variable">-A</span> DOCKER <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8080</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.17</span>.0.4:80
<span class="token parameter variable">-A</span> DOCKER <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6379</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.17</span>.0.5:6379
<span class="token parameter variable">-A</span> DOCKER <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">5000</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.17</span>.0.6:5000
COMMIT
<span class="token comment"># Completed on Sun Mar 29 14:28:38 2020</span>
<span class="token comment"># Generated by iptables-save v1.4.21 on Sun Mar 29 14:28:38 2020</span>
*filter
:INPUT ACCEPT <span class="token punctuation">[</span><span class="token number">450195298</span>:73092369567<span class="token punctuation">]</span>
:FORWARD DROP <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:OUTPUT ACCEPT <span class="token punctuation">[</span><span class="token number">802081724</span>:168977653504<span class="token punctuation">]</span>
:DOCKER - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:DOCKER-ISOLATION-STAGE-1 - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:DOCKER-ISOLATION-STAGE-2 - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
:DOCKER-<span class="token environment constant">USER</span> - <span class="token punctuation">[</span><span class="token number">0</span>:0<span class="token punctuation">]</span>
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-j</span> DOCKER-<span class="token environment constant">USER</span>
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-j</span> DOCKER-ISOLATION-STAGE-1
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-m</span> conntrack <span class="token parameter variable">--ctstate</span> RELATED,ESTABLISHED <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> DOCKER
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-i</span> docker0 <span class="token operator">!</span> <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.4/32 <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.5/32 <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6379</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.6/32 <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">5000</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token parameter variable">-A</span> DOCKER-ISOLATION-STAGE-1 <span class="token parameter variable">-i</span> docker0 <span class="token operator">!</span> <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> DOCKER-ISOLATION-STAGE-2
<span class="token parameter variable">-A</span> DOCKER-ISOLATION-STAGE-1 <span class="token parameter variable">-j</span> RETURN
<span class="token parameter variable">-A</span> DOCKER-ISOLATION-STAGE-2 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> DROP
<span class="token parameter variable">-A</span> DOCKER-ISOLATION-STAGE-2 <span class="token parameter variable">-j</span> RETURN
<span class="token parameter variable">-A</span> DOCKER-<span class="token environment constant">USER</span> <span class="token parameter variable">-j</span> RETURN
COMMIT
<span class="token comment"># Completed on Sun Mar 29 14:28:38 2020</span>
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iptables 默认有 4 个表：</p><ul><li><em><strong>nat</strong></em>：地址转换表；</li><li><em><strong>filter</strong></em>：数据过滤表；</li><li><em><strong>raw</strong></em>：状态跟踪表；</li><li><em><strong>mangle</strong></em>：包标记表。</li></ul><p>我们这里的输出只有 <em><strong>nat</strong></em> 表和 <em><strong>filter</strong></em> 表。其中 <em><strong>nat</strong></em> 表中有一条规则如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-A</span> POSTROUTING <span class="token parameter variable">-s</span> <span class="token number">172.17</span>.0.0/16 <span class="token operator">!</span> <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> MASQUERADE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条规则的含义定义了 Docker 容器和外界的通信，含义是将源地址为 172.17.0.0/16 （docker0 网桥的子网，也就是 Docker 容器发出的数据） 的数据包，当不是从 docker0 网卡发出时做 SNAT 转换。</p><p>SNAT 的意思是源地址转换，将 IP 包的源地址转换为相应网卡的地址。这条规则的作用是当我们从 Docker 容器访问外网时，在外边看来就是从宿主机上发出的，外部对于 Docker 容器无感知。</p><p>上面这条规则定义 Docker 容器访问外部，那么从外部访问 Docker 容器服务时，是怎么处理的呢？我们可以看一下两条规则</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*nat
<span class="token punctuation">..</span>.
<span class="token parameter variable">-A</span> DOCKER <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6379</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.17</span>.0.5:6379
<span class="token punctuation">..</span>.
*filter
<span class="token punctuation">..</span>.
<span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.5/32 <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-m</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6379</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <em><strong>nat</strong></em> 表中的规则含义是将访问宿主机的 6379 端口流量转发到 172.17.0.5 的 6379 端口上。熟悉 redis 的同学这个时候一定反应过来了，172.17.0.5 一定是一个运行着 redis-server 的 Docker 容器，同时在启动的时候做了容器端口 6379 到宿主机端口 6379 的端口映射。</p><p>事实确实是这样的。所以我们可以得出结论：<strong>外界访问 Docker 容器是通过 iptables 做 DNAT 实现的</strong>。DNAT 将 SNAT 中的 Source 换成 Destination，表示目的地址转换。</p><p><em><strong>filter</strong></em> 表中的规则用来对流量做限制，这里的这条规则表示允许所有的外部 IP 访问容器，可以通过在 filter 的 Docker 链上添加规则来对外部的 IP 访问做出限制，这里就不再演示了。</p><p>不光是与外界通信，Docker 容器之间通信也受到 iptables 规则限制。我们前面也了解到宿主机上面的所有 Docker 容器都位于 docker0 网桥的子网内。同时我们从 iptables 中的输出看到一条 <em><strong>filter</strong></em> 规则。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-A</span> FORWARD <span class="token parameter variable">-i</span> docker0 <span class="token parameter variable">-o</span> docker0 <span class="token parameter variable">-j</span> ACCEPT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条规则保证容器之间可以互相通信，如果将 Docker Server 启动参数 <code>--icc</code> 设置为 false，则这条规则会被设置为 DROP，容器之间的相互通信就会被禁止。</p><h2 id="_3-ip-forward" tabindex="-1"><a class="header-anchor" href="#_3-ip-forward" aria-hidden="true">#</a> 3. IP-Forward</h2><p>在 Docker 容器网络通信的过程中，还涉及到数据包在多个网卡间的转发，这需要将内核参数 <strong>ip-forward</strong> 打开，参数位于 /proc/sys/net/ipv4/ip_forward。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/sys/net/ipv4/ip_forward</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常这一步不需要我们手动来设置，Docker server 启动的时候默认会将 ip-forward 设置为 1。</p><h2 id="_4-dns-和主机名" tabindex="-1"><a class="header-anchor" href="#_4-dns-和主机名" aria-hidden="true">#</a> 4. DNS 和主机名</h2><p>容器的主机名以及 DNS 是设置在文件 /etc/hostname、/etc/hosts、/etc/resolv.conf 中的，对于容器来说，在容器启动后会覆盖这些文件从而达到修改属性的目的。下面是我的机器上面的示例。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker exec -ti 4be4cca01392 sh</span>
/ <span class="token comment"># mount</span>
<span class="token punctuation">..</span>.
/dev/vda1 on /etc/hostname <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>rw,relatime,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>
/dev/vda1 on /etc/hosts <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>rw,relatime,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>
/dev/vda1 on /etc/resolv.conf <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>rw,relatime,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时我们也可以通过参数 <code>-h HOSTNAME</code> 和 <code>--dns=IP_ADDRESS…</code> 来对 hostname 和 DNS 进行设置。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>本文介绍了 Docker 网络的工作模式，主要包括 docker0 网桥和 iptables，可能有些同学对于这些网络基础知识看的一头雾水，希望大家可以自己多实践。对于计算机网络的知识学习确实没有什么好的途径，唯有实践出真知。</p><p>下一章我们介绍 Docker 支持的多种网络模式。</p>`,44),c=[o];function i(d,m){return s(),n("div",null,c)}const b=a(l,[["render",i],["__file","index-17.html.vue"]]);export{b as default};
