import{_ as p,M as o,p as c,q as l,R as n,t as s,N as e,a1 as a}from"./framework-e8cb8151.js";const i={},u=a('<h1 id="_02-零基础-极速入门前端工程化基石之模块化技术" tabindex="-1"><a class="header-anchor" href="#_02-零基础-极速入门前端工程化基石之模块化技术" aria-hidden="true">#</a> 02-零基础：极速入门前端工程化基石之模块化技术</h1><h2 id="_01-【起航】阶段概览" tabindex="-1"><a class="header-anchor" href="#_01-【起航】阶段概览" aria-hidden="true">#</a> 01：【起航】阶段概览</h2><h3 id="阶段目标" tabindex="-1"><a class="header-anchor" href="#阶段目标" aria-hidden="true">#</a> 阶段目标</h3><ul><li>完成前端原生<code>JS</code>项目升级模块化开发+<code>MVVM</code>框架</li><li>掌握并实践<code>Webpack</code>各种优化技巧</li><li>掌握<code>Vue2</code>和<code>Vue3</code>框架搭建原理和方法</li></ul><h3 id="课程安排" tabindex="-1"><a class="header-anchor" href="#课程安排" aria-hidden="true">#</a> 课程安排</h3><ul><li><code>webpack</code>核心概念入门：<code>bundle</code>、<code>chunk</code>、<code>loader</code>、<code>plugin</code>等</li><li><code>ZBestPC</code> 商城项目源码分析和工程化痛点分析</li><li><code>ZBestPC</code>商场项目从原生<code>JS项目</code>升级到<code>Webpack工程化</code>开发</li><li><code>ZBestPC</code>商城项目升级到<code>Vue2</code>、<code>Vue3</code>框架开发</li></ul><h3 id="课程收获" tabindex="-1"><a class="header-anchor" href="#课程收获" aria-hidden="true">#</a> 课程收获</h3><ul><li>掌握<code>webpack</code>的基本概念和企业级项目的完整实践过程</li><li>解决<code>Webpack</code>实际应用过程中碰到的问题</li><li>掌握<code>Vue2</code>和<code>Vue3</code>框架的搭建和升级的具体方法</li><li>掌握<code>SPA</code>和<code>MPA</code>架构的区别和搭建方法</li></ul><h3 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法" aria-hidden="true">#</a> 学习方法</h3><ul><li>本阶段项目非常注重理论和实践的结合</li><li>需要先掌握工程化、模块化、<code>Webpack</code>、<code>MVVM</code>等概念后在做项目</li><li>实践过程中一定要理解背后的问题再动手解决，解决过程中要不断思考和总结，并进行持续迭代和优化</li></ul><h3 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目" aria-hidden="true">#</a> 开源项目</h3>',11),d={href:"https://github.com/NewCoder798/ZBestPC.git",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="_02-前端工程化发展历史" tabindex="-1"><a class="header-anchor" href="#_02-前端工程化发展历史" aria-hidden="true">#</a> 02:前端工程化发展历史</h2><h3 id="思考以下问题" tabindex="-1"><a class="header-anchor" href="#思考以下问题" aria-hidden="true">#</a> 思考以下问题</h3><ul><li>前端工厂化是如何一步步发展到今天的？</li><li>前端开发模式是如何逐步演化的？</li></ul><h3 id="前端历史大事件" tabindex="-1"><a class="header-anchor" href="#前端历史大事件" aria-hidden="true">#</a> 前端历史大事件</h3><ul><li>1995 年 Brendan Eich 发明 JavaScript</li><li>2005 年 Ajax（Asynchronous JavaScript And XML）广泛应用</li><li>2008 年 V8 引擎发布</li><li>2009 年 Nodejs 发布</li><li>2010 年 NPM 0.1 版本发布</li><li>2013 年 Webpack 1.0 版本发布</li><li>2013 年 React 1.0 版本发布</li><li>2014 年 Vue 1.0 版本发布</li></ul><h3 id="前端开发模式进化过程" tabindex="-1"><a class="header-anchor" href="#前端开发模式进化过程" aria-hidden="true">#</a> 前端开发模式进化过程</h3><ul><li>前后端混合(1995-2005):服务端渲染，<code>JavaScript</code>仅实现交互</li><li>前后端分离(2005-2013):借助 ajax 实现<code>前后端分离</code>、<code>SPA</code>等新模式</li><li>模块化开发（2013-2014）：<code>Npm</code>管理模块，<code>Webpack</code>编译打包资源</li><li>模块化+MVVM（2014-至今）：基于<code>React</code>或者<code>Vue</code>，开发<code>Html</code>成为历史</li></ul><h3 id="前端工程化解决了什么问题" tabindex="-1"><a class="header-anchor" href="#前端工程化解决了什么问题" aria-hidden="true">#</a> 前端工程化解决了什么问题</h3><ul><li>前端开发效率、开发规范、访问性能 <ul><li>问题 1：<code>js</code> 全局作用域冲突</li><li>问题 2：编码规范问题</li><li>问题 3：资源合并和压缩问题</li><li>问题 4：高版本 <code>js</code> 预发降级</li></ul></li></ul><h2 id="_03-前端工程化的应用场景" tabindex="-1"><a class="header-anchor" href="#_03-前端工程化的应用场景" aria-hidden="true">#</a> 03：前端工程化的应用场景</h2><h3 id="请思考下面的问题" tabindex="-1"><a class="header-anchor" href="#请思考下面的问题" aria-hidden="true">#</a> 请思考下面的问题</h3><ul><li>你目前所在企业的前端研发流程是什么？</li></ul><p>思考这个问题的原因呢？</p><ul><li>前端工程化贯穿于整个研发流程，解决研发流程中的问题</li><li>工程化的核心目标是三点：<strong>效率、规范、性能</strong></li><li>只有了解了前端研发流程的痛点，才能够进行诊断和优化</li><li>需要站在研发场景的角度去思考研发流程痛点</li></ul><h3 id="企业前端项目面临的真实问题" tabindex="-1"><a class="header-anchor" href="#企业前端项目面临的真实问题" aria-hidden="true">#</a> 企业前端项目面临的真实问题</h3><ul><li>项目量级别增加：几千行代码=&gt;几万行代码</li><li>项目数量扩大：几个项目=&gt;几千个项目</li><li>项目复杂度高：Web 项目=&gt;H5/PC/小程序/服务端/脚手架</li><li>团队人数增加：几个前端=&gt;几百个前端</li></ul><h3 id="企业前端工程问题解决" tabindex="-1"><a class="header-anchor" href="#企业前端工程问题解决" aria-hidden="true">#</a> 企业前端工程问题解决</h3><ul><li>项目量级增加：模块化（Common js 和 ESM）、npm、webpack</li><li>项目数量扩大：研发平台、研发脚手架</li><li>项目复杂度高：工程脚手架（统一解决不同技术栈的工程差异）</li><li>团队人数增加：研发平台、研发脚手架</li></ul><h3 id="企业前端工程化应用场景" tabindex="-1"><a class="header-anchor" href="#企业前端工程化应用场景" aria-hidden="true">#</a> 企业前端工程化应用场景</h3><ul><li>项目研发模式升级（模块化+MVVM）</li><li>工程脚手架</li><li>研发脚手架</li><li>项目性能优化</li></ul><h3 id="课程三大项目介绍" tabindex="-1"><a class="header-anchor" href="#课程三大项目介绍" aria-hidden="true">#</a> 课程三大项目介绍</h3><ul><li>项目 1：<code>ZBestPC</code>项目架构升级，原生 js=&gt;<code>webpack+vue</code></li><li>项目 2：<code>vue-elm</code>项目架构升级，工程架构升级+性能优化</li><li>项目 3：<code>imooc-build</code>工程化脚手架开发，<code>vue-cli=&gt;imooc-build</code></li></ul><h3 id="课程三大项目解决问题一览" tabindex="-1"><a class="header-anchor" href="#课程三大项目解决问题一览" aria-hidden="true">#</a> 课程三大项目解决问题一览</h3><ul><li>项目研发模式升级：&lt;= ZBestPc 架构升级 + vue-elm 架构升级</li><li>工程脚手架 &lt;= imooc-build 工程化脚手架</li><li>研发脚手&lt;=imooc-cli 脚手架（web 前端架构师课程项目）</li><li>项目性能优化&lt;=vue-elm 架构升级</li></ul><h3 id="_04-前端工程化关键技术之模块化详解" tabindex="-1"><a class="header-anchor" href="#_04-前端工程化关键技术之模块化详解" aria-hidden="true">#</a> 04：前端工程化关键技术之模块化详解</h3><h3 id="本节核心内容和目标" tabindex="-1"><a class="header-anchor" href="#本节核心内容和目标" aria-hidden="true">#</a> 本节核心内容和目标</h3><ul><li>内容：讲解前端工程化关键技术 <strong>模块化</strong> 的实现原理</li><li>范围：覆盖主流模块化规范：Commonjs、AMD、CMD、ESM</li><li>目标：对前端工程化知识体系建立基础认知</li></ul><h3 id="前端模块化的背景" tabindex="-1"><a class="header-anchor" href="#前端模块化的背景" aria-hidden="true">#</a> 前端模块化的背景</h3><ul><li>前端模块化是一种标准，而不是实现</li><li>理解模块化是理解前端工程化的前提</li><li>前端模块化是前端项目规模化的必然结果</li></ul><h3 id="什么是前端模块化" tabindex="-1"><a class="header-anchor" href="#什么是前端模块化" aria-hidden="true">#</a> 什么是前端模块化</h3><ul><li>将复杂程序根据规范拆分为若干模块，一个模块包括<strong>输入</strong>和<strong>输出</strong></li><li>模块的内部实现是<strong>私有的</strong>，对外暴露接口与其他模块通信</li><li>一个<code>HTML</code>页面可以引入的<code>script</code>包括：脚本和模块</li></ul><h3 id="脚本和模块的区别" tabindex="-1"><a class="header-anchor" href="#脚本和模块的区别" aria-hidden="true">#</a> 脚本和模块的区别</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52da122cb4cb4bc793fa292edde9d2b7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="前端模块化的进化过程" tabindex="-1"><a class="header-anchor" href="#前端模块化的进化过程" aria-hidden="true">#</a> 前端模块化的进化过程</h3><h4 id="第一阶段-全局-function-函数-将不同功能封装成不同函数" tabindex="-1"><a class="header-anchor" href="#第一阶段-全局-function-函数-将不同功能封装成不同函数" aria-hidden="true">#</a> 第一阶段：全局 function 函数，将不同功能封装成不同函数</h4><p>缺陷：<strong>容易引发全局明明空间冲突</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//  inde_function.js</span>
<span class="token comment">// 调用后端接口</span>
<span class="token keyword">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 处理后端接口</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 数据运算</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二阶段-全局namespace模式-通过对象封装模块" tabindex="-1"><a class="header-anchor" href="#第二阶段-全局namespace模式-通过对象封装模块" aria-hidden="true">#</a> 第二阶段：全局<strong>namespace</strong>模式，通过对象封装模块</h4><p>缺陷：外部能够修改模块内部数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//  inde_namespace.js</span>
window<span class="token punctuation">.</span>__Moudle <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用后端接口</span>
  <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 处理后端接口</span>
  <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 数据运算</span>
  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> window<span class="token punctuation">.</span>__Moudle
<span class="token keyword">const</span> data <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述问题的一个解决方案：<strong>函数作用域+闭包</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      a <span class="token operator">=</span> v
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三阶段-iife-模式-通过自执行函数创建闭包" tabindex="-1"><a class="header-anchor" href="#第三阶段-iife-模式-通过自执行函数创建闭包" aria-hidden="true">#</a> 第三阶段：IIFE 模式，通过自执行函数创建闭包</h4><p>缺陷：<strong>无法解决模块相互依赖问题</strong></p><blockquote><p>iife: immediately-invoked function expression</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 处理后端接口</span>
  <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 数据运算</span>
  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> v
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  global<span class="token punctuation">.</span>__Module <span class="token operator">=</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">,</span>
    handle<span class="token punctuation">,</span>
    sum<span class="token punctuation">,</span>
    setA<span class="token punctuation">,</span>
    getA<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> window<span class="token punctuation">.</span>__Moudle
<span class="token keyword">const</span> data <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第四阶段-iief-模式增强-支持传入自定义依赖" tabindex="-1"><a class="header-anchor" href="#第四阶段-iief-模式增强-支持传入自定义依赖" aria-hidden="true">#</a> 第四阶段：IIEF 模式增强，支持传入自定义依赖</h4><p>缺陷：</p><ul><li>多依赖传入时，代码阅读困难</li><li>无法支持大规模的模块化开发</li><li>无特定语法支持，代码简陋</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 处理后端接口</span>
  <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  global<span class="token punctuation">.</span>_Module_API <span class="token operator">=</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">,</span>
    handle<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> moduleAPI</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 数据运算</span>
  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>
  global<span class="token punctuation">.</span>__Module <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">api</span><span class="token operator">:</span> moduleAPI<span class="token punctuation">.</span>api<span class="token punctuation">,</span>
    <span class="token literal-property property">handle</span><span class="token operator">:</span> moduleAPI<span class="token punctuation">.</span>handle<span class="token punctuation">,</span>
    sum<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> window<span class="token punctuation">.</span>_Module_API<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-前端工程化关键技术之-commonjs-规范详解" tabindex="-1"><a class="header-anchor" href="#_05-前端工程化关键技术之-commonjs-规范详解" aria-hidden="true">#</a> 05：前端工程化关键技术之 CommonJS 规范详解</h2><h3 id="commonjs-规范介绍" tabindex="-1"><a class="header-anchor" href="#commonjs-规范介绍" aria-hidden="true">#</a> CommonJS 规范介绍</h3><ul><li><code>Nodejs</code>默认模块化规范，每个文件都是一个模块，有自己的作用域</li><li><code>Nodejs</code>中<code>Cjs模块</code>加载采用同步加载方式</li><li>通过<code>require</code>加载模块，通过<code>exports</code>或者<code>module.exports</code>输出模块</li><li>所有代码都运行在模块作用域，不会污染全局作用域</li><li>模块可以多次加载。<strong>第一次加载时会运行模块，模块输出结果会被缓存</strong>，再次加载时，会从缓存结果中直接读取模块输出结果</li><li>模块加载的顺序，按照其在代码中出现的顺序</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cjs/sum.js</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sum

<span class="token comment">// cjs/handle.js</span>
<span class="token comment">// 处理后端接口</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handle

<span class="token comment">// /cjs/api.js</span>
<span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./handle&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> api<span class="token punctuation">,</span> handle <span class="token punctuation">}</span>

<span class="token comment">// /cjs/entry.js: 入口文件</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> api<span class="token punctuation">,</span> handle <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./api&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./sum&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commonjs-规范特点" tabindex="-1"><a class="header-anchor" href="#commonjs-规范特点" aria-hidden="true">#</a> CommonJS 规范特点</h3><ul><li>所有代码都运行在模块作用域，不会污染全局作用域</li><li>模块可以多次加载。<strong>第一次加载时会运行模块，模块输出结果会被缓存</strong>，再次加载时，会从缓存结果中直接读取模块输出结果</li><li>模块加载的顺序，按照其在代码中出现的顺序</li><li><strong>模块输出的值是值的拷贝</strong>，类似 IIFE 方案中的内部变量</li></ul><h3 id="comoonjs-规范打包" tabindex="-1"><a class="header-anchor" href="#comoonjs-规范打包" aria-hidden="true">#</a> ComoonJS 规范打包</h3><ul><li>安装 Browserify: <code>npm install browserify -g</code></li><li>模块化打包命令：<code>browserify module_test/cjs/entry.js -o dist/bundle.js</code></li><li>注意，当存在多个模块时，每个模块都需要单独打包</li></ul><h3 id="browserify-打包原理" tabindex="-1"><a class="header-anchor" href="#browserify-打包原理" aria-hidden="true">#</a> browserify 打包原理</h3><ul><li>本质还是通过自执行函数实现模块化</li><li>将每个模块编号，存入一个对象，每个模块标记依赖模块</li><li>实现了<code>require</code>方法，核心是通过<code>call</code>方法调用模块，并传入<code>require/module/exports</code>方法，通过<code>module</code>存储模块信息，通过<code>exports</code>存储模块输出信息</li></ul><h2 id="_06-前端工程化关键技术之-esmodule-规范详解" tabindex="-1"><a class="header-anchor" href="#_06-前端工程化关键技术之-esmodule-规范详解" aria-hidden="true">#</a> 06：前端工程化关键技术之 ESModule 规范详解</h2><h3 id="amd-规范介绍" tabindex="-1"><a class="header-anchor" href="#amd-规范介绍" aria-hidden="true">#</a> AMD 规范介绍</h3><ul><li>AMD 规范采用非同步加载模块，允许指定回调函数</li><li>Node 模块通常都位于本地，加载速度快，所以适用于同步加载</li><li>浏览器环境下，模块需要请求获取，所以适用于异步加载</li><li>Require.js 就是 AMD 的一个具体实现库</li></ul><h3 id="cmd-规范介绍" tabindex="-1"><a class="header-anchor" href="#cmd-规范介绍" aria-hidden="true">#</a> CMD 规范介绍</h3><ul><li>CMD 整合了 CommonJS 和 AMD 的优点，模块加载时异步的</li><li>CMD 专门用于浏览器，sea.js 是 CMD 规范的一个实现</li><li>AMD 和 CMD 最大的问题就是没有通过语法升级解决模块化</li></ul><h3 id="esmodule-规范介绍" tabindex="-1"><a class="header-anchor" href="#esmodule-规范介绍" aria-hidden="true">#</a> ESModule 规范介绍</h3><ul><li>ESModule 设计理念是希望在编译时就确定模块依赖关系及输入输出</li><li>CommonJS 和 AMD 必须在运行时才能确定依赖和输入、输出</li><li>ESModule 通过 import 加载模块，通过 export 输出模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// esm 规范的</span>
<span class="token comment">// esm/api.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./handle.js&#39;</span>

<span class="token keyword">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> api<span class="token punctuation">,</span> handle <span class="token punctuation">}</span>

<span class="token comment">// esm/handle.js</span>
<span class="token comment">// 处理后端接口</span>
<span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> handle

<span class="token comment">// esm/sum.js</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> sum

<span class="token comment">// esm/entry.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> api<span class="token punctuation">,</span> handle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./api.js&#39;</span>
<span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">&#39;./sum.js&#39;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">handle</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commonjs-和-esmodule-规范对比" tabindex="-1"><a class="header-anchor" href="#commonjs-和-esmodule-规范对比" aria-hidden="true">#</a> CommonJS 和 ESModule 规范对比</h3><ul><li><code>CommonJS</code> 模块输出的值是值的拷贝，<code>ES Modules</code> 模块输出的是值的引用</li><li><code>CommonJS</code> 模块是运行时加载，<code>ES Modules</code> 模块是编译时输出接口</li><li><code>CommonJS</code> 模块是单个值导出，<code>ES Modules</code> 可以导出多个</li><li><code>CommonJS</code> 模块为同步加载，<code>ES Modules</code> 支持异步加载</li><li><code>CommonJS</code> 的 this 是当前模块，<code>ES Modules</code> 的 this 是 undefined</li><li><code>CommonJS</code> 和 <code>ES Module</code> 的语法不同</li></ul><h4 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例" aria-hidden="true">#</a> 测试用例</h4><h5 id="测试-es6-module" tabindex="-1"><a class="header-anchor" href="#测试-es6-module" aria-hidden="true">#</a> 测试 ES6 Module</h5><p>先测试 ES6 模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Test/test-cjs/test.cjs.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// Test/test-cjs/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.cjs&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
a<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建测试示例<code>test-cjs/index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./test.esm.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./test.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用<code>live server</code>打开，发现如下报错</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a56bb1b7f0d74a908c048f1eec75dd6d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>注意：<strong><code>export</code> 的都是只读的，没法直接修改，你可以通过设置 set 方法这样修改。</strong></p><p>修改测试</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Test/test-cjs/test.cjs.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test/test-cjs/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> plus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.esm.js&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>

<span class="token comment">// Test/test-cjs/test.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.esm.js&#39;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2 注意，这时候结果已经发生了变化</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到打印结果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5513219253bf4603ae8675f82441824b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改 Test/test-cjs/test.js 如下，它支持异步</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./test.esm.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b998ba32cd604c81ad8bdce8502fa28c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h5 id="测试-commonjs" tabindex="-1"><a class="header-anchor" href="#测试-commonjs" aria-hidden="true">#</a> 测试 CommonJS</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Test/test-cjs/test.cjs.js</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
exports<span class="token punctuation">.</span>a <span class="token operator">=</span> a
exports<span class="token punctuation">.</span><span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">//Test/test-cjs/index.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> plus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./test.cjs&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>node test-cjs.index.js</code>结果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3e1a1e1b5fc44aeb77a58c976a4e5c9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其实对于上述<code>commonjs</code>规范的输出可以理解为如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  plus<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 所以获取后的 a 的值是不会变化的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>CommonJS</th><th>ES Module</th></tr></thead><tbody><tr><td>加载模块：require</td><td>加载模块：import</td></tr><tr><td>输出模块：module.exports 或者 exports</td><td>输出模块：export</td></tr><tr><td>Nodejs 默认采用的模块化规范 <br>Node 14 后默认支持 ESM</td><td>浏览器默认采用的模块化规范</td></tr></tbody></table><h3 id="脚本和模块对比" tabindex="-1"><a class="header-anchor" href="#脚本和模块对比" aria-hidden="true">#</a> 脚本和模块对比</h3><ul><li>模块具备更高的开发效率（可读性强、复用高效）</li><li>脚本具备更高的页面性能（模块文件多、加载速度慢）</li><li>模块在浏览器中运行会存在兼容性问题，要特别注意</li></ul><h3 id="浏览器模块化的局限" tabindex="-1"><a class="header-anchor" href="#浏览器模块化的局限" aria-hidden="true">#</a> 浏览器模块化的局限</h3><ul><li>缺乏模块管理能力，模块分散在各个项目中</li><li>性能加载慢，无法大型项目中直接使用</li><li>这两个问题是<code>npm</code>和<code>webpack</code>核心解决的问题</li></ul><h2 id="_07-前端工程化关键技术之-npm-webpack-原理" tabindex="-1"><a class="header-anchor" href="#_07-前端工程化关键技术之-npm-webpack-原理" aria-hidden="true">#</a> 07：前端工程化关键技术之 npm+webpack 原理</h2><h3 id="npm-诞生背景" tabindex="-1"><a class="header-anchor" href="#npm-诞生背景" aria-hidden="true">#</a> npm 诞生背景</h3>`,99),k={href:"https://github.com/isaacs",target:"_blank",rel:"noopener noreferrer"},m=a("<li>初步思路 <ul><li>集中管理所有模块，所有模块都上传到仓库（registry）</li><li>模块内创建 <code>package.json</code> 标注模块的基本信息</li><li>通过 <code>npm publish</code> 发布模块，上传到仓库(registry)</li><li>通过 <code>npm install</code> 安装模块，模块安装到<code>node_modules</code>目录</li></ul></li><li>npm 于 2014 年商业化，2020 被 Github 收购</li><li>npm 解决的核心问题就是模块管理问题</li><li>npm 包含 cli、模块仓库、官网三大部分</li>",4),v=a('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25c3ae68ea4c402fbf7abb3198dcdf01~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="npm-原理总结" tabindex="-1"><a class="header-anchor" href="#npm-原理总结" aria-hidden="true">#</a> npm 原理总结</h3><ul><li><code>npm init</code> 创建模块，<code>npm install</code> 安装模块，<code>npm publish</code> 发布模块</li><li><code>npm link</code> 本地开发，<code>npm config</code> 调整配置 ，<code>npm run</code> 调用 <code>scripts</code></li><li><code>npm</code> 规范：<code>package.json</code>管理模块信息，<code>node_modules</code>保存依赖</li></ul><h3 id="npm-的局限" tabindex="-1"><a class="header-anchor" href="#npm-的局限" aria-hidden="true">#</a> npm 的局限</h3><ul><li>npm 只能解决模块的高效管理和获取问题</li><li>npm 无法解决性能加载的问题</li><li>模块发明后，制约其广泛应用的因素就是<strong>性能问题</strong></li></ul><h3 id="webpack-诞生背景" tabindex="-1"><a class="header-anchor" href="#webpack-诞生背景" aria-hidden="true">#</a> webpack 诞生背景</h3><ul><li>webpack 于 2012 年 3 月 10 号诞生，作者是 Tobias(德国)</li><li>移植了 GWT(google web toolkit)的功能（code splitting)</li><li>2014 年 Instagram 团队分享性能优化时，提到使用 Webpack 的 code spliting 特性</li><li>Webpack 的出现模糊了任务和构建的边界，使之融为一体</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126be6cd08f740b3a73f76beb47ad03f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="webpack-的原理" tabindex="-1"><a class="header-anchor" href="#webpack-的原理" aria-hidden="true">#</a> Webpack 的原理</h3><ul><li>最初的 webpack 核心解决的问题就是<strong>代码合并与拆分</strong></li><li>webpack 的核心理念就是将资源都视为模块，统一进行打包和处理</li><li>webpack 提供了 loader 和 plugins 完成功能扩展</li></ul><h2 id="_08-zbestpc-工程化改造需求分析" tabindex="-1"><a class="header-anchor" href="#_08-zbestpc-工程化改造需求分析" aria-hidden="true">#</a> 08：ZBestPC 工程化改造需求分析</h2><h3 id="项目需求" tabindex="-1"><a class="header-anchor" href="#项目需求" aria-hidden="true">#</a> 项目需求</h3><ul><li>第一阶段：项目 webpack 改造，使原生 js 项目能够支持模块开发以及打包</li><li>第二阶段：Vue SPA(单页面应用)改造，使项目能够使用 Vue 进行单页面应用开发</li><li>第三阶段：Vue MPA(多页面应用)改造，使项目能够使用 Vue 进行多页面应用开发</li></ul>',13);function b(h,g){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",d,[s("ZBestPc-github"),e(t)])]),r,n("ul",null,[n("li",null,[s("npm 是由程序员"),n("a",k,[s("Isaacs"),e(t)]),s("发明")]),m]),v])}const y=p(i,[["render",b],["__file","index-02.html.vue"]]);export{y as default};
