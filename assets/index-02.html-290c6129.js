import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t="/assets/image-20230731125651883-ee473bd8.png",p={},o=e(`<h1 id="_02-深入-ts-核心语法-各种实战应用-上" tabindex="-1"><a class="header-anchor" href="#_02-深入-ts-核心语法-各种实战应用-上" aria-hidden="true">#</a> 02- 深入 TS 核心语法+各种实战应用（上）</h1><h2 id="_01-本章概述【先看】" tabindex="-1"><a class="header-anchor" href="#_01-本章概述【先看】" aria-hidden="true">#</a> 01: 本章概述【先看】</h2><ol><li>TS 定义，环境准备，优势</li><li>TS 核心语法 <ul><li>类型注解和类型推断</li><li>TS 编译和编译优化</li><li>24 种 TS 数据类型</li><li>字面量数据类型的应用</li><li>枚举和真实应用场景</li><li>any unknown 的区别</li><li>接口和接口真实应用场景</li><li>接口可索引签名</li><li>索引访问类型，索引访问类型的深入扩展</li><li>函数类型</li><li>函数类型的复杂实战--手写 Promise 开头源码</li><li>元组，可变元组和它的应用场景，可变元组 tag</li><li>类，静态属性，何时使用静态属性，静态成员问题</li><li>单件模式的两种实现</li><li>TS 静态成员，方法拦截器实战</li></ul></li></ol><h2 id="_02-ts-的完整定义-环境搭建-6-大主要优势" tabindex="-1"><a class="header-anchor" href="#_02-ts-的完整定义-环境搭建-6-大主要优势" aria-hidden="true">#</a> 02：TS 的完整定义，环境搭建，6 大主要优势</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>融合了后端面向对象思想的超级版的 JavaScript 语言</p><h3 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> typescript <span class="token parameter variable">-g</span>
或者
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> instal typescript <span class="token parameter variable">-D</span>

tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><ol><li><strong>编译时静态类型检测</strong>：函数或者方法传参或者变量赋值不匹配时，会出现变异错误提示，规避了开发期间的大量低级错误，省时省力</li><li><strong>自动提示更加清晰明确</strong></li><li><strong>引入了泛型和一系列的 TS 特有的类型</strong></li><li><strong>强大的 d.ts 声明文件</strong>：声明文件像一个书的目录一样，清晰直观展示了依赖库文件的接口，type 类型，类，函数，变量等声明</li><li><strong>轻松编译成 JS 文件</strong>：即使 TS 文件有错误，绝大多数情况下能输出 JS 文件</li><li><strong>灵活性高</strong>：尽管 TS 是一门强类型语言，但是也提供了 any 类型和 as any 断言，这提供了 TS 的灵活性</li></ol><h2 id="_03-一个非常重要的问题【请先看完本节再学习后面的视频】" tabindex="-1"><a class="header-anchor" href="#_03-一个非常重要的问题【请先看完本节再学习后面的视频】" aria-hidden="true">#</a> 03：一个非常重要的问题【请先看完本节再学习后面的视频】</h2><h2 id="_04-类型注解和类型推断-重要细节-作业" tabindex="-1"><a class="header-anchor" href="#_04-类型注解和类型推断-重要细节-作业" aria-hidden="true">#</a> 04：类型注解和类型推断+重要细节+作业</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型注解</span>
<span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span>

<span class="token comment">// 类型推导</span>
<span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token string">&#39;唐僧&#39;</span> <span class="token comment">// 推导为 string 类型</span>
data2 <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-ts-编译和编译优化" tabindex="-1"><a class="header-anchor" href="#_05-ts-编译和编译优化" aria-hidden="true">#</a> 05：TS 编译和编译优化</h2><h3 id="ts-编译" tabindex="-1"><a class="header-anchor" href="#ts-编译" aria-hidden="true">#</a> TS 编译</h3><blockquote><p>tsc xxx.ts</p><p>// 使用 tsc 把 ts 文件转换为 js 文件后，才可以 node 执行</p><p>node xxx.js</p></blockquote><h3 id="编译优化" tabindex="-1"><a class="header-anchor" href="#编译优化" aria-hidden="true">#</a> 编译优化</h3><p>通过<code>tsc xx.ts</code>默认是会再当前文件目录下产生一个<code>xxx.js</code>.我们可以通过设置<code>tsconfig.json</code>文件来让其编译到一个指定目录中</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 输出目录</span>
  <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 需要编译的文件夹</span>
  <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行<code>tsc</code>，就会使用配置文件中的路径进行编译处理</p><h2 id="_07-常用的-24-种-ts-数据类型" tabindex="-1"><a class="header-anchor" href="#_07-常用的-24-种-ts-数据类型" aria-hidden="true">#</a> 07：常用的 24 种 TS 数据类型</h2><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h3><ul><li>number</li><li>string</li><li>boolean</li><li>symbol</li><li>null</li><li>undefined</li></ul><h3 id="根类型" tabindex="-1"><a class="header-anchor" href="#根类型" aria-hidden="true">#</a> 根类型</h3><ul><li>Object</li><li>{}</li></ul><h3 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h3><ul><li>Array</li><li>object</li><li>function</li></ul><h3 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h3><ul><li>enum</li></ul><h3 id="其他特殊类型" tabindex="-1"><a class="header-anchor" href="#其他特殊类型" aria-hidden="true">#</a> 其他特殊类型</h3><ul><li>any</li><li>unkown</li><li>never</li><li>void</li><li>元组 tuple</li><li>可变元组</li></ul><h3 id="合成类型" tabindex="-1"><a class="header-anchor" href="#合成类型" aria-hidden="true">#</a> 合成类型</h3><ul><li><p>联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;唐僧&#39;</span>
str <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>交叉类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Obj1</span> <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Obj2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> obj1<span class="token operator">:</span> Obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;猪八戒&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2<span class="token operator">:</span> Obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span>
<span class="token comment">// 交叉类型</span>
<span class="token keyword">let</span> obj3<span class="token operator">:</span> Obj2 <span class="token operator">&amp;</span> Obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">600</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="字面量数据类型" tabindex="-1"><a class="header-anchor" href="#字面量数据类型" aria-hidden="true">#</a> 字面量数据类型</h3><blockquote><p>就是拿值当做数据类型</p></blockquote><h2 id="_08-never-的意义" tabindex="-1"><a class="header-anchor" href="#_08-never-的意义" aria-hidden="true">#</a> 08：never 的意义</h2><blockquote><p>使用 never 就是避免出现未来扩展新的类没有对应类型的实现，目的就是写出类型绝对安全的代码</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DataFlow</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token keyword">function</span> <span class="token function">dataFlowAnalysisWithNever</span><span class="token punctuation">(</span>dataFlow<span class="token operator">:</span> DataFlow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> dataFlow <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;字符串类型&#39;</span><span class="token punctuation">,</span> dataFlow<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> dataFlow <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数字类型&#39;</span><span class="token punctuation">,</span> dataFlow<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> dataFlow
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">dataFlowAnalysisWithNever</span><span class="token punctuation">(</span><span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">)</span>
<span class="token function">dataFlowAnalysisWithNever</span><span class="token punctuation">(</span><span class="token number">1.102</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aef26fb28464b2eb4a163490b3e80ca~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_09-为什么要用枚举" tabindex="-1"><a class="header-anchor" href="#_09-为什么要用枚举" aria-hidden="true">#</a> 09: 为什么要用枚举?</h2><blockquote><p>解决多次 if/switch 判断中值的语义化的问题</p></blockquote><ul><li>常量解决</li><li>使用常量带来的局现性</li></ul><ol><li><p>常量解决</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> Status <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">MANAGER_ADUIT_FAIL</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">NO_AUDIT</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token constant">MANAGER_ADIT_SUCCESS</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">FINAL_ADUIT_SUCCESS</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 审核类</span>
<span class="token keyword">class</span> <span class="token class-name">MyAduit</span> <span class="token punctuation">{</span>
  <span class="token function">getAduitStatus</span><span class="token punctuation">(</span>status<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">NO_AUDIT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;没有审核&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">MANAGER_ADIT_SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;经理审核通过&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">FINAL_ADUIT_SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;财务审核通过&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用常量带来的局限性</p><p>方法参数不能定义为具体类型，只能初级使用 number、string 基本类型作为替代，降低了代码的可读性和可维护性</p></li></ol><h2 id="_10-枚举的定义-取值-分类" tabindex="-1"><a class="header-anchor" href="#_10-枚举的定义-取值-分类" aria-hidden="true">#</a> 10：枚举的定义 取值，分类</h2><h3 id="枚举的定义" tabindex="-1"><a class="header-anchor" href="#枚举的定义" aria-hidden="true">#</a> 枚举的定义</h3><blockquote><p>用来存放一组固定的常量的序列</p></blockquote><h3 id="枚举的分类" tabindex="-1"><a class="header-anchor" href="#枚举的分类" aria-hidden="true">#</a> 枚举的分类</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> EnumAuditStats <span class="token punctuation">{</span>
  <span class="token constant">MANAGER_ADUIT_FAIL</span> <span class="token operator">=</span> <span class="token string">&#39;项目经理审核失败&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">NO_AUDIT</span> <span class="token operator">=</span> <span class="token string">&#39;没有审核&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">MANAGER_ADIT_SUCCESS</span> <span class="token operator">=</span> <span class="token string">&#39;项目经理审核成功&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">FINAL_ADUIT_SUCCESS</span> <span class="token operator">=</span> <span class="token string">&#39;财务审核成功&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 字符串枚举</span>
<span class="token keyword">enum</span> WeekEnd <span class="token punctuation">{</span>
  MONDAy <span class="token operator">=</span> <span class="token string">&#39;monday&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token string">&#39;tuesday&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">WENSDAY</span> <span class="token operator">=</span> <span class="token string">&#39;wensday&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">THIRSDAY</span> <span class="token operator">=</span> <span class="token string">&#39;THIRSDAY&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token string">&#39;friday&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">SARTURDAY</span> <span class="token operator">=</span> <span class="token string">&#39;sarturday&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token string">&#39;sunday&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 数字枚举</span>
<span class="token keyword">enum</span> <span class="token constant">WEEK</span> <span class="token punctuation">{</span>
  <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">WENSDAY</span><span class="token punctuation">,</span>
  <span class="token constant">THIRSDAY</span><span class="token punctuation">,</span>
  <span class="token constant">FRIDAY</span><span class="token punctuation">,</span>
  <span class="token constant">SARTURDAY</span><span class="token punctuation">,</span>
  <span class="token constant">SUNDAY</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取值方式" tabindex="-1"><a class="header-anchor" href="#取值方式" aria-hidden="true">#</a> 取值方式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>EnumAuditStats<span class="token punctuation">.</span><span class="token constant">MANAGER_ADUIT_FAIL</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-解析枚举底层" tabindex="-1"><a class="header-anchor" href="#_11-解析枚举底层" aria-hidden="true">#</a> 11: 解析枚举底层</h2><h3 id="数字类型枚举底层" tabindex="-1"><a class="header-anchor" href="#数字类型枚举底层" aria-hidden="true">#</a> 数字类型枚举底层</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token string">&#39;use strict&#39;</span>
<span class="token keyword">var</span> <span class="token constant">WEEK</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;MONDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;MONDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;TUESDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;TUESDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;WENSDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;WENSDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;THIRSDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;THIRSDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;FRIDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;FRIDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;SARTURDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;SARTURDAY&#39;</span>
  <span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">WEEK</span><span class="token punctuation">[</span><span class="token string">&#39;SUNDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;SUNDAY&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">WEEK</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">WEEK</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串枚举底层" tabindex="-1"><a class="header-anchor" href="#字符串枚举底层" aria-hidden="true">#</a> 字符串枚举底层</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> WeekEnd
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>WeekEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;MONDAy&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;monday&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;TUESDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;tuesday&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;WENSDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;wensday&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;THIRSDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;THIRSDAY&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;FRIDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;friday&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;SARTURDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;sarturday&#39;</span>
  WeekEnd<span class="token punctuation">[</span><span class="token string">&#39;SUNDAY&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;sunday&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>WeekEnd <span class="token operator">||</span> <span class="token punctuation">(</span>WeekEnd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-枚举更多好处-在企业项目中的真实应用-作业" tabindex="-1"><a class="header-anchor" href="#_12-枚举更多好处-在企业项目中的真实应用-作业" aria-hidden="true">#</a> 12: 枚举更多好处+在企业项目中的真实应用+作业</h2><h3 id="枚举的好处" tabindex="-1"><a class="header-anchor" href="#枚举的好处" aria-hidden="true">#</a> 枚举的好处</h3><ul><li>有默认值、可以自增值，节省编码时间</li><li>语义更清晰，可读性增强</li></ul><p>因为枚举是一种值类型的数据类型，方法参数可以明确参数类型为枚举类型</p><h3 id="枚举应用" tabindex="-1"><a class="header-anchor" href="#枚举应用" aria-hidden="true">#</a> 枚举应用</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> EnumAuditStats <span class="token punctuation">{</span>
  <span class="token constant">MANAGER_ADUIT_FAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 第一个常量值设置为 -1</span>
  <span class="token constant">NO_AUDIT</span><span class="token punctuation">,</span> <span class="token comment">// 第二个常量自动递增，就为 0</span>
  <span class="token constant">MANAGER_ADIT_SUCCESS</span><span class="token punctuation">,</span> <span class="token comment">// 第二个常量继续自动递增，就为 1</span>
  <span class="token constant">FINAL_ADUIT_SUCCESS</span><span class="token punctuation">,</span> <span class="token comment">// 为 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-any-unknown-的两点区别和多个应用场景" tabindex="-1"><a class="header-anchor" href="#_13-any-unknown-的两点区别和多个应用场景" aria-hidden="true">#</a> 13：any，unknown 的两点区别和多个应用场景</h2><blockquote><p>any 和 unknown 在开发中和第三方包源码底层经常看到，弄清楚它们的场景也很重要</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h4><ul><li>any 和 unknown 可以是任何类的父类，所以任何类型的变量都可以赋值给 any 或者 unknown 类型的变量</li></ul><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h4><ul><li>any 可以是任何类的子类，但是 unknown 不可以，所以 any 类型的变量都可以赋值给其他类型的变量</li><li>不能拿 unknown 类型的变量来获取任何属性和方法，但是 any 类型的变量可以获取任意名称的属性和任意名称的方法</li></ul><h3 id="any-比较典型的应用场景" tabindex="-1"><a class="header-anchor" href="#any-比较典型的应用场景" aria-hidden="true">#</a> any 比较典型的应用场景</h3><ol><li>自定义守卫</li><li>需要进行 as any 类型断言的场景</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Vue3 源码片段</span>
<span class="token comment">// any 的应用场景 --自定义守卫使用 any</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isRef</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> r <span class="token keyword">is</span> Ref <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>r <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>__v_isRef <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// any 类型的 r 参数在函数内部获取属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unknown-一般用做函数参数" tabindex="-1"><a class="header-anchor" href="#unknown-一般用做函数参数" aria-hidden="true">#</a> unknown 一般用做函数参数</h3><blockquote><p>用来接受任意类型的变量实参，但是在函数内部只用于再次传递或者输出结果，不获取属性的场景</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Vue3 源码片段 ref 的 unknown 参数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 函数内部只用于再次传递值，而不获取属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-深入理解接口-真实应用场景" tabindex="-1"><a class="header-anchor" href="#_14-深入理解接口-真实应用场景" aria-hidden="true">#</a> 14：深入理解接口+真实应用场景</h2><blockquote><p>接口：另一种定义对象类型的类型</p></blockquote><h3 id="接口应用场景" tabindex="-1"><a class="header-anchor" href="#接口应用场景" aria-hidden="true">#</a> 接口应用场景</h3><ol><li>一些第三方或者框架底层源码中有大量的接口类型</li><li>提供方法的对象类型的参数时使用</li><li>为多个同类别的<strong>类</strong>提供统一的方法和属性声明</li></ol><h3 id="如何定义接口" tabindex="-1"><a class="header-anchor" href="#如何定义接口" aria-hidden="true">#</a> 如何定义接口</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  price<span class="token operator">:</span> <span class="token builtin">number</span>
  account<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token constant">P</span><span class="token operator">:</span> Product <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;iphone&#39;</span><span class="token punctuation">,</span>
  price<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  account<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;buying&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承接口" tabindex="-1"><a class="header-anchor" href="#继承接口" aria-hidden="true">#</a> 继承接口</h3><blockquote><p>新的接口只是在原来接口继承之上增加了一些属性或者方法，这时就用接口继承</p></blockquote><h2 id="_15-可索引签名和-2-个容易忽略的重要细节" tabindex="-1"><a class="header-anchor" href="#_15-可索引签名和-2-个容易忽略的重要细节" aria-hidden="true">#</a> 15：可索引签名和 2 个容易忽略的重要细节</h2><blockquote><p>注意细节：</p><ul><li>键名类型需要注意</li><li>可索引签名的值类型需要是兼容其他属性的值的类型</li></ul></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  price<span class="token operator">:</span> <span class="token builtin">number</span>
  account<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token comment">// 可索引签名</span>
  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token constant">P</span><span class="token operator">:</span> Product <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;iphone&#39;</span><span class="token punctuation">,</span>
  price<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  account<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;buying&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-索引访问类型-索引访问类型的深入扩展" tabindex="-1"><a class="header-anchor" href="#_16-索引访问类型-索引访问类型的深入扩展" aria-hidden="true">#</a> 16：索引访问类型，索引访问类型的深入扩展</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> symid <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;productNo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  price<span class="token operator">:</span> <span class="token builtin">number</span>
  account<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">[</span>symid<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Product<span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">]</span> <span class="token comment">// number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Product<span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// string | number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> Product<span class="token punctuation">[</span><span class="token keyword">typeof</span> symid<span class="token punctuation">]</span> <span class="token comment">// number | string</span>
<span class="token keyword">type</span> <span class="token class-name">PKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Product <span class="token comment">// &quot;name&quot; | &quot;price&quot; | &quot;account&quot; | &quot;buy&quot; || typeof  symid</span>
<span class="token keyword">let</span> pKeys<span class="token operator">:</span> PKeys <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">AllKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">Pkeys2</span> <span class="token operator">=</span> AllKeys<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Product<span class="token operator">&gt;</span> <span class="token comment">// typeof symid | &quot;name&quot; | &quot;price&quot; | &quot;account&quot; | &quot;buy&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-视频作业-容易被忽略的-ts-类型" tabindex="-1"><a class="header-anchor" href="#_17-视频作业-容易被忽略的-ts-类型" aria-hidden="true">#</a> 17: 视频作业：容易被忽略的 ts 类型</h2><blockquote><p>说说你理解的 void</p></blockquote><h2 id="_18-null-和-undefined-相关重要细节" tabindex="-1"><a class="header-anchor" href="#_18-null-和-undefined-相关重要细节" aria-hidden="true">#</a> 18: null 和 undefined + 相关重要细节</h2><blockquote><p>javascript 中 null 表示什么都没有，表示一个空对象引用</p></blockquote><p>在 JavaScript 中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span>

<span class="token comment">// 声明一个变量，但是没有赋值，该变量的值为 undefined</span>
<span class="token keyword">var</span> x
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;x:&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Typescript 中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str: &#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>undefined 的一些应用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 参数可选后，会解析为： (parameter) data: string | undefined</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那些数据类型可以接收 undefined</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// any unknown undefined 可以接收 undefined</span>
<span class="token comment">// any unknown null 可以接收 null</span>
<span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token keyword">let</span> data1<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token keyword">let</span> data2<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-看似简单的取值为何总抛出错误" tabindex="-1"><a class="header-anchor" href="#_19-看似简单的取值为何总抛出错误" aria-hidden="true">#</a> 19：看似简单的取值为何总抛出错误？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">240</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span>
<span class="token comment">// username = &#39;猪八戒&#39;</span>
<span class="token keyword">let</span> u <span class="token operator">=</span> obj<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token comment">// 推到出来：u: any，因为 username 可以变为其他值，比如 猪八戒</span>

<span class="token comment">// 可改为如下</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">240</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span>
<span class="token keyword">let</span> u <span class="token operator">=</span> obj<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token comment">// 推到出来：u: string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">240</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span>
<span class="token keyword">let</span> u <span class="token operator">=</span> obj<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token comment">// 推到出来：u: any，编辑器中报错如下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20230731125651883"></p><h2 id="_20-ts-函数和-ts-函数类型-rest-参数" tabindex="-1"><a class="header-anchor" href="#_20-ts-函数和-ts-函数类型-rest-参数" aria-hidden="true">#</a> 20: TS 函数和 TS 函数类型，rest 参数</h2><h3 id="ts-函数" tabindex="-1"><a class="header-anchor" href="#ts-函数" aria-hidden="true">#</a> TS 函数</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 返回值类型可以省略，因为会推导出类</span>
<span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token punctuation">}</span>

<span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ts-函数类型" tabindex="-1"><a class="header-anchor" href="#ts-函数类型" aria-hidden="true">#</a> TS 函数类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">InfoFunType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>

<span class="token keyword">let</span> info2<span class="token operator">:</span> <span class="token function-variable function">InfoFunType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token function">info2</span><span class="token punctuation">(</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rest-参数" tabindex="-1"><a class="header-anchor" href="#rest-参数" aria-hidden="true">#</a> rest 参数</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">InfoFunType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token keyword">let</span> info2<span class="token operator">:</span> <span class="token function-variable function">InfoFunType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> rest
<span class="token punctuation">}</span>
<span class="token function">info2</span><span class="token punctuation">(</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token string">&#39;撒旦法撒旦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;如来佛祖&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","index-02.html.vue"]]);export{d as default};
