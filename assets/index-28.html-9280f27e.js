import{_ as e,M as o,p as c,q as i,R as s,t as n,N as t,a1 as p}from"./framework-e8cb8151.js";const l="/assets/image-20230811180402556-fb5563a4.png",u={},r=p('<h1 id="_28-链模式" tabindex="-1"><a class="header-anchor" href="#_28-链模式" aria-hidden="true">#</a> 28-<strong>链模式</strong></h1><p><img src="https://img3.mukewang.com/5d394b970001f58906400359.jpg" alt="img"></p><blockquote><p>不要问你的国家能够为你做些什么，而要问你可以为国家做些什么。 —— 林肯</p></blockquote><p>通常情况下，通过对构造函数使用 <code>new</code> 会返回一个绑定到 <code>this</code> 上的新实例，所以我们可以在 <code>new</code> 出来的对象上直接用 <code>.</code> 访问其属性和方法。如果在普通函数中也返回当前实例，那么我们就可以使用 <code>.</code> 在单行代码中一次性连续调用多个方法，就好像它们被链接在一起一样，这就是链式调用，又称<strong>链模式</strong>。</p><p>之前建造者模式、组合模式等文章已经用到了链模式，日常使用的 jQuery、Promise 等也使用了链模式，我们对使用形式已经很熟悉了，下面一起来看看链模式的原理。</p>',5),k=s("strong",null,"注意：",-1),d={href:"http://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},v={href:"http://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},m={href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},b={href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,"⚠️ 后面的源码为了方便看，都经过大幅度的简写，如果想看未改动的版本，请点击对应链接到 Github 仓库中查看。",-1),g=p(`<h2 id="_1-什么是链模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是链模式" aria-hidden="true">#</a> 1. 什么是链模式</h2><h3 id="_1-1-链模式的实现" tabindex="-1"><a class="header-anchor" href="#_1-1-链模式的实现" aria-hidden="true">#</a> 1.1 链模式的实现</h3><p>在 jQuery 时代，下面这样的用法我们很熟悉了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用链模式</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是很典型的链模式，对 jQuery 选择器选择的元素从上到下依次进行一系列操作，如果不使用链模式，则代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不使用链模式</span>
<span class="token keyword">var</span> divEls <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
divEls<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
divEls<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span>
divEls<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span>
divEls<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
divEls<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到不使用链模式，代码量多了，代码结构也复杂了不少。链模式是 jQuery 的一个重要特性，也是 jQuery 深受大家喜爱，并且经久不衰的原因之一。</p><p>链模式和一般的函数调用的区别在于：链模式一般会在调用完方法之后返回一个对象，有时则直接返回 <code>this</code> ，因此又可以继续调用这个对象上的其他方法，这样可以对同一个对象连续执行多个方法。</p><p>比如这里我们可以自己实现一个链模式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 四边形 */</span>
<span class="token keyword">var</span> rectangle <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 长</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 宽</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 颜色</span>

  <span class="token function-variable function">getSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">length: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">/* 设置长度 */</span>
  <span class="token function-variable function">setLength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">/* 设置宽度 */</span>
  <span class="token function-variable function">setWidth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">/* 设置颜色 */</span>
  <span class="token function-variable function">setColor</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> rect <span class="token operator">=</span> rectangle
  <span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token string">&#39;80px&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：length: 100px, width: 80px, color: blue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于所有对象都会继承其原型对象的属性和方法，所以我们可以让原型方法都返回该原型的实例对象，这样就可以对那些方法进行链式调用了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 四边形 */</span>
<span class="token keyword">function</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 长</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 宽</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 颜色</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 设置长度 */</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 设置宽度 */</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setWidth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 设置颜色 */</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setColor</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token string">&#39;80px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>

<span class="token comment">// 输出：{length: &quot;100px&quot;, width: &quot;80px&quot;, color: &quot;blue&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Class 语法改造一下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 四边形 */</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 长</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 宽</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 颜色</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 设置长度 */</span>
  <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 设置宽度 */</span>
  <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 设置颜色 */</span>
  <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token string">&#39;80px&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>

<span class="token comment">// 输出：{length: &quot;100px&quot;, width: &quot;80px&quot;, color: &quot;blue&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-链模式不一定必须返回-this" tabindex="-1"><a class="header-anchor" href="#_1-2-链模式不一定必须返回-this" aria-hidden="true">#</a> 1.2 链模式不一定必须返回 this</h3><p>不一定在方法中 <code>return this</code>，也可以返回其他对象，这样后面的方法可以对这个新对象进行其他操作。比如在 Promise 的实现中，每次 <code>then</code> 方法返回的就不是 <code>this</code>，而是一个新的 Promise，只不过其外观一样，所以我们可以不断 <code>then</code> 下去。后面的每一个 <code>then</code> 都不是从最初的 Promise 实例点出来的，而是从前一个 <code>then</code> 返回的新的 Promise 实例点出来的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> prom1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise 1 resolved&#39;</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> prom2 <span class="token operator">=</span> prom1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Then method&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prom1 <span class="token operator">===</span> prom2<span class="token punctuation">)</span>

<span class="token comment">// 输出： false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),f={href:"https://github.com/jquery/jquery/blob/1.6.4/src/core.js#L291-L293",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"this",-1),w=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// html: &lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;,how are you?&lt;/p&gt;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 选择所有 p 标签</span>
  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 选择了 p 标签下的 span 标签</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回之前匹配的 p 标签</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://codepen.io/SHERlocked93/pen/PMPQXz",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>事实上，某些原生的方法就可以使用链模式，以数组操作为例，比如我们想查看一个数组中奇数的平方和：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 输出 35</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这里为什么可以使用链模式呢，是因为 <code>filter</code>、<code>map</code>、<code>reduce</code> 这些数组方法返回的仍然是数组，因此可以继续在后面调用数组的方法。</p><p>注意，并不是所有数组方法都返回数组，比如 <code>push</code> 的时候返回的是新数组的 <code>length</code> 属性。</p><h2 id="_2-实战使用链模式" tabindex="-1"><a class="header-anchor" href="#_2-实战使用链模式" aria-hidden="true">#</a> 2. 实战使用链模式</h2><p>有时候 JavaScript 原生提供的方法不太好用，比如我们希望创建下面这样一个 DOM 树结构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">&#39;data-list&#39;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;data-item&#39;</span><span class="token operator">&gt;</span>li<span class="token operator">-</span>item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;data-item&#39;</span><span class="token operator">&gt;</span>li<span class="token operator">-</span>item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;data-item&#39;</span><span class="token operator">&gt;</span>li<span class="token operator">-</span>item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用原生方法，由于 <code>setAttribute</code> 等方法并没有返回原对象，而 <code>appendChild</code> 方法返回的却是，我们需要：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-list&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> li1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> li2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> li3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>

li1<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>
li2<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>
li3<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> text1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;li-item 1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> text2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;li-item 2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> text3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;li-item 3&#39;</span><span class="token punctuation">)</span>

li1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span>
li2<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span>
li3<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text3<span class="token punctuation">)</span>

ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li1<span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li2<span class="token punctuation">)</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太不直观了，步骤零散且可维护性差。</p><p>这时我们可以改造一下，可以使用类似于组合模式一文第 4 小节&lt;实战中的组合模式&gt;中那样直接传递一个所需的对应 DOM 树的对象树，再根据这个对象树来逐层生成 DOM。这里我们可以彻底使用链模式来改造一下原生方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> tag <span class="token operator">===</span> <span class="token string">&#39;text&#39;</span>
    <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
    <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_setAttribute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token class-name">HTMLElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_appendChild</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">_setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-list&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;li-item 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;li-item 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-item&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">_appendChild</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;li-item 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就比较彻底地使用了链模式来生成 DOM 结构树了，你可能感觉有点奇怪，但是如果你使用过 vue-cli3，那么你可能对这个配置方式很熟悉。</p><h2 id="_3-源码中的链模式" tabindex="-1"><a class="header-anchor" href="#_3-源码中的链模式" aria-hidden="true">#</a> 3. 源码中的链模式</h2><h3 id="_3-1-jquery-中的链模式" tabindex="-1"><a class="header-anchor" href="#_3-1-jquery-中的链模式" aria-hidden="true">#</a> 3.1 jQuery 中的链模式</h3><h4 id="_1-jquery-构造函数" tabindex="-1"><a class="header-anchor" href="#_1-jquery-构造函数" aria-hidden="true">#</a> 1. jQuery 构造函数</h4><p>jQuery 方法看似复杂，可以简写如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// jQuery 方法返回的是 jQuery.fn.init 所 new 出来的对象</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> rootjQuery<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> jQuery<span class="token punctuation">,</span>
  <span class="token comment">// jQuery 对象的构造函数</span>
  <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context<span class="token punctuation">,</span> rootjQuery</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 一顿匹配操作，返回一个拼装好的伪数组的自身实例</span>
    <span class="token comment">// 是 jQuery.fn.init 的实例，也就是我们常用的 jQuery 对象</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">eq</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">end</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">last</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">first</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ... 其他方法</span>
<span class="token punctuation">}</span>

<span class="token comment">// jQuery.fn.init 的实例都拥有 jQuery.fn 相应的方法</span>
jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),x={href:"https://github.com/jquery/jquery/blob/1.6.4/src/core.js#L6",target:"_blank",rel:"noopener noreferrer"},Q=p(`<p><code>return new jQuery.fn.init(...)</code> 这句看似复杂，其实也就是下面的这个 <code>init</code> 方法，这个方法最后返回的是我们常用的 <code>jQuery</code> 对象，下面还有一句 <code>jQuery.fn.init.prototype = jQuery.fn</code>，因此最上面的 jQuery 方法返回的 <code>new</code> 出来的 <code>jQuery.fn.init</code> 实例将继承 <code>jQuery.fn</code> 上的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p/&gt;&#39;</span><span class="token punctuation">)</span>
$<span class="token punctuation">.</span>fn <span class="token operator">===</span> p<span class="token punctuation">.</span>__proto__ <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因此返回出来的实例也将继承 <code>eq</code>、<code>end</code>、<code>map</code>、<code>last</code> 等 <code>jQuery.fn</code> 上的方法。</p><h4 id="_2-jquery-实例方法" tabindex="-1"><a class="header-anchor" href="#_2-jquery-实例方法" aria-hidden="true">#</a> 2. jQuery 实例方法</h4><p>下面我们一起看看，<code>show</code>、<code>hide</code>、<code>toggle</code> 这些方法是如何实现链模式的呢 ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> elem

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">hide</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toggle</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),q={href:"https://github.com/jquery/jquery/blob/1.6.4/src/effects.js#L19-L63",target:"_blank",rel:"noopener noreferrer"},L={href:"https://codepen.io/SHERlocked93/pen/PMZQzr",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>这里首先使用了一个方法 <code>jQuery.fn.extend()</code>，简单看一下这个方法做啥的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 一系列啰啰嗦嗦的判断</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token comment">// 此处 this === jQuery.fn</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E={href:"https://github.com/jquery/jquery/blob/1.6.4/src/core.js#L305-L367",target:"_blank",rel:"noopener noreferrer"},R=p('<p>这个方法就是把传参的对象的值赋值给 <code>jQuery.fn</code>，因为这时候这个方法是通过上下文对象 <code>jQuery.fn.extend()</code> 方式来调用，属于隐式绑定。（对 <code>this</code> 绑定规则的同学参看本专栏第 2 篇文章）</p><p>以 <code>show</code> 方法为例，此时这个方法被赋到 <code>jQuery.fn</code> 对象上，而通过上文我们知道，<code>jQuery.fn.init.prototype = jQuery.fn</code>，而 <code>jQuery.fn.init</code> 这个方法是作为构造函数被 jQuery 函数 new 出来并返回，因此 <code>show</code> 方法此时可以被 <code>jQuery.fn.init</code> 实例访问到，也就可以被 <code>$(&#39;selector&#39;)</code> 访问到，因此此时我们已经可以： <code>$(&#39;p&#39;).show()</code> 了。</p><p>那么我们再回头来看看 <code>show</code> 方法的实现，<code>show</code> 方法将匹配的元素的 <code>display</code> 置为 <code>block</code> 之后返回了 <code>this</code>。注意了，此时的 <code>this</code> 也是隐式绑定，而且是通过 <code>$(&#39;p&#39;)</code> 点出来的，因此返回的值就是 <code>$(&#39;p&#39;)</code> 的引用。</p><p>经过以上步骤，我们知道 <code>show</code> 方法返回的仍然是 <code>$(&#39;p&#39;)</code> 的引用，我们可以继续在之后点出来其他 <code>jQuery.fn</code> 对象上的方法，<code>css</code>、<code>hide</code>、<code>toggle</code>、<code>addClass</code>、<code>on</code> 等等方法同理，至此，jQuery 的链模式就形成了。</p><h3 id="_3-2-underscore-中的链模式" tabindex="-1"><a class="header-anchor" href="#_3-2-underscore-中的链模式" aria-hidden="true">#</a> 3.2 Underscore 中的链模式</h3>',5),$={href:"https://underscorejs.org/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://underscorejs.org/#chain",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/lodash/lodash/blob/4.17.15-es/chain.js",target:"_blank",rel:"noopener noreferrer"},M=p(`<p>比如这里我们需要对一个用户对象数组进行一系列操作，首先按年龄排序，去掉年龄为奇数的人，再将这些用户的名字列成数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;barney&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fred&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;pebbles&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;negolas&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

_<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>age <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出： [&quot;barney&quot;, &quot;pebbles&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过 <code>_.chain</code> 方法处理后，就可以使用 Underscore 提供的其他方法对这个数据进行操作，下面一起来看看源码是如何实现链模式。</p><p>首先是 <code>_.chain</code> 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function-variable function">chain</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 获得一个经 underscore 包裹后的实例</span>
  instance<span class="token punctuation">.</span>_chain <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 标记是否使用链式操作</span>
  <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),N={href:"https://github.com/jashkenas/underscore/blob/master/underscore.js#L1615-L1619",target:"_blank",rel:"noopener noreferrer"},T=p(`<p>这里通过 <code>_(obj)</code> 的方式把数据进行了包装，并返回了一个对象，结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">_chain</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_wrapped</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__proto__</span><span class="token operator">:</span>  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的对象的隐式原型可以访问到 Undersocre 提供的很多方法，如下图：</p><p><img src="`+l+`" alt="image-20230811180402556"></p><p>这个 <code>chain</code> 方法的作用就是创建一个包裹了 <code>obj</code> 的 Underscore 实例对象，并标记该实例是使用链模式，最后返回这个包装好的链式化实例（叫链式化是因为可以继续调用 <code>underscore</code> 上的方法)。</p><p>我们一起看看 <code>sort</code> 方法是如何实现的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">chainResult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> instance<span class="token punctuation">.</span>_chain <span class="token operator">?</span> <span class="token function">_</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj <span class="token comment">// 这里 _chain 为 true</span>
<span class="token punctuation">}</span>

_<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reverse&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> method <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
    <span class="token class-name">_</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_wrapped
      <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 执行方法</span>

      <span class="token keyword">return</span> <span class="token function">chainResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),U={href:"https://github.com/jashkenas/underscore/blob/master/underscore.js#L1649-L1657",target:"_blank",rel:"noopener noreferrer"},S=p(`<p><code>sort</code> 方法执行之后，把结果重新放在 <code>_wrapped</code> 里，并执行 <code>chainResult</code> 方法，这个方法里由于 <code>_chain</code> 之前已经置为 <code>true</code>，因此会继续对结果调用 <code>chain()</code> 方法，包装成链式化实例并返回。</p><p>最后的这个 <code>_.value</code> 方法比较简单，就是返回链式化实例的 <code>_wrapped</code> 值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">_</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_wrapped
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),H={href:"https://github.com/jashkenas/underscore/blob/master/underscore.js#L1668-L1670",target:"_blank",rel:"noopener noreferrer"},W=p("<p>总结一下，只要一开始调用了 <code>chain</code> 方法， <code>_chain</code> 这个标志位就会被置为 <code>true</code>，在类似的方法中，返回的值都用 <code>chainResult</code> 包裹一遍，并判断这个 <code>_chain</code> 这个标志位，为 <code>true</code> 则返回链式化实例，供给下一次方法调用，由此形成了链式化调用。</p>",1);function z(B,D){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("blockquote",null,[s("p",null,[k,n(" 本文可能用到一些 ES6 的语法 "),s("a",d,[n("Class"),t(a)]),n("、"),s("a",v,[n("let/const"),t(a)]),n("、"),s("a",m,[n("箭头函数"),t(a)]),n("、"),s("a",b,[n("rest 参数"),t(a)]),n(" 等，如果还没接触过可以点击链接稍加学习 ~")]),h]),g,s("p",null,[n("jQuery 中有一个有意思的方法 "),s("a",f,[n("end() "),t(a)]),n("，是将匹配的元素还原为之前一次的状态，此时返回的也不是 "),y,n("，然后可以在返回的之前一次匹配的状态后继续进行链模式：")]),w,s("p",null,[n("效果参见 "),s("a",j,[n("CodePen - jQuery 中的 end 方法"),t(a)])]),_,s("p",null,[n("此处源码位于 "),s("a",x,[n("src/core.js"),t(a)])]),Q,s("p",null,[n("此处源码位于 "),s("a",q,[n("src/effects.js"),t(a)]),n("，代码示例见 "),s("a",L,[n("CodePen - jQuery 中的 show"),t(a)])]),C,s("p",null,[n("此处源码位于 "),s("a",E,[n("src/core.js"),t(a)])]),R,s("p",null,[n("如果你用过 "),s("a",$,[n("Underscore"),t(a)]),n("，那么你可能知道 Underscore 提供的一个链模式实现 "),s("a",A,[n("_.chain"),t(a)]),n("。通过这个方法，可以方便地使用 Underscore 提供的一些方法链模式地对数据进行处理。另外，Lodash 的 chain 实现和 Underscore 的基本一样，可以自行去 Lodash 的 GitHub "),s("a",P,[n("仓库"),t(a)]),n("阅读。")]),M,s("p",null,[n("此处源码位于 "),s("a",N,[n("underscore.js#L1615-L1619"),t(a)])]),T,s("p",null,[n("此处源码位于 "),s("a",U,[n("underscore.js#L1649-L1657"),t(a)])]),S,s("p",null,[n("此处源码位于 "),s("a",H,[n("underscore.js#L1668-L1670"),t(a)])]),W])}const V=e(u,[["render",z],["__file","index-28.html.vue"]]);export{V as default};
