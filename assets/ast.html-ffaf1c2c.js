import{_ as p,M as e,p as o,q as c,R as n,t as s,N as t,a1 as l}from"./framework-e8cb8151.js";const i={},u=n("h1",{id:"源码探秘之-ast-抽象语法树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码探秘之-ast-抽象语法树","aria-hidden":"true"},"#"),s(" 源码探秘之 AST 抽象语法树")],-1),r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k=n("p",null,"抽象语法树是什么",-1),d=n("p",null,"抽象语法树（Abstract Syntax Tree）本质上就是一个 JS 对象。",-1),v={href:"https://zh.wikipedia.org/zh-cn/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"},m={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[n("p",null,"抽象语法树和虚拟节点的关系"),n("blockquote",null,[n("p",null,[n("strong",null,"这两者没有并没有关系"),s("。因为它们是不同的阶段的产物。")]),n("p",null,"AST 大多是在编译过程中出现，常规的开发框架并不涉及AST的概念，项目运行时就不会再有AST的概念"),n("p",null,"虚拟DOM 是运行时候(vue-runtime)出现的一种数据中间态，它是在 render 过程中出现的，主要用于比较 render 前后的数据结构变化")]),n("ul",null,[n("li",null,"过程：模板语法 ===> 抽象语法树 AST ===> 渲染函数（h函数）===> 虚拟节点 ===> 界面")])],-1),g=l(`<h2 id="_1、相关算法储备-指针思想" tabindex="-1"><a class="header-anchor" href="#_1、相关算法储备-指针思想" aria-hidden="true">#</a> 1、相关算法储备：指针思想</h2><ol><li><p>试寻找字符串中，连续重复次数最多的字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;aaaaadddddddbbbbbbbbbcccccccceeeeffffggss&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>逻辑原理：运用双指针<code>i</code>和<code>j</code>，<code>i</code>开始指向索引 0，<code>j</code>开始指向索引 1</p><ul><li>如果<code>i</code>和<code>j</code>指向的字一样，那么<code>i</code>不对，<code>j</code>后移</li><li>如果<code>i</code>和<code>j</code>指向的字不一样，此时说明它们之间的字都是连续相同的，让<code>i</code>追上<code>j</code>,<code>j</code>继续后移，继续上面的逻辑</li><li>前提 <code>i</code>&lt; <code>string.length</code></li></ul></li><li><p>代码展示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 试寻找字符串中，连续重复次数最多的字符。</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&#39;aaaaadddddddddddddddddbbbbbbbccccccccccccceeeeffffggss&#39;</span>
<span class="token keyword">function</span> <span class="token function">calcRepeatMaxNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 指针</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    j <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// 当前重复次数最多的次数</span>
<span class="token keyword">var</span> maxRepeatCount <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 当前重复次数做多的字母</span>
<span class="token keyword">var</span> maxRepeatChar
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> string<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> string<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">和</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">之间的文字相同，文字</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">重复了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j <span class="token operator">-</span> i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">&gt;</span> maxRepeatCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      maxRepeatCount <span class="token operator">=</span> j <span class="token operator">-</span> i
      maxRepeatChar <span class="token operator">=</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    i <span class="token operator">=</span> j
  <span class="token punctuation">}</span>
  j<span class="token operator">++</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maxRepeatCount<span class="token punctuation">,</span> maxRepeatChar<span class="token punctuation">)</span>
<span class="token comment">// 17 &#39;d&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_2、算法相关储备-递归深入" tabindex="-1"><a class="header-anchor" href="#_2、算法相关储备-递归深入" aria-hidden="true">#</a> 2、算法相关储备-递归深入</h2><ol><li><p>递归题目1：试输出斐波那契数列的前10项，即 1、1、2、3、5、8、13、21、34、55。然后请思考，代码中是否有大量重复的计算，如何解决重算计算的问题？</p><ul><li><p>逻辑原理：加入缓存对象，缓存之前已经计算的结果，后续直接使用那个，避免重复计算</p></li><li><p>代码实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 试着输出斐波那契额数列中的前10项，即 1、1、2、3、5、8、13、21、34、55</span>
<span class="token comment">// 创建一个函数，功能是返回下标为n的这项的数字</span>
<span class="token comment">// function fib(n) {</span>
<span class="token comment">//   if (n === 0 || n === 1) {</span>
<span class="token comment">//     return 1</span>
<span class="token comment">//   }</span>
<span class="token comment">//   return fib(n - 2) + fib(n - 1)</span>
<span class="token comment">// }</span>

<span class="token comment">// 优化方案</span>
<span class="token comment">// 缓存对象</span>
<span class="token keyword">const</span> cacheObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cacheObj<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  cacheObj<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> result
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>递归题目2：试将高伪数组 [1,2,[3,[4,5],6],7,[8],9]变为如下的结构</p><blockquote><p>小技巧：只要出现了规则重复，就要想到用递归。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>逻辑原理:</p></li><li><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 准备一个结果数组</span>
  <span class="token keyword">const</span> resultArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> item<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resultArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">convert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> resultArr
<span class="token punctuation">}</span>

<span class="token comment">// 优化写法</span>
<span class="token keyword">function</span> <span class="token function">convert2</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> item <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> item<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">convert2</span><span class="token punctuation">(</span>_item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">convert2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_3、算法相关储备-栈" tabindex="-1"><a class="header-anchor" href="#_3、算法相关储备-栈" aria-hidden="true">#</a> 3、算法相关储备：栈</h2><h3 id="_3-1-栈的定义" tabindex="-1"><a class="header-anchor" href="#_3-1-栈的定义" aria-hidden="true">#</a> 3.1 栈的定义</h3><ul><li>栈（stack）又名堆栈，它是一种运算受限的线性表，<strong>仅在表尾能进行插入和删除操作</strong>。这一端被称为<strong>栈顶</strong>，把另一端常伟<strong>栈底</strong></li><li>向一个栈插入新元素又称为<strong>进栈、入栈或者压栈</strong>；从一个栈删除元素又被称作<strong>出栈或退栈</strong></li><li><strong>后进先出(LFIO)特点</strong>：栈中的元素，最先进栈的必定是最后出栈，后进栈的一定会先出栈</li><li>在JavaScript中，栈可以用<strong>数组模拟</strong>。需要限制只能适用 push 和 pop, 不能使用 unshift 和 shift。即<strong>数组尾是栈顶</strong>。</li><li>当然，可以用面向对象等手段，将栈封装的更好。</li></ul><h3 id="_3-2-利用栈的题目" tabindex="-1"><a class="header-anchor" href="#_3-2-利用栈的题目" aria-hidden="true">#</a> 3.2 利用栈的题目</h3><ol><li><p>试着编写，”只能重复“ smartRepeat 函数， 实现</p><ul><li><p>以下效果</p><ul><li>将 3[a,b,c] 变为 abcabcabc</li><li>将3[2[a]2[b]]变为aabbaabbaabb</li><li>将2[1[a]3[b]2[3[c]4[d]]]变为 abbcccdddcccddddabbcccdddcccdddd</li><li>不用考虑输入字符时非法的情况，比如 <ul><li>2[a3[b]]是错误的，应该补一个1，即2[1[a]3[b]]</li><li>[abc]使错误的，应该补一个1，即1[abc]</li></ul></li></ul></li><li><p>难点：我们需要分辨 ] 和前面的哪一个 [ 是一对的，所以用栈的思想更好处理</p></li><li><p>逻辑原理：</p><ul><li>准备两个数组（模拟栈），一个用来存放数字，一个用来存放字符串。接着，遍历每一个字符</li><li>如果这个字符是数字，那么就把数字压栈，把空字符串压栈</li><li>如果这个字符是字母，那么就把栈顶这项改为这个字母</li><li>如果这个字符是 ],那么将数字弹栈，并把字符串的栈顶元素重复刚刚的这个次数弹栈，然后拼接到字符串的新栈顶上</li></ul></li><li><p>代码展示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">smartRepeat</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指针</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment">// 两个栈</span>
  <span class="token keyword">const</span> stackNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> stackString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 剩余部分</span>
  <span class="token keyword">let</span> restString <span class="token operator">=</span> templateStr
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> templateStr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 剩余部分</span>
    rest <span class="token operator">=</span> templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token comment">// 判断剩余部分是不是以数字和【开头</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+\\[</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;以数字开头&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 得到这个数字</span>
      <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d+)\\[</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      stackNumber<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
      stackString<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      index <span class="token operator">+=</span> number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;以字母开头&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> word <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\w+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      stackString<span class="token punctuation">[</span>stackString<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> word
      index <span class="token operator">+=</span> word<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">,</span> <span class="token string">&#39;以]开头&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> number <span class="token operator">=</span> stackNumber<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> word <span class="token operator">=</span> stackString<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// console.log(word, number)</span>
        stackString<span class="token punctuation">[</span>stackString<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> word<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      index<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> stackString<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>stackNumber<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// const string = &#39;2[3[abc]]&#39;</span>
<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;2[1[abc]3[bef]]&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">smartRepeat</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_4、ast-实现原理" tabindex="-1"><a class="header-anchor" href="#_4、ast-实现原理" aria-hidden="true">#</a> 4、AST 实现原理</h2><h3 id="_4-1-搭建基本环境" tabindex="-1"><a class="header-anchor" href="#_4-1-搭建基本环境" aria-hidden="true">#</a> 4.1 搭建基本环境</h3><ol><li><p>执行以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> vue-ast
<span class="token builtin class-name">cd</span> vue-ast
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli webpack-dev-server --save-dev
<span class="token function">npm</span> <span class="token function">install</span> html-webpack-plugin <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>webpack.config.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&quot;./src/index.html&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>package.json</code>中增加以下脚本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack server&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>src/index.html</code>、<code>src/index.js</code>文件，写入需要的内容</p></li><li><p>运行命令<code>npm run dev</code>，打开<code>http://localhost:8080</code>就可以看到运行的效果</p></li></ol><h3 id="_4-2、手写-ast-原理" tabindex="-1"><a class="header-anchor" href="#_4-2、手写-ast-原理" aria-hidden="true">#</a> 4.2、手写 AST 原理</h3><ol><li><p>逻辑原理(同第三节中栈的解题思路一样)：</p><ul><li>准备两个数组(模拟栈结构)，一个用来存放标签，一个用来存放子节点内容, 遍历字符串模板</li><li><strong>当检测到开始标记&lt;时</strong>，获取标签名tag, 将开始标签 tag 推入 栈1 中，将对象<code>{ tag: tag, type:2 }</code>推入 栈2 中,指针移动 tag 的长度+2（因为开始标签的左右尖括号占用两个位置）</li><li><strong>当检测到文字时</strong>，判断该文本不是空文本时，因为此时 栈2 的栈顶元素一定是对象，把栈顶的 text 属性赋值为文本内容，type属性标记为 3</li><li><strong>当检测到结束标记&lt;/时</strong>，将 栈1 的栈顶出栈, 然后 栈2 如果只剩下栈顶，说明到最后了，就返回；否则，就对 栈2 进行弹栈操作 <code>pop_obj</code>，判断栈2 栈顶此时不存在<code>children</code>属性，就赋值<code>children</code>属性为 [], 然后往 栈2 的栈顶<code>children</code>属性 <code>push</code>刚刚弹出的<code>pop_obj</code>,指针移动 tag 的长度+3（因为开始标签的左右尖括号占用两个位置，还有一个斜杠占一个位置）</li></ul></li><li><p>代码展示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这里不处理 文本节点 的处理，如下</span>
<span class="token doc-comment comment">/**
 &lt;div&gt;
    &lt;h3&gt;你好&lt;/h3&gt;
    我是文本节点 
    &lt;ul&gt;
      &lt;li&gt;A&lt;/li&gt;
      &lt;li&gt;B&lt;/li&gt;
      &lt;li&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
* */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">templateString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指针</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment">// 开始标记</span>
  <span class="token keyword">const</span> startRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;([a-z]+[0-9]?)\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> endRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;\\/([a-z]+[0-9]?)\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token comment">// 因为它是在 跳过开始标签 、结束标签之后的文字进行匹配，只需要判断不是以 \\&lt; 开头即可，</span>
  <span class="token keyword">const</span> wordRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([^\\&lt;]+)\\&lt;\\/([a-z]+[0-9]?)\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> templateString<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> restString <span class="token operator">=</span> templateString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token comment">// 判断这个字符是不是一个开始标签</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// index += 2</span>
      <span class="token keyword">const</span> tag <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;检测到开始标记&lt;&#39;</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span>
      <span class="token comment">// 将开始标记推入stack1中</span>
      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
      <span class="token comment">// 将空数组推入 stack2 中</span>
      stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> tag<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 这里要 +2 因为&lt;&gt; 也占用两个位置</span>
      index <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断这个字符是不是一个结束标签</span>
      <span class="token keyword">const</span> tag <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;检测到结束标记&lt;/&#39;</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> stack1<span class="token punctuation">[</span>stack1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 最后一项不能弹栈</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> pop_obj <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop_obj<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>stack1<span class="token punctuation">[</span>stack1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;标签没有封闭!!!&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      index <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wordRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> word <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>wordRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监测到文本:&#39;</span> <span class="token operator">+</span> word<span class="token punctuation">)</span>
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">=</span> word
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
      index <span class="token operator">+=</span> word<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      index<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack1<span class="token punctuation">,</span> stack2<span class="token punctuation">)</span>
  <span class="token keyword">return</span> stack2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_5、识别-attrs" tabindex="-1"><a class="header-anchor" href="#_5、识别-attrs" aria-hidden="true">#</a> 5、识别 attrs</h2><p>上述代码没有处理标签内部含有属性的情况，例如，对于下例模板字符串进行解析处理时就会报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> parse <span class="token keyword">from</span> <span class="token string">&#39;./parse&#39;</span>

<span class="token keyword">var</span> templateString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;div class=&quot;mine your&quot; id=&quot;box&quot; data-color=&quot;red&quot;&gt;
    &lt;h3&gt;
      &lt;span class=&quot;text&quot;&gt;你好&lt;/span&gt;
      &lt;span&gt;我是我 我是&lt;/span&gt;
    &lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;A&lt;/li&gt;
      &lt;li&gt;B&lt;/li&gt;
      &lt;li&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>templateString<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>逻辑分析：其实就是要更改上一节中的<code>startRegexp</code> 正则表达式需要进行更改，并且压入的内容也要进行更改，把类似属性<code>class=&quot;mine your&quot; id=&quot;box&quot; data-set=&quot;red&quot;</code>变为<code>[ { name:&quot;class&quot;, value:&quot;mine your&quot; }, { name: &quot;id&quot;, value: &quot;box&quot; }, { name:&quot;data-color&quot;, value: &quot;red&quot; } ]</code></p></li><li><p>代码实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parse.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">templateString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指针</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment">// 开始标记</span>
  <span class="token comment">// 更改了 startRegexp， 兼容属性的处理方式</span>
  <span class="token keyword">const</span> startRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;([a-z]+[0-9]?)(\\s[^\\&lt;]+)?\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> endRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\&lt;\\/([a-z]+[0-9]?)\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token comment">// 因为它是在 跳过开始标签 、结束标签之后的文字进行匹配，只需要判断不是以 \\&lt; 开头即可，</span>
  <span class="token keyword">const</span> wordRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([^\\&lt;]+)\\&lt;\\/([a-z]+[0-9]?)\\&gt;</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> templateString<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> restString <span class="token operator">=</span> templateString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token comment">// 判断这个字符是不是一个开始标签</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> tag <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> attrs <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;检测到开始标记&lt;&#39;</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span>
      <span class="token comment">// 将开始标记推入stack1中</span>
      stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
      <span class="token comment">// 将数组对象推入 stack2 中，新增加了属性 attrs 的兼容处理</span>
      <span class="token keyword">const</span> parseAttrsArr <span class="token operator">=</span> attrs <span class="token operator">?</span> <span class="token function">parseAttrs</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> tag<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> parseAttrsArr <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 这里要 +2 因为&lt;&gt; 也占用两个位置</span>
      <span class="token keyword">const</span> attrsLength <span class="token operator">=</span> attrs <span class="token operator">?</span> attrs<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span>
      index <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> attrsLength
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断这个字符是不是一个结束标签</span>
      <span class="token keyword">const</span> tag <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;检测到结束标记&lt;/&#39;</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> stack1<span class="token punctuation">[</span>stack1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 最后一项不能弹栈</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> pop_obj <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop_obj<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>stack1<span class="token punctuation">[</span>stack1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;标签没有封闭!!!&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      index <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wordRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>restString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> word <span class="token operator">=</span> restString<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>wordRegexp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监测到文本:&#39;</span> <span class="token operator">+</span> word<span class="token punctuation">)</span>
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">=</span> word
        stack2<span class="token punctuation">[</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
      index <span class="token operator">+=</span> word<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      index<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> stack2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新增：属性处理函数：</span>
<span class="token keyword">function</span> <span class="token function">parseAttrs</span><span class="token punctuation">(</span><span class="token parameter">attrStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> attrsArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 当前是否在引号内部</span>
  <span class="token keyword">let</span> isInQuote <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> attrStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentChar <span class="token operator">=</span> attrStr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">===</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">&amp;&amp;</span> isInQuote <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      isInQuote <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">===</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">&amp;&amp;</span> isInQuote <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里利用正则表达式去除前后引号 &quot;</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> attrStr
        <span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(.+)=&quot;(.+)&quot;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
      attrsArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      point <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
      isInQuote <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> attrsArr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,19),y={href:"https://blog.xiangfa.org/2021/01/AST-and-virtual-dom-in-vue/",target:"_blank",rel:"noopener noreferrer"};function h(f,w){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,r,n("ol",null,[n("li",null,[k,n("blockquote",null,[d,n("p",null,[s("在计算机科学中，称之为抽象语法树，或简称语法树，是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。"),n("a",v,[s("维基百科"),t(a)])])]),n("ul",null,[n("li",null,[n("a",m,[s("AST Explorer"),t(a)]),s("这个网址可以帮助我们更加直观的展示AST的抽象结构。")])])]),b]),g,n("p",null,[n("a",y,[s("Vue 中的 AST 与虚拟 Dom"),t(a)])])])}const j=p(i,[["render",h],["__file","ast.html.vue"]]);export{j as default};
