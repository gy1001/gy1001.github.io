import{_ as n,p as s,q as a,a1 as p}from"./framework-e8cb8151.js";const e={},t=p(`<h1 id="_05-ts-继承深入-手写优化底层源码" tabindex="-1"><a class="header-anchor" href="#_05-ts-继承深入-手写优化底层源码" aria-hidden="true">#</a> 05-TS 继承深入+手写优化底层源码</h1><h2 id="_01-【ts-继承】前端深度掌握-ts-继承的重要-长远意义" tabindex="-1"><a class="header-anchor" href="#_01-【ts-继承】前端深度掌握-ts-继承的重要-长远意义" aria-hidden="true">#</a> 01:【TS 继承】前端深度掌握 TS 继承的重要+长远意义</h2><h3 id="练就更深厚的-js-原型-原型链功底" tabindex="-1"><a class="header-anchor" href="#练就更深厚的-js-原型-原型链功底" aria-hidden="true">#</a> 练就更深厚的 js 原型 原型链功底</h3><p>TS 编译后的 JS 中有经典的 JS 原型和原型链的源码实现，虽然稍显复杂，但源码并不长，这将是 练就 更深厚的 JS 原型，原型链功底的绝佳场景。通过这几次课的认真磨练，大家将拥有更深厚的 JS 原型，原型链功底[当然你必须认真看完，多练方可]。这不仅让你日后面试大受益，而且也为你能问读 Vue3,React 源码或其他流行框架源码铺路，因为不管是那种源码，JS 原型链续承一定会用到，再加上你的 TS 功底，那么这些都成让你日后前端之路走的更远，走的更高!</p><h3 id="提升前端项目架构的根基技术" tabindex="-1"><a class="header-anchor" href="#提升前端项目架构的根基技术" aria-hidden="true">#</a> 提升前端项目架构的根基技术</h3><p>如果要你现在用开发一个工具库，组件库，你打算怎么开发?可以写出 n 多个版本的代码，都可以实现，但版本和版本之间的价值却差别巨大，你可以用 JS 原型写出 1 年左右工作经验的前端水准的代码，当然，上乘之选肯定是用 TS 来开发，你也可以灵活运用 TS 继承，多态等多种技术写出高水准的代码。但如果你不具备后端思维能力，就算你工作了 5 年，你也不一定能有这样的思维，甚至随时有可能被一个拥有了后端思维的只有 1 到 2 年工作经验水准的前端工程师超越。</p><h3 id="突破前段技术瓶颈之一的技能-晋级中、高级前端工程师必会技能" tabindex="-1"><a class="header-anchor" href="#突破前段技术瓶颈之一的技能-晋级中、高级前端工程师必会技能" aria-hidden="true">#</a> 突破前段技术瓶颈之一的技能，晋级中、高级前端工程师必会技能</h3><p>如果你只掌握了单个类的使用，而不知道如何运用继承，那这也是技能缺失，将会限制你日后技术发展的高度，限制你的技术视野，让你的前端变得过于前端化。</p><p>说深度掌握了 TS 继承就能突破所有的前端技术瓶颈，那很显然是夸大其词，但更想突破前端技术瓶颈，深度学握继承必然是其中一项技能，而目是根基技术之一，可见继承的重要性不言而喻，</p><p>比如一个简单的汽车租赁项目，让你来实现，你把前端功能实现了，展示在页面上了，但是打开你用 TS 写的 Vuex 代码，用 T5 写的 Nodeis 代码，过于前端化的思维让你编写的代码可能让人不堪入目。这里不单单是说用到封装继承，多态，解耦这些技术，更多的是你过于前端化的思维编写的项目可扩展性将非带差，可读性也差，可重复用【复用性】也低，而这些是评判一个项目是否值钱的关键因素</p><p>如果你希望未来职业生涯拥有更广阔的技术视野，更远的未来你甚至希望自己能胜任技术总监，那么你就一定要从一个更广阔的技术视野来提升自己的技术能力，不能让自己被框在过于前端化的路上</p><p>虽然老师不能三言两语给同学们描述出什么才叫做完全突破前端瓶颈，但有一点是可以肯定的，就是要有一定的后端思维能力，这里当然不是要拥有 java 后端能力，而是起码具备 nodejs 后端的项目架构能力，NodeJs 可以是前端工程师提升晋级一定要掌握的技能。而深度掌握了 TS 继承已经为突破前端技术瓶颈开了一个好头</p><h2 id="_02-【ts-继承准备】原型链继承-重要的一步" tabindex="-1"><a class="header-anchor" href="#_02-【ts-继承准备】原型链继承-重要的一步" aria-hidden="true">#</a> 02：【TS 继承准备】原型链继承+重要的一步</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小李&#39;</span><span class="token punctuation">]</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">favor<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>favor <span class="token operator">=</span> favor
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
<span class="token punctuation">}</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parent&#39;</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
<span class="token keyword">const</span> sonObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;打篮球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sonObj&#39;</span><span class="token punctuation">,</span> sonObj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Son.prototype&#39;</span><span class="token punctuation">,</span> <span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>

<span class="token comment">// 原型链继承</span>
<span class="token comment">//继承带来的好处</span>
<span class="token comment">// 子类可以访问父类的实例属性</span>
<span class="token comment">// 子类访问访问父类原型对象空间中的属性和方法</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">&#39;王六&#39;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sonObj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;打篮球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Son.prototype 原型链继承之后的指向&#39;</span><span class="token punctuation">,</span> <span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sonObj2&#39;</span><span class="token punctuation">,</span> sonObj2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&#39;sonObj2访问son类自身的favor属性【构造函数中this定义的对象属性】&#39;</span><span class="token punctuation">,</span>
  sonObj2<span class="token punctuation">.</span>favor<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sonObj2访问son对象原型上的name属性&#39;</span><span class="token punctuation">,</span> sonObj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sonObj2访问friends属性&#39;</span><span class="token punctuation">,</span> sonObj2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99e391a46c1d4dee8c45059e6616fc76~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li><p>原型链继承实现的本质是改变 Son 构造函数的原型对象变量的指向【就是 Son.prototype 的指向】，Son.prototype = new Parent() 那么 Son.prototype 可以访问 Parent 对象空间中的属性和方法，所以顺着 【__proto__】属性，Son 类也可以访问 Parent 类的原型对象空间中的所有属性和方法</p><p><strong>原型链继承的完整描述</strong>：子对象首先在自己的对象空间中查找要访问的属性或者方法，如果找到，就调用输出，如果没有，就沿着子对象的__proto__属性指向的原型对象空间中去查找有没有这个属性或者方法，如果找到就输出，如果没有，就需要往上查找，直到找到 Object.prototype 原型对象属性指向的原型对象空间为止，如果找不到，返回 null</p></li><li><p><strong>原型链继承实现容易被遗忘的重要一步</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 让 Son 类的对象或者函数原型.prototype 指向的原型对象空间【new Parent()对象空间】有一个 Constructor 属性 指向了Son构造函数对象空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>原型链继承常见疑问</strong></p><p>Son.prototype = Parent.prototype 这样作为原型链继承的模式和 Son.prototype = new Parent(...) 又有什么区别呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son
<span class="token comment">// 这样会导致所有 Parent 的子类的 constructor 都指向 Son</span>
<span class="token comment">// 这样执行后会让 Son.prototype 和 Parent.prototype 和 其他 Parent 子类的 __proto__指向的原型对象空间[Parent.prototype指向的原型对象空间]均指向Son 构造函数对象空间</span>
<span class="token comment">// 这违背了 Parent 原型对象空间中的 constructor属性必须指向 Parent 自身的构造函数的对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>原型链继承的不足</strong></p><p>局限性：不能通过子类构造函数向父类构造函数传递参数</p></li></ol><h2 id="_03-借用构造函数-冒充对象继承" tabindex="-1"><a class="header-anchor" href="#_03-借用构造函数-冒充对象继承" aria-hidden="true">#</a> 03: 借用构造函数（冒充对象继承)</h2><ol><li><p>借用构造函数继承如何解决原型链继承的局限性</p><blockquote><p>借用构造函数继承思想就是在子类【ChinesePeople 构造函数】的内部借助 apply call 方法调用并传递参数给父类 【People 函数】</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// People父类构造函数：看成是一个父类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment">// 实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;吃饭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ChinesePeople 子构造函数【看成一个子类】</span>
<span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> national</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 借用父类构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national <span class="token comment">// 名族</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> chinesePeople <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinesePeople</span><span class="token punctuation">(</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;汉&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>借用构造函数继承的不足</p><blockquote><p>借用构造函数实现了子类构造函数向父类构造函数传递参数，但没有继承父类原型的属性和方法，无法访问父类原型上的属性和方法</p></blockquote></li></ol><h2 id="_04-【ts-继承准备】借用构造函数-原型链继承组合模式" tabindex="-1"><a class="header-anchor" href="#_04-【ts-继承准备】借用构造函数-原型链继承组合模式" aria-hidden="true">#</a> 04：【TS 继承准备】借用构造函数+原型链继承组合模式</h2><h3 id="借用构造函数-原型链继承组合模式的优势" tabindex="-1"><a class="header-anchor" href="#借用构造函数-原型链继承组合模式的优势" aria-hidden="true">#</a> 借用构造函数+原型链继承组合模式的优势</h3><p>优势 1：具备借用构造函数的优点：子类【ChinesePeople 构造函数】的内部可以向父类【People 构造函数】传递参数</p><p>优势 2：具备原型链继承的优点：ChinesePeople.prototype 和 new ChinesePeople() 出来的实例对象变量和实例都可以访问父类【People 构造函数】原型对象上的属性和方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// People父类构造函数：看成是一个父类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment">// 实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;吃饭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ChinesePeople 子构造函数【看成一个子类】</span>
<span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> national</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 借用父类构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national <span class="token comment">// 名族</span>
<span class="token punctuation">}</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="借用构造函数-原型链继承组合模式的不足" tabindex="-1"><a class="header-anchor" href="#借用构造函数-原型链继承组合模式的不足" aria-hidden="true">#</a> 借用构造函数+原型链继承组合模式的不足</h3><p>缺点：调用了两次父类构造函数【People 构造函数】new People 调用构造函数带来问题：</p><ol><li>进入 People 构造函数为属性赋值，分配内存空间，浪费内存</li><li>赋值导致效率下降一些，关键是 new People 赋的值无意义，出现代码冗余，new ChinesePeople 出来的对象和这些值不相干，是通过子类 ChinesePeople 构造函数中的 apply 来向父类 People 构造函数赋值</li></ol><h2 id="_05-【ts-继承准备】寄生组合继承实现方式【最佳继承模式】" tabindex="-1"><a class="header-anchor" href="#_05-【ts-继承准备】寄生组合继承实现方式【最佳继承模式】" aria-hidden="true">#</a> 05:【TS 继承准备】寄生组合继承实现方式【最佳继承模式】</h2><h3 id="寄生组合继承实现方式" tabindex="-1"><a class="header-anchor" href="#寄生组合继承实现方式" aria-hidden="true">#</a> 寄生组合继承实现方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// People父类构造函数：看成是一个父类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment">// 实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;吃饭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ChinesePeople 子构造函数【看成一个子类】</span>
<span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> national</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 借用父类构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national <span class="token comment">// 名族</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第一步：创建一个寄生构造函数</span>
<span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处毫无意义，只是为了测试</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token class-name">Middle</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">People</span><span class="token punctuation">.</span>prototype
<span class="token comment">// 第二步：创建一个寄生新创建的构造函数的对象</span>
<span class="token keyword">const</span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 第三步：ChinesePeople 子类的原型对象属性指向第二步的新创建的构造函数的对象</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> middle
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople

<span class="token keyword">const</span> chinesePeopleOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinesePeople</span><span class="token punctuation">(</span><span class="token string">&#39;王海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">1111</span><span class="token punctuation">,</span> <span class="token string">&#39;汉族&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chinesePeopleOne<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d15b2f06f1f04670bba7dd881e2a07b4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="构建一个公共的寄生组合继承" tabindex="-1"><a class="header-anchor" href="#构建一个公共的寄生组合继承" aria-hidden="true">#</a> 构建一个公共的寄生组合继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 公共的寄生组合继承</span>
<span class="token keyword">function</span> <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> son</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 此处毫无意义，只是为了测试</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> son <span class="token comment">// 代替上一小节中的 ChinesePeople.prototype.constructor = ChinesePeople</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Middle</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// People父类构造函数：看成是一个父类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment">// 实例属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;吃饭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ChinesePeople 子构造函数【看成一个子类】</span>
<span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> national</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 借用父类构造函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national <span class="token comment">// 名族</span>
<span class="token punctuation">}</span>

<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">_extends</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> ChinesePeople<span class="token punctuation">)</span>
<span class="token keyword">const</span> chinesePeopleOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinesePeople</span><span class="token punctuation">(</span><span class="token string">&#39;王海&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">1111</span><span class="token punctuation">,</span> <span class="token string">&#39;汉族&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chinesePeopleOne<span class="token punctuation">)</span> <span class="token comment">// 结果同上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="克隆-对象其他实现方式" tabindex="-1"><a class="header-anchor" href="#克隆-对象其他实现方式" aria-hidden="true">#</a> “克隆”对象其他实现方式</h3><h3 id="克隆-对象实现方式-2" tabindex="-1"><a class="header-anchor" href="#克隆-对象实现方式-2" aria-hidden="true">#</a> “克隆”对象实现方式 2</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// s99 行效果  = s102 + s103 相当用 People 类【父构造器函数】的原型对象“克隆”了一个对象</span>
<span class="token keyword">const</span> cloneOneParentObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// s99</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> cloneOneParentObj <span class="token comment">//  s100</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople <span class="token comment">// s101</span>

<span class="token comment">// 写成通用方法就如下</span>
<span class="token keyword">function</span> <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token parameter">parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> middle <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> middle
<span class="token punctuation">}</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">_extends</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span>
<span class="token comment">// 需要增加这一行</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="克隆-对象实现方式-3" tabindex="-1"><a class="header-anchor" href="#克隆-对象实现方式-3" aria-hidden="true">#</a> “克隆”对象实现方式 3</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> cloneOneParentObj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// s102</span>
cloneOneParentObj2<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">People</span><span class="token punctuation">.</span>prototype <span class="token comment">// s103</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> cloneOneParentObj <span class="token comment">// s104</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople <span class="token comment">// s105</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-【ts-继承应用】用全栈眼光深度掌握-ts-继承-ts-继承好处【企业真项目应用场景】" tabindex="-1"><a class="header-anchor" href="#_06-【ts-继承应用】用全栈眼光深度掌握-ts-继承-ts-继承好处【企业真项目应用场景】" aria-hidden="true">#</a> 06:【TS 继承应用】用全栈眼光深度掌握 TS 继承+TS 继承好处【企业真项目应用场景】</h2><h3 id="_1-理解子类" tabindex="-1"><a class="header-anchor" href="#_1-理解子类" aria-hidden="true">#</a> 1.理解子类</h3><h4 id="_1-什么是子类" tabindex="-1"><a class="header-anchor" href="#_1-什么是子类" aria-hidden="true">#</a> (1) 什么是子类?</h4><p>有两个类，比如 A 类和 B 类，如果满足 A 类 is a kind of B 类，那么 A 类就是 B 类的子类比如: A 类是顾客类，B 类是人类，因为顾客类 a kind of 人类成立【顾客类是人类的一种】，所以顾客类类的子类。</p><h4 id="_2-子类如何继承父类的属性和方法" tabindex="-1"><a class="header-anchor" href="#_2-子类如何继承父类的属性和方法" aria-hidden="true">#</a> (2) 子类如何继承父类的属性和方法?</h4><p>以顾客类为例子:顾客类继承了父类【人类】的非私有的属性和方法，也具备子类独有的属性和方法。顾客类继承父类【人类】的全部非私有的属性和方法外，还有哪些独有的属性和方法呢?</p><p>顾客类独有属性: 顾客等级，顾客编号 顾客类独省方法：购买</p><h4 id="_3-初步理解为什么要用继承" tabindex="-1"><a class="header-anchor" href="#_3-初步理解为什么要用继承" aria-hidden="true">#</a> (3) 初步理解为什么要用继承?</h4><p>举例: 宠物管理项目中的狗狗类，兔子类，小猫类都是宠物，尽管每个宠物都有独有属性和方法，比如狗狗类的品种，看家方法;兔子类的肤色属性等。但这些类都包含了 name, buymoney【购买价格】，healthstatus【健康状况】，friendshipstar【和主人的友谊星级数】这些属性，如果每一个类都写这些属性，那么就非常臃肿，可以把这些属性提取出来放到一个宠物类中，其他类都继承这个宠物类。当然继承还有更多好处，下面借助汽车租赁功能的实现来更深度的掌握继承。</p><h4 id="_4-汽车租赁管理功能【深度掌握继承】" tabindex="-1"><a class="header-anchor" href="#_4-汽车租赁管理功能【深度掌握继承】" aria-hidden="true">#</a> (4) 汽车租赁管理功能【深度掌握继承】</h4><p>需求 1: 汽车租赁功能实现: 有小轿车,大巴,卡车三种类型的车,顾客可以租任意一种或多种不同类型的车,按照租用的天计算租金，同时为了响应国家对各类车安全的管理，对在租赁期内有过各种超载，超乘客数，酒家等违规的车需额外支付一定的费用。</p><p>需求 2: 计算退回费用: 最终退回顾客的费用为押金扣除使用天数，如押金不足需额外支付不足部分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类 Vechile 交通工具类</span>
<span class="token keyword">class</span> <span class="token class-name">Vechile</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token literal-property property">brand</span><span class="token operator">:</span> string <span class="token comment">// 品牌</span>
  <span class="token keyword">public</span> <span class="token literal-property property">vechileNo</span><span class="token operator">:</span> string <span class="token comment">// 车牌号</span>
  <span class="token keyword">public</span> <span class="token literal-property property">days</span><span class="token operator">:</span> number <span class="token comment">//租赁天数</span>
  <span class="token keyword">public</span> <span class="token literal-property property">total</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 支付的租赁总费用</span>
  <span class="token keyword">public</span> <span class="token literal-property property">deposit</span><span class="token operator">:</span> number <span class="token comment">// 押金</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">_brand</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_vechileNo</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_days</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token literal-property property">_deposit</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> _brand
    <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">=</span> _vechileNo
    <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">=</span> _days
    <span class="token keyword">this</span><span class="token punctuation">.</span>deposit <span class="token operator">=</span> _deposit
  <span class="token punctuation">}</span>
  <span class="token comment">// 计算租赁车的价格</span>
  <span class="token keyword">public</span> <span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">&#39; 车牌号为：&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">&#39;开始被租&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 支付押金的方法</span>
  <span class="token keyword">public</span> <span class="token function">payDesposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">&#39; 车牌号：&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">&#39; 支付了&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deposit<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 安全监测方法</span>
  <span class="token keyword">public</span> <span class="token function">safeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;车违规了&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">&#39; 车牌号：&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">&#39;违规了&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类： Car</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vechile</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token literal-property property">type</span><span class="token operator">:</span> string
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">_brand</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_vechileNo</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_days</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token literal-property property">_deposit</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token literal-property property">_type</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>_brand<span class="token punctuation">,</span> _vechileNo<span class="token punctuation">,</span> _days<span class="token punctuation">,</span> _deposit<span class="token punctuation">)</span> <span class="token comment">// 相当于之前的 call 方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> _type
  <span class="token punctuation">}</span>
  <span class="token comment">//根据租车型号获取租赁一天的价格</span>
  <span class="token keyword">public</span> <span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">rentMoneyByDay</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 每天的租金</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;普拉多巡洋舰&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rentMoneyByDay <span class="token operator">=</span> <span class="token number">800</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;凯美瑞旗舰版&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rentMoneyByDay <span class="token operator">=</span> <span class="token number">400</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;威驰智行版&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rentMoneyByDay <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rentMoneyByDay
  <span class="token punctuation">}</span>

  <span class="token comment">// 计算租赁车的价格</span>
  <span class="token keyword">public</span> <span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 方法重写【override】</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;普拉多&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;京3A556&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&#39;普拉多巡洋舰&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 子类：Bus</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vechile</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token literal-property property">seatNum</span><span class="token operator">:</span> number <span class="token comment">// 座位数</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">_brand</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_vechileNo</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token literal-property property">_days</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token literal-property property">_deposit</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token literal-property property">_seatNum</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>_brand<span class="token punctuation">,</span> _vechileNo<span class="token punctuation">,</span> _days<span class="token punctuation">,</span> _deposit<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>seatNum <span class="token operator">=</span> _seatNum
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getPriceBySeatNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">rentMoneyByDay</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 计算每天的租金</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seatNum <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rentMoneyByDay <span class="token operator">=</span> <span class="token number">800</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seatNum <span class="token operator">&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rentMoneyByDay <span class="token operator">=</span> <span class="token number">1600</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rentMoneyByDay
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span> <span class="token comment">// 方法重写【override】</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriceBySeatNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-【ts-继承应用】深入-super-方法重写-真实应用场景" tabindex="-1"><a class="header-anchor" href="#_07-【ts-继承应用】深入-super-方法重写-真实应用场景" aria-hidden="true">#</a> 07:【TS 继承应用】深入 super+方法重写+真实应用场景</h2><h3 id="方法重写-override" tabindex="-1"><a class="header-anchor" href="#方法重写-override" aria-hidden="true">#</a> 方法重写（override)</h3><p><strong>条件</strong>：一定要发生在继承中</p><p><strong>位置</strong>：子类中重写父类的方法</p><p><strong>应用场景</strong>：当父类中方法的视线不能满足子类功能需要或者不能完全满足子类功能需要时，就需要在子类中进行方法重写</p><p><strong>方法重写的好处</strong>：让所有子类共用父类中方法已经实现了一部分功能的代码【父类方法代码在各个子类中得到了复用】</p><p><strong>定义规则</strong>：</p><ol><li>和父类方法同名</li><li>参数和父类形同，如果是引用类型的参数，需要依据具体类型来定义</li><li>父类方法的访问范围【访问修饰符】必须小于子类方法中重写的访问范围【访问修饰符】，且父类方法不能是 private</li></ol><ul><li><strong>public</strong>: 可以被子类、父类中使用，也可以在类的外部调用，默认是 <strong>public</strong></li><li><strong>private</strong>: 父类中 private 修饰的方法不能被继承（如果父类方法中被 private 修饰，子类中同名方法必须是 private protected 等 不能是 public，以此类推）</li><li><strong>protected</strong>: 允许子类继承，但是不能再外部调用（可以被本类和子类中使用）</li></ul><h3 id="super-的三种用法总结" tabindex="-1"><a class="header-anchor" href="#super-的三种用法总结" aria-hidden="true">#</a> super 的三种用法总结</h3><p>含义：代表父类</p><p>作用 在子类中：</p><ol><li>super.属性：调用父类非私有化的成员变量</li><li>super.方法：调用父类非私有化的成员方法</li><li>super()：调用父类非私有化的构造方法</li></ol><h4 id="错误用法" tabindex="-1"><a class="header-anchor" href="#错误用法" aria-hidden="true">#</a> 错误用法</h4><ol><li>当子类和父类有同名属性时，可以在子类中用 super 来获取父类的同名属性吗？：：：<strong>不能</strong>，</li></ol><h2 id="_08-【ts-继承源码】逐行深剖-手写-ts-继承-js-源码" tabindex="-1"><a class="header-anchor" href="#_08-【ts-继承源码】逐行深剖-手写-ts-继承-js-源码" aria-hidden="true">#</a> 08:【TS 继承源码】逐行深剖，手写 TS 继承 JS 源码</h2><h3 id="技术准备" tabindex="-1"><a class="header-anchor" href="#技术准备" aria-hidden="true">#</a> 技术准备</h3><h4 id="_1-相关技术-setprototypeof-使用-object-create-的区别" tabindex="-1"><a class="header-anchor" href="#_1-相关技术-setprototypeof-使用-object-create-的区别" aria-hidden="true">#</a> 1. <strong>相关技术</strong>：<code>setPrototypeOf</code> 使用 + <code>Object.create</code> 的区别</h4><blockquote><p>ES6 Object.setPrototypeOf 方法</p><p>Object.setPrototypeOf 为现有对象设置原型，返回一个新对象，接收两个参数：第一个是现有对象，第二个是原型对象，返回的新对象 newMiddle 和第二个原型对象关系为 newMiddle.__proto = parent.prototype</p><p>由于 setPrototype 的作用： middle.__proto__ = parent.prototype ，newMiddle 的最终结果就是 middle</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token parameter">parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">_extends</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span> <span class="token comment">// 这句话会导致 ChinesePeople.prototype 中定义的其他方法失效</span>
<span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople <span class="token comment">// 需要额外增加子构造函数指向</span>

<span class="token comment">// 那么如何保存下来   ChinesePeople.prototype 中定义的其他方法呢？</span>
<span class="token comment">// 改为如下结果</span>

<span class="token keyword">function</span> <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> son</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">_extends</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> ChinesePeople<span class="token punctuation">)</span> <span class="token comment">// 这句话执行完，建立的关系如下：ChinesePeople.prototype.__proot__ = People.prototype</span>
<span class="token comment">// 这样就保留了 ChinesePeople.prototype 中定义的其他方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-父类静态方法和属性在子类中的继承-setprototypeof-分别实现" tabindex="-1"><a class="header-anchor" href="#_2-父类静态方法和属性在子类中的继承-setprototypeof-分别实现" aria-hidden="true">#</a> 2.<strong>父类静态方法和属性在子类中的继承</strong>：<code>setPrototypeOf</code> 分别实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">People</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
<span class="token punctuation">}</span>
People<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment">// 静态属性相当于 TS 类中的 static 属性</span>
People<span class="token punctuation">.</span><span class="token function-variable function">commoneDescribe</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 静态方法，相当于 TS 继承中的 static 方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;需要守法&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;吃饭...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;1112&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;people&#39;</span><span class="token punctuation">,</span> people<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa7127047378403cac870ff614b744cb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="_3-深度掌握-手写-优化底层-extendsstatics-方法的实现" tabindex="-1"><a class="header-anchor" href="#_3-深度掌握-手写-优化底层-extendsstatics-方法的实现" aria-hidden="true">#</a> 3. <strong>深度掌握+手写+优化底层 extendsStatics 方法的实现</strong>：</h4><p><code>extendsStatic</code> 方法的作用：完成父类静态方法和属性在子类中的继承</p><h4 id="_4-深度掌握-extends-方法" tabindex="-1"><a class="header-anchor" href="#_4-深度掌握-extends-方法" aria-hidden="true">#</a> 4. 深度掌握 <code>extends</code> 方法</h4><h3 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现" aria-hidden="true">#</a> 源码实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,78),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","index-05.html.vue"]]);export{r as default};
