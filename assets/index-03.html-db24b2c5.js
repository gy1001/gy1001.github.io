import{a as t,b as o,c,_ as i}from"./链表-76314c42.js";import{_ as l,M as u,p as r,q as d,R as n,t as a,N as k,a1 as e}from"./framework-e8cb8151.js";const s="/assets/二叉搜索树-23b3e0eb.png",v="/assets/红黑树-14aeea34.png",m="/assets/B树-37f91587.png",b="/assets/堆栈内存-6f8d2c56.png",h="/assets/完全二叉树-1d6f1279.png",f="/assets/斐波那契数列-966bc189.png",g="/assets/dom-tree-5eb9ba02.png",y={},w=e('<h1 id="_03-数据结构和算法-下-大厂面试必考" tabindex="-1"><a class="header-anchor" href="#_03-数据结构和算法-下-大厂面试必考" aria-hidden="true">#</a> 03: 数据结构和算法（下），大厂面试必考</h1><h2 id="_01-求二叉搜索树的第-k-小的值" tabindex="-1"><a class="header-anchor" href="#_01-求二叉搜索树的第-k-小的值" aria-hidden="true">#</a> 01: 求二叉搜索树的第 K 小的值</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>一个二叉搜索树，求其中的第 K 小的节点的值。 如下图，第 3 小的节点是 <code>4</code></p><p><img src="'+s+`" alt=""></p><h3 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h3><p>树，大家应该都知道，如前端常见的 DOM 树、vdom 结构。</p><p>二叉树，顾名思义，就是每个节点最多能有两个子节点。</p><p>树节点的数据结构是 <code>{ value, left, right }</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// 或其他类型</span>
  left<span class="token operator">?</span><span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
  right<span class="token operator">?</span><span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h3><ul><li>前序遍历：<code>root -&gt; left -&gt; right</code></li><li>中序遍历：<code>left -&gt; root -&gt; right</code></li><li>后序遍历：<code>left -&gt; right -&gt; root</code></li></ul><h3 id="二叉树遍历的三种方式代码演示" tabindex="-1"><a class="header-anchor" href="#二叉树遍历的三种方式代码演示" aria-hidden="true">#</a> 二叉树遍历的三种方式代码演示</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 数据结构演示</span>
<span class="token keyword">const</span> bst<span class="token operator">:</span> ITreeNode <span class="token operator">=</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  left<span class="token operator">:</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    left<span class="token operator">:</span> <span class="token punctuation">{</span>
      value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    right<span class="token operator">:</span> <span class="token punctuation">{</span>
      value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  right<span class="token operator">:</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    left<span class="token operator">:</span> <span class="token punctuation">{</span>
      value<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
      left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    right<span class="token operator">:</span> <span class="token punctuation">{</span>
      value<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
      left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历" aria-hidden="true">#</a> 前序遍历</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token builtin">number</span>
  left<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
  right<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 二叉树前序遍历
 * <span class="token keyword">@param</span> <span class="token parameter">node</span> tree node
 */</span>
<span class="token keyword">function</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 前序遍历结果</span>
<span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span> <span class="token comment">// 5 3 2 4 7 6 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历" aria-hidden="true">#</a> 中序遍历</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 二叉树中序遍历
 * <span class="token keyword">@param</span> <span class="token parameter">node</span> tree node
 */</span>
<span class="token keyword">function</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 中序遍历结果</span>
<span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span> <span class="token comment">// 2 3 4 5 6 7 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 二叉树后序遍历
 * <span class="token keyword">@param</span> <span class="token parameter">node</span> tree node
 */</span>
<span class="token keyword">function</span> <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 后序遍历结果</span>
<span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span> <span class="token comment">// 2 4 3 6 8 7 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉搜索树-bst" tabindex="-1"><a class="header-anchor" href="#二叉搜索树-bst" aria-hidden="true">#</a> 二叉搜索树 BST</h3><ul><li>left(包括其后代) value &lt;= 根节点(root value)</li><li>right(包括其后代) value &gt;= 根节点(root value)</li></ul><h3 id="分析题目" tabindex="-1"><a class="header-anchor" href="#分析题目" aria-hidden="true">#</a> 分析题目</h3><p>根据 <code>BST</code> 的特点，中序遍历的结果，正好是按照从小到大排序的结果。</p><p>所以，中序遍历，求数组的 <code>arr[k]</code> 即可。</p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token builtin">number</span>
  left<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
  right<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ITreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 寻找 BST 里的第 K 小值
 * <span class="token keyword">@param</span> <span class="token parameter">node</span> tree node
 * <span class="token keyword">@param</span> <span class="token parameter">k</span> 第几个值
 */</span>
<span class="token keyword">function</span> <span class="token function">getKthValue</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ITreeNode<span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getKthValue</span><span class="token punctuation">(</span>bst<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><ul><li>二叉搜索树的特点</li><li>前序、中序、后序遍历</li><li>二叉树的特点：<code>left &lt;= root</code>, <code>right &gt;= root</code></li><li>二叉搜索树的价值：可使用 <strong>二分法</strong> 进行快速查找</li></ul><h2 id="_02-为什么二叉树很重要-而不是三叉树四岔树" tabindex="-1"><a class="header-anchor" href="#_02-为什么二叉树很重要-而不是三叉树四岔树" aria-hidden="true">#</a> 02：为什么二叉树很重要，而不是三叉树四岔树</h2><h3 id="如何让性能整体最优" tabindex="-1"><a class="header-anchor" href="#如何让性能整体最优" aria-hidden="true">#</a> 如何让性能整体最优？</h3><p>有序结构</p><ul><li>数组：查找易 O(1)，增删难 O(n)</li><li>链表：查找难 O(n), 增删易 O(1)</li></ul><p>将两者优点结合起来 —— 二叉搜索树 BST ：查找易，增删易 —— 可使用二分算法</p><p>二叉搜索树 BST</p><ul><li>左节点（包括其后代） &lt;= 根节点</li><li>右节点（包括其后代） &gt;= 根节点</li></ul><p><img src="`+s+'" alt=""></p><h3 id="高级二叉树" tabindex="-1"><a class="header-anchor" href="#高级二叉树" aria-hidden="true">#</a> 高级二叉树</h3><p>二叉搜索树 BST ，如果左右不平衡，也无法做到最优。</p><p>极端情况下，它就成了链表 —— 这不是我们想要的。</p><h4 id="平衡二叉搜索树-bbst" tabindex="-1"><a class="header-anchor" href="#平衡二叉搜索树-bbst" aria-hidden="true">#</a> <strong>平衡二叉搜索树 BBST</strong> ：</h4><ul><li>要求树左右尽量平衡</li></ul><ul><li>树高度 <code>h</code> 约等于 <code>logn</code></li><li>查找、增删，时间复杂度都等于 <code>O(logn)</code></li></ul><h4 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> <strong>红黑树</strong>：</h4><ul><li>一种自动平衡的二叉树</li></ul><ul><li>节点分 红/黑 两种颜色，通过颜色转换来维持树的平衡</li><li>相比于普通平衡二叉树，它维持平衡的效率更高</li></ul><p><img src="'+v+'" alt=""></p><h4 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树" aria-hidden="true">#</a> B 树：</h4><ul><li>物理上是多叉树，但逻辑上是一个 BST 。</li><li>用于高效 I/O ，如关系型数据库就用 B 树来组织数据结构。</li></ul><p><img src="'+m+'" alt=""></p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li>数组、链表，各有各的缺点</li><li>特定的二叉树（BBST）可以让整体效果最优</li><li>各种高级二叉树，继续优化，满足不同场景</li></ul><h2 id="_03-堆有什么特点-和二叉树有什么关系" tabindex="-1"><a class="header-anchor" href="#_03-堆有什么特点-和二叉树有什么关系" aria-hidden="true">#</a> 03：堆有什么特点，和二叉树有什么关系</h2><h3 id="堆栈模型" tabindex="-1"><a class="header-anchor" href="#堆栈模型" aria-hidden="true">#</a> 堆栈模型</h3><p>JS 执行时代码中的变量</p><ul><li><p>值类型 - 存储到栈</p></li><li><p>引用类型 - 存储到堆</p></li></ul><p><img src="'+b+'" alt=""></p><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h4><ul><li>节点的值，总是不大于（或不小于）其父节点的值</li><li>完全二叉树</li><li>最大堆：父节点 &gt;= 子节点</li><li>最小堆：父节点 &lt;= 子节点</li></ul><p><img src="'+h+`" alt=""></p><p><img src="https://img-blog.csdn.net/20160317150649506" alt="img"></p><p><img src="https://img-blog.csdn.net/20160317150655703" alt="img"></p><h3 id="逻辑结构-vs-物理结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构-vs-物理结构" aria-hidden="true">#</a> 逻辑结构 VS 物理结构</h3><ul><li>堆，<strong>逻辑结构</strong>是一个二叉树</li><li>但是<strong>物理结构</strong>是一个数组</li><li>数组：适合连续存储 + 节省空间（回顾堆栈模型）</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08a6a203326742f1a2d01f3ebe627803~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 上图是一个堆（从小到大），可以用数组表示</span>
<span class="token keyword">const</span> heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span> <span class="token comment">// 忽略 0 节点</span>

<span class="token comment">// 节点关系</span>
<span class="token keyword">const</span> parentIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i
<span class="token keyword">const</span> rightIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆-vs-bst" tabindex="-1"><a class="header-anchor" href="#堆-vs-bst" aria-hidden="true">#</a> 堆 VS BST</h3><h4 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h4><p>堆的排序规则，没有 <code>BST</code> 那么严格，这就造成了</p><ul><li>查询比 <code>BST</code> 慢</li><li>增删比 BST 快，维持平衡也更快</li><li>但整体复杂度都是 <code>O(logn)</code> 级别，即树的高度</li></ul><h4 id="堆的使用场景" tabindex="-1"><a class="header-anchor" href="#堆的使用场景" aria-hidden="true">#</a> 堆的使用场景</h4><ul><li><p>特别适合 &quot;堆栈模型&quot;</p></li><li><p>堆的数据，都是在栈中引用的，不会直接从根节点搜索</p></li><li><p>堆的物理结构是数组，根据栈的地址，可用 O(1)找到目标，所以查询复杂度就是 <code>O(1)</code></p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>物理结构是数组（空间更小），逻辑结构是二叉树（操作更快）</li><li>适用于“堆栈”结构</li></ul><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>二叉树，可以充分利用二分法</li><li>二叉树可以同时规避数组和链表的缺点</li><li>引申到 <code>BST</code> <code>BBST</code> 等其他扩展结构</li></ul><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>二分法的神奇力量</li><li>各个高级数据结构的存在价值、设计初衷</li><li>数据结构是基本功能</li></ul><h2 id="_04-求斐波那契数列的第-n-值" tabindex="-1"><a class="header-anchor" href="#_04-求斐波那契数列的第-n-值" aria-hidden="true">#</a> 04: 求斐波那契数列的第 n 值</h2><blockquote><p>递归算法会导致运行崩溃</p></blockquote><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>用 Javascript 计算第 n 个斐波那契数列的值，注意时间复杂度。</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>斐波那契数列很好理解</p><ul><li><p><code>f(0) = 0</code></p></li><li><p><code>f(1) = 1</code></p></li><li><p><code>f(n) = f(n - 1) + f(n - 2)</code> 前两个值的和</p></li></ul><h3 id="递归计算" tabindex="-1"><a class="header-anchor" href="#递归计算" aria-hidden="true">#</a> 递归计算</h3><p>但这种方式会导致很多重复计算。</p><p>时间复杂度是 <code>O(2^n)</code> ，爆炸式增长，不可用。（可以试试 <code>n: 100</code> ，程序会卡死）</p><p><img src="`+f+`" alt=""></p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><ul><li>不用递归，用循环</li><li>记录中间结果</li><li>时间复杂度降低到 <code>O(n)</code></li></ul><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h3><p>即，把一个大问题，拆解为不同的小问题，递归向下。</p><p>【注意】一般使用动态规划的思路（递归）分析问题，再转换为循环来解决问题。</p><h3 id="三大算法思维" tabindex="-1"><a class="header-anchor" href="#三大算法思维" aria-hidden="true">#</a> 三大算法思维</h3><ul><li>贪心（递归）</li><li>二分</li><li>动态规划</li></ul><h3 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// /**</span>
<span class="token comment">//  * 斐波那契数列（递归）--不可用，时间复杂度太高</span>
<span class="token comment">//  * @param n n</span>
<span class="token comment">//  */</span>
<span class="token comment">// function fibonacci(n: number): number {</span>
<span class="token comment">//     if (n &lt;= 0) return 0</span>
<span class="token comment">//     if (n === 1) return 1</span>

<span class="token comment">//     return fibonacci(n - 1) + fibonacci(n - 2)</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 斐波那契数列（循环）
 * <span class="token keyword">@param</span> <span class="token parameter">n</span> n
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>

  <span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 记录 n-1 的结果</span>
  <span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 记录 n-2 的结果</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> n1 <span class="token operator">+</span> n2

    <span class="token comment">// 记录中间结果</span>
    n2 <span class="token operator">=</span> n1
    n1 <span class="token operator">=</span> res
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>动态规划的思路</li><li>识别出时间复杂度</li></ul><h2 id="_05-连环问-青蛙跳台阶" tabindex="-1"><a class="header-anchor" href="#_05-连环问-青蛙跳台阶" aria-hidden="true">#</a> 05：连环问：青蛙跳台阶</h2><p>青蛙跳台阶：一只青蛙，一次可以跳 1 个台阶，也可以跳 2 个台阶，问该青蛙跳上 n 级台阶，总共有多少种方式？</p><p>用动态规划分析</p><ul><li>要跳到 跳 1 级台阶，只有一种方式， <code>f(1) = 1</code></li><li>要跳到 跳 2 级台阶，有 2 种方式，<code>f(2) = 2</code></li><li><code>f(n) = f(n - 1) + fn(n - 2)</code> 跳 n 级，可拆分为两个问题 <ul><li>第一次跳，要么 1 级，要么 2 级，只有这两种</li><li>第一次跳 1 级，剩下有 <code>f(n - 1)</code> 种方式</li><li>第一次跳 2 级，剩下有 <code>f(n - 2)</code> 种方式</li></ul></li></ul><p>看公式，和斐波那契数列一样。</p><h2 id="_06-移动-0-到数组的末尾" tabindex="-1"><a class="header-anchor" href="#_06-移动-0-到数组的末尾" aria-hidden="true">#</a> 06: 移动 0 到数组的末尾</h2><blockquote><p>splice 会导致性能问题</p></blockquote><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> <strong>题目</strong></h3><p>定义一个函数，将数组种所有的 <code>0</code> 都移动到末尾，例如输入 <code>[1, 0, 3, 0, 11, 0]</code> 输出 <code>[1, 3, 11, 0, 0, 0]</code>。要求：</p><ul><li><p>只移动 <code>0</code> ，其他数字顺序不变</p></li><li><p>考虑时间复杂度</p></li><li><p>必须在原数组就行操作</p></li></ul><h3 id="如果不限制-必须在原数组修改" tabindex="-1"><a class="header-anchor" href="#如果不限制-必须在原数组修改" aria-hidden="true">#</a> 如果不限制“必须在原数组修改”</h3><ul><li>定义 <code>part1</code> <code>part2</code> 两个空数组</li><li>遍历数组，非 <code>0</code> push 到 <code>part1</code> ，<code>0</code> push 到 <code>part2</code></li><li>返回 <code>part1.concat(part2)</code></li></ul><p>时间复杂度 <code>O(n)</code> 空间复杂度 <code>O(n)</code> ，</p><p>所以，遇到类似问题，要提前问面试官：<strong>是否能在原数组基础上修改？</strong></p><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><h4 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h4><ul><li>遍历数组</li><li>遇到 <code>0</code> 则 push 到数组末尾</li><li>然后用 splice 截取掉当前元素</li></ul><h4 id="分析性能" tabindex="-1"><a class="header-anchor" href="#分析性能" aria-hidden="true">#</a> 分析性能</h4><ul><li>空间复杂度没有问题 <code>O(1)</code></li><li>时间复杂度 <ul><li>看似是 <code>O(n)</code></li><li>但实际上 <code>splice</code> 和 <code>unshift</code> 一样，修改数组结构，时间复杂度是 <code>O(n)</code></li><li>总体看来时间复杂度是 <code>O(n^2)</code>，<strong>不可用</strong></li></ul></li></ul><p>【注意】网上有很多人对这种方式点赞，切不可随意从众，要对思考！</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 移动 0 到数组的末尾（嵌套循环）
 * <span class="token keyword">@param</span> <span class="token parameter">arr</span> number arr
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">moveZero1</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token keyword">let</span> zeroLength <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token comment">// O(n^2)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> zeroLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 本身就有 O(n)</span>
      i<span class="token operator">--</span> <span class="token comment">// 数组截取了一个元素，i 要递减，否则连续 0 就会有错误</span>
      zeroLength<span class="token operator">++</span> <span class="token comment">// 累加 0 的长度</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="功能测试" tabindex="-1"><a class="header-anchor" href="#功能测试" aria-hidden="true">#</a> 功能测试</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token function">moveZero1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化-双指针" tabindex="-1"><a class="header-anchor" href="#优化-双指针" aria-hidden="true">#</a> 优化-双指针</h3><p>思路</p><ul><li>指针 1 指向第一个 0 ，指针 2 指向第一个非 0</li><li>把指针 1 和 指针 2 进行交换，指针继续向后移</li><li>只遍历一次，所以时间复杂度是 <code>O(n)</code></li></ul><p>性能分析</p><ul><li>时间复杂度 <code>O(n)</code></li><li>空间复杂度 <code>O(1)</code></li></ul><p>性能测试，实际对比差距非常大。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 移动 0 到数组末尾（双指针）
 * <span class="token keyword">@param</span> <span class="token parameter">arr</span> number arr
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">moveZero2</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token keyword">let</span> i
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 指向第一个 0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 第一个 0</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> i
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 交换</span>
      <span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n

      j<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>咨询面试官，确认是否必须要修改原数据？</li><li>数组是有序结构，连续存储，不能随意使用 <code>splice</code> <code>unshift</code>等 API</li><li>双指针的思路</li></ul><h2 id="_07-获取字符串中连续最多的字符以及次数" tabindex="-1"><a class="header-anchor" href="#_07-获取字符串中连续最多的字符以及次数" aria-hidden="true">#</a> 07：获取字符串中连续最多的字符以及次数</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>给一个字符串，找出连续最多的字符，以及次数</p><p>例如字符串 <code>&#39;aabbcccddeeee11223&#39;</code> 连续最多的是 <code>e</code> ，4 次。</p><h3 id="传统方式-1" tabindex="-1"><a class="header-anchor" href="#传统方式-1" aria-hidden="true">#</a> 传统方式</h3><p>嵌套循环，找出每个字符的连续次数，并记录比较。</p><p>时间复杂度看似是 <code>O(n^2)</code>，因为是嵌套循环。 <strong>但实际上它的时间复杂度是 <code>O(n)</code>，因为循环中有跳转</strong>。</p><h4 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IRes</span> <span class="token punctuation">{</span>
  char<span class="token operator">:</span> <span class="token builtin">string</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 求连续最多的字符和次数（嵌套循环）
 * <span class="token keyword">@param</span> <span class="token parameter">str</span> str
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findContinuousChar1</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> IRes <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> IRes <span class="token operator">=</span> <span class="token punctuation">{</span>
    char<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    length<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">let</span> tempLength <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 临时记录当前连续字符的长度</span>

  <span class="token comment">// O(n)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tempLength <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 重置</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tempLength<span class="token operator">++</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> j <span class="token operator">===</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不相等，或者已经到了最后一个元素。要去判断最大值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempLength <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span>char <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          res<span class="token punctuation">.</span>length <span class="token operator">=</span> tempLength
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 跳步</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="功能测试-1" tabindex="-1"><a class="header-anchor" href="#功能测试-1" aria-hidden="true">#</a> 功能测试</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;aabbcccddeeee11223&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">findContinuousChar1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h3><ul><li>定义指针 i 和 j. j 不动，i 移动</li><li>如果 i 和 j 的值相等，则 i 继续移动</li><li>直到 i 和 j 的值不相等，记录此时的长度处理。并让 j 追上 i，继续移动指针比较处理</li></ul><h4 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 求连续最多的字符和次数（双指针）
 * <span class="token keyword">@param</span> <span class="token parameter">str</span> str
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findContinuousChar2</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> IRes <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> IRes <span class="token operator">=</span> <span class="token punctuation">{</span>
    char<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    length<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">let</span> tempLength <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 临时记录当前连续字符的长度</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token comment">// O(n)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tempLength<span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> i <span class="token operator">===</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 不相等，或者 i 到了字符串的末尾</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tempLength <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span>char <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        res<span class="token punctuation">.</span>length <span class="token operator">=</span> tempLength
      <span class="token punctuation">}</span>
      tempLength <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// reset</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> i <span class="token comment">// 让 j “追上” i</span>
        i<span class="token operator">--</span> <span class="token comment">// 细节</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更好理解的一个代码解法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findContinuousChar3</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> IRes <span class="token punctuation">{</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    maxNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    maxWord <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">&gt;</span> maxNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxNumber <span class="token operator">=</span> i <span class="token operator">-</span> j
        maxWord <span class="token operator">=</span> str<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      j <span class="token operator">=</span> i
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果到了末尾，长度需要 进行 i- j + 1</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> maxNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxNumber <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span>
        maxWord <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    char<span class="token operator">:</span> maxWord<span class="token punctuation">,</span>
    length<span class="token operator">:</span> maxNumber<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面使用了两个判断，我们可以遍历时多往字符串后面遍历一位，因为最后一位是 undefined,肯定不相等，这样就不用做末尾处理了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findContinuousChar4</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> IRes <span class="token punctuation">{</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    maxNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    maxWord <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 注意：i &lt; str.length + 1</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">&gt;</span> maxNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxNumber <span class="token operator">=</span> i <span class="token operator">-</span> j
        maxWord <span class="token operator">=</span> str<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      j <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    char<span class="token operator">:</span> maxWord<span class="token punctuation">,</span>
    length<span class="token operator">:</span> maxNumber<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能测试" tabindex="-1"><a class="header-anchor" href="#性能测试" aria-hidden="true">#</a> 性能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  str <span class="token operator">+=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;findContinuousChar1&#39;</span><span class="token punctuation">)</span>
<span class="token function">findContinuousChar1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;findContinuousChar1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 125.692ms</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;findContinuousChar2&#39;</span><span class="token punctuation">)</span>
<span class="token function">findContinuousChar2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;findContinuousChar2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 110.623ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络上的其他方式" tabindex="-1"><a class="header-anchor" href="#网络上的其他方式" aria-hidden="true">#</a> 网络上的其他方式</h3><ul><li><p>正则表达式 —— 正则表达式的效率非常低，可进行性能测试（代码 <code>x-reg.ts</code> ）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;100abc&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d+</span><span class="token regex-delimiter">/</span></span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;reg&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;reg&#39;</span><span class="token punctuation">)</span> <span class="token comment">// reg: 36.837ms</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;indexOf&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;indexOf&#39;</span><span class="token punctuation">)</span> <span class="token comment">// indexOf: 4.632ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用对象累计各个字符串的长度，然后求出最大值 —— 增加空间复杂度，面试官不会喜欢</p></li></ul><p>【注意】算法尽量用<strong>基础代码</strong>实现，尽量不要用现成的 API 或语法糖 —— 方便，但你不好直观判断时间复杂度</p><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> <strong>划重点</strong></h3><ul><li><p>注意实际的时间复杂度，不要被代码所迷惑</p></li><li><p>双指针的思路（常用于解决嵌套循环）</p></li><li><p>算法题慎用正则表达式（实际工作数据量不大时，可以使用）</p></li></ul><h2 id="_08-用-js-实现快速排序并说明时间复杂度" tabindex="-1"><a class="header-anchor" href="#_08-用-js-实现快速排序并说明时间复杂度" aria-hidden="true">#</a> 08：用 JS 实现快速排序并说明时间复杂度</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>用 Javascript 实现快速排序，并说明时间复杂度。</p><h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1" aria-hidden="true">#</a> 思路</h3><p>快速排序是基础算法之一，算法思路是固定的</p><ul><li>找到中间位置 <code>midValue</code></li><li>遍历数组，小于 <code>midValue</code> 放在 <code>left</code> ，大于 <code>midValue</code> 放在 <code>right</code></li><li>继续递归，<code>concat</code> 拼接</li></ul><h3 id="细节-获取-midvalue" tabindex="-1"><a class="header-anchor" href="#细节-获取-midvalue" aria-hidden="true">#</a> 细节：获取 midValue</h3><p>代码实现时，获取 midValue 可以通过 <code>splice</code> 和 <code>slice</code> 两种方式</p><p>理论分析，<code>slice</code> 要优于 <code>splice</code> ，因为 <code>splice</code> 会修改原数组。<br> 但实际性能测试发现两者接近。</p><p>但是，即便如此还是倾向于选择 <strong><code>slice</code></strong> —— <strong>因为它不会改动原数组</strong>，类似于函数式编程</p><h3 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析" aria-hidden="true">#</a> 性能分析</h3><ul><li><p>快速排序 时间复杂度 <code>O(n*logn)</code> —— 有遍历，有二分</p></li><li><p>普通的排序算法（如冒泡排序）时间复杂度时 <code>O(n^2)</code></p></li></ul><h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><h4 id="使用-splice" tabindex="-1"><a class="header-anchor" href="#使用-splice" aria-hidden="true">#</a> 使用 splice</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 快速排序（使用 splice）
 * <span class="token keyword">@param</span> <span class="token parameter">arr</span> number arr
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> midValue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 注意：这里不用直接用 length ，而是用 arr.length 。因为 arr 已经被 splice 给修改了</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> midValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 小于 midValue ，则放在 left</span>
      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 大于 midValue ，则放在 right</span>
      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>midValue<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-slice-方案" tabindex="-1"><a class="header-anchor" href="#使用-slice-方案" aria-hidden="true">#</a> 使用 slice 方案</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 快速排序（使用 slice）
 * <span class="token keyword">@param</span> <span class="token parameter">arr</span> number arr
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">quickSort2</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr

  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> midValue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> midIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> midValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 小于 midValue ，则放在 left</span>
        left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 大于 midValue ，则放在 right</span>
        right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">quickSort2</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>midValue<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort2</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="功能测试-2" tabindex="-1"><a class="header-anchor" href="#功能测试-2" aria-hidden="true">#</a> 功能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">quickSort1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">quickSort2</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能测试-1" tabindex="-1"><a class="header-anchor" href="#性能测试-1" aria-hidden="true">#</a> 性能测试</h3><h4 id="以上实现方式性能比较" tabindex="-1"><a class="header-anchor" href="#以上实现方式性能比较" aria-hidden="true">#</a> 以上实现方式性能比较</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;quickSort1&#39;</span><span class="token punctuation">)</span>
<span class="token function">quickSort1</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;quickSort1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// quickSort1: 106.125ms</span>

<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;quickSort2&#39;</span><span class="token punctuation">)</span>
<span class="token function">quickSort2</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;quickSort2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// quickSort2: 85.003ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单独比较-splice-和-slice" tabindex="-1"><a class="header-anchor" href="#单独比较-splice-和-slice" aria-hidden="true">#</a> 单独比较 splice 和 slice</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;splice&#39;</span><span class="token punctuation">)</span>
arr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;splice&#39;</span><span class="token punctuation">)</span> <span class="token comment">// splice: 0.153ms</span>

<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;slice&#39;</span><span class="token punctuation">)</span>
arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;slice&#39;</span><span class="token punctuation">)</span> <span class="token comment">// slice: 0.016ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="splice-和-slice-没有区分出来" tabindex="-1"><a class="header-anchor" href="#splice-和-slice-没有区分出来" aria-hidden="true">#</a> splice 和 slice 没有区分出来</h4><ul><li>算法本身的时间复杂度就够高 <code>O(n * logn)</code></li><li>外加，<code>splice</code>是逐步二分之后执行的，二分会快速消减数量级</li><li>如果单独比较 <code>splice</code> 和 <code>slice</code>，效果会比较明显</li></ul><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><ul><li>排序算法（基本功）</li><li>二分法的时间复杂度</li><li>注意数组的操作（ <code>splice</code> vs <code>slice</code> ）</li></ul><h2 id="_09-获取-1-10000-之前所有的对称数-回文数" tabindex="-1"><a class="header-anchor" href="#_09-获取-1-10000-之前所有的对称数-回文数" aria-hidden="true">#</a> 09: 获取 1-10000 之前所有的对称数（回文数)</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p>打印 1-10000 之间的对称数(回文)</p><p>例如： 0, 1-9, 11, 22, 101, 232, 1221,</p><h3 id="思路-1-使用数组反转" tabindex="-1"><a class="header-anchor" href="#思路-1-使用数组反转" aria-hidden="true">#</a> 思路 1：使用数组反转</h3><ul><li>数字转换为字符串</li><li>字符串转换为数组 reverse ，再 join 生成字符串</li><li>比较前后的字符串</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findPalindromeNumbers1</span><span class="token punctuation">(</span>max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 转换为字符串，转换为数组，再反转，比较</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">===</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-2-使用字符串头尾比较" tabindex="-1"><a class="header-anchor" href="#思路-2-使用字符串头尾比较" aria-hidden="true">#</a> 思路 2：使用字符串头尾比较</h3><ul><li>数字转换为字符串</li><li>字符串头尾比较 -（也可以使用<strong>栈</strong>，像括号匹配，但要注意奇偶数）</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 查询 1-max 的所有对称数（字符串前后比较）
 * <span class="token keyword">@param</span> <span class="token parameter">max</span> 最大值
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findPalindromeNumbers2</span><span class="token punctuation">(</span>max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length

    <span class="token comment">// 字符串头尾比较</span>
    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">let</span> startIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 字符串开始</span>
    <span class="token keyword">let</span> endIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 字符串结束</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 继续比较</span>
        startIndex<span class="token operator">++</span>
        endIndex<span class="token operator">--</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-3-生成反转数-更推荐" tabindex="-1"><a class="header-anchor" href="#思路-3-生成反转数-更推荐" aria-hidden="true">#</a> 思路 3：生成反转数(更推荐)</h3><ul><li>通过 <code>%</code> 和 <code>Math.floor</code> 将数字生成一个反转数</li><li>比较前后的数字</li><li>(全程操作数字，没有字符串类型)</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 查询 1-max 的所有对称数（翻转数字）
 * <span class="token keyword">@param</span> <span class="token parameter">max</span> 最大值
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findPalindromeNumbers3</span><span class="token punctuation">(</span>max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> i
    <span class="token keyword">let</span> rev <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 存储翻转数</span>

    <span class="token comment">// 生成翻转数</span>
    <span class="token comment">// 比如，当 i = 123 时</span>
    <span class="token comment">// 第一次，n = 123, rev = 0,执行后， rev = 3 n = 12</span>
    <span class="token comment">// 第二次，执行后，rev = 30 + 2 = 32 n = 1</span>
    <span class="token comment">// 第三次，执行后，rev = 320 + 1 = 321, n = 0, while 结束</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rev <span class="token operator">=</span> rev <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
      n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> rev<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="功能测试-3" tabindex="-1"><a class="header-anchor" href="#功能测试-3" aria-hidden="true">#</a> 功能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">findPalindromeNumbers1</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">findPalindromeNumbers2</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">findPalindromeNumbers3</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// [ 1,2,3,4,5,6,7,8,9,11,22,33,44,55,66,77,88,99,101,111,121,131,141,151,161,171,181,191 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能测试-2" tabindex="-1"><a class="header-anchor" href="#性能测试-2" aria-hidden="true">#</a> 性能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers1&#39;</span><span class="token punctuation">)</span>
<span class="token function">findPalindromeNumbers1</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers1&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// findPalindromeNumbers1: 237.039ms</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers2&#39;</span><span class="token punctuation">)</span>
<span class="token function">findPalindromeNumbers2</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers2&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// findPalindromeNumbers2: 38.668ms</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers3&#39;</span><span class="token punctuation">)</span>
<span class="token function">findPalindromeNumbers3</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;findPalindromeNumbers3&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// findPalindromeNumbers3: 32.306ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能分析-1" tabindex="-1"><a class="header-anchor" href="#性能分析-1" aria-hidden="true">#</a> 性能分析</h3><ul><li><p>时间复杂度看似相当，都是 <code>O(n)</code></p></li><li><p>但 方案 1 涉及到了数组的转换和操作，就需要耗费大量的时间</p><ul><li><p>数组 reverse 需要时间</p></li><li><p>数组和字符串的转换需要时间</p></li></ul></li><li><p>方案 2、3 比较，数字操作最快。电脑的原型就是计算器，所以处理数字是最快的。</p></li><li><p>思路 2 要用栈，不合适。因为栈一般用数组实现，会慢</p></li></ul><h3 id="划重点-6" tabindex="-1"><a class="header-anchor" href="#划重点-6" aria-hidden="true">#</a> 划重点</h3><ul><li>尽量不要使用内置 API ，不好判断时间复杂度</li><li>尽量不要转换数据格式，尤其注意数组（有序结构，不能乱来～）</li><li>数字操作最快，其次是字符串</li></ul><h2 id="_10-如何实现高效的英文单词前缀匹配" tabindex="-1"><a class="header-anchor" href="#_10-如何实现高效的英文单词前缀匹配" aria-hidden="true">#</a> 10：如何实现高效的英文单词前缀匹配</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p>请描述算法思路，不要求写出代码。</p><ul><li>先给一个英文单词库（数组），里面有几十万个英文单词</li><li>再给一个输入框，输入字母，搜索单词</li><li>输入英文字母，要实时给出搜索结果，按前缀匹配</li></ul><p>要求</p><ul><li>尽量快</li><li>不要使用防抖（输入过程中就及时识别）</li></ul><h3 id="常规思路" tabindex="-1"><a class="header-anchor" href="#常规思路" aria-hidden="true">#</a> 常规思路</h3><p><code>keyup</code> 之后，拿当前的单词，遍历词库数组，通过 <code>indexOf</code> 来前缀匹配。</p><p>性能分析</p><ul><li>算法思路的时间复杂度是 <code>O(n)</code></li><li>外加 <code>indexOf</code> 也需要时间复杂度。实际的复杂度要超过 <code>O(n)</code></li></ul><h3 id="优化数据结构" tabindex="-1"><a class="header-anchor" href="#优化数据结构" aria-hidden="true">#</a> 优化数据结构</h3><p>英文字母一共 26 个，可按照第一个字母分组，分为 26 组。这样搜索次数就减少很多。</p><p>可按照第一个字母分组，那也可以按照第二个、第三个字母分组</p><p>即，在程序初始化时，把数组变成一个树，然后按照字母顺序在树中查找。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;abs&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;arab&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;array&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;arrow&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;boot&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;boss&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 更多...</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">t</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 更多...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样时间复杂度就大幅度减少，从 <code>O(n)</code> 降低到 <code>O(m)</code> （<code>m</code> 是单词的最大长度）</p><h3 id="性能分析-2" tabindex="-1"><a class="header-anchor" href="#性能分析-2" aria-hidden="true">#</a> 性能分析</h3><ul><li>如遍历数组，时间复杂度至少 O(n)起步（n 是数组长度）</li><li>而改为树，时间复杂度降低到 O(m)（m 是单词的长度）</li><li>PS: 哈希表（对象）通过 key 查询，时间复杂度是 O(1)</li></ul><h3 id="划重点-7" tabindex="-1"><a class="header-anchor" href="#划重点-7" aria-hidden="true">#</a> 划重点</h3><ul><li>考虑优化原始数据结构（需要和面试官沟通确认）</li><li>对于已经明确的范围的数据（如 26 个英文字母），可以考虑使用哈希表(对象)</li><li>以空间换时间，定义数据结构最重要</li></ul><h2 id="_11-用-js-实现数字千分位格式化" tabindex="-1"><a class="header-anchor" href="#_11-用-js-实现数字千分位格式化" aria-hidden="true">#</a> 11：用 JS 实现数字千分位格式化</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> <strong>题目</strong></h3><ul><li><p>将数字按照千分位生成字符串，即每三位加一个逗号。不考虑小数。</p></li><li><p>如输入数字 <code>78100200300</code> 返回字符串 <code>&#39;78,100,200,300&#39;</code></p></li><li><p>注意：逆序判断</p></li></ul><h3 id="常规思路-1" tabindex="-1"><a class="header-anchor" href="#常规思路-1" aria-hidden="true">#</a> 常规思路</h3><ul><li>思路 1：转换为数组，reverse, 每 3 位拆分</li><li>思路 2：使用正则表达式（工作中可以使用，算法面试中不建议使用）</li><li>思路 3：使用字符串拆分</li></ul><h4 id="思路-1-转换为数组" tabindex="-1"><a class="header-anchor" href="#思路-1-转换为数组" aria-hidden="true">#</a> 思路 1：转换为数组</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 千分位格式化（使用数组）
 * <span class="token keyword">@param</span> <span class="token parameter">n</span> number
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">format1</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 只考虑整数</span>

  <span class="token keyword">const</span> s <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> prev
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> val <span class="token operator">+</span> prev
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="思路-2-使用正则表达式" tabindex="-1"><a class="header-anchor" href="#思路-2-使用正则表达式" aria-hidden="true">#</a> 思路 2：使用正则表达式</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">toThousands</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(?:\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1,&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">toThousands</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">//123</span>
<span class="token function">toThousands</span><span class="token punctuation">(</span><span class="token number">1234546</span><span class="token punctuation">)</span> <span class="token comment">//123,456</span>
<span class="token function">toThousands</span><span class="token punctuation">(</span><span class="token number">12345678</span><span class="token punctuation">)</span> <span class="token comment">//12,345,678</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="思路-3-使用字符串拆分-推荐" tabindex="-1"><a class="header-anchor" href="#思路-3-使用字符串拆分-推荐" aria-hidden="true">#</a> 思路 3：使用字符串拆分（推荐）</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 数字千分位格式化（字符串分析）
 * <span class="token keyword">@param</span> <span class="token parameter">n</span> number
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">format2</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 只考虑整数</span>

  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> length <span class="token operator">-</span> i
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果到了首字母，直接拼接即可，</span>
        res <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> res
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 否则需要拼接分隔符 ,</span>
        res <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> res
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果遍历过的长度不是三位的倍数，则直接相加即可</span>
      res <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> res
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><h4 id="功能测试-4" tabindex="-1"><a class="header-anchor" href="#功能测试-4" aria-hidden="true">#</a> 功能测试</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">10201004050</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;format1&#39;</span><span class="token punctuation">,</span> <span class="token function">format1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;format2&#39;</span><span class="token punctuation">,</span> <span class="token function">format2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能分析-3" tabindex="-1"><a class="header-anchor" href="#性能分析-3" aria-hidden="true">#</a> 性能分析</h3><ul><li>数组转换，影响性能</li><li>正则表达式，性能较差</li><li>操作字符串，性能较好(推荐)</li></ul><h3 id="划重点-8" tabindex="-1"><a class="header-anchor" href="#划重点-8" aria-hidden="true">#</a> 划重点</h3><ul><li>从尾向头计算，和日常遍历的顺序相反</li><li>慎用数组操作，尽量不要转换数据结构</li><li>慎用正则表达式</li></ul><h2 id="_12-切换字母大小写" tabindex="-1"><a class="header-anchor" href="#_12-切换字母大小写" aria-hidden="true">#</a> 12：切换字母大小写</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>切换字母大小写，输入 <code>&#39;aBc&#39;</code> 输出 <code>&#39;AbC&#39;</code></p><h3 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1" aria-hidden="true">#</a> 分析</h3><p>需要判断字母是大写还是小写</p><ul><li>正则表达式</li><li><code>charCodeAt</code> 获取 ASCII 码（ASCII 码表，可以网上搜索）</li></ul><h3 id="答案-4" tabindex="-1"><a class="header-anchor" href="#答案-4" aria-hidden="true">#</a> 答案</h3><h4 id="思路-1-正则表达式" tabindex="-1"><a class="header-anchor" href="#思路-1-正则表达式" aria-hidden="true">#</a> 思路 1：正则表达式</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 切换字母大小写（正则表达式）
 * <span class="token keyword">@param</span> <span class="token parameter">s</span> str
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">switchLetterCase1</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="思路-2-ascii-编码" tabindex="-1"><a class="header-anchor" href="#思路-2-ascii-编码" aria-hidden="true">#</a> 思路 2：ASCII 编码</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 切换字母大小写（ASCII 编码）
 * <span class="token keyword">@param</span> <span class="token parameter">s</span> str
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">switchLetterCase2</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">const</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&gt;=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&gt;=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res <span class="token operator">+=</span> c
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="功能测试-5" tabindex="-1"><a class="header-anchor" href="#功能测试-5" aria-hidden="true">#</a> 功能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;100aBcD$#xYz&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">switchLetterCase1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">switchLetterCase2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能测试-3" tabindex="-1"><a class="header-anchor" href="#性能测试-3" aria-hidden="true">#</a> 性能测试</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str <span class="token operator">=</span>
  <span class="token string">&#39;100aBcD$#xYz100aBcD$#xYz100aBcD$#xYz100aBcD$#xYz100aBcD$#xYz100aBcD$#xYz&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;switchLetterCase1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">switchLetterCase1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;switchLetterCase1&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// switchLetterCase1: 283.361ms</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;switchLetterCase2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">switchLetterCase2</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;switchLetterCase2&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// switchLetterCase2: 144.54ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能分析-4" tabindex="-1"><a class="header-anchor" href="#性能分析-4" aria-hidden="true">#</a> 性能分析</h3><ul><li>正则表达式性能较差</li><li>ASCII 码性能较好</li></ul><h3 id="划重点-9" tabindex="-1"><a class="header-anchor" href="#划重点-9" aria-hidden="true">#</a> 划重点</h3><ul><li>慎用正则表达式</li><li>常见字符的 ASCII 码最好掌握</li></ul><h2 id="_13-为什么-0-1-0-2-0-3" tabindex="-1"><a class="header-anchor" href="#_13-为什么-0-1-0-2-0-3" aria-hidden="true">#</a> 13: 为什么 0.1+0.2!==0.3</h2><h3 id="题目-9" tabindex="-1"><a class="header-anchor" href="#题目-9" aria-hidden="true">#</a> 题目</h3><p>为何 <code>0.1 + 0.2 !== 0.3</code></p><h3 id="答案-5" tabindex="-1"><a class="header-anchor" href="#答案-5" aria-hidden="true">#</a> 答案</h3><ul><li><p>计算机用二进制存储数据。</p></li><li><p>整数用二进制没有误差，如 <code>9</code> 表示为 <code>1001</code> 。</p></li><li><p>而有的小数无法用二进制表示，如 <code>0.2</code> 用二进制表示就是 <code>1.10011001100...</code></p></li><li><p>所以，累加小数时会出现误差。</p></li><li><p>这不仅仅是 JS ，所有的计算机语言都这样。</p></li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3>`,271),x={href:"https://www.npmjs.com/package/mathjs",target:"_blank",rel:"noopener noreferrer"},_=e('<h2 id="_14-扩展-总结前端开发中常见的数据结构" tabindex="-1"><a class="header-anchor" href="#_14-扩展-总结前端开发中常见的数据结构" aria-hidden="true">#</a> 14: 扩展：总结前端开发中常见的数据结构</h2><p>前端开发中常见的数据结构</p><h3 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack" aria-hidden="true">#</a> 栈 Stack</h3><p>栈 Stack 是一种“先进后出”的数据结构。</p><p><img src="'+t+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组实现 栈</span>
<span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 压栈</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列 Queue</h3><p>队列 Queue 是一种“先进先出”的数据结构。</p><p><img src="`+o+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组实现 队列</span>
<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 入队</span>
queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 出队</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表-linked-list" tabindex="-1"><a class="header-anchor" href="#链表-linked-list" aria-hidden="true">#</a> 链表 Linked list</h3><p>链表不是连续的数据结构，而是由一系列的节点组成，节点之间通过指针连接。</p><p><img src="`+c+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 链表节点的数据结构</span>
<span class="token keyword">interface</span> <span class="token class-name">IListNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  next<span class="token operator">:</span> IListNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="树-tree" tabindex="-1"><a class="header-anchor" href="#树-tree" aria-hidden="true">#</a> 树 Tree</h3><p>树，是一种有序的层级结构。每个节点下面可以有若干个子节点。例如常见的 DOM 树。</p><p><img src="`+g+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 树节点的数据结构</span>
<span class="token keyword">interface</span> <span class="token class-name">ITreeNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  children<span class="token operator">:</span> ITreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树-binary-tree" tabindex="-1"><a class="header-anchor" href="#二叉树-binary-tree" aria-hidden="true">#</a> 二叉树 Binary Tree</h3><p>二叉树，首先它是一棵树，其次它的每个节点，最多有两个子节点，分别为 <code>left</code> 和 <code>right</code></p><p><img src="`+s+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 二叉树节点的数据结构</span>
<span class="token keyword">interface</span> <span class="token class-name">IBinaryTreeNode</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span>
  left<span class="token operator">:</span> IBinaryTreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
  right<span class="token operator">:</span> IBinaryTreeNode <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-扩展-算法时间复杂度" tabindex="-1"><a class="header-anchor" href="#_15-扩展-算法时间复杂度" aria-hidden="true">#</a> 15: 扩展：算法时间复杂度</h2><p>本文总结一下前端算法常用的时间复杂度，对比学习。</p><p><img src="`+i+'" alt=""></p><h3 id="o-1" tabindex="-1"><a class="header-anchor" href="#o-1" aria-hidden="true">#</a> O(1)</h3><p>代码就是平铺直叙的执行，没有任何循环。</p><h3 id="o-logn" tabindex="-1"><a class="header-anchor" href="#o-logn" aria-hidden="true">#</a> O(logn)</h3><p>有循环，但其中使用了二分法，例如：二分查找算法</p><p>二分法是非常重要的算法思维，它可以极大的减少复杂度，而且计算量越大、减少的越明显。可以看看本文上面的图。</p><h3 id="o-n" tabindex="-1"><a class="header-anchor" href="#o-n" aria-hidden="true">#</a> O(n)</h3><p>普通的循环。</p><h3 id="o-n-logn" tabindex="-1"><a class="header-anchor" href="#o-n-logn" aria-hidden="true">#</a> O(n*logn)</h3><p>嵌套循环，一层是普通循环，一层有二分算法。例如：快速排序算法。</p><h3 id="o-n-2" tabindex="-1"><a class="header-anchor" href="#o-n-2" aria-hidden="true">#</a> O(n^2)</h3><p>两个普通循环的嵌套，例如常见的冒泡排序。</p><h2 id="_16-总结" tabindex="-1"><a class="header-anchor" href="#_16-总结" aria-hidden="true">#</a> 16: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解前端数据结构和算法的面试题。 包含了数组、栈、队列、链表、二叉树这些常见的数据结构。 常用的算法思维如贪婪、二分、动态规划，以及如何计算时间复杂度。</p><h3 id="划重点-10" tabindex="-1"><a class="header-anchor" href="#划重点-10" aria-hidden="true">#</a> 划重点</h3><ul><li>有序数据考虑用二分</li><li>双指针可以解决嵌套循环</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>注意区分逻辑结构和物理结构，否则思维会很混乱</li><li>要有“算法敏感度”，条件反射般的根据数据结构分析时间复杂度</li></ul>',43);function O(j,I){const p=u("ExternalLinkIcon");return r(),d("div",null,[w,n("ul",null,[n("li",null,[a("可以使用第三方库 "),n("a",x,[a("https://www.npmjs.com/package/mathjs"),k(p)])])]),_])}const S=l(y,[["render",O],["__file","index-03.html.vue"]]);export{S as default};
