import{_ as p,M as t,p as c,q as i,R as s,t as n,N as o,a1 as a}from"./framework-e8cb8151.js";const l="/assets/5cd962f40001a7a706400360-02d5d0ce.jpg",d="/assets/image-20230902112643430-481a6963.png",r="/assets/image-20230902112700437-edf7b5b9.png",u="/assets/image-20230902112709122-14b5313a.png",k="/assets/image-20230902112717979-e1bbd894.png",m={},b=a('<h1 id="_04-使用-webpack-cli-体验零配置打包" tabindex="-1"><a class="header-anchor" href="#_04-使用-webpack-cli-体验零配置打包" aria-hidden="true">#</a> 04-使用 webpack-cli 体验零配置打包</h1><p><img src="'+l+`" alt="img"></p><blockquote><p>人生太短，要干的事太多，我要争分夺秒。 ——爱迪生</p></blockquote><p>下面通过搭建一个使用 Webpack 打包的项目，来体验下 Webpack 的零配置打包。</p><h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h2><p>首先是创建项目，创建一个名字为<code>zero-config</code>的文件夹，并且进入文件夹使用<code>npm init</code>进行初始化：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建目录并且进入</span>
<span class="token function">mkdir</span> zero-config <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> <span class="token variable">$_</span>
<span class="token comment"># 初始化</span>
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token comment"># 安装 webpack 和 webpack-cli到开发依赖</span>
<span class="token function">npm</span> i webpack --save-dev
<span class="token function">npm</span> i webpack-cli --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建目录" tabindex="-1"><a class="header-anchor" href="#创建目录" aria-hidden="true">#</a> 创建目录</h2><p>新建<code>src</code>目录，放置我们的源码，目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>└── src
    ├── hello.js
    ├── index.js
    └── world.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello.js</code>、 <code>world.js</code>和<code>index.js</code>三个文件内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment">// world</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token comment">// index</span>
<span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./world&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hello<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>world<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们使用 <code>webpack</code>命令（如果全局安装 webpack-cli 包的话）可以直接体验 Webpack 打包效果。</p>`,13),v={href:"https://www.npmjs.com/package/npx",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"node_modules",-1),h=s("code",null,"bin",-1),w=s("code",null,"npx webpack -v",-1),j=s("code",null,"node ./node_modules/webpack/bin/webpack -v",-1),_=s("code",null,"npm install -g npx",-1),x=a(`<h2 id="npm-scripts" tabindex="-1"><a class="header-anchor" href="#npm-scripts" aria-hidden="true">#</a> npm scripts</h2><p>下面，我们打开<code>package.json</code>文件，然后添加<code>scripts</code>字段：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完保存后，在项目目录下执行<code>npm run build</code>，看到如下执行结果：</p><p><img src="`+d+`" alt="image-20230902112643430"></p><p>执行成功，index.js 文件被打包到了<code>dist</code>文件夹下了，同时提示我们默认使用了<code>production</code> mode，即生产环境，打开<code>dist/main.js</code>，里面的代码的确是被压缩的，说明是生产环境打包；下面继续修改<code>package.json</code>添加<code>scripts</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode development&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候在执行<code>npm run dev</code>，结果如下：</p><p><img src="`+r+`" alt="image-20230902112700437"></p><p>嗯，这次没有压缩，而且也不报 warning 了！</p><blockquote><p>Tips: Webpack 的打包环境有 production 和 development 两种，分别对应生产环境和开发环境，生产环境默认配置包括压缩等常用的配置。</p></blockquote><h2 id="修改打包输出目录" tabindex="-1"><a class="header-anchor" href="#修改打包输出目录" aria-hidden="true">#</a> 修改打包输出目录</h2><p>通过上面的演示，我们得到下面的结论：</p><ol><li>Webpack 默认的入口文件是<code>src/index.js</code>；</li><li>Webpack 的默认输出目录是<code>dist/main.js</code>。</li></ol><p>我们如果要修改 Webpack 的默认输出目录，需要用到 Webpack 命令的<code>--output</code>，我们将上面的 npm scripts 做下修改：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode development --output-path ./output/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production --output-path ./output/main.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候在执行<code>npm run build</code>，则 webpack 会将打包之后的文件输出到<code>output/main.js</code>路径了：</p><p><img src="`+u+`" alt="image-20230902112709122"></p><h2 id="使用-loader-来做-es6-语法转换" tabindex="-1"><a class="header-anchor" href="#使用-loader-来做-es6-语法转换" aria-hidden="true">#</a> 使用 Loader 来做 ES6 语法转换</h2><p>现在，我们将之前的代码用的是 ES6 的 Module 语法进行重写，这在普通的浏览器执行起来可能会因为语法「太先进」而报错，所以我们需要使用 Babel 来对 ES6 语法的代码进行转换。</p><p>在 src 下新建一个 es 的文件夹，将 ES6 语法的代码放进去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.es.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// world.es.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// index.es.js</span>
<span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">&#39;./hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> world <span class="token keyword">from</span> <span class="token string">&#39;./world&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hello<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>world<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是需要修改下<code>package.json</code>的 scripts 字段，将默认打包的入口文件（<code>src/index.js</code>）修改为<code>src/es/index.js</code>地址：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode development ./src/es/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production ./src/es/index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候执行<code>npm run dev</code>的打包出来的是 ES6 语法的代码，在一些老点的浏览器或者移动终端浏览器中都会报错，这时候就需要 Babel 来转换 ES6 语法了。</p><h2 id="通过-babel-来转换-es6-语法" tabindex="-1"><a class="header-anchor" href="#通过-babel-来转换-es6-语法" aria-hidden="true">#</a> 通过 Babel 来转换 ES6 语法</h2><p>Babel 是 JavaScript 的一个编译器，能够将 ES6+ 语法转换为 ES5 语法，保证浏览器的兼容性，后面的章节还会继续介绍 Babel 的用法，这里为了快速入门 webpack 所以从简介绍。</p><p>Loader 是 Webpack 中的一个重要概念，通过 Loader 我们可以做一些跟文件自身属性相关的一些操作，比如这里做的 ES6 语法转换，用到的是<code>babel-loader</code>，这个 Loader 依赖<code>@babel/core</code>和<code>@babel/preset-env</code>。</p><p>所以首先安装它们：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @babel/core babel-loader @babel/preset-env --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在项目的根目录下，创建一个 babel 的配置文件<code>.babelrc</code>，内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 babel-loader，可以使用 webpack 配置文件，来指定对应的文件需要怎样的 Loader 处理，新建 <code>webpack.config.js</code>文件内容如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>module.exports = <span class="token punctuation">{</span>
  module<span class="token operator">:</span> <span class="token punctuation">{</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">//设置loader</span>
      <span class="token punctuation">{</span>
        test<span class="token operator">:</span> /\\.js$/<span class="token punctuation">,</span> <span class="token comment">//已作为js扩展名这样类型的文件</span>
        exclude<span class="token operator">:</span> /node_modules/<span class="token punctuation">,</span> <span class="token comment">//排除node_modules文件夹</span>
        use<span class="token operator">:</span> <span class="token punctuation">{</span>
          loader<span class="token operator">:</span> &#39;babel-loader&#39;<span class="token punctuation">,</span> <span class="token comment">//转换成es5</span>
          options<span class="token operator">:</span> <span class="token punctuation">{</span>
            presets<span class="token operator">:</span> <span class="token punctuation">[</span>&#39;@babel/preset-env&#39;<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置编译的规则</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>c
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完毕，执行<code>npm run build</code>，看下 <code>dist/main.js</code>的文件，就是转换后的 ES5 语法的打包结果了。</p><p><img src="`+k+'" alt="image-20230902112717979"></p><blockquote><p>Tips：</p><p>下面介绍几个 webpack-cli 的小技巧：</p><p>1.当项目逐渐变大或者使用生产环境打包的时候，Webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色： <code>webpack --progress --color</code>；</p><ol start="2"><li>Webpack 的配置比较复杂，很容出现错误，如果出问题，会打印一些简单的错误信息，我们还可以通过参数 <code>--display-error-details</code> 来打印错误详情：<code>webpack --display-error-details</code>；<strong>（最新版本已经弃用）</strong></li></ol><p>3.如果不想每次修改模块后都重新编译，那么可以启动监听模式，开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的：<code>webpack --watch</code>；</p><ol start="4"><li>webpack-cli 支持两个快捷选项：<code>-d</code> 和 <code>-p</code> ，分别代表一些常用的开发环境和生产环境的打包。<strong>（已被废弃）</strong></li></ol></blockquote><h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5>',38),q={href:"https://webpack.js.org/api/cli",target:"_blank",rel:"noopener noreferrer"},f=a("<ul><li><strong>–config</strong>：指定一个 Webpack 配置文件的路径；</li><li><strong>–mode</strong>：指定打包环境的 mode，取值为<code>development</code>和<code>production</code>，分别对应着开发环境和生产环境；</li><li><strong>–json</strong>：输 mode 出 Webpack 打包的结果，可以使用<code>webpack --json &gt; stats.json</code>方式将打包结果输出到指定的文件；</li><li><strong>–progress</strong>：显示 Webpack 打包进度；</li><li><strong>–watch, -w</strong>：watch 模式打包，监控文件变化之后重新开始打包；</li><li><strong>–color, --colors<code>/</code>–no-color, --no-colors</strong>：控制台输出的内容是否开启颜色；</li><li><strong>–hot</strong>：开启 Hot Module Replacement 模式，后面会详细介绍；</li><li><strong>—profile</strong>：会详细的输出每个环节的用时（时间），方便排查打包速度瓶颈。</li></ul>",1);function y(W,E){const e=t("ExternalLinkIcon");return c(),i("div",null,[b,s("blockquote",null,[s("p",null,[n("TIPS: "),s("a",v,[n("npx"),o(e)]),n(" 是一个方便开发者访问 "),g,n(" 内的 "),h,n(" 命令行的小工具，"),w,n(" 相当于执行了 "),j,n(" ，npx 在开发中非常方便，推荐安装："),_,n(" 。")])]),x,s("p",null,[n("至此，我们已经学习并且演示了使用 webpack-cli 命令来完成 Webpack 的零配置打包，后面章节我们继续介绍 Webpack 的打包配置。webpack-cli 命令的选项比较多，详细可以通过 "),s("a",q,[n("webpack-cli 的文档"),o(e)]),n("进行查阅，这里总结我们日常用的最多的几个选项（options）：")]),f])}const B=p(m,[["render",y],["__file","index-04.html.vue"]]);export{B as default};
