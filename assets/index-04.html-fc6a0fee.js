import{_ as p,M as o,p as c,q as l,R as s,t as n,N as e,a1 as t}from"./framework-e8cb8151.js";const i={},r=t(`<h1 id="_04-响应系统-初见-reactivity-模块" tabindex="-1"><a class="header-anchor" href="#_04-响应系统-初见-reactivity-模块" aria-hidden="true">#</a> 04-响应系统-初见 reactivity 模块</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01：前言</h2><p>从本章开始我们将开始实现<code>Vue3</code>中的<code>reactivity</code>模块，该模块中，将会利用我们上一章中学到的知识实现响应性数据，如</p><ol><li><code>reactive</code></li><li><code>ref</code></li><li><code>computed</code></li><li><code>watch</code></li><li>等等</li></ol><p>在这些代码的的实现中，我们将会参考<code>Vue</code>的源代码，并在其基础上进行一些适当的<code>简化</code>和<code>修改</code>。以此来帮助大家掌握<code>vue3</code>中响应式的核心逻辑</p><p>那么明确好了这些内容之后，接下来就让我们进入到响应式的实现之中吧</p><h2 id="_02-源码阅读-reacitve-的响应性-跟踪-vue3-源码实现逻辑" tabindex="-1"><a class="header-anchor" href="#_02-源码阅读-reacitve-的响应性-跟踪-vue3-源码实现逻辑" aria-hidden="true">#</a> 02：源码阅读：reacitve 的响应性，跟踪 Vue3 源码实现逻辑</h2><p>我们知道在<code>vue</code>中想要实现响应式是数据，拥有两种方式：</p><ol><li><code>reactive</code></li><li><code>ref</code></li></ol><p>在第三章节中，我们在<code>vue</code>的源码中，创建了<code>packages/vue/example/mine/reactive.html</code>测试实例，在该实例中，我们通过<code>reactive</code>方法创建了一个响应式数据，通过<code>effect</code>注册了一个函数</p><p>那么下面，我们就跟踪当前的代码，来详细看看 vue 内部到底做了什么？</p><ol><li><code>reactive</code>做了什么</li><li><code>effect</code>是什么</li></ol><p>明确好了之后，那么下面我们来去看</p><h3 id="reactive-方法" tabindex="-1"><a class="header-anchor" href="#reactive-方法" aria-hidden="true">#</a> reactive 方法</h3><ol><li>触发<code>reactive</code>方法</li><li>创建<code>reactive</code>对象：<code>return createReactveiObejcte</code></li><li>进入<code>new Proxy</code><ol><li>第一个参数<code>target</code>: 为传入的对象</li><li>第二个参数<code>handler</code>: <code>TargetType.COLLECTION = 2</code>， <code>tragetType = 1</code>，所以 <code>handler</code>为<code>baseHandlers</code></li><li>那这个<code>baseHandlers</code>是什么呢？</li></ol></li><li>在<code>rective</code>方法中可知，<code>baseHandlers</code>是触发<code>createReactiveObject</code>传递的第三个参数：<code>mutableHandlers</code></li><li>而<code>mutableHandlers</code>则是<code>pacakages/reactivity/scr/baseHandler.ts</code>中导出的对象</li><li>所以我们到<code>packages/reactivity/src/baseHandlers.ts</code>中，为他的<code>get(createGetter)</code>和<code>set(createSetter)</code>分别打入一个断点</li><li>我们知道<code>get</code>和<code>set</code>会在<code>取值</code>和<code>赋值</code>时触发，所以此时这两个断点<code>不会执行</code></li><li>最后<code>reactive</code>方法内执行了<code>proxyMap.set(target, proxy)</code>方法</li><li>最后返回了代理对象</li><li>那么至此<code>reactive</code>方法执行完成</li></ol><p>由以上执行逻辑可知，对于<code>reactive</code>方法而言，其实做的事情非常简单</p><ol><li>创建了<code>proxy</code></li><li>把<code>proxy</code>加到了<code>proxyMap</code>里面</li><li>最后返回了<code>proxy</code></li></ol><h3 id="effect" tabindex="-1"><a class="header-anchor" href="#effect" aria-hidden="true">#</a> effect</h3><p>那么接下来我们分析<code>effect</code></p><ol><li><p>在<code>packages/reactivty/src/effect.ts</code>第 170 行可以找到<code>effect</code>方法，在这里给一个断点</p></li><li><p>执行<code>new ReactiveEffect(fn)</code>,而其中的<code>fn</code>就是我们传入的匿名函数</p><ol><li>这里涉及到了一个类<code>ReactiveEffect</code></li><li>查看该类可知，内部实现了两个方法 <ol><li><code>run</code></li><li><code>stop</code></li></ol></li><li>我们分别为 以上两个方法<strong>增加断点</strong></li></ol></li><li><p>代码继续进行</p></li><li><p>可以发现执行了<code>run</code>方法，进入方法内部</p><ol><li><p>执行了<code>activeEffect = this</code>,赋值完成之后，<code>activeEffect</code>为<strong>传入的匿名函数 fn</strong></p></li><li><p>然后执行 <code>return this.fn()</code> 触发 <code>fn</code>函数</p></li><li><p>我们知道<code>fn</code>函数其实就是<strong>传入的匿名函数</strong>，所以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li><li><p>但是大家不要忘记，<code>obj</code>是一个<code>proxy</code>，<code>obj.name</code>会触发<code>getter</code>,所以接下来我们就会进入到<code>mutableHandlers</code>的<code>createGetter</code>中</p><ol><li>在该代码中，触发了该方法<code>const res = Reflect.get(target, key, receiver)</code></li><li>此时的<code>res</code>为张三</li><li>注意：接下来触发了<code>track</code>函数，该函数是一个重点函数，track 在此为<strong>追踪</strong>的意思，我们来看它内部都做了什么 <ol><li>在 4-1 步，为<code>activeEffect</code>进行了赋值，我们知道<code>activeEffect</code>代表的就是<code>fn函数</code></li><li>执行代码可知，<code>track</code>内部主要做了两件事情 <ol><li>为<code>targetMap</code>进行赋值，<code>targetMap</code>的组成比较复杂 <ol><li>Key: target</li><li>Value: Map <ol><li>Key: key</li><li>Value: Set</li></ol></li></ol></li><li>最后执行了<code>trackEffects(dep, eventInfo)</code><ol><li>其中<code>eventInfo</code>是一个对象，内部包含四个属性：<strong>其中 effect 即为 activeEffect 即 fn 函数</strong></li></ol></li><li>在 <code>trackEffects</code>函数内部，核心也是做了两件事情 <ol><li>为<code>dep(targetMap[target][key]得到的Set实例子)</code>添加了<code>activeEffect</code>函数</li><li>为<code>activeEffect</code>函数的<code>静态属性</code>deps，增加了一个值<code>dep</code></li><li>即：<strong>建立起了 dep 和 activeEffect 的联系</strong></li></ol></li><li>那么至此，整个<code>track</code>的核心逻辑执行完成</li><li>我们可以把整个<code>track</code>的核心逻辑说成：<strong>收集了 activeEffect(即：fn)</strong></li><li>最后在<code>createGetter</code>函数返回了<code>res</code>（即：张三）</li><li>至此，整个<code>effct</code>执行完成</li></ol></li></ol></li></ol></li></ol><p>由以上逻辑可知，整个<code>effect</code>主要做了三件事情：</p><ol><li>生成<code>ReactiveEffect</code>实例</li><li>触发<code>fn</code>方法，从而激活<code>getter</code></li><li>建立了<code>targetMap</code>和<code>activeEffect</code>之间的联系 <ol><li><code>dep.add(activeEffect)</code></li><li><code>activeEffect.deps.push(dep)</code></li></ol></li></ol><p>那么至此，<strong>页面中即可展示 obj.name</strong>，但是不要忘记，等待两秒之后，我们会修改<code>obj.name</code>的值，我们知道，这样会触发<code>setter</code>,那么接下来我们来看<code>setter</code>中又做了什么呢？</p><ol><li><p>两秒后触发<code>setter</code>,会进入到<code>packages/reactivity/src/baseHandlers.ts</code>中的<code>createSetter</code>方法中</p></li><li><p>创建变量：<code>olsValue</code> = &quot;张三&quot;</p></li><li><p>创建变量: <code>value</code> = 李四</p></li><li><p>执行<code>const result = Reflect.set(target, key, value, receiver)</code>，即：修改了<code>obj</code>的值为 &quot;李四&quot;</p></li><li><p>触发: <code>trigger(traget, TriggerOpTypes.SET, key, value, oldValue)</code>, 此时各个参数的值为</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aeecd9eb840e4b3ba2254ea990a9c395~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p><code>trigger</code>在这里为<strong>触发</strong>的意思，那么我们来看<code>trigger</code>内部做了什么</p><ol><li><p>首先执行：<code>const desMap = targetMap.get(target)</code>, 其中<code>targetMap</code>即我们在<code>track</code>函数中，保存<code>activeEffect</code>的<code>targetMap</code></p></li><li><p>然后执行到: <code>deps.push(desMap.get(key))</code>. <code>depsMap.get(key)</code>获取到的即为之前保存的<code>activeEffect</code>，即<code>fn</code>函数</p></li><li><p>然后触发<code>triggerEffects(deps[0], eventInfo)</code>,我们来看<code>triggerEffects</code>中做了什么；</p><ol><li><p>声明常量：<code>const effects = isArray(dep) ? dep :[...dep]</code> 此时的 <code>effects</code>保存的为<code>fn</code>的集合</p></li><li><p>遍历<code>effects</code>，执行: <code>triggerEffect(effect, debuggerEventExtraInfo)</code>方法，那么我们来看<code>triggerEffect</code>做了什么</p><ol><li><p>执行<code>effect.run</code>方法，已知：<code>effect</code>是一个<code>ReactiveEffect</code>的类型的对象，则<code>run</code>方法会触发 <code>ReactiveEffect</code>的<code>run</code>,那么我们接下来来看<code>这一次</code>进入 <code>run</code>方法时，内部做了什么？</p><ol><li><p>首先还是为<code>activeEffect = this</code> 赋值，但是要<strong>注意</strong>：此时的<code>this</code>不再是一个<code>fn</code>,而是一个复杂对象</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8452bef6418e45a095e16290a920b9a2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>最后执行<code>this.fun()</code>即：effect 传入的匿名函数</p></li><li><p>至此，<code>fn</code>执行，意味着<code>document.querySelector(&quot;#app&quot;).innerText= &quot;李四&quot;</code> 页面将会发生变化</p></li></ol></li></ol></li><li><p><code>triggerEffect</code> 完成</p></li><li><p><code>triggerEffects</code>完成</p></li></ol></li></ol></li><li><p><code>trigger</code>完成</p></li><li><p><code>setter</code>完成</p></li></ol><p>由以上逻辑可知，整个<code>setter</code>主要做了 2 件事情</p><ol><li>修改<code>obj</code>的值</li><li>触发<code>targetMap</code>下保存的<code>fn</code>函数</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>那么到这里，我们就整个的跟踪了<code>pacakges/vue/examples/mine/reactive.html</code>的实例中的</p><ol><li><code>reactive</code>函数</li><li><code>effect</code>函数</li><li><code>obj.name = xxx</code> 表达式</li></ol><p>这三块代码背后，<code>vue</code>究竟做了什么。虽然整个的过程比较复杂，但是如果我们简单的来看，其实内部的完成还是比较简单的</p><ol><li>创建 <code>proxy</code></li><li>收集<code>effect</code>的依赖</li><li>触发收集的依赖</li></ol><p>那么接下来我们自己的实现，将会围绕着这三个核心的理念进行</p><h2 id="_03-框架实现-构建-reactive-函数-获取-proxy-实例" tabindex="-1"><a class="header-anchor" href="#_03-框架实现-构建-reactive-函数-获取-proxy-实例" aria-hidden="true">#</a> 03：框架实现：构建 reactive 函数，获取 proxy 实例</h2><p>根据上一小节的内容可知，整个<code>reactive</code>函数，本质上是返回了一个<code>proxy</code>实例，那么我们这一小节，就先去实现这个<code>reactive</code>函数，得到<code>proxy</code>实例</p><ol><li><p>创建<code>packages/reactivity/src/reactive.ts</code>模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mutableHandlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./baseHandlers&quot;</span>

<span class="token doc-comment comment">/**
 * 响应性 Map 缓存对象
 * key: target
 * val: proxy
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> reactiveMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token operator">&lt;</span>object<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * 创建响应性对象
 * <span class="token keyword">@param</span> <span class="token parameter">target</span>  被代理对象
 * <span class="token keyword">@param</span> <span class="token parameter">baseHandlers</span> handlder
 * <span class="token keyword">@param</span> <span class="token parameter">proxyMap</span> 代理对象
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">createReactiveOject</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">baseHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">proxyMap</span><span class="token operator">:</span> WeakMap<span class="token operator">&lt;</span>object<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果该实例已经被代理，则直接读取即可</span>
  <span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> existingProxy
  <span class="token punctuation">}</span>
  <span class="token comment">// 未被代理则生成 proxy 实例</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">)</span>
  <span class="token comment">// 缓存该对象</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
  <span class="token keyword">return</span> proxy
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 为复杂数据类型，创建响应性对象
 * <span class="token keyword">@param</span> <span class="token parameter">target</span> 被代理对象
 * <span class="token keyword">@returns</span> 代理对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveOject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> mutableHandlers<span class="token punctuation">,</span> reactiveMap<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/reactivy/src/baseHandlers.ts</code>模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 响应性的 handler
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">mutableHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那么此时我们就已经构建了一个基本的<code>reactive</code>方法，接下来我们可以通过<strong>测试案例</strong>测试一下</p></li><li><p>创建<code>packages/reactivity/src/index.ts</code>模块，作为<code>reactivity</code>的入口模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./reactive&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在<code>packages/vue/src/inedx.ts</code>中，导入<code>reactive</code>模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/reactivity&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行<code>npm run build</code>进行打包，生成<code>vue.js</code></p></li><li><p>创建<code>packages/vue/examples/reactivity/reactive.html</code>文件，作为测试实例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行到<code>Live Server</code>可见打印了一个<code>proxy</code>对象实例</p></li></ol><p>那么至此我们已经得到了一个基础的<code>reactive</code>函数，但是在<code>reactive</code>函数中我们还存在三个问题</p><ol><li><code>WeakMap</code>是什么？它和<code>MaP</code>有什么区别？</li><li><code>mutableHandlers</code>现在是一个空的，我们又该如何实现呢？</li><li>难不成以后每次测试时，都要打包一次吗？</li></ol><p>那么我们一个一个来看</p><h2 id="_04-框架实现-什么是-weakmap-它和-map-有什么区别" tabindex="-1"><a class="header-anchor" href="#_04-框架实现-什么是-weakmap-它和-map-有什么区别" aria-hidden="true">#</a> 04：框架实现：什么是 WeakMap? 它和 Map 有什么区别</h2>`,39),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>但是对于<code>WeakMap</code>而言，它却存在两个不同的地方</p><ol><li><code>key</code>必须是对象</li><li><code>key</code>是弱引用的</li></ol><p>其中第一个不同点比较好理解，但是第二个不同点是什么意思呢？那么我们本小节就来看一下这个<strong>弱引用</strong>指的是什么</p><blockquote><p>概念：</p><p>弱引用：不会影响垃圾回收机制。即: WeakMap 的 key <strong>不再存在任何引用时</strong>，会直接被回收</p><p>强引用：会影响垃圾回收机制，存在强应用的对象永远<strong>不会</strong>被回收</p></blockquote><p>我们来看下面两个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 声明 Map 对象</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 保存键值对</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 把 obj 置空</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前这段代码中，如果我们在浏览器控制台中，打印 map，结果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ded635b78834dcc8354e21c5f85419a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>即：<strong>虽然 obj 已经不存在任何引用了，但是它并没有被回收，依然存在于 Map 实例中</strong>。这就证明 <code>Map</code>是强应用的，哪怕<code>obj</code>手动设置为 <code>null</code>,但是它依然存在于<code>Map实例中</code></p><p>接下来同样的代码，我们来看 <code>WeakMap</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// 声明 WeakMap 对象</span>
<span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 保存键值对</span>
wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 把 obj 置空</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前这段代码中，如果我们在浏览器中，打印<code>wm</code>，结果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd2dc0ad3ded44b78fb86aa765310697~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>此时<code>WeakMap</code>中不存在任何任何值，即：<strong>obj 不存在其他引用时，WeakMap 不会阻止垃圾回收，基于 obj 的引用将会被清除</strong>。这就证明了<code>WeakMap</code>的<strong>弱引用特性</strong></p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>那么由以上可知，对于<code>WeakMap</code>而言，它存在两个比较重要的特性</p><ol><li><code>key</code> 必须是对象</li><li><code>key</code> 是弱引用的</li></ol><h3 id="好文推荐" tabindex="-1"><a class="header-anchor" href="#好文推荐" aria-hidden="true">#</a> 好文推荐</h3>`,18),v={href:"https://www.zhangxinxu.com/wordpress/2021/08/js-weakmap-es6/",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="_05-框架实现-creategetter-createsetter" tabindex="-1"><a class="header-anchor" href="#_05-框架实现-creategetter-createsetter" aria-hidden="true">#</a> 05: 框架实现：CreateGetter &amp;&amp; createSetter</h2><ol><li><p>接下来我们来实现<code>mutableHandlers</code>函数, 对于当前这个 <code>proxyHandler</code>类型的函数而言，它是可以监听到<code>set</code> <code>get</code>函数的 ,我们就在其中进行实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">mutableHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  set<span class="token punctuation">,</span>
  get<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里的<code>get</code> <code>set</code>方法就是整个 handler 函数的一个核心部分，我们依次来进行实现</p></li><li><p>首先实现<code>get</code>方法, 这个方法就是一个做了一个返回值的处理，并且每次触发时候，我们要对这个触发的 <code>getter</code> 的 函数进行对应的<strong>依赖收集</strong>，以便于在进行对应属性 <code>set</code> 触发时候，进行一个依赖函数的触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span>
    <span class="token literal-property property">receiver</span><span class="token operator">:</span> object<span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
    <span class="token comment">// 这里进行依赖收集</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着实现<code>set</code>方法，<code>createSetter</code>也是一个闭包函数，返回<code>set 函数</code>；针对于 <code>set</code>函数而言，它具有四个参数，返回值同样我们利用<code>Reflect</code>处理后的结果作为返回值。同样的，在这里我们要进行依赖的触发。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span>
    <span class="token literal-property property">newValue</span><span class="token operator">:</span> unknown<span class="token punctuation">,</span>
    <span class="token literal-property property">receiver</span><span class="token operator">:</span> object<span class="token punctuation">,</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
    <span class="token comment">// 触发依赖</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接下来，我们来实现<code>track</code>和<code>trigger</code></p></li><li><p>创建<code>packages/reactivity/effects.ts</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;track:收集依赖&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> unknown<span class="token punctuation">,</span> <span class="token literal-property property">newValue</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;trigger:触发依赖&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着，我们在<code>baseHandlers.ts</code>代码中，引入<code>track</code>、<code>trigger</code>,至此，我们就实现了<code>CreateGetter &amp;&amp; createSetter</code>的大概逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> track<span class="token punctuation">,</span> trigger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./effect&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>我们需要对以上代码进行一个测试，修改<code>packages/vue/examples/reactivity/reactive.html</code>,修改后的代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../../dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 触发 get 函数</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span> <span class="token comment">// 触发 set 函数</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>因为我们修改框架内部代码，所以我们需要重新打包, 重新执行<code>npm run build</code>命令，在<code>dist</code>目录下生成最新的<code>vue</code>文件</p></li><li><p>在<code>Live Server</code>打开的测试页面，就可以看到如下打印结果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3ff740802354b1bba4b52b8beef45a2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_06-热更新的开发时-提升开发体验" tabindex="-1"><a class="header-anchor" href="#_06-热更新的开发时-提升开发体验" aria-hidden="true">#</a> 06: 热更新的开发时：提升开发体验</h2><p>经过上一节的学习，我们已经成功的可以触发对应的<code>track</code>和<code>trigger</code>函数，但是在上一小节遇到了一个打包问题：就是每一次修改库代码后，都需要重新打包，然后我们才可以执行测试代码看到最新的逻辑效果。</p><p>那么这样就给以后得调试带来了很大的不便，有没有一种方式可以解决如此繁琐的过程呢？比如：热更新，当然是可以的</p>`,5),g=s("code",null,"rollup",-1),b={href:"https://www.rollupjs.com/guide/command-line-reference",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-c, --config &lt;filename&gt;     使用配置文件（如果使用参数但是值没有指定, 默认就是 rollup.config.js)
-w, --watch                 监听 bundle 中的文件并在文件改变时重新构建
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们修改<code>package.json</code>中的脚本，新增加一个<code>dev</code>命令</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup -c&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup -c -w&quot;</span> <span class="token comment">// 新增</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行命令<code>npm run dev</code>，<code>rollup</code>就会实时监听包文件的变化，</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5779b26396004596aba06bbf3e306678~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>我们可以修改<code>packages/reactivity/effects.ts</code>文件（一旦修改保存，<code>rollup 就会重新执行</code>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;track:收集依赖&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> unknown<span class="token punctuation">,</span> <span class="token literal-property property">newValue</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&quot;trigger<span class="token operator">:</span>触发依赖
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WATCH&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次回到浏览器中查看控制台，就可以看到如下打印结果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d66256f243d741b684118ed70fdcf9d1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_07-框架实现-构建-effect-函数-生成-rectiveeffect-实例" tabindex="-1"><a class="header-anchor" href="#_07-框架实现-构建-effect-函数-生成-rectiveeffect-实例" aria-hidden="true">#</a> 07: 框架实现：构建 effect 函数，生成 RectiveEffect 实例</h2><p>根据之间的测试实例我们知道，在创建好了<code>reactive</code>实例之后，接下来我们需要触发<code>effect</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调用 effect 方法</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据第二节，可查看的源码可知，在<code>effect</code>中，我们生成了<code>ReactiveEffect</code>实例，并且触发了<code>getter</code>（<code>obj.name</code> 触发的）</p><p>那么接下来我们就要完成这一系列的操作</p><ol><li><p>在<code>packages/reactivity/src/effect.ts</code>中，创建<code>effect</code>函数</p><blockquote><p>effect 函数接受一个函数作为参数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 表示当前被激活的 ReactiveEffect 实例</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">activeEffect</span><span class="token operator">:</span> ReactiveEffect <span class="token operator">|</span> <span class="token keyword">undefined</span>

<span class="token doc-comment comment">/**
 * effect 函数
 * <span class="token keyword">@param</span> <span class="token parameter">fn</span> 执行方法
 * <span class="token keyword">@returns</span> 以 ReactiveEffect 实例为 this 的执行函数
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> effect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 生成 ReactiveEffect 函数</span>
  <span class="token keyword">const</span> _effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token punctuation">}</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后在<code>packages/reactivity/src/index.ts</code>中进行导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> effect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./effect&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在<code>packages/vue/src/index.ts</code>中进行导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/reactivity&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改测试用例代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以看到页面中成功的显示了渲染的内容</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ff161a4be8e43acb02791975e7beaed~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><p>那么次吃，我们成功<strong>渲染了数据到 html 中</strong>,那么接下来我们需要做就是:<strong>当 obj.name 触发 setter 时，修改视图</strong>，以此就可以实现<strong>响应式数据变化</strong></p><p>所以，下面我们就需要分别处理<code>getter</code>和<code>setter</code>对应的情况了</p><h2 id="_08-框架实现-track-trigger" tabindex="-1"><a class="header-anchor" href="#_08-框架实现-track-trigger" aria-hidden="true">#</a> 08：框架实现：track &amp;&amp; trigger</h2><p>根据我们在<code>packages/reactivity/scr/baseHandlers.ts</code>中的代码可知，当触发<code>getter</code>行为时，其实我们会触发<code>track</code>方法，进行<strong>依赖收集</strong>，当触发<strong>setter</strong>行为时，会触发<code>tritgger</code>方法，来触发依赖</p><p>那么这里就涉及到了两个概念</p><ol><li><strong>依赖收集：track</strong></li><li><strong>触发依赖：trigger</strong></li></ol><p>所以接下来如果我们想要实现这两个函数，那么就需要先搞清楚什么是<code>依赖收集</code>和<code>触发依赖</code></p><h3 id="什么是响应性" tabindex="-1"><a class="header-anchor" href="#什么是响应性" aria-hidden="true">#</a> 什么是响应性</h3><p>根据大家的开发经验和我们在第二小节查看源代码可知，所谓的响应性其实指的就是：<strong>当响应性数据触发 setter 时触发 fn 函数</strong></p><p>那么想要达到这样一个目的，那就必须要在：<strong>getter 时能够收集当前的 fn 函数，以便在 setter 的时候可以执行相应的 fn 函数</strong></p><p>但是对于收集而言，如果仅仅是把 fn 存起来自然是不够的，我们还需要知道，当前的这个 fn 是 <strong>哪一个响应式数据对象的哪个对象</strong>对应的，只有这样我们才可以在<strong>该属性</strong>触发 setter 的时候，准确的执行响应性</p><p>那么我们应该如搞定这一点呢？</p><h3 id="如何进行依赖收集" tabindex="-1"><a class="header-anchor" href="#如何进行依赖收集" aria-hidden="true">#</a> 如何进行依赖收集</h3><p>大家还记不记得，我们在<code>packages/reactivity/src/reactive.ts</code>中创建过一个<code>WeakMap</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> reactiveMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token operator">&lt;</span>object<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们知道<code>WeakMap</code>的<code>key</code>必须是一个对象，并且<code>key</code>是一个弱引用的</p><p>那么大家想一想我们可不可以这样做</p><ol><li><code>WeakMap</code><ol><li>key: 响应性对象</li><li>Value: Map 对象 <ol><li>key：响应性对象的指定的属性</li><li>Value: 指定对象的指定属性的执行函数</li></ol></li></ol></li></ol><p>图表表示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/579143b2e7d9416691230e9d9143830b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>那么这样我们就可以关联上<strong>指定对象的指定属性</strong>与<strong>执行函数 fn</strong>之间的关系，当触发 <code>setter</code> 时执行执行<strong>对应对象的指定属性的 fn</strong> 即可</p><h2 id="_09-框架实现-构建-track-依赖收集函数" tabindex="-1"><a class="header-anchor" href="#_09-框架实现-构建-track-依赖收集函数" aria-hidden="true">#</a> 09： 框架实现：构建 track 依赖收集函数</h2><p>那么这本小节，我们就来实现<code>track</code>函数，明确一下最终的目标，我们期望最终是<code>weackMap</code>中可以保存一下数据结构</p><p><code>WeakMap</code>:</p><ol><li>Key: 响应性对象</li><li>Value: Map 对象 <ol><li>Key: 响应性对象的指定对象属性</li><li>value：指定对象的指定属性的执行函数</li></ol></li></ol><p>在<code>packages/reactivity/src/effect.ts</code>写入如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">KeyToDepMap</span> <span class="token operator">=</span> Map<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> ReactiveEffect<span class="token operator">&gt;</span>
<span class="token doc-comment comment">/**
 * 收集所有依赖的 weakMap 实例：
 * 1. key: 响应性对象
 * 2. value: map 对象
 *    1. key: 响应性对象的指定属性
 *    2. value: 指定对象的指定属性的 执行函数
 */</span>
<span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> KeyToDepMap<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * 用于收集依赖的方法
 * <span class="token keyword">@param</span> <span class="token parameter">target</span> WeakMap 中的 key
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> 代理对象的 key, 当依赖被触发时，需要根据该 key  获取
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果不存在执行函数，则直接 return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 尝试从 taregtMap 中，根据 target 获取 map</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果获取不到，则生成 新的 map 对象，并把该对象赋值给对应的 value</span>
    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 为指定 map, 指定 key 设计回调函数</span>
  depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> activeEffect<span class="token punctuation">)</span>
  <span class="token comment">// 临时打印</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetMap<span class="token punctuation">,</span> <span class="token string">&#39;targetMap&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时运行测试函数，查看打印的<code>depsMap</code>，得到以下数据</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e45ae0abc5df494b8e29f77951cd9e84~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_10-框架实现-构建-trigger-触发依赖" tabindex="-1"><a class="header-anchor" href="#_10-框架实现-构建-trigger-触发依赖" aria-hidden="true">#</a> 10： 框架实现：构建 trigger 触发依赖</h2><p>在上一小节中，我们已经成功保存依赖到<code>WeakMap</code>中了，那么接下里我们就可以在<code>setter</code>的时候触发保存的依赖，以此来达到<strong>响应行</strong>数据的效果了</p><p>在<code>packages/reactivity/src/effects.ts</code>中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 触发依赖的方法
 * <span class="token keyword">@param</span> <span class="token parameter">target</span> WeakMap 的 key
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> 代理对象的 key，当依赖被触发时，需要根据该 key 获取
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;依赖触发了&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 依据 target 获取存储的 map 实例</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token comment">// 如果 depsMap 不存在，则直接 return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 依据key, 从 depsMap 中取出 value，该 value 是一个 ReactiveEffect 类型的数据</span>
  <span class="token keyword">const</span> effect <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> ReactiveEffect
  <span class="token comment">// 如果 effect 不存在，则直接 return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//  执行 effect 中保存的 fn 函数</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;依赖触发了&#39;</span><span class="token punctuation">)</span>
  effect<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们就可以触发 <code>setter</code> 时，执行保存的 <code>fn</code> 函数了</p><p>修改我们的测试代码<code>packages/vue/example/reactive/index.html</code>,修改代码内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;猪八戒&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们在<code>Live Server</code>打开的页面控制台中可以看到如下效果：页面中的内容 2s 后发生了改变</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e081a67f62d047ac822fb9557d71ef71~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>那么证明，此时：**指定对象的指定属性对应的 fn **已经成功的保存到了 <code>WeakMap</code> 中了</p><h2 id="_11-总结-单一依赖的-reactive" tabindex="-1"><a class="header-anchor" href="#_11-总结-单一依赖的-reactive" aria-hidden="true">#</a> 11： 总结：单一依赖的 reactive</h2><p>通过以上的努力，我们目前已经构建了一个简单的<code>reactive</code>函数，使用<code>reactive</code>函数，配合<code>effect</code>可以实现在一个<strong>响应式数据渲染功能跟</strong>，那么这一小节，我们把整个的流程做一个总结</p><ol><li>首先我们在<code>packages/reactivity/src/reactive.ts</code>中，创建了一个<code>reactive</code>函数，该函数可以帮助我们生成一个<code>proxy</code>实例对象</li><li>通过该<code>proxy</code>实例的<code>handler</code>可以监听到对应的<code>getter</code>和<code>setter</code></li><li>然后我们在<code>packages/reactivity/src/effects.ts</code>中，创建了一个<code>effect</code>函数，通过该函数可以创建一个<code>ReactiveEffect</code>的实例，该实例的构造函数可以接收传入的回调函数<code>fn</code>，并且提供了一个<code>run</code>方法</li><li>触发<code>run</code>可以为<code>activeEffect</code>进行赋值，并且执行<code>fn</code>函数</li><li>我们需要再<code>fn</code>函数中触发<code>proxy</code>的<code>getter</code>,以此来激活<code>handler</code>的<code>get</code>函数</li><li>在<code>handler</code>的<code>get</code>函数中，我们通过<code>WeakMap</code>收集了<strong>指定对象，指定属性</strong>的<code>fn</code>，这样的一步操作，我们把它叫做<strong>依赖收集</strong></li><li>最后我们可以在<strong>任意时刻</strong>，修改<code>proxy</code>的数据，这样会触发<code>handler</code>的<code>setter</code></li><li>在<code>handlder</code>的<code>setter</code>中，我们会根据<strong>指定对象</strong>的<code>target</code>的<strong>指定属性 key</strong> 来获取到保存的<strong>依赖</strong>，然后我们只需要触发依赖，即可达到修改数据的效果</li></ol><h2 id="_12-功能升级-响应数据对应多个-effect" tabindex="-1"><a class="header-anchor" href="#_12-功能升级-响应数据对应多个-effect" aria-hidden="true">#</a> 12 ：功能升级：响应数据对应多个 effect</h2><p>在我们之前的实现中，还存在一个小的问题，那就是<strong>每一个响应性数据属性只能对应一个 effect 回调</strong></p><p>我们来看下面这个例子，<code>packages/vue/examples/reactivity/reactive-dep.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#p1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#p2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;猪八戒&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上的代码中，我们新增了一个<code>effect</code>函数，即：<strong>name 属性对应两个 DOM 的变化</strong></p><p>但是当我们运行代码的时候发现，<code>p1</code>的更新渲染是无效的</p><p>那么这是为什么呢？</p><p>查看我们的代码可以发现，我们在构建<code>keyToDepMap</code>对象时，它的<code>value</code>只能是一个<code>ReactiveEffect</code>，所以就导致了<strong>一个 key 只能对应一个有效的 effect 函数</strong></p><p>那么假如我们期望：一个 <code>key</code>可以对应<strong>多个</strong>有效的<code>effect</code>函数的话，那么应该怎么做呢？</p><p>可能有些同学已经想到了，我们只需要<strong>keyToDepMap 的 Value 可以对应一个数组</strong>不就可以了吗？</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbe31417028d4013bf1f4306ebce6107~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>如上图所示，我们可以构建一个<code>Set</code>（set 是一个“数组”，值不会重复）类型的对象，作为 <code>Map</code>的 <code>Value</code></p><p>我们可以把它叫做<code>Dep</code>,通过 <code>Dep</code>来保存<strong>指定 key 的所有依赖</strong></p><p>那么明确好了这样的概念之后，接下来我们到项目中，进行一个对应的实现</p><h2 id="_13-框架实现-构建-dep-模块-处理一对多的依赖关系" tabindex="-1"><a class="header-anchor" href="#_13-框架实现-构建-dep-模块-处理一对多的依赖关系" aria-hidden="true">#</a> 13: 框架实现：构建 Dep 模块，处理一对多的依赖关系</h2><p>通过上一节的学习，我们知道对于我们<code>effect.ts</code>中的<code>keyToDepMap</code>而言，它的一个 value 不能再是一个简单的<code>ReacticveEffect</code>了，而需要是一个集合(使用 Set 类型)</p><ol><li><p>修改<code>effect.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">KeyToDepMap</span> <span class="token operator">=</span> Map<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> Dep<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>我们新建<code>reactivity/src/dep.ts</code>文件, 内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./effects&#39;</span>
<span class="token comment">// 声明一个 Set 合集，值为 ReactiveEffect 类型</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Dep</span> <span class="token operator">=</span> Set<span class="token operator">&lt;</span>ReactiveEffect<span class="token operator">&gt;</span>
<span class="token comment">// 创建一个集合并返回，解构</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createDep</span> <span class="token operator">=</span> <span class="token punctuation">(</span>effects<span class="token operator">?</span><span class="token operator">:</span> ReactiveEffect<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ReactiveEffect<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>effects<span class="token punctuation">)</span> <span class="token keyword">as</span> Dep
  <span class="token keyword">return</span> deps
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后我们修改<code>reactivity/src/reactive.ts</code>文件中的<strong>收集依赖 track</strong>和<strong>触发依赖函数 trigger</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;track:收集依赖&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//  ------------------start:  以下为修改 ---------------</span>
  <span class="token comment">// 根据 指定属性获取 依赖集合</span>
  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有，就创建</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token function">createDep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">trackEffects</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span>
  <span class="token comment">//  ------------------ end ---------------</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 利用 dep 依次追踪指定 key 的所有 effect
 * <span class="token keyword">@param</span> <span class="token parameter">dep</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trackEffects</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加 包含当前依赖项函数 实例</span>
    deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 触发依赖函数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> newValue<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;trigger:触发依赖&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//  ------------------start:  以下为修改 ---------------</span>
  <span class="token comment">// 从当前依赖集合中获取指定属性的所有依赖实例</span>
  <span class="token keyword">const</span> deps<span class="token operator">:</span> Dep <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 如果有就依次执行</span>
  <span class="token function">triggerEffets</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span>
  <span class="token comment">//  ------------------ end ---------------</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 *  依次触发 dep 中 保存的依赖
 * <span class="token keyword">@param</span> <span class="token parameter">deps</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffets</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 依赖项目集合是否是数组，不是就变为一个数据，</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token operator">?</span> deps <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>deps<span class="token punctuation">]</span>
  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  effect<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后再次执行测试示例<code>packages/vue/examples/reactivity/reactive-dep.html</code>,可以看到 2s 后，视图均发生了变化</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6921a3f34de841f880d35fa54f486d09~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_14-reactive-函数的局限性" tabindex="-1"><a class="header-anchor" href="#_14-reactive-函数的局限性" aria-hidden="true">#</a> 14：reactive 函数的局限性</h2><p>那么此时我们就已经完成了相对完善的<code>reactive</code>函数，但是它依然还是有很多局限性的。</p><p>有哪些局限性呢，我们可以思考以下两个问题：</p><ol><li>对于目前的<code>reactive</code>函数而言，它支持 简单数据类型吗？</li><li>当我们对<code>reactive</code>返回值进行<strong>解构</strong>之后，那么它还具备响应性吗？</li></ol><h3 id="对于目前的reactive函数而言-它支持-简单数据类型吗" tabindex="-1"><a class="header-anchor" href="#对于目前的reactive函数而言-它支持-简单数据类型吗" aria-hidden="true">#</a> 对于目前的<code>reactive</code>函数而言，它支持 简单数据类型吗？</h3><p>创建文件<code>packages/vue/examples/reactivity/reactive-test.html</code>,内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开浏览器，会发现控制台报错，信息如下</p><blockquote><p>Uncaught TypeError: Cannot create proxy with a non-object as target or handler</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/954f151841844402b36576ebda23b05b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>为什么会抛出这样一个错误呢？因为我们知道我目前的<code>createReactiveOject</code>函数中的最终生成 proxy 实例调用的是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">)</span> <span class="token comment">// target 即为 reactive 函数的参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而<code>new Proxy</code>的第一个参数官方文档原话如下：<strong>target: 要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</strong>，所以会抛出一个错误</p><h3 id="当我们对reactive返回值进行解构之后-那么它还具备响应性吗" tabindex="-1"><a class="header-anchor" href="#当我们对reactive返回值进行解构之后-那么它还具备响应性吗" aria-hidden="true">#</a> 当我们对<code>reactive</code>返回值进行<strong>解构</strong>之后，那么它还具备响应性吗？</h3><blockquote><p>答案：不具备了</p></blockquote><p>修改文件<code>packages/vue/examples/reactivity/reactive-test.html</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> obj
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> name
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&#39;猪八戒&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开浏览器，看到如下结果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee2b939e154748ee82af157523475cd0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看出来，2s 后，数据发生了变化，但是视图没有发生变化；由此可见：响应性数据经过解构后，会失去了响应性</p><p>为什么呢？</p><p>因为我们触发 <code>getter</code>和<code>setter</code>行为的核心在于数据需要是<code>proxy</code>类型的，而经过解构以后的属性就是一个普通的数据类型，自然就不会触发<code>setter</code>和<code>getter</code>行为的监听。</p><h3 id="vue3-的处理" tabindex="-1"><a class="header-anchor" href="#vue3-的处理" aria-hidden="true">#</a> vue3 的处理</h3><p>对于第一个问题，我们知道 <code>vue3</code>提供了一个<code>ref</code>函数来实现简单数据类型的响应性呢？</p><p>对于第二个问题，<code>vue3</code>提供了<code>toRef</code>以及<code>toRefs</code>来保持数据解构后的一个响应性</p><p>那么他们分别是怎么做的呢，后续继续讲解</p><h2 id="_15-总结" tabindex="-1"><a class="header-anchor" href="#_15-总结" aria-hidden="true">#</a> 15：总结</h2><p>在本章，我们初次解除了<code>reactivity</code>模块，并且在模块中构建了<code>reactive</code>响应性函数</p><p>对于<code>reactive</code>的响应性函数而言，我们知道它：</p><ol><li>是通过<code>proxy</code>的<code>setter</code>和<code>gsetter</code>来实现的数据监听</li><li>是需要通过配合 <code>effect</code> 函数进行使用的</li><li>基于<code>WeakMap</code>完成的依赖收集和处理</li><li>可以存在一对多的依赖关系</li></ol><p>同时我们有也了解了<code>reactiv</code>函数的不足：</p><ol><li><code>reactive</code>只能对<strong>复杂数据</strong>类型进行使用</li><li><code>reactive</code>的响应性数据，不可进行解构</li></ol><p>因为<code>reactive</code>的不足，所以<code>vue3</code>又为我们提供了<code>ref</code>函数构建响应性，那么</p><ol><li><code>ref</code>函数的内容是如何进行实现的呢 ？</li><li><code>ref</code>可以构建简单数据类型的响应性吗 ？</li><li>为什么<code>ref</code>类型的数据，必须要通过 <code>.value</code>访问值呢？</li></ol><p>带着以上三个问题，我们来看下一章节 <strong>ref 的响应性</strong></p>`,109);function y(h,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("对比"),s("a",u,[n("WeakMap"),e(a)]),n("和"),s("a",d,[n("Map"),e(a)]),n("的文档可知，他们两个具备一个核心共同点，那就是:**都是{key, value}**的结构对象")]),k,s("p",null,[s("a",v,[n("JS WeakMap 应该什么时候使用"),e(a)])]),m,s("p",null,[n("我们目前使用的打包工具是"),g,n("，"),s("a",b,[n("官方命令行标志"),e(a)]),n("也是支持的")]),f])}const x=p(i,[["render",y],["__file","index-04.html.vue"]]);export{x as default};
