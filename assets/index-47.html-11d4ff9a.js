import{_ as n,p as s,q as a,a1 as t}from"./framework-e8cb8151.js";const p="/assets/1-20240301114816904-682ec333.png",e={},o=t(`<h1 id="_47-模板字符串" tabindex="-1"><a class="header-anchor" href="#_47-模板字符串" aria-hidden="true">#</a> 47-模板字符串</h1><p>模板字符串是为了解决传统字符串拼接不便利而出现的。</p><p>我们先通过一个简单的例子来观察一下模板字符串与传统字符串的差别。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&#39;+&#39;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>

<span class="token comment">// ES6</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板字符串使用反引号 <code>\`\`</code> 将整个字符串包裹起来，变量或者表达式则使用 <code>\${}</code> 来包裹。</p><p>除了能够在字符串中嵌入变量，还可以用来定义多行字符串。其中所有的空格，缩进，换行都会被保留下来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> elemString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
  &lt;p&gt;So you crossed the line, how&#39;d you get that far?&lt;/p&gt;
  &lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> you give it a try.&lt;/p&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\${}</code> 中，可以放入一个变量，表达式，甚至一个函数执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 变量</span>
<span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hello<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, world!</span><span class="token template-punctuation string">\`</span></span>

<span class="token comment">// 表达式</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">40</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">50</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">the result is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

<span class="token comment">// 函数</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;you are the best.&#39;</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">he said: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以嵌套使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isLargeScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">isCollapsed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">header </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
  <span class="token function">isLargeScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>isCollapsed <span class="token operator">?</span> <span class="token string">&#39;expander&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;collapser&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然还有更高级的用法。</p><p>我们可以在模板字符串前面加上一个标签。</p><p>该标签可以使用函数的形式来定义，并在内部定义更多的逻辑用于控制最终的输出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 案例来源于 MDN</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token string">&#39;Mike&#39;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">28</span>

<span class="token keyword">function</span> <span class="token function">myTag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> personExp<span class="token punctuation">,</span> ageExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> personExp<span class="token punctuation">,</span> ageExp<span class="token punctuation">)</span>

  <span class="token keyword">var</span> str0 <span class="token operator">=</span> strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// &quot;that &quot;</span>
  <span class="token keyword">var</span> str1 <span class="token operator">=</span> strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// &quot; is a &quot;</span>

  <span class="token keyword">var</span> ageStr
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ageExp <span class="token operator">&gt;</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ageStr <span class="token operator">=</span> <span class="token string">&#39;centenarian&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    ageStr <span class="token operator">=</span> <span class="token string">&#39;youngster&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> str0 <span class="token operator">+</span> personExp <span class="token operator">+</span> str1 <span class="token operator">+</span> ageStr
<span class="token punctuation">}</span>

<span class="token keyword">var</span> output <span class="token operator">=</span> myTag<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">that </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span class="token comment">// that Mike is a youngster</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+'" alt="img"></p><p>标签函数的第一个参数中，有一个特殊属性 <code>raw</code>，通过它可以访问模板字符串的原始字符串。</p>',17),i=[o];function l(c,r){return s(),a("div",null,i)}const k=n(e,[["render",l],["__file","index-47.html.vue"]]);export{k as default};
