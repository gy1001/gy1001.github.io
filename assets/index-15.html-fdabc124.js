import{_ as n,p as a,q as s,a1 as e}from"./framework-e8cb8151.js";const o={},c=e(`<h1 id="_15-如何让浏览器更快地加载网络资源" tabindex="-1"><a class="header-anchor" href="#_15-如何让浏览器更快地加载网络资源" aria-hidden="true">#</a> 15-如何让浏览器更快地加载网络资源？</h1><h2 id="浏览器加载网络资源的速度" tabindex="-1"><a class="header-anchor" href="#浏览器加载网络资源的速度" aria-hidden="true">#</a> 浏览器加载网络资源的速度</h2><p>想要加快浏览器加载网络资源的速度，可以通过减少响应内容大小，比如使用 <code>gzip</code> 算法压缩响应体内容和 <code>HTTP/2 的压缩头部</code>功能；另一种更通用也更为重要的技术就是<strong>使用缓存</strong>。</p><p>下面两张截图分别是未使用缓存以及使用浏览器默认缓存的请求文件所消耗的时间，可以看出使用缓存之后加载时间大大缩短。</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/4D/CgqCHl8MKQyAOi4qAAAqnHUKGOQ421.png" alt="Drawing 0.png"></p><p>从服务端请求文件所消耗的时间</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/42/Ciqc1F8MKRaAVJdKAAAsNYhLc68530.png" alt="Drawing 1.png"></p><p>从缓存中获取文件所消耗的时间</p><p>Web 缓存按存储位置来区分，包括<strong>数据库缓存</strong>、<strong>服务端缓存</strong>、<strong>CDN 缓存</strong>和<strong>浏览器缓存</strong>。这一课时我们着重介绍浏览器缓存。</p><p>浏览器缓存的实现方式主要有两种：<code>HTTP</code> 和 <code>ServiceWorker</code> 。</p><h2 id="http-缓存" tabindex="-1"><a class="header-anchor" href="#http-缓存" aria-hidden="true">#</a> HTTP 缓存</h2><p>使用缓存最大的问题往往不在于将资源缓存在什么位置或者如何读写资源，而在于如何保证缓存与实际资源一致的同时，提高缓存的命中率。也就是说尽可能地让浏览器从缓存中获取资源，但同时又要保证被使用的缓存与服务端最新的资源保持一致。</p><p>为了达到这个目的，需要制定合适的缓存过期策略（简称“<code>缓存策略</code>”），HTTP 支持的缓存策略有两种：<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p><h3 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h3><p>强制缓存是在浏览器加载资源的时候，先直接从缓存中查找请求结果，如果不存在该缓存结果，则直接向服务端发起请求。</p><h4 id="_1-expires" tabindex="-1"><a class="header-anchor" href="#_1-expires" aria-hidden="true">#</a> 1. Expires</h4><p><code>HTTP/1.0</code> 中可以使用响应头部字段 <code>Expires</code> 来设置缓存时间，它对应一个未来的时间戳。客户端第一次请求时，服务端会在响应头部添加 <code>Expires</code> 字段。</p><p>当浏览器再次发送请求时，先会对比当前时间和 Expires 对应的时间，如果当前时间早于 Expires 时间，那么直接使用缓存；反之，需要再次发送请求。</p><p><img src="https://s0.lgstatic.com/i/image/M00/31/42/Ciqc1F8MKT-AbvemAAAGfctSoow363.png" alt="Drawing 2.png"></p><p>响应头部中的 Expires 信息</p><p>上述 Expires 信息告诉浏览器：在 2020.10.10 日之前，可以直接使用该请求的缓存。</p><p>但是使用 Expires 响应头时容易产生一个问题，那就是服务端和浏览器的时间很可能不同，因此这个缓存过期时间容易出现偏差。</p><p>同样的，客户端也可以通过修改系统时间来继续使用缓存或提前让缓存失效。</p><p>为了解决这个问题，HTTP/1.1 提出了 <code>Cache-Control</code> 响应头部字段。</p><h4 id="_2-cache-control" tabindex="-1"><a class="header-anchor" href="#_2-cache-control" aria-hidden="true">#</a> 2. Cache-Control</h4><p>它的常用值有下面几个：</p><ul><li><strong>no-cache</strong>: 表示使用协商缓存，即每次使用缓存前必须向服务端确认缓存资源是否更新；</li><li><strong>no-store</strong>: 禁止浏览器以及所有中间缓存存储响应内容；</li><li><strong>public</strong>: 公有缓存，表示可以被代理服务器缓存，可以被多个用户共享；</li><li><strong>private</strong>: 私有缓存，不能被代理服务器缓存，不可以被多个用户共享；</li><li><strong>max-age</strong>: 以秒为单位的数值，表示缓存的有效时间；</li><li><strong>must-revalidate</strong>: 当缓存过期时，需要去服务端校验缓存的有效性。</li></ul><p>这几个值可以组合使用，比如像下面这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cache-control: public, max-age=31536000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>告诉浏览器该缓存为公有缓存，有效期 1 年。</p><p>需要注意的是，<code>cache-control</code> 的 <code>max-age</code> 优先级高于 <code>Expires</code>，也就是说如果它们同时出现，浏览器会使用 <code>max-age</code> 的值。</p><p>注意，虽然你可能在其他资料中看到可以使用 meta 标签来设置缓存，比如像下面的形式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;Wed, 20 Jun 2021 22:33:00 GMT&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但在 HTML5 规范中，并不支持这种方式，所以<strong>尽量不要使用 meta 标签来设置缓存</strong>。</p><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><p>协商缓存的更新策略是不再指定缓存的有效时间了，而是浏览器直接发送请求到服务端进行确认缓存是否更新，如果请求响应返回的 HTTP 状态为 304，则表示缓存仍然有效。控制缓存的难题就是从浏览器端转移到了服务端。</p><h4 id="_1-last-modified-和-if-modified-since" tabindex="-1"><a class="header-anchor" href="#_1-last-modified-和-if-modified-since" aria-hidden="true">#</a> 1. Last-Modified 和 If-Modified-Since</h4><p>服务端要判断缓存有没有过期，只能将双方的资源进行对比。若浏览器直接把资源文件发送给服务端进行比对的话，网络开销太大，而且也会失去缓存的意义，所以显然是不可取的。</p><p>有一种简单的判断方法，那就是通过响应头部字段 <code>Last-Modified</code> 和请求头部字段 <code>If-Modified-Since</code> 比对双方资源的修改时间。</p><p>具体工作流程如下：</p><ul><li>浏览器第一次请求资源，服务端在返回资源的响应头中加入 <code>Last-Modified</code> 字段，该字段表示这个资源在服务端上的最近修改时间；</li><li>当浏览器再次向服务端请求该资源时，请求头部带上之前服务端返回的修改时间，这个请求头叫 <code>If-Modified-Since</code>；</li><li>服务端再次收到请求，根据请求头 <code>If-Modified-Since</code> 的值，判断相关资源是否有变化，如果没有，则返回 <code>304 Not Modified</code>，并且不返回资源内容，浏览器使用资源缓存值；否则正常返回资源内容，且更新 <code>Last-Modified</code> 响应头内容。</li></ul><p>这种方式虽然能判断缓存是否失效，但也存在两个问题：</p><ul><li><strong>精度问题</strong>: <code>Last-Modified</code> 的时间精度为秒，如果在 1 秒内发生修改，那么缓存判断可能会失效；如果1s内文件被修改了，但是<code>Last-Modified</code>没变，此时不能根据<code>Last-Modified</code>判断文件是否被修改过。</li><li><strong>准度问题</strong>: 考虑这样一种情况，如果一个文件被修改，然后又被还原，内容并没有发生变化，在这种情况下，浏览器的缓存还可以继续使用，但因为修改时间发生变化，也会重新返回重复的内容。</li><li><strong>服务器问题</strong>：某些服务器不能精确地得到文件的最后修改时间, 或者与代理服务器时间不一致等情形</li></ul><h4 id="_2-etag-和-if-none-match" tabindex="-1"><a class="header-anchor" href="#_2-etag-和-if-none-match" aria-hidden="true">#</a> 2. ETag 和 If-None-Match</h4><p>为了解决精度问题和准度问题，<code>HTTP</code> 提供了另一种不依赖于修改时间，而依赖于文件哈希值的精确判断缓存的方式，那就是响应头部字段 <code>ETag</code> 和请求头部字段 <code>If-None-Match</code>。</p><p>具体工作流程如下：</p><ul><li>浏览器第一次请求资源，服务端在返响应头中加入 <code>Etag</code> 字段，<code>Etag</code> 字段值为该资源的哈希值；</li><li>当浏览器再次跟服务端请求这个资源时，在请求头上加上 <code>If-None-Match</code>，值为之前响应头部字段 <code>ETag</code> 的值；</li><li>服务端再次收到请求，将请求头 <code>If-None-Match</code> 字段的值和响应资源的哈希值进行比对，如果两个值相同，则说明资源没有变化，返回 <code>304 Not Modified</code>；否则就正常返回资源内容，无论是否发生变化，都会将计算出的哈希值放入响应头部的 ETag 字段中。</li></ul><p>这种缓存比较的方式也会存在一些问题，具体表现在以下两个方面。</p><ul><li><strong>计算成本</strong>。生成哈希值相对于读取文件修改时间而言是一个开销比较大的操作，尤其是对于大文件而言。如果要精确计算则需读取完整的文件内容，如果从性能方面考虑，只读取文件部分内容，又容易判断出错。</li><li><strong>计算误差</strong>。<code>HTTP</code> 并没有规定哈希值的计算方法，所以不同服务端可能会采用不同的哈希值计算方式。这样带来的问题是，同一个资源，在两台服务端产生的 <code>Etag</code> 可能是不相同的，所以对于使用服务器集群来处理请求的网站来说，使用 <code>Etag</code> 的缓存命中率会有所降低。</li></ul><p>需要注意的是，强制缓存的优先级高于协商缓存，在协商缓存中，<code>Etag</code> 优先级比 <code>Last-Modified</code> 高。</p><p>既然协商缓存策略也存在一些缺陷，那么我们转移到浏览器端看看 <code>ServiceWorker</code> 能不能给我们带来惊喜。</p><h2 id="serviceworker" tabindex="-1"><a class="header-anchor" href="#serviceworker" aria-hidden="true">#</a> ServiceWorker</h2><p><code>ServiceWorker</code> 是浏览器在后台独立于网页运行的脚本，也可以这样理解，它是浏览器和服务端之间的代理服务器。<code>ServiceWorker</code> 非常强大，可以实现包括推送通知和后台同步等功能，更多功能还在进一步扩展，但其最主要的功能是<strong>实现离线缓存</strong>。</p><h3 id="_1-使用限制" tabindex="-1"><a class="header-anchor" href="#_1-使用限制" aria-hidden="true">#</a> 1. 使用限制</h3><p>越强大的东西往往越危险，所以浏览器对 <code>ServiceWorker</code> 做了很多限制：</p><ul><li>在 <code>ServiceWorker</code> 中无法直接访问 <code>DOM</code>，但可以通过 <code>postMessage</code> 接口发送的消息来与其控制的页面进行通信；</li><li><code>ServiceWorker</code> 只能在本地环境下或 <code>HTTPS</code> 网站中使用；</li><li><code>ServiceWorker</code> 有作用域的限制，一个 <code>ServiceWorker</code> 脚本只能作用于当前路径及其子路径；</li><li>由于 <code>ServiceWorker</code> 属于实验性功能，所以兼容性方面会存在一些问题，具体兼容情况请看下面的截图。</li></ul><p><img src="https://s0.lgstatic.com/i/image/M00/31/43/Ciqc1F8MKYGAMRqhAACGt0bNhOM842.png" alt="Drawing 3.png"></p><p><code>ServiceWorker</code> 在浏览器中的支持情况</p><h3 id="_2-使用方法" tabindex="-1"><a class="header-anchor" href="#_2-使用方法" aria-hidden="true">#</a> 2. 使用方法</h3><p>在使用 <code>ServiceWorker</code> 脚本之前先要通过“注册”的方式加载它。常见的注册代码如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;serviceWorker&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker
    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;./sw.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;浏览器不支持 ServiceWorker!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先考虑到浏览器的兼容性，判断 <code>window.navigator</code> 中是否存在 <code>serviceWorker</code> 属性，然后通过调用这个属性的 <code>register</code> 函数来告诉浏览器 <code>ServiceWorker</code> 脚本的路径。</p><p>浏览器获取到 <code>ServiceWorker</code> 脚本之后会进行解析，解析完成会进行安装。可以通过监听 “<code>install</code>” 事件来监听安装，但这个事件只会在第一次加载脚本的时候触发。要让脚本能够监听浏览器的网络请求，还需要激活脚本。</p><p>在脚本被激活之后，我们就可以通过监听 <code>fetch</code> 事件来拦截请求并加载缓存的资源了。</p><p>下面是一个利用 <code>ServiceWorker</code> 内部的 <code>caches</code> 对象来缓存文件的示例代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">CACHE_NAME</span> <span class="token operator">=</span> <span class="token string">&#39;ws&#39;</span>
<span class="token keyword">let</span> preloadUrls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;/index.css&#39;</span><span class="token punctuation">]</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;install&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>preloadUrls<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> response
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> caches
        <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> path <span class="token operator">=</span> event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码首先监听 <code>install</code> 事件，在回调函数中调用了 <code>event.waitUntil()</code> 函数并传入了一个 <code>Promise</code> 对象。</p><p><code>event.waitUntil</code> 用来监听多个异步操作，包括缓存打开和添加缓存路径。如果其中一个操作失败，则整个 <code>ServiceWorker</code> 启动失败。</p><p>然后监听了 <code>fetch</code> 事件，在回调函数内部调用了函数 <code>event.respondWith()</code> 并传入了一个 <code>Promise</code> 对象，当捕获到 <code>fetch</code> 请求时，会直接返回 <code>event.respondWith</code> 函数中 <code>Promise</code> 对象的结果。</p><p>在这个 <code>Promise</code> 对象中，我们通过 <code>caches.match</code> 来和当前请求对象进行匹配，如果匹配上则直接返回匹配的缓存结果，否则返回该请求结果并缓存。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>缓存是解决性能问题的重要手段，使用缓存的好处很多，除了能让浏览器更快地加载网络资源之外，还会带来其他好处，比如节省网络流量和带宽，以及减少服务端的负担。</p><p>本课时介绍了 <code>HTTP</code> 缓存策略及 <code>ServiceWorker</code>，HTTP 缓存可以分为<code>强制缓存</code>和<code>协商缓存</code>，强制缓存就是在缓存有效期内直接使用浏览器缓存；协商缓存则需要先询问服务端资源是否发生改变，如果未改变再使用浏览器缓存。</p><p><code>ServiceWorker</code> 可以用来实现离线缓存，主要实现原理是拦截浏览器请求并返回缓存的资源文件。</p><p>最后布置一道思考题：如果要让浏览器不缓存资源，你有哪些实现方式？</p><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h4 id="_3336" tabindex="-1"><a class="header-anchor" href="#_3336" aria-hidden="true">#</a> **3336：</h4><blockquote><p>F5，或者清理缓存</p></blockquote><h4 id="锋" tabindex="-1"><a class="header-anchor" href="#锋" aria-hidden="true">#</a> **锋：</h4><blockquote><p>设置强缓存 Cache-Control：no-store</p></blockquote><h4 id="道" tabindex="-1"><a class="header-anchor" href="#道" aria-hidden="true">#</a> *道：</h4><blockquote><p>思考题：因为强制缓存的优先级高于协商缓存，在强制缓存中，max-age 优先级高于 expires；在协商缓存中，Etag 优先级高于 Last-Modified。所以，浏览器不缓存可以使用强制缓存的 control-cache: no-store 或 cache-control: no-cache。</p></blockquote><h4 id="旺" tabindex="-1"><a class="header-anchor" href="#旺" aria-hidden="true">#</a> *旺：</h4><blockquote><p>老师，强缓存和协商缓存是前端设置的还是后端设置的？</p></blockquote><h4 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>服务端返回数据的时候会在头部信息中设置哦~</p></blockquote><h4 id="材" tabindex="-1"><a class="header-anchor" href="#材" aria-hidden="true">#</a> **材：</h4><blockquote><p>使用浏览器的无痕模式可以不缓存资源</p></blockquote><h4 id="锋-1" tabindex="-1"><a class="header-anchor" href="#锋-1" aria-hidden="true">#</a> **锋：</h4><blockquote><p>或者 Cache-Control max-age：0</p></blockquote><h4 id="辉" tabindex="-1"><a class="header-anchor" href="#辉" aria-hidden="true">#</a> **辉：</h4><blockquote><p>老师，前端缓存怎么做到一致性呢？</p></blockquote><h4 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>一致性是关于缓存的经典问题，其实协商缓存的出现就是为了解决这个问题，核心操作都是用一个特定的标识（修改时间或 Etag）将本地缓存资源和服务端的资源进行比对。</p></blockquote>`,94),t=[c];function p(i,d){return a(),s("div",null,t)}const l=n(o,[["render",p],["__file","index-15.html.vue"]]);export{l as default};
