import{_ as c,M as i,p,q as d,Q as t,R as n,t as s,N as o,a1 as e}from"./framework-e8cb8151.js";const l={},u=e('<h1 id="_08-flexbox-布局中的-flex-basis-谁能决定-flex-项目的大小" tabindex="-1"><a class="header-anchor" href="#_08-flexbox-布局中的-flex-basis-谁能决定-flex-项目的大小" aria-hidden="true">#</a> 08-Flexbox 布局中的 flex-basis：谁能决定 Flex 项目的大小？</h1><p><code>flex-basis</code> 是 Flexbox 布局模块中 <code>flex</code> 属性的另一个子属性，在前面的课程中我们深度剖析了浏览器是如何计算 Flex 项目尺寸的，或者说 Flexbox 是如何工作的。对于众多 Web 开发者而言，在 CSS 中都习惯于使用像 <code>width</code> 、<code>height</code> 、<code>min-*</code> 和 <code>max-*</code> 以及它们对应的 CSS 逻辑属性（比如 <code>inline-size</code> 、<code>block-size</code> 等）给元素设置尺寸大小。</p><p>在使用 Flexbox 布局模块时，同样如此，使用这些属性给 Flex 项目设置尺寸。只不过，这些属性不一定就能决定 Flex 项目的尺寸大小，它除了受 Flex 容器的空间和 Flex 项目的扩展因子（<code>flex-grow</code>），以及 Flex 项目的收缩因子（<code>flex-shrink</code>）影响之外，还受 Flex 项目的基准值（或者说假设主尺寸 Main Size）的影响，即 <code>flex-basis</code> 属性的影响。</p><p>在这节课程中，我们就一起来探讨这方面的话题，<strong>在 Flexbox 布局中，Flex 项目的大小究竟是由谁来决定的</strong> 。</p><h2 id="容器的尺寸由谁来决定" tabindex="-1"><a class="header-anchor" href="#容器的尺寸由谁来决定" aria-hidden="true">#</a> 容器的尺寸由谁来决定</h2><p>Web 上的每一个元素都被视为一个盒子，它相当于一个容器，就好比我们生活中的器皿，通过格式化（CSS 的 <code>display</code> 属性的值）之后有着不同的形态：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ed7e93860a4f449f7415b0e29d3a84~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>不同的器皿都有着自己的大小。在 CSS 中，这些容器的大小可以是由容器的内容来决定，也可以显式地通过属性来控制。大家最为熟知的应该是 <strong>CSS 盒模型中的属性来决定一个容器（元素）的大小</strong> 。</p><p>只不过在指定容器大小时，你可能是 <strong>明确地知道容器的确切尺寸</strong> ，也有可能是<strong>由着容器的内容来决定尺寸大小</strong> 。简单地说，就是一个是<strong>明确的尺寸</strong> （Definite Size），一个是<strong>不确定的尺寸</strong> （Indefinite Size）。</p><ul><li><strong>明确的尺寸</strong> 指的是不需要执行布局就可以确定盒子的大小。也就是说，显式地给容器设置一个固定值，或内容所占区域的大小，或一个容器块的初始大小，或通过其他计算方式得到的尺寸，比如 Flexbox 布局中的“拉伸和收缩”（Stretch-fit），即 <code>flex-grow</code> 和 <code>flex-shrink</code> 。</li></ul>',10),r=e("<ul><li><strong>不确定的尺寸</strong> 指的是一个未知的尺寸。也就是说，容器的大小具备无限空间，有可能很大，也有可能很小。</li></ul><p>通俗来说，明确的尺寸是知道元素的 <code>width</code> （或 <code>inline-size</code>）和 <code>height</code> （或 <code>block-size</code>）属性的确定值；不确定的尺寸是需要根据内容来计算的，所以要知道不确定的尺寸就需要先检查内容，也就是自动计算尺寸。</p><p>但不管是明确的尺寸还是不确定的尺寸设置，在 CSS 中都是由下面这些属性来控制：</p><table><thead><tr><th><strong>物理属性</strong></th><th><strong>逻辑属性（horizontal-tab）</strong></th><th><strong>逻辑属性（vertical-lr）</strong></th><th><strong>逻辑属性（vertical-rl）</strong></th></tr></thead><tbody><tr><td><code>width</code></td><td><code>inline-size</code></td><td><code>block-size</code></td><td><code>block-size</code></td></tr><tr><td><code>height</code></td><td><code>block-size</code></td><td><code>inline-size</code></td><td><code>inline-size</code></td></tr><tr><td><code>min-width</code></td><td><code>min-inline-size</code></td><td><code>min-block-size</code></td><td><code>min-block-size</code></td></tr><tr><td><code>min-height</code></td><td><code>min-block-size</code></td><td><code>min-inline-size</code></td><td><code>min-inline-size</code></td></tr><tr><td><code>max-width</code></td><td><code>max-inline-size</code></td><td><code>max-block-size</code></td><td><code>max-block-size</code></td></tr><tr><td><code>max-height</code></td><td><code>max-block-size</code></td><td><code>max-inline-size</code></td><td><code>max-inline-size</code></td></tr></tbody></table><p>这些属性被称为 <strong>尺寸属性</strong> ，它们可以接受 <code>&lt;length-percentage&gt;</code> 、<code>auto</code> 、<code>none</code> 、<code>min-content</code> 、<code>max-content</code> 和 <code>fit-content</code> （CSS Grid 中还有一个 <code>fit-content()</code>）等值。其中 <code>&lt;length-percentage&gt;</code> 分为 <code>&lt;length&gt;</code> （就是使用长度单位的一些值，比如 <code>100px</code> 、<code>100vw</code> 等），<code>&lt;percentage&gt;</code> 指的是百分比单位的值，比如 <code>50%</code> 。</p><p>一般情况下，CSS 尺寸属性的值是一个 <strong><code>&lt;length-percentage&gt;</code></strong> 的话，则表示这个容器有一个明确的尺寸；如果 CSS 尺寸属性的值是像 <code>auto</code> 、<code>min-content</code> 、<code>max-content</code> 和 <code>fit-content</code> 的话，则表示这个容器的尺寸是不明确的，需要根据内容来计算。</p><blockquote><p><strong>注意，<code>fit-content</code>和</strong> <strong><code>fit-content(&lt;length-percentage&gt;)</code></strong> <strong>所描述的不是同一个东西，它们的区别将放到 CSS Grid 相关的课程中介绍</strong> 。</p></blockquote><p>换句话说，在 CSS 中，任何一个容器都有四种自动计算尺寸大小的方式：</p><ul><li><code>auto</code> ：会根据格式化上下文自动计算容器的尺寸；</li></ul>",9),m=n("ul",null,[n("li",null,[n("code",null,"min-content"),s(" ：是在不导致溢出的情况下，容器的内容的最小尺寸；")])],-1),g=n("ul",null,[n("li",null,[n("code",null,"max-content"),s(" ：容器可以容纳的最大尺寸，如果容器中包含未格式化的文本，那么它将显示为一个完整的长字符串；")])],-1),k=e('<ul><li><code>fit-content</code> ：如果给定轴中的可用空间是确定的，则等于 <code>min(max-content, max(min-content, stretch-fit))</code> ，反之则等于 <code>max-content</code>。</li></ul><blockquote><p>需要注意的是， CSS 中的宽高比属性，即 <code>aspect-ratio</code> 也可以决定一个容器的尺寸。</p></blockquote><p>在 Flexbox 布局中，Flex 项目同样被视为一个容器，它的大小也可以由这些属性（尺寸属性）和尺寸属性值来决定。只不过，对于 Flex 项目而言，除了这些尺寸属性之外，它还有一个 <strong><code>flex-basis</code></strong> <strong>属性可用于控制尺寸大小</strong> 。</p><h2 id="flex-basis-在-flexbox-中的作用" tabindex="-1"><a class="header-anchor" href="#flex-basis-在-flexbox-中的作用" aria-hidden="true">#</a> flex-basis 在 Flexbox 中的作用</h2><p><code>flex-basis</code> 属性在 Flexbox 中对 Flex 项目尺寸起着决定性的作用。简单地说，<strong><code>flex-basis</code></strong> <strong>属性在任何空间分配发生之前，会对 Flex 项目的尺寸大小进行初始化</strong> 。即，<strong>在任何 Flex 容器空间（剩余空间或不足空间）分配发生之前初始化 Flex 项目尺寸</strong> 。</p>',5),b=n("code",null,"flex-grow",-1),v=n("code",null,"flex-shrink",-1),x={href:"https://juejin.cn/book/7161370789680250917/section/7161623670622781471",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/book/7161370789680250917/section/7161623797794078750",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/book/7161370789680250917/section/7164357320367931399",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><code>flex-basis</code> 属性的语法规则很简单：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex-basis</span><span class="token punctuation">:</span> content | &lt;width&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该属性的默认值是 <code>auto</code> ，它可以接受 <code>content</code> 和 <code>&lt;width&gt;</code> 值。</p><ul><li><code>&lt;width&gt;</code> 值指的是 CSS 的 <code>width</code> 属性（尺寸属性），可用于 <code>width</code> 属性的值都可以用于 <code>flex-basis</code> ，比如我们熟悉的 <code>px</code> 、<code>%</code> 、<code>vw</code> 等，以及需要根据内容自动计算的属性值，比如 <code>min-content</code> 、<code>max-content</code> 和 <code>fit-content</code> 等。</li></ul>`,4),F=e(`<ul><li><code>content</code> 是指 Flex 项目的内容的自动尺寸，它通常相当于 Flex 项目最大内容大小（<code>max-content</code>）。</li></ul><p>如果 <code>flex-basis</code> 的值设置为 <code>auto</code> ，浏览器将先检查 Flex 项目的主尺寸（Main Size）是否设置了绝对值，再计算 Flex 项目的初始值。比如说，你给 Flex 项目显式设置了 <code>width: 200px</code>，那么 <code>200px</code> 就是 Flex 项目的 <code>flex-basis</code> 值，该值也被称为是 Flex 项目的假设主尺寸，因为 Flex 项目的最终主尺寸（<code>flex-basis</code> 计算后的值）会受 Flex 容器剩余空间或不足空间的影响，除非 <code>flex-grow</code> 和 <code>flex-shrink</code> 两属性的值都显式设置为 <code>0</code> 。</p><p>如果 Flex 项目可以自动调整大小，则 <code>auto</code> 会解析为其内容的大小，此时 <code>min-content</code> 和 <code>max-content</code> 就会起作用，并且 Flex 项目的 <code>flex-basis</code> 值将会是 <code>max-content</code> 。</p><p>有一点需要注意的是，如果在 <code>flex-basis</code> 属性上设置了除 <code>auto</code> 和 <code>content</code> 之外的所有值，它和书写模式以及阅读模式是有关的，在水平书写模式（<code>ltr</code> 或 <code>rtl</code>），<code>flex-basis</code> 的解析方式与 <code>width</code> 相同。</p><p>不同的是，如果一个值对于 <code>width</code> 将解析为 <code>auto</code> ，那么该值对于 <code>flex-basis</code> 就会被解析为 <code>content</code>。例如，<code>flex-basis</code> 的值是一个百分比值，那么它会相对于 Flex 容的主轴尺寸（Main Size）来计算；如果 Flex 容器的大小不确定时，则 <code>flex-basis</code> 使用的值会是 <code>content</code>。</p><h2 id="可用于-flex-basis-属性的值" tabindex="-1"><a class="header-anchor" href="#可用于-flex-basis-属性的值" aria-hidden="true">#</a> 可用于 flex-basis 属性的值</h2><blockquote><p><strong>可用于 CSS 的尺寸属性，比如</strong> <strong><code>width</code></strong> <strong>的值都可用于</strong> <strong><code>flex-basis</code></strong> <strong>属性上。</strong></p></blockquote><p>现在我们知道了，<code>flex-basis</code> 属性可以取 <code>&lt;width&gt;</code> 值来对 Flex 项目的主尺寸进行初始化，而一般情况之下，这个 <code>&lt;width&gt;</code> 就好比 CSS 中的 <code>width</code> 属性。为了更好地帮大家理解 <code>flex-basis</code> 取 <code>&lt;width&gt;</code> 中所起的作用，这里有必要花一点时间来重温 <code>width</code> 属性。</p><blockquote><p><strong>特别注意，这里的</strong> <strong><code>&lt;width&gt;</code></strong> <strong>是一个属性值，即</strong> <strong><code>flex-basis</code></strong> <strong>属性的值；而</strong> <strong><code>width</code></strong> <strong>却是一个 CSS 的尺寸属性，用于设置元素宽度的尺寸，它的值类型种类多样</strong> 。</p></blockquote><p>你可以给任何一个<strong>非内联</strong>元素显式设置一个 <code>width</code> 属性，用来指定容器的宽度。只不过不同的属性值渲染出来的结果有所差异。比如下面这样的一个示例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98764f2b62374bb2b2d943661f0f33f0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,12),_={href:"https://codepen.io/airen/full/wvjqXrZ",target:"_blank",rel:"noopener noreferrer"},y=e('<p>正如上图所示，当给一个容器的 <code>width</code> 属性设置一个固定值时，有一个极大的缺陷，即 <strong>内容断行</strong> 或 <strong>内容溢容器</strong> ，尤其是内容溢出，它很有可能就会打破布局的美观。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64f8fef213674ad59da5dfe7987ec65b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><strong>很多时候，Web 开发者并不知道容器的内容是什么，所占的宽度是多少，就会造成上图的现象。哪怕是使用了</strong> <strong><code>min-content</code></strong> <strong>、<code>max-content</code>和</strong> <strong><code>fit-content</code></strong> <strong>也会面临类似现象</strong> 。</p><p>为此，为了尽可能避免这种缺陷的出现，在给容器设置尺寸的时候，更建议使用 <code>min-width</code> 来替代 <code>width</code> 属性。首先能被运用于 <code>width</code> 属性的值都可以用在 <code>min-width</code> 属性上。不同的是，<code>min-width</code> 可以防止 <code>width</code> 值小于 <code>min-width</code> 指定的值所造成的布局缺陷。</p><blockquote><p><strong>注意，<code>min-width</code>的默认值是<code>auto</code>，浏览器计算出来的值是<code>0</code></strong> 。</p></blockquote><p>在上面的示例中，我们知道容器 <code>width</code> 设置的值小于内容宽度的时候，会造成一定的缺陷（我们不希望看到的效果）。如果在上面的示例中，在 <code>.item</code> 上添加一个 <code>min-width</code> 就可以较好避免这种现象：</p><p>暂时无法在飞书文档外展示此内容</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a38b58a0fbfd4372a77d465f55998f3b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',8),z={href:"https://codepen.io/airen/full/ZEoJjEK",target:"_blank",rel:"noopener noreferrer"},j=e('<p>你可能会好奇，那么应该给容器的 <code>min-width</code> 属性设置一个什么样的值呢？一般情况之下，这是根据元素所在的环境来决定的。它是一个假想的理想值。</p><p><code>min-width</code> 属性在构建 Web 布局或 Web 组件时是很有用处的，尤其是在构建一个<strong>多语言</strong> 的 Web 页面或 Web 应用中。在多语言版本网站中“<strong>表达同一个意思的文本内容所占宽度是不一致的</strong> ”，比如一个“完成”按钮，中文可能是“完成”，英文可能是“Done”，阿位伯文是“إنجاز”，韩文是“완료”，日文可能是“フィニッシュ”，蒙古语又是“Дуусга”，等等。</p><p>当你从中文切换到阿位伯文（或英文切换到阿位伯文）时，文本内容的所占宽度并不一致。如果未显式给容器设置 <code>width</code> 或 <code>min-width</code> 属性的值，就会造成按钮大小不一致，这也有可能会影响 Web 布局或整体的视觉效果。如果显式加上 <code>width</code> 就有可能会在某个语种下造成内容溢出或断行，那么这个时候显式设置一个 <code>min-width</code> 就会有一个较好的视觉效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88841eb47a5a404b9befda0fe407c3b1~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',4),q={href:"https://codepen.io/airen/full/dyezjZL",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>使用 <code>min-width</code> 的好处大家都看到了，在内容较长的按钮上，<code>min-width</code> 可以扩展容器的宽度，在内容较少的按钮上，具有统一的尺寸。</p><p><code>min-width</code> 除了在一些多语言版本网站上可见之外，也适用于像“徽标”（Badge）这样的组件：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d057060c0ffe455395713dba16b1c8b2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在构建这样的标签列表时，建议限制一个标签的最小宽度（即显式设置 <code>min-width</code> 属性的值），这样就可以保证标签列表项内容很短（少）时，它的外观不会受到影响：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10b4418ce0e24d119e1c69279f960583~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>有了这种灵活性，无论标签内容有多短，标签在视觉上看起来都不错。另外，除了考虑内容过短之外，我们还需要考虑内容过长时对 UI 的视觉影响，这时候我们可以考虑使用 <code>max-width</code> 属性。</p><p>在容器（或元素）上显式设置 <code>max-width</code> 属性值时，可以防止 <code>width</code> 属性值超过了 <code>max-width</code> 指定的值，造成内容溢出。<code>max-width</code> 的一个常见而简单的用例是将它与图像一起使用。考虑下面的例子：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c4f78dd7f6748b994140ae370e262ac~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img> 比它的父容器更大。通常给 img 设置 max-width 的值为 100% ，图像的宽度就不会超过容器的宽度。如果图像比父容器小，则 max-width: 100% 不会对图像产生实际影响，因为它比容器小。</p><p>也就是说，CSS 中的 <code>width</code> 、<code>min-width</code> 和 <code>max-width</code> 都可以用来设置元素的宽度。很多时候，在实际的使用过程中，可能会在同一个元素上使用多个属性来设置容器的宽度。比如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 或 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 或 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 或 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了，它们都是用来指定容器宽度的，当同一个容器上使用它们时，究竟由谁来决定容器最终的尺寸。</p><p>虽然说 <code>width</code> 、 <code>min-width</code> 和 <code>max-width</code> 三个属性都可以用来指定一个容器的宽度，但它们之间还是有一定的差异的，比如说：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码将会告诉浏览器，<code>.item</code> 元素的宽度是 <code>150px</code> （由<code>width</code> 指定），但它不能小于 <code>100px</code> (由 <code>min-width</code> 指定) ，且不能大于 <code>200px</code> （由 <code>max-width</code> 指定）。不难发现，其中 <code>min-width</code> 和 <code>max-width</code> 属性像是给容器的宽度做了一定的限制。也就是说，当符合某一条件时，其中就有一个属性起作用。这个也有点类似于 CSS 选择器权重一样，看谁的权重大，谁就起作用。</p><p>为了搞清楚，它们之间权重是如何比较（谁决定谁），我们这里通过几个简单的示例来向大家阐述。先来看 <code>width</code> 和 <code>min-width</code> 两者的关系。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">button</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width &gt; min-width */</span>
<span class="token selector">.case1 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width = min-width */</span>
<span class="token selector">.case2 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width &lt; min-width */</span>
<span class="token selector">.case3 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98cc221e01094e7baf5e537f8c732a71~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,18),C={href:"https://codepen.io/airen/full/qBYXJWq",target:"_blank",rel:"noopener noreferrer"},W=e(`<p>从这个示例中我们可以得到一个简单的结论：</p><blockquote><p><strong>当<code>width</code>属性的值大于或等于<code>min-width</code>属性的值时，浏览器会取<code>width</code></strong> <strong>属性的值；当</strong> <strong><code>width</code></strong> <strong>属性的值小于</strong> <strong><code>min-width</code></strong> <strong>属性的值时，浏览器会取</strong> <strong><code>min-width</code></strong> <strong>属性的值</strong> 。</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">if (width &gt;= min-width)</span> <span class="token punctuation">{</span>
    浏览器取 width 属性的值
<span class="token punctuation">}</span> 

<span class="token selector">if (width &lt; min-width)</span> <span class="token punctuation">{</span>
    浏览器取 min-width 属性的值
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上面示例中的 <code>min-width</code> 换成 <code>max-width</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">button</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width &gt; max-width */</span>
<span class="token selector">.case1 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width = max-width */</span>
<span class="token selector">.case2 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* width &lt; max-width */</span>
<span class="token selector">.case3 button:nth-child(2)</span> <span class="token punctuation">{</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa7985a8498a43ea9867dea94e9df8f1~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),D={href:"https://codepen.io/airen/full/WNJEaOq",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>从这个示例中，我们可以得到这样的一个结论：</p><blockquote><p><strong>当</strong> <strong><code>width</code></strong> <strong>属性的值大于</strong> <strong><code>max-width</code></strong> <strong>属性的值时，浏览器会取</strong> <strong><code>max-width</code></strong> <strong>属性的值；当</strong> <strong><code>width</code></strong> <strong>属性的值小于或等于</strong> <strong><code>max-width</code></strong> <strong>属性的值时，浏览器会取</strong> <strong><code>width</code></strong> <strong>属性的值</strong> 。</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">if (width &gt; max-width)</span> <span class="token punctuation">{</span>
    浏览器取 max-width 属性的值
<span class="token punctuation">}</span>

<span class="token selector">if (width =&lt; max-width)</span> <span class="token punctuation">{</span>
    浏览器取 width 属性的值
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也有时候，在同一个元素上显式设置 <code>width</code> 、<code>min-width</code> 和 <code>max-width</code> ，或者只在元素上显式设置 <code>min-width</code> 和 <code>max-width</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f0180d6e5cb4c4986921654d179d3c7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),G={href:"https://codepen.io/airen/full/GRdvYdw",target:"_blank",rel:"noopener noreferrer"},B=e("<p>正如上面这个示例所示：</p><blockquote><p><strong>如果</strong> <strong><code>min-width</code></strong> <strong>属性的值大于</strong> <strong><code>max-width</code></strong> <strong>属性的值，浏览器会将</strong> <strong><code>min-width</code></strong> <strong>属性的值作为容器（元素）的宽度；如果</strong> <strong><code>min-width</code>属性的值小于<code>max-width</code>属性的值，则会取<code>max-width</code>属性的值</strong> 。</p></blockquote><p>如果它们同时出现在一个容器上，可以按照下面的规则来决定元素的宽度：</p><ul><li>元素的 <code>width</code> 大于或等于 <code>max-width</code> 时，取 <code>max-width</code> ，即 <strong><code>max-width</code></strong> <strong>能覆盖</strong> <strong><code>width</code></strong> ；</li></ul>",4),M=e("<ul><li>元素的 <code>width</code> 小于或等于 <code>min-width</code> 时，取 <code>min-width</code> ，即 <strong><code>min-width</code></strong> <strong>能覆盖</strong> <strong><code>width</code></strong> ；</li></ul>",1),L=e(`<ul><li>当 <code>min-width</code> 大于 <code>max-width</code> 时，取 <code>min-width</code> ，即 <strong><code>min-width</code></strong> <strong>优先级将高于</strong> <strong><code>max-width</code></strong> 。</li></ul><blockquote><p><strong>注意，上面这个规则同样适用于 CSS 的<code>min-height</code>、<code>height</code>和<code>max-height</code>以及它们对应的 CSS 逻辑属性，比如<code>min-inline-size</code>、<code>inline-size</code>和<code>max-inline-size</code>；<code>min-block-size</code>、<code>block-size</code>和<code>max-block-size</code></strong> 。</p></blockquote><p>CSS 中给元素设置一个尺寸时，除了设置具体值之外，还可以通过一些数学表达式来给其设置值，比如 <code>calc()</code> 、<code>min()</code> 、<code>max()</code> 和 <code>clamp()</code> 等比较函数：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.calc</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw - <span class="token function">var</span><span class="token punctuation">(</span>--sideba-width<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--gap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.min</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.max</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 30vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.clamp</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">clamp</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 300px + 15%<span class="token punctuation">,</span> 400px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>min()</code> 、<code>max()</code> 可以传入多个值，而且它们：</p><ul><li><code>min()</code> 可用来给元素设置一个最大值，相当于 <code>max-width</code>；</li></ul>`,6),V=e(`<ul><li><code>max()</code> 可用来给元素设置一个最小值，相当于 <code>min-width</code>。</li></ul><p>也就是说：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>280px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几个函数是非常有用的，它们同样也可以用于 <code>flex-basis</code> 属性上。而且使用它们可以帮助 Web 开发者构建<strong>响应式</strong> <strong>UI</strong> 。有关于这方面更详细的介绍，将单独放到后面的课程中，这里你只需要知道，我们可以在尺寸属性上使用这些函数，做一些简单的四则运算即可。</p><p>除了上面提到这些方式可以给一个容器设置宽度之外，你还可以给 <code>width</code> 属性显式设置 <code>min-content</code> 、<code>max-content</code> 和 <code>fit-content</code> 值。即能根据元素内容来决定元素大小，因此它们统称为<strong>内部尺寸</strong> 。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> CSS is Awesome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca27e5c2cb09431394a5ee5b51f327ac~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,8),N={href:"https://codepen.io/airen/full/RwyLGmg",target:"_blank",rel:"noopener noreferrer"},O=e(`<p>由于 <code>&lt;h1&gt;</code> 是一个块元素，如果没有显式使用<code>display</code> 或它的父元素未改变上下文格式（比如父元素没有显式设置 <code>display</code> 属性的值），那么 <code>width</code> 取值为 <code>auto</code> 时，它的宽度和其父元素的宽度等同（有点类似于 <code>100%</code> 的效果）。当其父容器宽度变小时，它也会跟着变小，小到 <code>0</code> 。其内容在没有做其他样式处理时（比如强制不断行 <code>white-space: nowrap</code>），内容会自动断行。</p><p>如果你把 <code>width</code> 属性的值设置为 <code>min-content</code> 时：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 外在尺寸 */</span>
<span class="token selector">h1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 内在尺寸*/</span>
<span class="token selector">h1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/180bba994afa463eb3f22b2c64e6da92~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),J={href:"https://codepen.io/airen/full/gOzGLYo",target:"_blank",rel:"noopener noreferrer"},X=e(`<p>从上图中不难发现，<code>width</code> 取值为 <code>min-content</code> 时，<code>h1</code> 的宽度始终是单词“<strong>Awesome</strong>”长度（大约是 <code>144.52px</code>）。它的宽度和容器宽度变化并无任何关系，但它受排版内相关的属性影响，比如 <code>font-size</code> 、<code>font-family</code> 等。</p><p>注意，如果 <code>h1</code> 元素内有一个后代元素显式指定了一个固定值，且该元素的宽度大于或等于 <code>min-content</code>，那么 <code>min-content</code> 将会与这个元素宽度相等。</p><p>再来看 <code>max-content</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 外在尺寸 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 内在尺寸 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f1e20a58e024f39b3fc340c03b6d52a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),Y={href:"https://codepen.io/airen/full/jOxGVEd",target:"_blank",rel:"noopener noreferrer"},R=e(`<p>当 <code>h1</code> 的 <code>width</code> 取值为 <code>max-content</code> 时，它的宽度是 <code>h1</code> 所在行所有内容的宽度（有点类似于元素加了 <code>white-sapce: nowrap</code> ，强制不断行时的长度）。最后再来看 <code>fit-content</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 外在尺寸 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 内在尺寸 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0448e590a9c04218ac34e5b76af61750~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,3),Z={href:"https://codepen.io/airen/pen/zYZvGrY",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>相对而言，<code>fit-content</code> 要比 <code>min-content</code> 和 <code>max-content</code> 复杂得多：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单地说，<code>fit-content</code> 相当于 <code>min-content</code> 和 <code>max-content</code>，其取值：</p><ul><li>如果元素的可用空间充足，<code>fit-content</code> 将使用 <code>max-content</code> ；</li></ul>`,4),K=n("ul",null,[n("li",null,[s("如果元素的可用空间不够允足，比 "),n("code",null,"max-content"),s(" 小点（介于 "),n("code",null,"min-content"),s(" 至 "),n("code",null,"max-content"),s(" 之间），那就是用可用空间的值，不会导致内容溢出；")])],-1),A=e(`<ul><li>如果元素的可用空间很小，比 <code>min-content</code> 还小，那就使用 <code>min-content</code>。</li></ul><p>使用下图来描述它们之间的关系：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14bf87e9e26e40cfb40e631d74509c95~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>min-content</code> 、<code>max-content</code> 和 <code>fit-content</code> 它们是属性值，可以被运用于 CSS 的尺寸属性上，比如 <code>width</code> 、 <code>height</code> 、<code>inline-size</code> 和 <code>block-size</code> 。同样的，它们也可以用在 <code>flex-basis</code> 属性上。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item:has(img)</span> <span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--flex-basis<span class="token punctuation">,</span> auto<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c8405d734b64c45b731265411ad7d62~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),P={href:"https://codepen.io/airen/full/VwxMPPq",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,[s("简单小结一下。"),n("code",null,"flex-basis"),s(" 可以因设置的值不同，所起的功效也将有差异，大致可以分为：")],-1),T=n("ul",null,[n("li",null,[s("默认值："),n("code",null,"auto"),s(" ，根据内容来计算；")])],-1),Q=n("ul",null,[n("li",null,[s("固定值："),n("code",null,"<length>"),s(" ，数值加上固定单位的长度值，比如 "),n("code",null,"100px"),s(" 、"),n("code",null,"100pt"),s(" ；")])],-1),H=e("<ul><li>相对值：<code>&lt;length-percentage&gt;</code> ，数值加上相对单位的值，比如 <code>10rem</code> 、<code>10em</code> 、<code>10ch</code> 、<code>10ex</code> 、<code>10vw</code> 、<code>10vh</code> 和 <code>10%</code> ；</li></ul>",1),$=e("<ul><li>动态计算值：使用 <code>calc()</code> 、<code>min()</code> 、<code>max()</code> 和 <code>clamp()</code> ，比如 <code>calc(100% - var(--sidebar-width))</code> 、<code>clamp(10rem, 10rem + 2vw, 30rem)</code> ；</li></ul>",1),nn=n("ul",null,[n("li",null,[s("内在尺寸："),n("code",null,"min-content"),s(" 、"),n("code",null,"max-content"),s(" 和 "),n("code",null,"fit-content"),s(" 。")])],-1),sn=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7a52d47cfd141c7a7f35d32edcf90fb~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),en={href:"https://codepen.io/airen/full/JjvrEVx",target:"_blank",rel:"noopener noreferrer"},an=e('<h2 id="flex-basis-的计算" tabindex="-1"><a class="header-anchor" href="#flex-basis-的计算" aria-hidden="true">#</a> flex-basis 的计算</h2><p>现在你已经知道了，在 Flexbox 布局中，<code>flex-basis</code> 是用来初始化 Flex 项目尺寸的，即 <strong>初始化 Flex 项目的主尺寸（Main Size）</strong> ，也被称为“<strong>假设主尺寸</strong> ”。初始设置的 <code>flex-basis</code> 值并不是 Flex 项目的最终主尺寸，因为影响其最终尺寸的因素较多，比如，Flex 容器的剩余空间（或不足空间）、Flex 项目的扩展因子（<code>flex-grow</code> 属性的值 ）、Flex 项目的收缩因子（<code>flex-shrink</code>）、Flex 项目的最小值（<code>min-*</code>）和最大值（<code>max-*</code>），以及 <code>flex-basis</code> 的初始值等等。</p><p>简单地说，<code>flex-basis</code> 的计算分为两个部分。</p>',3),on=n("code",null,"flex-grow",-1),tn=n("code",null,"flex-shink",-1),cn=n("code",null,"flex-basis",-1),pn=n("code",null,"flex-basis",-1),dn={href:"https://juejin.cn/book/7161370789680250917/section/7161623797794078750",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://juejin.cn/book/7161370789680250917/section/7164357320367931399",target:"_blank",rel:"noopener noreferrer"},un=e(`<ul><li>指定 Flex 项目尺寸大小的相关属性权重的计算。</li></ul><p>我们这里要和大家一起探讨的就是第二个部分，即 <strong>指定 Flex 项目尺寸大小的相关属性权重的计算</strong> 。也就是说，当 Flex 项目上同时出现 <code>flex-basis</code> 、<code>width</code> （或 <code>inline-size</code>）、<code>min-width</code> （或 <code>min-inline-size</code>）和 <code>max-width</code> （或 <code>max-block-size</code>） 时，究竟是谁最有决定权。</p><blockquote><p>需要特别声明的是，这部分的计算是指 Flex 项目的假设主尺寸，就是在参与 <code>flex-grow</code> 、<code>flex-shrink</code> 计算之前，Flex 项目的初始化尺寸由谁来决定。</p></blockquote><p>事实上，在 Flexbox 布局模块 <strong>初始化 Flex 项目的尺寸时存在一个隐式的公式</strong> ，即：</p><blockquote><p><strong><code>content</code></strong> ➜ <strong><code>width</code></strong> ➜ <strong><code>flex-basis</code></strong></p></blockquote><p>它的意思是，<strong>如果 Flex 项目未显式指定</strong> <strong><code>flex-basis</code></strong> <strong>属性的值，那么</strong> <strong><code>flex-basis</code></strong> <strong>将回退到</strong> <strong><code>width</code></strong> <strong>属性；如果 Flex 项目同时都未显式指定</strong> <strong><code>flex-basis</code></strong> <strong>和</strong> <strong><code>width</code></strong> <strong>属性的值，那么</strong> <strong><code>flex-basis</code></strong> <strong>将回退到基于 Flex 项目的内容计算宽度</strong> 。</p><p>不过，最终决定 Flex 项目尺寸大小时，还会受 <code>flex-grow</code> 和 <code>flex-shrink</code> 以及 Flex 容器大小的影响，并且 Flex 项目的最终尺寸也会受 <code>min-width</code> （或 <code>min-inline-size</code> )和 <code>max-width</code> （或 <code>max-inline-size</code> ）属性值的限制。</p><p>接下来用一个简单的示例来阐述 Flex 项目的内容（<code>content</code>）、<code>width</code> 以及 <code>flex-basis</code> 对 Flex 项目尺寸的影响。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>longlonglongword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>ook<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>ountries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>iscuss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>astern<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">inline-size</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> 2px dashed #09f<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>
  <span class="token property">min-block-size</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中的 <code>.item</code> 并没有显式设置任何与尺寸有关的属性（比如 <code>width</code> ），也没有显式设置 <code>flex-basis</code> 属性的值。此时，浏览器会将 Flex 项目的 <code>flex-basis</code> 属性的值当作为 <code>auto</code> ，即：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器同时也会将 Flex 项目的 <code>width</code> 属性的值视为 <code>auto</code> ，即：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，每个 Flex 项目的初始化尺寸由其自身的内容来决定：</p><ul><li><p>Flex 项目 A 的宽度约是 <code>237.56px</code>；</p></li><li><p>Flex 项目 B 的宽度约是 <code>70.26px</code>；</p></li><li><p>Flex 项目 C 的宽度约是 <code>120.56px</code>；</p></li><li><p>Flex 项目 D 的宽度约是 <code>100.69px</code> ；</p></li><li><p>Flex 项目 E 的宽度约是 <code>100.11px</code> 。</p></li></ul><p>Flex 容器 <code>.container</code> 有足够多的空间来放置这些 Flex 项目：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4af9aa2f2a4a4493af94701ce65b8ed8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,18),rn={href:"https://codepen.io/airen/full/BaxwRBx",target:"_blank",rel:"noopener noreferrer"},mn=e(`<p>注意，所有 Flex 项目的 <code>flex-grow</code> 和 <code>flex-shrink</code> 都采用的是默认值，即：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，Flex 项目的初始化尺寸就是 <strong>Flex 项目自身内容（<code>content</code>）来撑开 Flex 项目（浏览器计算值）</strong> 。它和 <code>fit-content</code> 的表现是极其相似的，Flex 容器有足够空间时，它的表现和 <code>max-content</code> 相似，反则它的表现和 <code>min-content</code> 相似。</p><p>不过，要是在 Flex 项目上重置了 <code>flex-shrink</code> 属性的值（显式设置为 <code>0</code> ），Flex 项目不可收缩，那么 <code>flex-basis</code> 和 <code>width</code> 取值为 <code>auto</code> 时，它的表现和 <code>flex-basis</code> 或 <code>width</code> 设置为 <code>max-content</code> 是相同的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7de40591114421095b37d0692bf4605~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),gn={href:"https://codepen.io/airen/full/NWMagjx",target:"_blank",rel:"noopener noreferrer"},kn=e(`<p>由此我们可以得到第一个结论：<strong>如果 Flex 项目的</strong> <strong><code>flex-basis</code></strong> <strong>和</strong> <strong><code>width</code></strong> <strong>取初始值</strong> <strong><code>auto</code></strong> <strong>时，Flex 项目的初始化尺寸是</strong> <strong><code>fit-content</code></strong> <strong>；但当</strong> <strong><code>flex-shrink</code></strong> <strong>显式重置为</strong> <strong><code>0</code></strong> <strong>，Flex 项目不可收缩时，Flex 项目的初始化尺寸就是</strong> <strong><code>max-content</code></strong> 。在这种条件之下，Flex 项目在根据 <code>flex-grow</code> 和 <code>flex-shrink</code> 比例重新计算 <code>flex-basis</code> 是最为复杂的，浏览器可能需要重复循环遍历的计算 <code>flex-basis</code> 的值。</p><p>接下来，显式地在 Flex 项目上给 <code>width</code> 指定一个值，比如 <code>150px</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将所有宽度为 <code>150px</code> 的 Flex 项目放到一个宽度为 <code>1000px</code> 的 Flex 容器中，Flex 容器有一定的剩余空间出现（即 <code>250px</code>）：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7aa80d50fb406ea07c8f38195c51d2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),bn={href:"https://codepen.io/airen/full/VwxMWVO",target:"_blank",rel:"noopener noreferrer"},vn=e(`<p>在该示例中，Flex 项目的 <code>flex-basis</code> 没有显式指定，所以会取其默认值 <code>auto</code> ，这个时候会回到 <code>width</code> 属性的值，即 <code>150px</code> 。也就是说，Flex 项目的 <code>flex-basis</code> 初始化尺寸就等于 <code>width</code> 的值。这也印证了：</p><blockquote><p><strong>如果 Flex 项目未显式设置</strong> <strong><code>flex-basis</code></strong> <strong>属性的值，浏览器会采取 Flex 项目上的</strong> <strong><code>width</code></strong> <strong>属性的值</strong> 。</p></blockquote><p>你可能已经发现了，由于在 Flex 项目上设置的 <code>width</code> 值小于 Flex 项目的内容最小尺寸（<code>min-content</code>），将会造成 Flex 项目内容溢出，这和其他溢出容器的表现是一样的。而且 <code>flex-grow</code> 属性使用的也是其初始值 <code>0</code> ，所以 Flex 项目并不会去分配 Flex 容器的剩余空间，除非重置 Flex 项目的 <code>flex-grow</code> 值。</p><p>另外，当 Flex 容器有剩余空间时，即使 Flex 项目的 <code>flex-shrink</code> 值是 <code>1</code> （可收缩），Flex项目的宽度也不会产生变窄的现象（因为只有 Flex 容器空间不足时，Flex 项目才会按照 <code>flex-shink</code> 的比例因子缩小）。</p><p>接着再看另一种情景，当 Flex 项目上同时显式设置了 <code>width</code> 和 <code>flex-basis</code> 时，浏览器又会取哪个值作为 Flex 项目的初始化的宽度呢？比如下面这个示例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/350197601da5400cbe593f8aaab5595e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),xn={href:"https://codepen.io/airen/full/MWGOGwE",target:"_blank",rel:"noopener noreferrer"},hn=e("<p>正如你所见，如果 Flex 项目上同时显式设置了 <code>width</code> 和 <code>flex-basis</code> 值（非 <code>auto</code> 默认值）时，<code>flex-basis</code> 属性的值将会替代 <code>width</code> 的值。但是：</p><ul><li>当 Flex 项目的 <code>flex-basis</code> 值小于 <code>width</code> 值，且 <code>width</code> 值小于 Flex 项目的内容最小值（<code>min-content</code>）时，Flex 项目的 <code>flex-basis</code> 的值会等于 <code>width</code> 属性值；</li></ul>",2),fn=e("<ul><li>当 Flex 项目的 <code>flex-basis</code> 值小于 <code>width</code> 值，但 <code>width</code> 值大于 Flex 项目的内容最小值（<code>min-content</code>）时，Flex 项目的 <code>flex-basis</code> 的值会等于 Flex 项目的内容最小值（<code>min-content</code>）；</li></ul>",1),wn=n("ul",null,[n("li",null,[s("当 Flex 项目的 "),n("code",null,"flex-basis"),s(" 值大于 "),n("code",null,"width"),s(" 值，但小于 Flex 项目的内容最小值（"),n("code",null,"min-content"),s("）时，Flex 项目的 "),n("code",null,"flex-basis"),s(" 的值会等于 "),n("code",null,"width"),s(" 属性值；")])],-1),Fn=e(`<ul><li>当 Flex 项目的 <code>flex-basis</code> 值大于 <code>width</code> 值，且同时大于 Flex 项目的内容的最小值，Flex 项目的 <code>flex-basis</code> 值不会被任何其他值所替代。</li></ul><p>虽然如此，但是在 Flex 项目上只要同时显式设置了 <code>flex-basis</code> 和 <code>width</code> 两属性的值，浏览器都将 Flex 项目的初始化尺寸（假想主尺寸）视为 <code>flex-basis</code> 的值。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 等同于 */</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，Flex 项目初始化的假想主尺寸都会是 <code>100px</code> ，也就是说，浏览器在根据 Flex 容器剩余空间（或不足空间）、Flex 项目的 <code>flex-grow</code> 或 <code>flex-shrink</code> 计算 <code>flex-basis</code> 最终值时，它（<code>flex-basis</code>）的最初基础都将是 <code>100px</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51db131223a543f1b2a364f305effd68~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这也就是，<strong>Flex 项目的总宽度（<code>width</code>属性值总和）大于 Flex 容器空间（即 Flex 容器产生不足空间），但 Flex 项目的</strong> <strong><code>flex-basis</code></strong> <strong>显式设置了</strong> <strong><code>0</code></strong> <strong>或</strong> <strong><code>0%</code></strong> <strong>时，即使 Flex 项目的</strong> <strong><code>flex-shrink</code></strong> <strong>（收缩因子）是非</strong> <strong><code>0</code></strong> <strong>的值，比如</strong> <strong><code>1</code></strong> <strong>或大于</strong> <strong><code>1</code></strong> <strong>的其他值，Flex 项目也不会按收缩比例分配 Flex 容器的不足空间。最终</strong> <strong>Flex 项目的</strong> <strong><code>flex-basis</code></strong> <strong>值等于 Flex 项目的内容最小尺寸（<code>min-content</code>）</strong> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a1cfd3f6cdc4585af84ffee0a95105a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),_n={href:"https://codepen.io/airen/full/YzLELvX",target:"_blank",rel:"noopener noreferrer"},yn=e("<p>因此，<strong>如果你要给 Flex 项目设置一个初始化的尺寸（一个假设的主尺寸或者说一个理想的尺寸），应该尽可能地在 Flex 项目使用</strong> <strong><code>flex-basis</code></strong> <strong>来设置这个初始化尺寸</strong> 。这样做可以更直接地告诉浏览器，Flex 项目的初始化主尺寸有多大。因为浏览器在计算 Flex 项目的 <code>flex-basis</code> 最终值都和 Flex 项目的初始化的 <code>flex-basis</code> 值有关联。<strong>这里是不是有一种此</strong> <strong><code>flex-basis</code></strong> <strong>非彼</strong> <strong><code>flex-basis</code></strong> <strong>的感觉</strong> （绕晕没）！</p><p>在 Flexbox 布局中，只要给 Flex 项目显式设置了 <code>flex-basis</code> 的值，就有可能会造成 Flex 容器有剩余空间或不足空间。不过在默认情况之下，Flex 容器有剩余空间时，Flex 项目不会自动扩展，这是因为 Flex 项目的 <code>flex-grow</code> 默认值为 <code>0</code>，但 Flex 容器只要有不足空间，Flex 项目就会自动收缩，这是因为 Flex 项目的 <code>flex-shrink</code> 的默认值为 <code>1</code> 。</p><p>另外一点，Flexbox 布局中的 <code>flex-basis</code> 值，浏览器最终计算的 <code>flex-basis</code> 最终值也会像 <code>width</code> 属性一样，受 <code>min-width</code> （或 <code>min-inline-size</code>）、<code>min-height</code> （或 <code>min-block-size</code>）、<code>max-width</code> （或 <code>max-inline-size</code>）和 <code>max-height</code> （或 <code>max-block-size</code>）值的限制。</p><p>前面已经说过，在 CSS 中，如果元素同时出现 <code>width</code> 、<code>min-width</code> 和 <code>max-width</code> 属性时，其权重计算遵循以下规则：</p><ul><li>如果元素的 <code>width</code> 值大于 <code>max-width</code> 值时，<code>max-width</code> 会覆盖 <code>width</code> 值，最终取 <code>max-width</code> 值；</li></ul>",5),zn=n("ul",null,[n("li",null,[s("如果元素的 "),n("code",null,"width"),s(" 值小于 "),n("code",null,"min-width"),s(" 值时，"),n("code",null,"min-width"),s(" 会覆盖 "),n("code",null,"width"),s(" 值，最终取 "),n("code",null,"min-width"),s(" 值；")])],-1),jn=e("<ul><li>如果 <code>min-width</code> 值大于 <code>max-width</code> 值时，<code>min-width</code> 的优先级将高于 <code>max-width</code> 值，最终会取 <code>min-width</code> 。</li></ul><blockquote><p>这些规则同样适用于 <code>height</code> 、<code>min-height</code> 和 <code>max-height</code> 以及它们对应的 CSS 逻辑属性！</p></blockquote><p>那么在 Flex 项目上，同时出现 <code>width</code> 、<code>flex-basis</code> 和 <code>min-width</code> 时，具体的运算过程如下：</p><ul><li>根据“<code>content</code> ➜ <code>width</code> ➜ <code>flex-basis</code>”法则，先判断出运用于 Flex 项目的初始化的值，即 <code>flex-basis</code> 会运用于 Flex 项目；</li></ul>",4),qn=e(`<ul><li>再将计算出的 <code>flex-basis</code> 值和 <code>min-width</code> 值作比较，如果 <code>flex-basis</code> 值小于 <code>min-width</code> 值，则 Flex 项目的最终值为 <code>min-width</code> 值，即 <strong><code>min-width</code></strong> <strong>值会覆盖</strong> <strong><code>flex-basis</code></strong> <strong>的值作为 Flex 项目的最终值</strong> 。</li></ul><p>比如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 180px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终所有 Flex 项目的初始化值（Base Size）是 <code>100px</code> ，最小值（Minimum Size）是 <code>180px</code> ，浏览器最终计算出来的 <code>flex-basis</code> 值也会是 <code>min-width</code> 值，即 <code>180px</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dff67f72a8db4b56bd982397d90bcf07~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),Sn={href:"https://codepen.io/airen/full/jOxaxjK",target:"_blank",rel:"noopener noreferrer"},Cn=e("<p>如果 Flex 项目同时出现 <code>width</code> 、<code>flex-basis</code> 和 <code>max-width</code> 时，具体的运算过程如下：</p><ul><li>根据“<code>content</code> ➜ <code>width</code> ➜ <code>flex-basis</code>”法则，先判断出运用于 Flex 项目的初始化的值，即 <code>flex-basis</code> 会运用于 Flex 项目；</li></ul>",2),Wn=e(`<ul><li>再将计算出的 <code>flex-basis</code> 值与 <code>max-width</code> 比较，如果 <code>flex-basis</code> 的值大于 <code>max-width</code> 值，则 <code>flex-basis</code> 的最终值是 <code>max-width</code> 值，即 <strong><code>max-width</code></strong> <strong>值会覆盖</strong> <strong><code>flex-basis</code></strong> <strong>的值</strong> 。</li></ul><p>比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.item {
    width: 150px;
    flex-basis: 300px;
    max-width: 100px;
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终所有 Flex 项目的初始化值（Base Size）是 <code>300px</code> ，最大值（Maximum Size）是 <code>100px</code> ，浏览器最终计算出来的 <code>flex-basis</code> 值也会是 <code>max-width</code> 值，即 <code>100px</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71dfe17b4f89406c8c30bb6300ac5a16~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),Dn={href:"https://codepen.io/airen/full/XWqzBJj",target:"_blank",rel:"noopener noreferrer"},En=e(`<p>如果 Flex 项目同时出现 <code>width</code> 、<code>flex-basis</code> 、<code>min-width</code> 和 <code>max-width</code> 时，会在上面的规则上增加新的一条规则来进行判断：</p><blockquote><p><strong>当</strong> <strong><code>min-width</code></strong> <strong>大于<code>max-width</code>时，<code>min-width</code>优先级将高于</strong> <strong><code>max-width</code></strong> <strong>。</strong></p></blockquote><p>然后再与 <code>flex-basis</code> 的值相比，<strong><code>flex-basis</code>会<code>min-width</code></strong> <strong>值</strong> 。反之，如果 <code>min-width</code> 小于 <code>max-width</code> 时，计算出来的 <code>flex-basis</code> 分别与 <code>min-width</code> 和 <code>max-width</code> 相比，如果小于 <code>min-width</code> 则取 <code>min-width</code> ，如果大于 <code>max-width</code> 则取<code>max-width</code> 。</p><p>比如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/002a1196d0c84922b37a90bf14c785b0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),Gn={href:"https://codepen.io/airen/full/WNJXKGe",target:"_blank",rel:"noopener noreferrer"},Bn=e(`<p>如果你理解了的话，可以使用更简单的规则来决定 Flex 项目的尺寸。</p><blockquote><p><strong>首先根据</strong> <strong><code>content</code></strong> <strong>➜</strong> <strong><code>width</code></strong> <strong>➜</strong> <strong><code>flex-basis</code></strong> <strong>来决定用哪个值来初始化 Flex 项目的假设主尺寸。如果 Flex 项目显式设置了</strong> <strong><code>flex-basis</code></strong> <strong>属性，则会忽略</strong> <strong><code>width</code></strong> <strong>和</strong> <strong><code>content</code></strong> <strong>。但最终浏览器计算出来的 Flex 项目主尺寸（计算后的</strong> <strong><code>flex-basis</code></strong> <strong>属性的值）会受到 CSS 的</strong> <strong><code>min-*</code></strong> <strong>和</strong> <strong><code>max-*</code></strong> <strong>属性值的限制，其中</strong> <strong><code>min-*</code></strong> <strong>用来设置 Flex 项目的下限值，<code>max-*</code>用来设置 Flex 项目的上限值</strong> 。</p></blockquote><p>我们可以用一个简单的流程图来描述：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fd53dfe373544b1bcea983c9a64d3db~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="flex-项目的最小值-min-size" tabindex="-1"><a class="header-anchor" href="#flex-项目的最小值-min-size" aria-hidden="true">#</a> Flex 项目的最小值（min-size）</h2><p>在使用 Flexbox 布局的时候，很有可能其中某个 Flex 项目的文本内容很长，最终导致内容溢出：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c99159a177b24aa6a7354b9e2c639eca~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>你可能想到了在文本节点容器（它也是一个 Flex 项目）上设置：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* ① 长单词断行，常用西文 */</span>
<span class="token selector">.long-word</span> <span class="token punctuation">{</span>
    <span class="token property">overflow-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ② 文本截取，末尾添加 ... */</span>
<span class="token selector">.text-overflow</span> <span class="token punctuation">{</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ③ 多行文本截取，末尾添加... */</span>
<span class="token selector">.line-clamp</span> <span class="token punctuation">{</span>
    <span class="token property">--line-clamp</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--line-clamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>诸如此类的操作，我们只是希望防止内容（或长单词破坏页面布局）。如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba26834f7964691acb745ac8d2ace2b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>设计师期望卡片标题在同一行，不能因为内容过长而让设计效果失去一致性。为此，我们可以使用上面代码 ② 来截取文本，并且在文本末尾出现三个点的省略号：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.text-overflow</span> <span class="token punctuation">{</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0989b0b716ed416aa4fbadbf7d39af28~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>或者输入了恶意的内容，比如带下划线的URL或没有空格的数字，字母等：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc105762121e4b3f8c6edd62bcaa6031~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在这样的布局中，即使我们的标题元素是一个 Flex 项目，并且已显式设置了 <code>flex</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> .card__title { 
     flex: 1 1 0%; 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，卡片右侧的 Icon 还是被长内容挤出容器（溢出）：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a9d0d79eb244a1da598772860fbf177~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>你可能会想到，使用上面代码 ① 让长词断行显示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.long-word { 
    overflow-wrap: break-word; 
 } 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，并未起效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f601099bb55949e08a4e8b10402a71b2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>即使你加了 <code>hyphens</code> 为 <code>auto</code> 也未生效。</p>`,25),Mn={href:"https://www.w3.org/TR/css-flexbox-1/#min-size-auto",target:"_blank",rel:"noopener noreferrer"},Ln=e(`<blockquote><p>On a flex item whose overflow is visible in the main axis, when specified on the flex item’s main-axis min-size property, specifies an automatic minimum size.</p></blockquote><p>大致意思上说：“<strong>主轴上 Flex 项目的</strong> <strong><code>overflow</code></strong> <strong>属性是</strong> <strong><code>visible</code></strong> <strong>时，主轴上 Flex 项目的最小尺寸（min-size）将会指定一个自动的（automatic）最小尺寸</strong> ”。前面我们也提到过：</p><blockquote><p>默认情况下，Flex 项目（设置为 <code>flex:1</code> 的 Flex 项目）在收缩的时候，其宽度不会小于其最小内容尺寸（即 <code>min-content</code>）。<strong>要改变这一点，需要显式设置</strong> <strong><code>min-width</code></strong> <strong>或</strong> <strong><code>min-height</code></strong> <strong>的值</strong> 。</p></blockquote><p>因此，我们要解决这个问题，需要在使用 <code>overflow-wrap</code> 为 <code>break-word</code> 的地方重置 <code>min-width</code> 值，并且强制它变成<code>0</code>：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.long-word</span> <span class="token punctuation">{</span> 
    <span class="token property">overflow-wrap</span><span class="token punctuation">:</span> 
    break-word<span class="token punctuation">;</span> 
    <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，要提出的是，Flex 项目的 <code>overflow</code> 的值为 <code>visible</code> 以外的值时会导致 <code>min-width</code> 的值为 <code>0</code>，这就是为什么在方法 ② 中做文本截取的时候，怎么没有 <code>min-width: 0</code>。</p><p>还有，Flex 项目的长文本（<code>max-content</code>）或显式设置 <code>white-space: nowrap</code> 在视觉上除了会打破布局之外，也会对相邻的 Flex 项目进行挤压，即使这些 Flex 项目显式设置了尺寸。比如上面的示例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.card__media</span> <span class="token punctuation">{</span> 
    <span class="token property">width</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span> 
    <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token selector">.card__action</span> <span class="token punctuation">{</span> 
    <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> 
    <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，后面三张卡片的左右两侧的 Flex 项目尺寸被挤压，甚至还会造成视觉上的变形：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce17b396b8834ee5ae7bac30a61b2efc~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>造成这个现象是由于标题（它也是一个 Flex 项目）内容过长（<code>max-content</code>），Flexbox 容器无剩余空间来放置它，这个时候将会对同一轴上的其他 Flex 项目进行挤压。大家知道，Flex项目的 <code>flex</code> 的默认值为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flex-shrink</code> 的值为 <code>1</code>，表示 Flex 项目可以被收缩。解决这种现象，我们有两种方法，最简单的方法是在标题这个 Flex 项目元素上显式设置 <code>min-width</code> 的值为 <code>0</code>：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.card__title</span> <span class="token punctuation">{</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6c92d60bd0f4fe586469870cffa0333~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>另一种解法是在显式设置了 <code>width</code> 或 <code>height</code> 的 Flex 项目上重置 <code>flex-shrink</code> 的值为 <code>0</code>，告诉浏览器，即使 Flexbox 容器没有足够的剩余空间，你也不能来挤压我的空间：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.card__media, 
.card__action</span> <span class="token punctuation">{</span> 
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26c6d7d9467049c090357ca114a9ad30~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>相对而言，或者一劳永逸的方案是 <strong>在显式设置了<code>flex: 1</code>的 Flex 项目的同时，也显式设置<code>min-width</code>的值为<code>0</code></strong> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad043bb7610e4bf481ec9a69eaa48167~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,20),Vn={href:"https://codepen.io/airen/full/NWMwLmX",target:"_blank",rel:"noopener noreferrer"},Nn=e('<p>这里有一个小技巧，<strong>Flexbox 布局中要实现均分列（等分列）布局效果时，请在 Flex 项目上显式设置</strong> <strong><code>min-width</code></strong> <strong>的值为</strong> <strong><code>0</code></strong> <strong>，避免因内容不等长，造成列不均等</strong> 。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>现在我们明白了，Flex 项目上的 <code>width</code> 只是 <code>flex-basis</code> 缺失时的备用值，在代码中显式设置的 <code>flex-basis</code> 也只是你假想的一个主尺寸，它的最终值会根据 Flex 容器剩余空间（或不足空间）以及 Flex 项目的扩展因子（或收缩因子）而有所不同。并且最终计算出来的 <code>flex-basis</code> 会受到 <code>min-*</code> （Flex 项目的下限值）和 <code>max-*</code> （Flex 项目的上限值）限制。</p><p>你可能也已经注意到了，<code>flex-basis</code> 其实就是 <strong>将 Flex 项目放入弹性容器之前的大小</strong> 。这个值仅仅是一个理想或假设的值（即，开发者根据设计稿给 Flex 项目定义的一个最理想化的值）。但这个时候的值绝对不是 <code>flex-basis</code> 的最终值。因为 Flex 项目一旦放入 Flex 容器之后，Flex 项目的 <code>flex-basis</code> 就会发生变化，浏览器会根据相应的环境给 Flex 项目计算出一个最终的 <code>flex-basis</code> 值，而这个最终计算出来的 <code>flex-basis</code> 值也是 Flex 项目的最终尺寸（大小）。</p><p>现在我们明白了，这<code>width</code>只是<code>flex-basis</code>缺失时的后备，并且<code>min-width</code>和<code>max-width</code> 只是 <code>flex-basis</code> 的上限和下限。那么，<code>flex-basis</code> 究竟是什么？</p><p>在我们所有的插图中，我们在将 Flex 项放入 Flex 容器<strong>之前将它们的大小可视化。</strong> 我们这样做是因为<code>flex-basis</code>就是：<strong>将弹性项目放入弹性容器之前的大小</strong>。这是物品的理想或假设尺寸。但<code>flex-basis</code>不是<strong>保证尺寸</strong>！一旦浏览器将项目放入其 Flex 容器中，情况就会发生变化。</p><p>在我们上面的一些示例中，你看到弹性项目完全适合它们的弹性容器，因为所有项目的总和最终<code>flex-basis</code>是我们容器的确切宽度（1000px）。<code>flex-basis</code>发生这种情况时这很好，但通常弹性容器没有足够的空间，或者在其所有项目的值加起来之后会有额外的空间。</p><p>所以说，最终决定 Flex 项目大小的会由 <strong>Flex 容器的剩余空间（或不足空间）</strong> 、<strong>Flex 项目的理想主尺寸（Flex 项目的初始化值）</strong> 、<strong>Flex 项目的扩展因子</strong> （<code>flex-grow</code> 值）或 <strong>Flex 项目的收缩因子</strong> （<code>flex-shrink</code> 值）、 <strong>Flex 项目的最小内容（或最大内容）长度值</strong> 以及 <strong>Flex 项目的下限值（<code>min-*</code>值）和（或）Flex 项目的上限值（<code>max-*</code>值）</strong> 来决定。</p>',8);function On(Jn,Xn){const a=i("ExternalLinkIcon");return p(),d("div",null,[u,t(""),r,t(""),m,t(""),g,t(""),k,n("blockquote",null,[n("p",null,[s("Flexbox 中 Flex 容器的空间是由 "),b,s(" 、"),v,s(" 和 Flex 容器的对齐方式来分配的。详细请参阅前面的课程：《"),n("a",x,[s("04 | Flexbox 布局中的对齐方式"),o(a)]),s(" 》、 《"),n("a",h,[s("06｜Flexbox 中的计算：通过扩展因子比例来扩展 Flex 项目"),o(a)]),s("》和《"),n("a",f,[s("07｜Flexbox 中的计算：通过收缩因子比例收缩 Flex 项目"),o(a)]),s("》。")])]),w,t(""),F,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",_,[s("https://codepen.io/airen/full/wvjqXrZ"),o(a)])])]),y,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",z,[s("https://codepen.io/airen/full/ZEoJjEK"),o(a)])])]),j,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",q,[s("https://codepen.io/airen/full/dyezjZL"),o(a)])])]),S,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",C,[s("https://codepen.io/airen/full/qBYXJWq"),o(a)])])]),W,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",D,[s("https://codepen.io/airen/full/WNJEaOq"),o(a)])])]),E,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",G,[s("https://codepen.io/airen/full/GRdvYdw"),o(a)])])]),B,t(""),M,t(""),L,t(""),V,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",N,[s("https://codepen.io/airen/full/RwyLGmg"),o(a)])])]),O,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",J,[s("https://codepen.io/airen/full/gOzGLYo"),o(a)])])]),X,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",Y,[s("https://codepen.io/airen/full/jOxGVEd"),o(a)])])]),R,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",Z,[s("https://codepen.io/airen/pen/zYZvGrY"),o(a)])])]),I,t(""),K,t(""),A,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",P,[s("https://codepen.io/airen/full/VwxMPPq"),o(a)])])]),U,T,t(""),Q,t(""),H,t(""),$,t(""),nn,sn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",en,[s("https://codepen.io/airen/full/JjvrEVx"),o(a)])])]),an,n("ul",null,[n("li",null,[s("由 Flex 容器空间（剩余空间或不足空间），"),on,s(" 、"),tn,s(" 以及初始化 "),cn,s(" 相关参数计算后的 "),pn,s(" 值。这部分我们在前面的课程中介绍过了，可以阅读《"),n("a",dn,[s("06｜Flexbox 中的计算：通过扩展因子比例来扩展 Flex 项目"),o(a)]),s("》和《"),n("a",ln,[s("07｜Flexbox 中的计算：通过收缩因子比例收缩 Flex 项目"),o(a)]),s("》。")])]),t(""),un,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",rn,[s("https://codepen.io/airen/full/BaxwRBx"),o(a)])])]),mn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",gn,[s("https://codepen.io/airen/full/NWMagjx"),o(a)])])]),kn,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",bn,[s("https://codepen.io/airen/full/VwxMWVO"),o(a)])])]),vn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",xn,[s("https://codepen.io/airen/full/MWGOGwE"),o(a)])])]),hn,t(""),fn,t(""),wn,t(""),Fn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",_n,[s("https://codepen.io/airen/full/YzLELvX"),o(a)])])]),yn,t(""),zn,t(""),jn,t(""),qn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",Sn,[s("https://codepen.io/airen/full/jOxaxjK"),o(a)])])]),Cn,t(""),Wn,n("blockquote",null,[n("p",null,[s("Demo 地址： "),n("a",Dn,[s("https://codepen.io/airen/full/XWqzBJj"),o(a)])])]),En,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",Gn,[s("https://codepen.io/airen/full/WNJXKGe"),o(a)])])]),Bn,n("p",null,[s("你可能会认为它是一个 Flexbox 中的 Bug，事实上，"),n("a",Mn,[s("W3C规范中也有相应的描述"),o(a)]),s("：")]),Ln,n("blockquote",null,[n("p",null,[s("Demo 地址："),n("a",Vn,[s("https://codepen.io/airen/full/NWMwLmX"),o(a)])])]),Nn])}const Rn=c(l,[["render",On],["__file","index-08.html.vue"]]);export{Rn as default};
