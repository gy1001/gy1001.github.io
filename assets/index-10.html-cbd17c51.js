import{_ as a,M as t,p as e,q as p,R as n,t as o,N as c,a1 as i}from"./framework-e8cb8151.js";const l={},u=i(`<h1 id="_10-runtime-运行时-组件的设计原理与渲染方案" tabindex="-1"><a class="header-anchor" href="#_10-runtime-运行时-组件的设计原理与渲染方案" aria-hidden="true">#</a> 10-runtime 运行时-组件的设计原理与渲染方案</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01:前言</h2><p>在本章中，我们将要关注于 component 组件的渲染逻辑，对于组件而言，本身比较复杂所以我们单独拿出来一章来进行讲解</p><p>在学习本章节之前，我们需要先来回忆一下再学习 h 函数时，我们学到的内容</p><blockquote><p>组件本身是一个对象（仅考虑对象的情况，忽略函数式组件）。它必须包含一个 render 函数，该函数决定了它的渲染内容</p><p>如果我们想要定义数据，那么需要通过 data 选项进行注册，data 选项应该是一个<strong>函数</strong>，并且 retrun 一个对象，对象中包含了所有的响应式数据</p><p>除此之外，我们还可以定义比如：生命周期，计算属性，watch 等对应内容</p></blockquote><p>以上是关于组件的一些基本概念，这些是需要大家首先能够明确地</p><p>组件的处理非常复杂，所以我们依然会采用和之前一样的标准：<strong>没有使用就当不存在、最少代码的实现逻辑</strong>。来实现我们的组件功能。</p><h2 id="_02-源码阅读-无状态基础组件挂载逻辑" tabindex="-1"><a class="header-anchor" href="#_02-源码阅读-无状态基础组件挂载逻辑" aria-hidden="true">#</a> 02: 源码阅读：无状态基础组件挂载逻辑</h2><blockquote><p>vue 中通常把 <strong>状态</strong> 比作 <strong>数据</strong> 的意思。我们所谓的无状态，指的就是 <strong>无数据</strong> 的意思</p></blockquote><p>我们先来定一个目标：本小节我们<strong>仅仅关注无状态基础组件挂载逻辑</strong>，而忽略其他所有</p><p>基于以上目的我们创建对应测试示例<code>packages/vue/examples/mine/runtime/render-component.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的代码很简单</p><ol><li>使用<code>h</code>函数生成组件的<code>vnode</code></li><li>使用<code>render</code>函数组件将组件挂载到<code>dom</code>上</li></ol><h2 id="_03-框架实现-完成无状态基础组件的挂载逻辑" tabindex="-1"><a class="header-anchor" href="#_03-框架实现-完成无状态基础组件的挂载逻辑" aria-hidden="true">#</a> 03: 框架实现：完成无状态基础组件的挂载逻辑</h2><ol><li><p>在 <code>packages/runtime-core/src/renderer.ts</code> 的 <code>patch</code> 方法中，创建 <code>processComponent</code> 的触发：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createComponentInstance<span class="token punctuation">,</span> setupComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./component&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> renderComponentRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./commponentRenderUtis&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> xxx<span class="token operator">:</span>
        <span class="token keyword">break</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">processComponent</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建 processComponent 函数：</span>
  <span class="token keyword">const</span> <span class="token function-variable function">processComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">mountComponent</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">mountComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span>
      <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>initialVNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
    <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">componentUpdateFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>
      componentUpdateFn<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 <code>packages/runtime-core/src/component.ts</code> 模块，构建 <code>createComponentInstance</code> 函数逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> vnode
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
    uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span>
    vnode<span class="token punctuation">,</span>
    type<span class="token punctuation">,</span>
    subTree<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    effect<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    update<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    render<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setupStatefuleComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupStatefuleComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>

  <span class="token class-name">instance</span><span class="token punctuation">.</span>render <span class="token operator">=</span> component<span class="token punctuation">.</span>render
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>packages/runtime-core/src/componentRenderUtils.ts</code> 模块中构建 <code>renderComponentRoot</code> 函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ShapeFlags <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/shared/src/shapeFlags&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createVNode<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> vnode<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> instance
  <span class="token keyword">let</span> result
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>render<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cloneIfMounted</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// strings and numbers</span>
    <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cloneIfMounted</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> child
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建代码示例，<code>packages/vue/examples/runtime/render-component.html</code>，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i am a component&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时，组件渲染完成</p></li></ol><h2 id="_04-源码阅读-无状态组件的更新与卸载" tabindex="-1"><a class="header-anchor" href="#_04-源码阅读-无状态组件的更新与卸载" aria-hidden="true">#</a> 04：源码阅读：无状态组件的更新与卸载</h2><p>所谓的组件更新，其实本质上就是一个 <strong>卸载、挂载</strong> 的逻辑</p><ol><li>对于这样的卸载逻辑，我们之前已经完成过。</li><li>所以，目前我们的代码 <strong>支持</strong> 组件的更新操作。</li></ol><h2 id="_05-代码实现-无状态组件的更新与卸载" tabindex="-1"><a class="header-anchor" href="#_05-代码实现-无状态组件的更新与卸载" aria-hidden="true">#</a> 05：代码实现：无状态组件的更新与卸载</h2><p>上一节我们知道，针对于组件的更新，它是通过先卸载旧节点，然后更新新节点来实现的。所以我们目前的代码是支持的</p><p>我们编写测试用例代码<code>packages/vue/examples/runtime/render-component-update.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i am a component&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> component2 <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;component update&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component2<span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看效果，测试通过</p><h2 id="_06-局部总结" tabindex="-1"><a class="header-anchor" href="#_06-局部总结" aria-hidden="true">#</a> 06：局部总结</h2><p>那么到现在我们已经完成了<strong>无状态组件的挂载、更新、卸载</strong>操作</p><p>从以上的内容中我们可以发现</p><ol><li>所谓组件的渲染，本质上指的是<code>render</code>函数返回值的渲染</li><li>组件渲染的过程，会生成<code>ReactiveEffect</code>实例<code>effect</code></li><li>额外还存在一个<code>instance</code>实例，该示例表示<strong>组件本身</strong>，同时<code>vnode.component</code>指向它</li><li>组件本身额外提供了很多的状态，比如<code>isMounted</code></li></ol><p>但是以上的内容，全部都是针对于<strong>无状态</strong>组件来看的</p><p>在我们的实际开发中，组件通常是<strong>有状态（即：存在 data 响应式数据）<strong>的，那么</strong>有状态的组件</strong>和<strong>无状态组件</strong>他们之间的渲染存在什么差异呢？让我们继续往下看</p><h2 id="_07-源码实现-有状态的响应性组件挂载逻辑" tabindex="-1"><a class="header-anchor" href="#_07-源码实现-有状态的响应性组件挂载逻辑" aria-hidden="true">#</a> 07：源码实现：有状态的响应性组件挂载逻辑</h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ol><li>有状态的组件渲染，核心的点是<strong>让<code>render</code>函数中的<code>this.xxx</code>得到真实数据</strong></li><li>那么想要达到这个目的，我们就必须要<strong>改变</strong><code>this</code>的指向</li><li>改变的方式就是在：生成<code>subTree</code>时，通过<code>call</code>方法，指定<code>this</code></li></ol><h2 id="_08-框架实现-有状态的响应性组件挂载逻辑" tabindex="-1"><a class="header-anchor" href="#_08-框架实现-有状态的响应性组件挂载逻辑" aria-hidden="true">#</a> 08：框架实现：有状态的响应性组件挂载逻辑</h2><ol><li><p>在 <code>packages/runtime-core/src/component.ts</code>的<code>finishComponentSetup</code> 方法中，触发 <code>applyOptions</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/reactivity&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>

  <span class="token class-name">instance</span><span class="token punctuation">.</span>render <span class="token operator">=</span> component<span class="token punctuation">.</span>render
  <span class="token comment">// 改变 options 中的 this 指向</span>
  <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> dataOptions <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>

  <span class="token comment">// 存在 data 选项时</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dataOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 触发 dataOptions 函数，拿到 data 对象</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">dataOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 如果拿到的 data 是一个对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 则把 data 包装成 reactiv 的响应性数据，赋值给 instance</span>
      instance<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>packages/runtime-core/src/componentRenderUtils.ts</code>中，为<code>render</code>的调用，通过<code>call</code>方法来修改<code>this</code>的指向</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> vnode<span class="token punctuation">,</span> render<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> instance
  <span class="token keyword">let</span> result
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 新增：获取到 result 返回值，如果 render 中使用了 this，则需要修改 this 指向</span>
      result <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>render<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，代码完成，我们可以创建对应测试示例<code>packages/vue/examples/runtime/render-component-data.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_09-源码阅读-组件生命周期回调处理逻辑" tabindex="-1"><a class="header-anchor" href="#_09-源码阅读-组件生命周期回调处理逻辑" aria-hidden="true">#</a> 09：源码阅读：组件生命周期回调处理逻辑</h2><p>在前面几节中，我们其实已经在源码中查看到了对应的一些生命周期处理逻辑</p><p>我们知道<code>vue</code>把生命周期叫做生命周期钩子，说白了就是：<strong>在指定时间触发的回调方法</strong></p><p>整个源码过程可以分为两大块</p><ol><li>第一块是<code>beforeCreate</code>和<code>created</code>，它的执行主要是再<code>applyOptions</code>中执行的，我们直接通过<code>options.beforeCreate</code>和<code>options.created</code>来判断是否有这两个钩子，再通过<code>callHook</code>执行</li><li>第二块是对于其余的<code>11</code>个生命周期，我们都是通过<code>registerLifecycleHook</code>方法将这些声明周期注入到<code>instance</code>里面，然后在合适的时机进行触发</li></ol><h2 id="_10-框架实现-组件生命周期回调处理逻辑" tabindex="-1"><a class="header-anchor" href="#_10-框架实现-组件生命周期回调处理逻辑" aria-hidden="true">#</a> 10：框架实现：组件生命周期回调处理逻辑</h2><p>明确好了源码的生命周期以后，那么接下来我们来实现一下对应的逻辑</p><p>我们本小节要处理的生命周期有四个，首先我们先处理前两个<code>beforeCreate</code>和<code>created</code>，我们知道这两个回调方法是在<code>applyOptions</code>方法中回调的</p><ol><li><p>在<code>packages/runtime-core/src/components.ts</code>的<code>applyOptions</code>方法中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      data<span class="token operator">:</span> dataOptions<span class="token punctuation">,</span>
      beforeCreate<span class="token punctuation">,</span>
      created<span class="token punctuation">,</span>
      beforeMount<span class="token punctuation">,</span>
      mounted
    <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>

    <span class="token comment">// hooks</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeCreate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callHook</span><span class="token punctuation">(</span>beforeCreate<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 存在 data 选项时</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// hooks</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">callHook</span><span class="token punctuation">(</span>created<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建对应的 callHook：</span>
<span class="token keyword">function</span> <span class="token function">callHook</span><span class="token punctuation">(</span>hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，<code>beforeCreate</code>和<code>created</code>完成</p></li></ol><p>接下来我们来处理<code>beforeMount</code>和<code>mounted</code>在，对于这两个生命周期而言，它需要先注册，再触发</p><p>那么我们先来处理注册的逻辑</p><p><strong>首先我们需要先创建<code>LifecycleHooks</code></strong></p><ol><li><p>在<code>packages/runtime-core/src/component.ts</code>中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> LifecycleHooks <span class="token punctuation">{</span>
  <span class="token constant">BEFORE_CREATE</span> <span class="token operator">=</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">CREATED</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">BEFEORE_MOUNT</span> <span class="token operator">=</span> <span class="token string">&#39;bm&#39;</span><span class="token punctuation">,</span>
  <span class="token constant">MOUNTED</span> <span class="token operator">=</span> <span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同样，在此文件中，在生成组件实例时，提供对应的生命周期相关选项</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> vnode

  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 生命周期相关</span>
    isMounted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否挂载</span>
    bc<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// beforeCreate</span>
    c<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// created</span>
    bm<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// beforeMount</span>
    m<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// mounted</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/runtime-core/src/apiLifecycle.ts</code>模块，处理对应的<code>hooks</code>注册方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LifecycleHooks <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./component&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">injectHook</span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> LifecycleHooks<span class="token punctuation">,</span>
  hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>
  instance
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将hook  注册到组件实例中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> hook
    <span class="token keyword">return</span> hook
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>lifecycle<span class="token operator">:</span> LifecycleHooks<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>hook<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">injectHook</span><span class="token punctuation">(</span>lifecycle<span class="token punctuation">,</span> hook<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> onBeforeMount <span class="token operator">=</span> <span class="token function">createHook</span><span class="token punctuation">(</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFEORE_MOUNT</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> onMounted <span class="token operator">=</span> <span class="token function">createHook</span><span class="token punctuation">(</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">MOUNTED</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>​ 这样，我们注册<code>hooks</code>的一些基础逻辑完成</p><ol start="4"><li><p>接下来我们就可以在<code>applyOptions</code>方法中，完成对应的注册</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onBeforeMount<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./apiLifecycle&#39;</span>

<span class="token keyword">function</span> <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> dataOptions<span class="token punctuation">,</span>
    beforeCreate<span class="token punctuation">,</span>
    created<span class="token punctuation">,</span>
    beforeMount<span class="token punctuation">,</span>
    mounted
  <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>type
    <span class="token operator">...</span>
    <span class="token keyword">function</span> <span class="token function">registerLifecycleHook</span><span class="token punctuation">(</span>register<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> hook<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">register</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 注册 hooks</span>
    <span class="token function">registerLifecycleHook</span><span class="token punctuation">(</span>onBeforeMount<span class="token punctuation">,</span> beforeMount<span class="token punctuation">)</span>
    <span class="token function">registerLifecycleHook</span><span class="token punctuation">(</span>onMounted<span class="token punctuation">,</span> mounted<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样就把<code>bm</code>和<code>m</code>注册到组件实例之后了，下面就可以在<code>componentUpdateFn</code>中触发响应的<code>hook</code>了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCreateRender</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">componentUpdateFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当前处于 mounted 之前，即执行 挂载 逻辑</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 hook</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> bm<span class="token punctuation">,</span> m <span class="token punctuation">}</span> <span class="token operator">=</span> instance
        <span class="token comment">// beforeMount hook</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">bm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token comment">// mounted hook</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>
      componentUpdateFn<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，生命周期逻辑处理完成，我们可以创建对应测试示例<code>packages/vue/examples/runtime/render-component-hook.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件初始化完成之后</span>
    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;beforeCreate&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件实例处理完所有与状态相关的选项之后</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件被挂载之前</span>
    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;beforeMount&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件被挂载之后</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行浏览器，可以看到如下效果</p><p><img src="https://yejiwei.com/static/img/a0f887305803e10b0014458a647caf82.4.gif" alt="4.gif"></p></li></ol><h2 id="_11-源码阅读-生命回调钩子中访问响应性数据" tabindex="-1"><a class="header-anchor" href="#_11-源码阅读-生命回调钩子中访问响应性数据" aria-hidden="true">#</a> 11：源码阅读：生命回调钩子中访问响应性数据</h2><h3 id="created" tabindex="-1"><a class="header-anchor" href="#created" aria-hidden="true">#</a> created</h3><p>通过之前的代码我们已经知道，<code>created</code>的回调是在<code>applyOptions</code>中触发的，所以我们可以直接在这个函数中进行<code>debugger</code></p><ol><li>进入<code>applyOptions</code></li><li>剔除之前相同的逻辑，执行代码<code>if(created){...}</code></li></ol><p><img src="https://yejiwei.com/static/img/70db101d336f4b9e2058a0ba58b9b784.image.png" alt="image.png"></p><p>通过以上，我们很容易分析<code>created</code>能获取到相应数据的原因</p><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h3><p>对于<code>mounted</code>而言，我们知道它的生命周期注册是在<code>applyOptions</code>方法内的<code>registerLifecycleHook</code>方法中，我们可以直接来看一下源码中的<code>registerLifecycleHook</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">registerLifecycleHook</span><span class="token punctuation">(</span>
  register<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>
  hook<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hook<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_hook<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token function">_hook</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hook <span class="token keyword">as</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法中的逻辑也是非常简单，可以看到它和<code>created</code>处理几乎一样，都是通过<code>bind</code>方法来改变<code>this</code>指向</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>无论是<code>created</code>也好，还是<code>mounted</code>也好，本质上都是通过<code>bind</code>方法来修改<code>this</code>指向，已达到在回调钩子中访问响应式数据的目的。</p><h2 id="_12-框架实现-生命回调钩子中访问响应性数据" tabindex="-1"><a class="header-anchor" href="#_12-框架实现-生命回调钩子中访问响应性数据" aria-hidden="true">#</a> 12：框架实现：生命回调钩子中访问响应性数据</h2><p>根据上一节的描述，我们只需要改变生命周期钩子中的<code>this</code>指向即可</p><ol><li><p>在<code>packages/runtime-core/src/component.ts</code>为<code>callHook</code>方法增加参数，以此来改变<code>this</code>指向</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 创建对应的 callHook：</span>
<span class="token keyword">function</span> <span class="token function">callHook</span><span class="token punctuation">(</span>hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">hook</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>applyOptions</code>方法中为<code>callHook</code>的调用，传递第二个参数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// hooks</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeCreate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callHook</span><span class="token punctuation">(</span>beforeCreate<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">//  此时 instance.data 自然是没有值的，不过没有关系</span>
  <span class="token punctuation">}</span>

  <span class="token operator">...</span>

  <span class="token comment">// hooks</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callHook</span><span class="token punctuation">(</span>created<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>另外，在<code>registerLifecycleHook</code>中，为<code>hook</code>修改<code>this</code>指向</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">registerLifecycleHook</span><span class="token punctuation">(</span>register<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> hook<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">register</span><span class="token punctuation">(</span>hook<span class="token operator">?.</span><span class="token function">bind</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，代码完成。创建测试示例<code>packages/examples/runtime/render-component-hook-data.html</code>,代码如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;beforeCreate &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;created &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;mounted &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行代码，正常打开显示</p></li></ol><h2 id="_13-源码阅读-响应性数据改变-触发组件的响应性变化" tabindex="-1"><a class="header-anchor" href="#_13-源码阅读-响应性数据改变-触发组件的响应性变化" aria-hidden="true">#</a> 13：源码阅读：响应性数据改变，触发组件的响应性变化</h2><p>虽然目前我们已经完成了在生命周期中访问响应性数据，但是还有个问题就是：<strong>响应性数据改变，没有触发组件发生变化</strong></p><p>再来看这一块的内容之前,首先我们需要先来明确一些基本的概念</p><p>组件的渲染，本质上是<code>render</code>函数返回值的渲染，所谓响应性数据，指的是</p><ol><li><code>getter</code>时收集依赖</li><li><code>setter</code>时触发依赖</li></ol><p>那么根据以上概念，我们所需要做的是</p><ol><li>在组件的数据被触发<code>getter</code>时，我们应该收集依赖。那么组件什么时候触发的<code>getter</code>呢？在<code>packages/runtime-core/src/renderer.ts</code>的<code>setupRenderEffect</code>方法中，我们创建了一个<code>effect</code>，并且把<code>effect</code>的<code>fn</code>指向了<code>componentUpdateFn</code>函数。在该函数中，我们触发了<code>getter</code>，然后得到了<code>subTree</code>，然后进行渲染。所以收集依赖的函数为<code>componentUpdateFn</code>。</li><li>在组件的数据被触发<code>setter</code>时，我们应该触发依赖。我们刚才说，收集的依赖本质上是<code>componentUpdateFn</code>函数，所以我们在触发依赖时，所触发的也应该是<code>componentUpdateFn</code>函数</li></ol><p>明确好了以上内容之后，我们就去分析一下源码是怎么做的，我们创建测试示例<code>render-component-hook-data-change.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件实例处理完所有与状态相关的选项之后</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&#39;你好，世界&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>comonentUpdateFn</code>中进行<code>debugger</code>，等待<strong>第二次</strong>进入<code>componentUpdateFn</code>函数（注意：此时我们仅仅关注依赖触发，生命周期的触发不再关注对象，会直接跳过）</p><ol><li><p>第二次进入<code>componentUpdateFn</code>，因为这次组件已经挂载过了，所以会执行 else, 在<code>else</code>中将下一次要渲染的<code>vnode</code>赋值给<code>next</code>，我们继续往下执行</p><p><img src="https://yejiwei.com/static/img/553092e70f7dfe9d654c61c486b4e514.image.png" alt="image.png"></p></li><li><p>在<code>else</code>中，代码最终会执行<code>renderComponentRoot</code>，而对于<code>renderComponentRoot</code>方法。我们也很熟悉了，它内部会调用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>result <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>
  render<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
    proxyToUse<span class="token punctuation">,</span>
    proxyToUse<span class="token operator">!</span><span class="token punctuation">,</span>
    renderCache<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    setupState<span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
    ctx
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>同样通过<code>call</code>方法，改变<code>this</code>指向，触发<code>render</code>。然后通过<code>normalizeVNode</code>得到<code>vnode</code>,这次得到的<code>vnode</code>就是下一次要渲染的<code>subTree</code>.接着跳出<code>renderComponentRoot</code>方法继续执行代码</p><p><img src="https://yejiwei.com/static/img/9478446e52a89bfb5a27d8bf5fbf389e.image.png" alt="image.png"></p><ol start="3"><li>可以看到，最终触发<code>patch</code>方法，完成<strong>更新操作</strong></li><li>至此，整个组件视图的更新完成</li></ol><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p>所谓的组件响应性更新，本质上指的是:<code>componentUpdateFn</code>的再次触发，根据新的<strong>数据</strong>生成新的<code>subTree</code>，再通过<code>path</code>进行更新操作</p><h2 id="_14-框架实现-响应性数据改变-触发组件的响应性变化" tabindex="-1"><a class="header-anchor" href="#_14-框架实现-响应性数据改变-触发组件的响应性变化" aria-hidden="true">#</a> 14: 框架实现：响应性数据改变，触发组件的响应性变化</h2><ol><li>在 <code>packages/runtime-core/src/renderer.ts</code> 的 <code>componentUpdateFn</code> 方法中，加入如下逻辑：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">componentUpdateFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前处于 mounted 之前，即执行 挂载 逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取 hook</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> bm<span class="token punctuation">,</span> m <span class="token punctuation">}</span> <span class="token operator">=</span> instance
      <span class="token comment">// beforeMount hook</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
      <span class="token comment">// mounted hook</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el
      <span class="token comment">// 修改 mounted 状态</span>
      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     	<span class="token comment">//-----------新增代码-------------------</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span> next<span class="token punctuation">,</span> vnode <span class="token punctuation">}</span> <span class="token operator">=</span> instance
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next <span class="token operator">=</span> vnode
      <span class="token punctuation">}</span>
      <span class="token comment">// 获取下一次的 subTree</span>
      <span class="token keyword">const</span> nextTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
      <span class="token comment">// 保存对应的 subTree  以便进行更新操作</span>
      <span class="token keyword">const</span> prevTree <span class="token operator">=</span> instance<span class="token punctuation">.</span>subTree
      instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> nextTree
      <span class="token comment">// 通过 patch  进行更新操作</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">,</span> nextTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
      <span class="token comment">// 更新 next</span>
      next<span class="token punctuation">.</span>el <span class="token operator">=</span> nextTree<span class="token punctuation">.</span>el
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，代码完成。创建对应测试示例<code>packages/vue/examples/runtime/render-component-hook-data-change.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello component&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件实例处理完所有与状态相关的选项之后</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&#39;你好，世界&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bf76ad2419c49adb8fe0b13edb392fa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="5.gif"></p><h2 id="_15-源码阅读-compositionapi-setup-函数" tabindex="-1"><a class="header-anchor" href="#_15-源码阅读-compositionapi-setup-函数" aria-hidden="true">#</a> 15: 源码阅读：compositionAPI，setup 函数</h2><p>我们已经处理好了组件非常多的概念，但是我们知道对于<code>vue3</code>而言，提供了<code>composition API</code>,即<code>setup</code>函数的概念</p><p>那么如果我们想要通过<code>setup</code>函数来进行一个响应性数据的挂载，那么又应该怎么做呢？</p><p>我们创建一个测试示例<code>render-component-setup.html</code>内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们构建了一个<code>setup</code>函数，并且在<code>setup</code>函数中<code>return</code>了一个函数，函数中返回了一个<code>vnode</code></p><p>我们知道，<code>vue</code>对于组件的挂载，本质上是触发<code>mountComponent</code>，在<code>mountComponent</code>中调用了<code>setUpComponent</code>函数，通过此函数来对组件的选项进行标准化</p><p>那么<code>setup</code>函数本质上就是一个<code>vue</code>组件的选项，所以对于<code>setup</code>函数处理的核心逻辑，就在<code>setupComponent</code>中。我们在这函数内部进行<code>debugger</code></p><p><img src="https://yejiwei.com/static/img/0785e74a875899e33378037470f4286f.image.png" alt="image.png"></p><ol><li><p>由上图我们看到了<code>setup</code>函数最终被执行了，由此得到<code>setupResult</code>的值为<code>()=&gt;h(&#39;div&#39;, obj.name)</code>。即<code>setup</code>函数的返回值。我们代码继续执行</p><p><img src="https://yejiwei.com/static/img/061f608553715bfedff07f77d13b3a98.image.png" alt="image.png"></p></li><li><p>我们可以看到，先是触发了<code>handleSetupResult</code>方法，在<code>handleSetupResult</code>方法中会将<code>setupResult</code>赋值给<code>instance.render</code>，最后进行了<code>finishComponentSetup</code></p></li><li><p>后面的逻辑就是<strong>有状态的响应性组件挂载逻辑</strong>的逻辑了，这里就不再详细说明</p></li></ol><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h3><ol><li>对于<code>setup</code>函数的<code>composition API</code>语法的组件挂载，本质上只是多了一个<code>setup</code>函数的处理</li><li>对于<code>setup</code>函数内部，可以完成对应的<strong>自治</strong>，所以我们<strong>无需</strong>通过<code>call</code>方法来改变<code>this</code>指向，即可得到真实的<code>render</code></li><li>得到真实的<code>render</code>之后，后面就是正常的组件挂载了</li></ol><h2 id="_16-框架实现-compositionapi-setup-函数" tabindex="-1"><a class="header-anchor" href="#_16-框架实现-compositionapi-setup-函数" aria-hidden="true">#</a> 16：框架实现：compositionAPI，setup 函数</h2><ol><li><p>在<code>packages/runtime-core/src/component.ts</code>模块中的<code>setupStatefulComponent</code>方法中，增加<code>setup</code>判定</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupStatefuleComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>
  <span class="token class-name"><span class="token keyword">if</span></span> <span class="token punctuation">(</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行setup函数&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> setupResult
  <span class="token punctuation">}</span>
  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在 finishComponentSetup 中，如果已经存在 render，则不需要重新赋值：</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span>
  <span class="token comment">// 组件不存在 render 时，才需要重新赋值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> component<span class="token punctuation">.</span>render
  <span class="token punctuation">}</span>
  <span class="token comment">// 改变 options 中的 this 指向</span>
  <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，代码完成，创建对应测试示例<code>packages/vue/examples/runtime/render-component-setup.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
  <span class="token comment">// 挂载</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>挂载</strong>和<strong>更新</strong>完成</p></li></ol><h2 id="_17-总结" tabindex="-1"><a class="header-anchor" href="#_17-总结" aria-hidden="true">#</a> 17. 总结</h2><p>在本章中，我们处理了<code>vue</code>中组件对应的<strong>挂载、更新逻辑</strong></p><p>我们知道组件本质上就是一个对象(或者函数)，组件的渲染本质上就是<code>render</code>函数返回值的渲染</p><p>组件渲染的内部，构建了<code>ReactiveEffect</code>的实例，其目的是为了实现组件的响应性渲染</p><p>而当我们期望在组件内部访问响应性数据时，分为两种情况</p><ol><li>通过<code>this</code>访问：对于这种情况我们需要改变<code>this</code>指向，改变的方式是通过<code>call</code>方法或者<code>bind</code>方法</li><li>通过<code>setup</code>访问：这种方式因为不涉及<code>this</code>指向问题，反而更加简单当组件内部的响应性数据发生变化时，会触发<code>componentUpdateFn</code>函数，在该函数中根据<code>isMounted</code>的值的不同，进行了不同的处理</li></ol><p>组件的生命周期钩子，本质上只是一些方法的回调，当然，如果我们希望在生命周期钩子中通过<code>this</code>访问响应性数据，那么一样需要改变<code>this</code>指向</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,109),d={href:"https://juejin.cn/post/7187069728358629434#heading-1",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",d,[o("vue3 源码学习，实现一个 mini-vue（十一）：组件的设计原理与渲染方案"),c(s)])])])}const b=a(l,[["render",r],["__file","index-10.html.vue"]]);export{b as default};
