import{_ as e,M as p,p as t,q as o,R as n,t as i,N as l,a1 as s}from"./framework-e8cb8151.js";const c={},u=s(`<h1 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h1><h2 id="_1、promise-是什么" tabindex="-1"><a class="header-anchor" href="#_1、promise-是什么" aria-hidden="true">#</a> 1、Promise 是什么</h2><h3 id="_1-1-理解" tabindex="-1"><a class="header-anchor" href="#_1-1-理解" aria-hidden="true">#</a> 1.1 理解</h3><ol><li>抽象表达 <ul><li>Promise 是一门新的技术(ES6 规范)</li><li>Promise 是 JS 中进行异步编程的新解决方案（备注：旧方案是单纯使用回调函数） <ul><li>异步操作 <ul><li>fs 文件操作</li><li>数据库操作</li><li>AJAX</li><li>定时器</li></ul></li></ul></li></ul></li><li>具体表达： <ul><li>从语法上来说：Promise 是一个构造函数</li><li>从功能上来说：Promise 对象用来封装一个异步操作并可以获取其成功、失败的结果值</li></ul></li></ol><h3 id="_1-2-promise-的状态" tabindex="-1"><a class="header-anchor" href="#_1-2-promise-的状态" aria-hidden="true">#</a> 1.2 promise 的状态</h3><blockquote><p>promise 是一个属性：promiseState： pending/resolved/rejected</p></blockquote><ol><li>pending 变为 resolved（fullfield）</li><li>pending 变为 rejected</li></ol><p>说明：</p><p>只有这 2 种，且一个 promise 对象只能改变一次，</p><p>无论变为成功还是失败，都会有一个结果数据。</p><p>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p><h3 id="_1-3-promise-的对象的值" tabindex="-1"><a class="header-anchor" href="#_1-3-promise-的对象的值" aria-hidden="true">#</a> 1.3 promise 的对象的值</h3><blockquote><p>实例对象中的另一个属性: promiseResult</p></blockquote><p>保存着对象的[成功/失败]的结果</p><ul><li>resolve</li><li>reject</li></ul><h3 id="_1-4-promise-的-基本流程" tabindex="-1"><a class="header-anchor" href="#_1-4-promise-的-基本流程" aria-hidden="true">#</a> 1.4 promise 的 基本流程</h3><ol><li>创建：new Promise() ，注意：此刻是 pending 状态</li><li>执行异步操作 <ul><li>成功了，执行 resolve() <ul><li>promise 对象 变为 resolved 状态</li><li>指向 .then() ：回调 onResolved()</li><li>最后指向 新的 promise 对象</li></ul></li><li>失败了，执行 reject() <ul><li>promise 对象 变为 reject 状态</li><li>指向 .then()/.catch() 回调 onRejected()</li><li>最后指向新的 promise 对象</li></ul></li></ul></li></ol><h2 id="_2、为什么要使用-promise" tabindex="-1"><a class="header-anchor" href="#_2、为什么要使用-promise" aria-hidden="true">#</a> 2、为什么要使用 Promise</h2><h3 id="_2-1-指定回调函数的方法更加灵活" tabindex="-1"><a class="header-anchor" href="#_2-1-指定回调函数的方法更加灵活" aria-hidden="true">#</a> 2.1 指定回调函数的方法更加灵活</h3><ol><li>旧的：必须在异步任务前指定</li><li>promise: 启动异步任务 =》返回 promise 对象 =》给 promise 对象绑定回调函数（甚至可以在异步任务结束后指定多个）</li></ol><h3 id="_2-2-支持链式调用-可以解决回调地狱问题" tabindex="-1"><a class="header-anchor" href="#_2-2-支持链式调用-可以解决回调地狱问题" aria-hidden="true">#</a> 2.2 支持链式调用，可以解决回调地狱问题</h3><ol><li><p>什么是回调地狱</p><blockquote><p>回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行的条件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">asyncFunc1</span><span class="token punctuation">(</span>opt1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">asyncFunc2</span><span class="token punctuation">(</span>opt2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">asyncFunc3</span><span class="token punctuation">(</span>opt3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// to do something</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>回调地狱的缺点</p><ul><li>不便于阅读</li><li>不便于异常处理</li></ul></li><li><p>解决方案</p><ul><li>promise 链式调用</li><li>async/await: 回调地狱的终极解决方案</li></ul></li><li><p>Promie 的缺点</p><ul><li>无法取消 promie, 一旦新建它就会立即执行，无法中途取消</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部</li><li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ul></li></ol><h3 id="_2-3-如何使用-promise" tabindex="-1"><a class="header-anchor" href="#_2-3-如何使用-promise" aria-hidden="true">#</a> 2.3 如何使用 Promise</h3><h4 id="_2-3-1-api" tabindex="-1"><a class="header-anchor" href="#_2-3-1-api" aria-hidden="true">#</a> 2.3.1 API</h4><ol><li><p>Promise 的构造函数：Promise(executor) {}</p><ul><li>executor 函数： 执行器 (resolve, reject) =&gt; {}</li><li>resolve 函数：内部定义成功时我们调用的函数：value =&gt; {}</li><li>reject 函数：内部定义失败时我们调用的函数：reason =&gt; {} 说明：executor 会在 Promise 内部立即同步调用，异步操作在执行器中执行</li></ul></li><li><p>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</p><ul><li>onResolved 函数：成功的回调函数：(value) =&gt; {}</li><li>onRejected 函数：失败的回调函数：(reason) =&gt; {} 说明：指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调，返回一个新的 promise 对象</li></ul></li><li><p>Promise.prototype.catch 方法：（onRejected） =&gt; {}</p><ul><li>onRejected 函数：失败的回调函数 （reason） =&gt; {} 说明：then()的语法糖，相当于 then(undefined, onRejected)</li></ul></li><li><p>Promise.resolve 方法: (value) =&gt; {}</p><ul><li>value: 成功的数据或者 promie 对象 说明：返回一个失败/成功的 promise 对象</li></ul></li><li><p>Promise.reject 方法：（reason） =&gt; {}</p><ul><li>reason : 失败的原因 说明：返回一个失败的 promise 对象</li></ul></li><li><p>Promise.all 方法：（promises）=&gt; {}</p><ul><li>promises：包含 n 个 promise 的数组 说明：返回一个新的 promise, 只有所有的 promise 都成功才成功，只要有一个失败了就直接失败</li></ul></li><li><p>Promise.race 方法：(promises) =&gt; {}</p><ul><li>promises 包含 n 个 promise 的数组 说明：返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态。它只关注是否已解决，而不管其被解决还是被拒绝。</li></ul></li></ol><h3 id="_2-3-2-promise-的几个关键问题" tabindex="-1"><a class="header-anchor" href="#_2-3-2-promise-的几个关键问题" aria-hidden="true">#</a> 2.3.2 promise 的几个关键问题</h3><ol><li><p>如何改变 promise 的装填</p><ul><li>resolve(value) 如果当时是 pending，就会变为 resolved</li><li>reject(reason)：如果当时是 pending, 就会变为 rejected</li><li>抛出异常：如果当期是 pending 就会变为 rejected</li></ul></li><li><p>一个 promise 指定多个失败/失败回调函数，都会调用吗</p><ul><li>当 promise 改变为对应状态时候都会调用</li></ul></li><li><p>改变 promise 状态和指定回调函数谁先谁后</p><ul><li>都有可能，正常情况下是先指定回调在改变状态，但也可以先改变状态在指定回调</li><li>如何先该状态在指定回调 <ul><li>在执行器中直接调用 resolve()/reject()</li><li>延迟更长时间才调用 then()</li></ul></li><li>什么时候才能得到数据 <ul><li>如果先指定的回调，那当状态发生改变时，回到函数就会调用，得到数据</li><li>如果先改变的状态，那当指定回调时，回调函数就会调用，得到数据</li></ul></li></ul></li><li><p>promise.then()返回的新 promise 的结果状态由什么决定</p><ul><li>简单表达：由 then 指定的回调函数执行的结果决定</li><li>详细表达 <ul><li>如果抛出异常，新 promise 变为 rejected, reason 为抛出的异常</li><li>如果返回的是非 promise 的任意值，新 promise 变为 resolve，value 为返回的值</li><li>如果返回的是另一个新 promise,此 promise 的结果就会成为新 promise 的结果</li></ul></li></ul></li><li><p>promise 如何串联多个操作任务</p><ul><li>promise 的 then 返回一个新的 promise，可以开成 then 的链式调用</li><li>通过 then 的链式调用串联多个同步/异步任务</li></ul></li><li><p>promise 异常穿透</p><ul><li>当使用 promise 的 then 链式调用时，可以在最后指定失败的回调</li><li>前面任何操作出了异常，都会传到最后失败的回调中处理</li></ul></li><li><p>中断 promise 链？</p><ul><li>当使用 promise 的 then 链式调用时，在中间中断，不再调用后面的回调函数</li><li>办法：在回调函数中返回一个 pendding 状态的 promise 对象</li></ul></li></ol><h2 id="_3-async-与-await" tabindex="-1"><a class="header-anchor" href="#_3-async-与-await" aria-hidden="true">#</a> 3. async 与 await</h2><h3 id="_3-1-mdn-文档" tabindex="-1"><a class="header-anchor" href="#_3-1-mdn-文档" aria-hidden="true">#</a> 3.1 mdn 文档</h3>`,29),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function",target:"_blank",rel:"noopener noreferrer"},d=s(`<h3 id="_3-2-async-函数" tabindex="-1"><a class="header-anchor" href="#_3-2-async-函数" aria-hidden="true">#</a> 3.2 async 函数</h3><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h3 id="_3-3-await-表达式" tabindex="-1"><a class="header-anchor" href="#_3-3-await-表达式" aria-hidden="true">#</a> 3.3 await 表达式</h3><ol><li>await 右侧的表达式一般为 promise 对象，但也可以是其他的值</li><li>如果表达式是 promise 对象，await 返回的是 promise 成功的值</li><li>如果表达式是其他值，直接将此值作为 await 的返回值</li></ol><h3 id="_3-4-注意" tabindex="-1"><a class="header-anchor" href="#_3-4-注意" aria-hidden="true">#</a> 3.4 注意</h3><ol><li>await 必须写在 async 函数中，但是 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了，就会抛弃异常，需要通过 try...catch 捕获处理</li></ol><h2 id="_4、一些注意点" tabindex="-1"><a class="header-anchor" href="#_4、一些注意点" aria-hidden="true">#</a> 4、一些注意点</h2><h3 id="_1-promise-的-then-的第二个参数和-catch-的区别" tabindex="-1"><a class="header-anchor" href="#_1-promise-的-then-的第二个参数和-catch-的区别" aria-hidden="true">#</a> 1. Promise 的 then 的第二个参数和 catch 的区别</h3><ol><li><p>首先区分前提：</p><ul><li>reject 是用来抛出异常的，catch 是用来处理异常的</li><li>reject 是 Promise 的方法，而 then 和 catch 是 Promise 实例的方法（Promise.prototype.then 和 Promise.prototype.catch）</li></ul></li><li><p>区别：</p><ul><li><strong>如果在 then 的第一个函数里抛出了异常，后面的 catch 能捕获到，而 then 的第二个函数捕获不到。</strong></li></ul></li><li><p>相同</p><ul><li><p>then 的第二个参数和 catch 捕获错误信息的时候会遵循就近原则。</p><ul><li><p>如果是 promise 内部报错，reject 抛出错误后，then 的第二个参数和 catch 方法都存在的情况下，只有 then 的第二个参数能捕获到，如果 then 的第二个参数不存在，则 catch 方法会捕获到。 来看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如下代码</span>
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> rejected</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//此时只有then的第二个参数可以捕获到错误信息</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//此时catch方法可以捕获到错误信息</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//此时只有then的第二个参数可以捕获到Promise内部抛出的错误信息</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//此时只有then的第二个参数可以捕获到Promise内部抛出的错误信息</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//此时catch可以捕获到Promise内部抛出的错误信息</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

作者：贾西贝Xx
<span class="token literal-property property">链接：https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>juejin<span class="token punctuation">.</span>cn<span class="token operator">/</span>post<span class="token operator">/</span><span class="token number">7075894989200293919</span>
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>实现语法糖：<strong><code>catch只是一个语法糖而己 还是通过then 来处理的，</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>写法比较</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// success</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// error</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// good</span>
promise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//cb</span>
    <span class="token comment">// success</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// error</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>总结</p><p><strong>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面 then 方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用 catch 方法，而不使用 then 方法的第二个参数。</strong></p></li></ol><h3 id="_2-promise-多个-then-回调中存在的问题" tabindex="-1"><a class="header-anchor" href="#_2-promise-多个-then-回调中存在的问题" aria-hidden="true">#</a> 2. Promise 多个 then 回调中存在的问题</h3><blockquote><p>当 主 promise 失败时候，如果第一个 then 函数的第二个参数有处理且不抛出问题，那么将会执行后续 then 函数的第一个参数，，依次类推</p></blockquote><p>代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error122&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> p
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">value1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;i am success&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">error1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error1&#39;</span><span class="token punctuation">,</span> error1<span class="token punctuation">)</span> <span class="token comment">// 之类会执行，打印 error1 error122</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">// 这里会执行，打印 res2 undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">error2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error2&#39;</span><span class="token punctuation">,</span> error2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3&#39;</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span> <span class="token comment">// 这里会执行,打印 res3 undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(m,v){const a=p("ExternalLinkIcon");return t(),o("div",null,[u,n("p",null,[n("a",r,[i("mdn 文档--async"),l(a)])]),d])}const b=e(c,[["render",k],["__file","promise.html.vue"]]);export{b as default};
