import{_ as e,p as s,q as o,a1 as a}from"./framework-e8cb8151.js";const t="/assets/image-20230723102342637-af5b28f2.png",p="/assets/image-20230722122819660-ff85db9c.png",c="/assets/image-20230722122946321-78b0e7a9.png",r="/assets/image-20230722123223911-2a63fe33.png",i="/assets/image-20230723104809133-f3a02c45.png",n="/assets/image-20230722234042662-253e3ca8.png",g="/assets/image-20230723105410594-45bdda55.png",d="/assets/image-20230722123850206-c7027b57.png",m="/assets/image-20230723110656012-9ac62c4f.png",_="/assets/image-20230723113902548-1a48e8c7.png",l="/assets/image-20230723113937174-cd095c92.png",h="/assets/image-20230723114027985-8fe86e5a.png",f="/assets/image-20230723122308529-eab0ae7e.png",S="/assets/image-20230723124457773-61b84bab.png",b="/assets/image-20230723125244889-ec9505e1.png",M="/assets/image-20230723125438800-33becd99.png",u="/assets/image-20230723130130156-1c5b4dd8.png",O="/assets/image-20230723130606630-ecf8bdbf.png",L="/assets/image-20230723131020833-b39612e1.png",x="/assets/image-20230729222833046-69fee54e.png",T="/assets/image-20230729223915147-fc9f02aa.png",C="/assets/image-20230729225159032-3c957b6d.png",D="/assets/image-20230729225222412-cc4b7c18.png",H="/assets/image-20230729225104437-7bc63d7c.png",w={},J=a('<h1 id="_02-原理-浏览器渲染原理" tabindex="-1"><a class="header-anchor" href="#_02-原理-浏览器渲染原理" aria-hidden="true">#</a> 02-原理-浏览器渲染原理</h1><blockquote><p>可以简单的理解渲染，是输入一段 HTML 字符串，然后根据一套及其复杂的工序，环环相扣，精密的配合，输出一个大对象的过程。这个对象包括每一个像素点的位置、颜色等</p></blockquote><img src="'+t+'" alt="image-20230723102342637"><h2 id="浏览器是如何渲染页面的" tabindex="-1"><a class="header-anchor" href="#浏览器是如何渲染页面的" aria-hidden="true">#</a> 浏览器是如何渲染页面的？</h2><p>当浏览器的网络进程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主进程的消息队列。</p><img src="'+p+'" alt="image-20230722122819660"><p>在<strong>事件循环机制</strong>的作用下，渲染主进程取出消息队列中的渲染任务，开启渲染流程</p><hr><img src="'+c+'" alt="image-20230722122946321"><p>整个渲染流程分为多个阶段，分别是：<code>HTML</code> 解析、样式计算、分层、绘制、分块、光栅化、绘画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入</p><p>这样，整个渲染流程形成了一套组织严密的生产流水线</p><hr><p>渲染的第一步就是 <strong>解析 HTML</strong></p><blockquote><p>主要的过程就是 根据一段 HTML 字符串，得到一个 DOM（Document Object Model）树和 CSSOM（CSS Object Model）树</p></blockquote><img src="'+r+'" alt="image-20230722123223911"><p>解析过程中遇到 <code>CSS</code> 解析 <code>CSS</code>，遇到 <code>JS</code> 执行 <code>JS</code>。为了提高解析效率，浏览器在开始解析前，会启动一个<strong>预解析</strong>的线程，率先下载 <code>HTML</code> 中外部的 <code>CSS</code> 文件和 外部的 <code>JS</code> 文件</p><img src="'+i+'" alt="image-20230723104809133"><p>如果主线程解析到 <code>Link</code> 位置，此时外部的 <code>CSS</code> 文件还没有下载解析好，主线程不会等待，继续解析后续的 <code>HTML</code>。这是以为下载和解析 <code>CSS</code> 的工作是在预解析线程中进行的。这就是 <code>CSS</code> 不会阻塞 <code>HTML</code> 解析的根本原因</p><img src="'+n+'" alt="image-20230722234042662"><p>如果主线程解析到 <code>script</code> 位置，会停止解析 <code>HTML</code>，转而等到 <code>JS</code> 文件下载好，并将全局代码解析执行完成后，才能继续解析 <code>HTML</code>。这是因为 <code>JS</code> 代码的执行过程中可能会修改当前的 <code>DOM</code> 树，所以 <code>DOM</code> 树的生成必须暂停。这就是 <code>JS</code> 会阻塞 <code>HTML</code> 解析的根本原因</p><img src="'+g+'" alt="image-20230723105410594"><p>第一步完成后，会得到 <code>DOM</code> 和 <code>CSSOM</code> 树，浏览器的默认样式、内部样式、外部样式、行内样式均包含在 <code>CSSOM</code> 树中。</p><img src="'+d+'" alt="image-20230722123850206"><hr><p>渲染的下一步就是 <strong>样式计算</strong>（Recalculate Style）</p><p>主线程会遍历得到的 <strong>DOM</strong> 树，依次为树中的每个节点算出它最终的样式，称之为 <strong>Computed Style</strong>.</p><p>在这一过程中，很多预设值会变成绝对值，比如 <code>red</code> 会变成 <code>rgba(255,0,0)</code>; 相对单位会变为绝对单位，比如 <code>em</code> 会变成 <code>px</code></p><p>这一步完成后，会得到一棵带有样式的 <code>DOM</code> 树</p><img src="'+m+'" alt="image-20230723110656012"><hr><p>接下来是 <strong>布局</strong>（Layout），布局完成后会得到布局树</p><img src="'+_+'" alt="image-20230723113902548"><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。比如节点的宽度、<strong>相对包含块</strong>的位置。</p><p>大部分时候，DOM 树和 布局树并非一一对应</p><p>比如<code>display: none</code> 的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><img src="'+l+'" alt="image-20230723113937174"><img src="'+h+'" alt="image-20230723114027985"><p>行盒盒块盒不能相邻，否则会增加匿名行盒</p><img src="'+f+'" alt="image-20230723122308529"><hr><p>下一步是 <strong>分层</strong></p><img src="'+S+'" alt="image-20230723124457773"><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提高效率</p><p>滚动条、堆叠上下文、transform、opacity、z-index 等样式都会或多或少的影响分层结果，也可以通过 <code>will-change</code> 属性更大程度的影响分层结果</p><hr><p>在下一步就是<strong>绘制</strong>(Paint)</p><img src="'+b+'" alt="image-20230723125244889"><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><img src="'+M+'" alt="image-20230723125438800"><hr><p>完成绘制之后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行<strong>分块</strong>（Tiling），将其划分为更多的小区域。</p><img src="'+u+'" alt="image-20230723130130156"><p>它会从线程池中拿取多个线程来完成分块工作。</p><img src="'+O+'" alt="image-20230723130606630"><hr><p>分块完成后，会进入<strong>光栅化</strong>(Raster)阶段</p><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块</p><p>光栅化的结果，就是一块一块的位图</p><p><img src="'+L+'" alt="image-20230723131020833"></p><p><img src="'+x+'" alt="image-20230729222833046"></p><hr><p>最后一个阶段就是<strong>画</strong>了</p><p>合成线程拿到每个层、每个块的位图后，生成一个个【指引 quad】信息</p><p>指引会标识出每个位图应该画到屏幕的位置，已经会考虑旋转、缩放等变形</p><p>变形发生在合成线程，与渲染主线程无关，这就是 <strong>transform</strong> 效率高的本质原因</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像</p><p><img src="'+T+'" alt="image-20230729223915147"></p><p><img src="'+C+'" alt="image-20230729225159032"></p><h2 id="什么是-reflow" tabindex="-1"><a class="header-anchor" href="#什么是-reflow" aria-hidden="true">#</a> 什么是 reflow?</h2><p>reflow 的本质就是重新计算 layout 树</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合兵这些操作，当 JS 代码全部完成后在进行统一计算。所以，改动属性造成的 reflow 是异步完成的</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息</p><p>浏览器在反复权衡下，最终决定获取属性立即 reflow</p><p><img src="'+D+'" alt="image-20230729225222412"></p><h2 id="什么是-repaint" tabindex="-1"><a class="header-anchor" href="#什么是-repaint" aria-hidden="true">#</a> 什么是 repaint?</h2><p>repain 的本质就是<strong>重新根据分层信息计算了</strong>绘制指令</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</p><p><img src="'+H+'" alt="image-20230729225104437"></p><h2 id="为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#为什么-transform-的效率高" aria-hidden="true">#</a> 为什么 transform 的效率高?</h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个 draw 阶段。</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化</p>',87),k=[J];function q(y,P){return s(),o("div",null,k)}const U=e(w,[["render",q],["__file","index-02.html.vue"]]);export{U as default};
