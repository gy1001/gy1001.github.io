import{_ as e,p as a,q as d,a1 as i}from"./framework-e8cb8151.js";const s="/assets/image-20230728140935870-d08e423d.png",t="/assets/image-20230728140948847-5dc65436.png",c="/assets/image-20230728141003222-20fc02b7.png",n="/assets/image-20230728141010925-a91346b2.png",r="/assets/image-20230728141021440-a12583da.png",o="/assets/image-20230728141030499-8c59978f.png",h="/assets/image-20230728141040640-6ac083b7.png",p="/assets/image-20230728141050556-f983e7fe.png",l="/assets/image-20230728141101960-5cd00532.png",g="/assets/image-20230728141111319-60e878f0.png",m={},f=i('<h1 id="_06-查看代码修改-使用-diff-查看修改了哪些代码" tabindex="-1"><a class="header-anchor" href="#_06-查看代码修改-使用-diff-查看修改了哪些代码" aria-hidden="true">#</a> 06-查看代码修改：使用 diff 查看修改了哪些代码？</h1><p><img src="'+s+`" alt="image-20230728140935870"></p><blockquote><p>成功＝艰苦的劳动＋正确的方法＋少谈空话。 ——爱因斯坦</p></blockquote><p>在上面一节中，我们学习了通过 <code>git status</code> 命令查看文件修改列表，但很多时候并不能满足需求，比如说，我想看某一个文件具体修改了什么内容。</p><h2 id="_6-1-名词定义" tabindex="-1"><a class="header-anchor" href="#_6-1-名词定义" aria-hidden="true">#</a> 6.1 名词定义</h2><p>在学习 Git 的 <code>diff</code> 命令之前，我们先来统一 一下两个名词的理解，分别是工作区和暂存区。</p><h3 id="_6-1-1-工作区" tabindex="-1"><a class="header-anchor" href="#_6-1-1-工作区" aria-hidden="true">#</a> 6.1.1 工作区</h3><p>工作区，指的是当前正在编辑的文件，还没有修改的内容通过 <code>git add</code> 命令暂存起来；比如我现在修改了 <code>index.php</code> 文件的一行代码，没有执行 <code>git add index.php</code> 命令，那么 index.php 便处于工作区状态。</p><h3 id="_6-1-2-暂存区" tabindex="-1"><a class="header-anchor" href="#_6-1-2-暂存区" aria-hidden="true">#</a> 6.1.2 暂存区</h3><p>暂存区，指的是文件的修改已经通过 <code>git add</code> 命令临时存储到版本记录里了，但还没有正式通过 <code>git commit</code> 提交的阶段；比如我现在新增一个 <code>test.php</code> 文件，使用了 <code>git add test.php</code> 命令，那么此时， test.php 文件的改动就已经进入到了暂存区。</p><h2 id="_6-2-比较工作区变动" tabindex="-1"><a class="header-anchor" href="#_6-2-比较工作区变动" aria-hidden="true">#</a> 6.2 比较工作区变动</h2><p>现在我编辑了 <code>index.php</code> 文件，并且在里面加入了内容，如果我想通过 git 命令查看增加了哪些内容，参考命令如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令之后，绿色部分代表增加的内容，红色部分代表删除的内容，执行结果如下图所示： <img src="`+t+'" alt="image-20230728140948847"> 在图中可以看到在 index.php 中增加了 <code>zhangsan</code>。</p><h2 id="_6-3-比较暂存区变动" tabindex="-1"><a class="header-anchor" href="#_6-3-比较暂存区变动" aria-hidden="true">#</a> 6.3 比较暂存区变动</h2><p>有些时候，我们可能已经通过 <code>git add</code> 命令，将某些文件从工作区添加到暂存区，但又想回过头，来看此文件刚才改动哪些内容的场景；比如下图中是我刚才新建了一个 <code>diff.php</code> 文件，并且已经添加到暂存区，如下图执行了 <code>git status</code> 命令结果所示： <img src="'+c+'" alt="image-20230728141003222"> 但我突然发现，我已经忘记这个文件里到底有哪些内容被改变了，于是我使用了 <code>git status</code> 命令查看变动的内容，执行结果如下图所示： <img src="'+n+`" alt="image-20230728141010925"> 在 Git 的返回信息中却无法看到修改详情，原因是因为 diff.php 文件被提交到暂存区之后，工作区并没有再次改动，此时工作区与暂存区一致，当然就不能看出改动情况了。</p><p>这个时候，如果想要看 <code>diff.php</code> 文件里面修改了什么内容，就不是再把工作区和暂存区进行对比了，而是需要把暂存区与版本库最近一次 commit 的内容进行比较，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff --cached  diff.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行结果如下图所示 <img src="`+r+'" alt="image-20230728141021440"> 在图中可以看出，diff.php 中新增了一行代码，内容为 <code>lisi</code> 。</p><h2 id="_6-4-与指定记录比较" tabindex="-1"><a class="header-anchor" href="#_6-4-与指定记录比较" aria-hidden="true">#</a> 6.4 与指定记录比较</h2><p>有些时候，我们可能需要代码和历史的某一个版本进行比较，这个时候你可以先通过 <code>git log</code> 命令，找到历史提交记录的一个 hash 值，如下图所示： <img src="'+o+`" alt="image-20230728141030499"></p><h3 id="_6-4-1-工作区比较" tabindex="-1"><a class="header-anchor" href="#_6-4-1-工作区比较" aria-hidden="true">#</a> 6.4.1 工作区比较</h3><p>将要比较的 hash 值复制下来，然后执行如下所示命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff hash值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+h+`" alt="image-20230728141040640"></p><p>在上图中，可以看到工作区和指定记录存在的差异。</p><h3 id="_6-4-1-暂存区比较" tabindex="-1"><a class="header-anchor" href="#_6-4-1-暂存区比较" aria-hidden="true">#</a> 6.4.1 暂存区比较</h3><p>有些时候，我们想把暂存区的改动和指定记录进行对比，那么在命令中加入 <code>--cached</code> 即可，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff --cached hash值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行结果如下图所示：</p><p><img src="`+p+`" alt="image-20230728141050556"></p><p>从图中可以看到 diff.php 文件，在指定的版本还未存在，在当前的暂存区中被添加了进来，新增的内容有一行，内容是 <code>lisi</code>。</p><h2 id="_6-5-与最新版本库比较" tabindex="-1"><a class="header-anchor" href="#_6-5-与最新版本库比较" aria-hidden="true">#</a> 6.5 与最新版本库比较</h2><p>很多时候，我们只需要将未正式提交的代码（包含工作区与暂存区）与最新的 commit 记录进行比较，虽然也可以通过指定 commit 的 hash 值进行，但是却很不方便，需要先获取到 hash 值，这里介绍一个简单的方法，可以通过 <code>git diff HEAD</code> 命令方式快速对比，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令返回结果如下：</p><p><img src="`+l+`" alt="image-20230728141101960"></p><p>在执行的命令中，<code>HEAD</code> 指的是当前所在的分支名，如果你想比较其他分支也可以将 HEAD 改成其他分支名。</p><h2 id="_6-6-比较两个历史记录" tabindex="-1"><a class="header-anchor" href="#_6-6-比较两个历史记录" aria-hidden="true">#</a> 6.6 比较两个历史记录</h2><p>有时候，可能会需要查看某一次提交记录修改了什么内容，这个时候就需要将两个历史记录进行比较；首先通过 <code>git log</code> 命令获取到需要查看的记录 hash 值，然后再找到这个记录的上一个版本的 hash 值，拼接的参考命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git diff hash值1  hash值2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，显示的效果如下：</p><p><img src="`+g+'" alt="image-20230728141111319"></p><h2 id="_6-7-小结" tabindex="-1"><a class="header-anchor" href="#_6-7-小结" aria-hidden="true">#</a> 6.7 小结</h2><p>在这节内容中，主要介绍了工作区和暂存区的概念，以及如何使用 diff 命令进行比较差异，主要知识点有以下：</p><ol><li>工作区，是指目前改动的内容还未使用 <code>git add</code> 临时存储</li><li>暂存区，是指改动的内容已经临时存储，还未正式通过 <code>git commit</code> 提交</li><li>比较修改的命令为 <code>git diff</code>，不同情况增加不同参数</li><li>查看暂存区的额外参数为 <code>--cached</code></li><li>比较历史差异输入一个 hash 值，则是把当前的改动和历史差异对比，两个 hash 值则是把前一个版本和后面一个版本进行对比</li></ol>',46),_=[f];function u(x,v){return a(),d("div",null,_)}const E=e(m,[["render",u],["__file","index-06.html.vue"]]);export{E as default};
