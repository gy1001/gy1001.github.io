import{_ as c,M as l,p,q as i,Q as s,R as n,t as e,N as o,a1 as a}from"./framework-e8cb8151.js";const d={},u=n("h1",{id:"_04-flexbox-布局中的对齐方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_04-flexbox-布局中的对齐方式","aria-hidden":"true"},"#"),e(" 04-Flexbox 布局中的对齐方式")],-1),r=n("p",null,"Flexbox 布局中提供了多个用于对齐 Flex 项目以及 Flex 项目之间分配空间的属性。简单地说，这些属性能够在 Flex 容器的主轴和侧轴上对齐 Flex 项目，以及在 Flex 项目之间分配空间。",-1),g=n("p",null,[e("这些属性可以分为两组："),n("strong",null,"空间分配属性"),e(" 和 "),n("strong",null,"对齐属性"),e(" 。用于分配 Flex 容器空间的属性主要有：")],-1),m=n("ul",null,[n("li",null,[n("code",null,"justify-content"),e("：沿 Flex 容器的主轴分配 Flex 容器的剩余空间；")])],-1),k=n("ul",null,[n("li",null,[n("code",null,"align-content"),e("：沿 Flex 容器的侧轴分配 Flex 容器的剩余空间；")])],-1),v=n("ul",null,[n("li",null,[n("code",null,"place-content"),e("：它是 "),n("code",null,"justify-content"),e(" 和 "),n("code",null,"align-content"),e(" 的简写属性。")])],-1),b=n("p",null,"用于在 Flexbox 布局中对齐的属性如下：",-1),f=n("ul",null,[n("li",null,[n("code",null,"align-self"),e("：沿 Flex 容器侧轴对齐单个 Flex 项目；")])],-1),x=a('<ul><li><code>align-items</code>：将所有 Flex 项目作为一个组，沿 Flex 容器侧轴对齐。</li></ul><p><code>justify-</code> 开头的属性主要用于 Flex 容器的主轴方向；<code>align-</code> 开头的属性主要用于 Flex 容器侧轴方向；<code>-items</code> 结尾的属性主要用于对齐 Flex 项目，<code>-self</code> 结尾的属性主要用于 Flex 项目的自对齐，<code>-content</code> 结尾的属性主要用于容器空间分配。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf7ec07188d34ae595c6c716b8a8e8ef~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>只不过在做出正确的选择之前，你需要知道：</p><ul><li>对齐方向（Flex 容器的主轴方向通常水平方向，否则也是内联轴方向；侧轴是垂直方向，否则也是块轴方向）；</li></ul>',5),h=a("<ul><li>你在布局要在对齐什么（所有 Flex 项目，单个 Flex 项目或者两者之间的内容）。</li></ul><table><thead><tr><th></th><th><strong>主轴(<code>justify-*</code>)</strong></th><th><strong>侧轴(<code>align-*</code>)</strong></th></tr></thead><tbody><tr><td><strong>对齐 Flex 项目</strong>( <code>*-items</code>)</td><td><s><code>justify-items</code></s></td><td><code>align-items</code></td></tr><tr><td><strong>Flex 项目自对齐</strong>( <code>*-self</code>)</td><td><s><code>justify-self</code></s></td><td><code>align-self</code></td></tr><tr><td>空间分配( <code>*-content</code>)</td><td><code>justify-content</code></td><td><code>align-content</code></td></tr></tbody></table><p>需要提醒一下的是，Flex 容器的主轴和侧轴的方向是可以改变的，用于 Flex 容器上的 <code>flex-direction</code> ，CSS 的书写模式 <code>writing-mode</code> 属性，CSS 阅读模式 <code>dirction</code> 和 HTML 元素的 <code>dir</code> 属性都可以改变。另外，<strong>在 Flexbox 布局中是没有</strong> <strong><code>justify-self</code>属性的</strong> ！</p>",3),F=n("strong",null,"CSS Box Alignment Module",-1),_={href:"https://www.w3.org/TR/css-align-3",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"在这里，你可以了解，在 Flexbox 布局中它们如何工作。",-1),j=n("p",null,"为了让接下来的示例尽量避免复杂化，在这里我们对示例做一定的约束：",-1),q=n("ul",null,[n("li",null,[e("Flex 容器是尺寸是 "),n("code",null,"600px x 300px"),e(" 的矩形；")])],-1),w=n("ul",null,[n("li",null,[e("所有 Flex 项目的尺寸是 "),n("code",null,"88px x 88px"),e("；")])],-1),z=n("ul",null,[n("li",null,"Flex 项目之间未显式设置任何间距；")],-1),S=n("ul",null,[n("li",null,"左侧（或上面）容器是一个单行布局，右侧（或下面）是一个多行布局；")],-1),C=a(`<ul><li>CSS 书写模式和阅读模式都是 <code>ltr</code> （Left-To-Right）。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 中间省略 两个 Item --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
​
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 中间省略 7个 Item --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 8 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.flex-container {
    display: flex;
    flex-wrap: wrap;
    inline-size: 400px;
    block-size: 300px;
}
​
.item {
    inline-size: 120px;
    block-size: 120px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始效果（在没有使用任何对齐方式）：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdfe4851406749a39e205282a34ffb9a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),W={href:"https://codepen.io/airen/full/MWGezqJ",target:"_blank",rel:"noopener noreferrer"},D=a(`<p>请注意，Flex 项目彼此相邻。由于 Flexbox 是一个单维布局，因此 Flex 项目要么按行对齐，要么按列对齐（默认为行对齐）。并且 Flex 项目换行之后，也是在自己所在行的主轴方向上排列。</p><p>还有，默认情况下，Flex 项目<strong>在侧轴上会被拉伸伸展，</strong> 因为 Flex 容器 <code>align-items</code> 属性的默认值为 <code>stretch</code> ，在我们的例子中，Flex 项目显式设置了固定的高度。让我们删除它，看看结果如何。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    inline-size<span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>
    block-size<span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98ab3c0e295541bea66a05e6df4de720~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="沿主轴分配空间" tabindex="-1"><a class="header-anchor" href="#沿主轴分配空间" aria-hidden="true">#</a> 沿主轴分配空间</h2><p>在上面这个初始化示例中，Flex 项目在主轴上排成一行，而且主轴方向有一定的剩余空间。这是因为，所有 Flex 项目的宽度总和小于 Flex 容器宽度，无法完全填满 Flex 容器。“Flex 项目会向主轴起点位置靠齐（即行上第一个 Flex 项目的起始位置和 Flex 容器主轴起点位置平齐），Flex 容器的剩余空间都位于结尾处（即行上最后 Flex 项目终点处与 Flex 容器主轴终点处之间的距离）”：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a70ce1806bc2452f9e745b887a8a0cc3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>也就是说，你可以改变 <code>justify-content</code> 的值，来改变 Flex 项目在 Flex 容器上的对齐方式，即 <strong>调整 Flex 容器剩余空间的位置</strong> 。比如，将 <code>justify-content</code> 的值设置为 <code>flex-end</code> 时，Flex 项目将在 Flex 容器主轴终点处对齐，Flex 容器的剩余空间将位于主轴的起始点。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    justify-content<span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f23bb139faa44c6a33d1498fa4ad60c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>你也可以将 <code>justify-content</code> 属性设置为 <code>center</code> ，将 Flex 容器主轴（同行）上的剩余空间均分在 Flex 容器的两侧：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    justify-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92bebd337e1c432dbab83e241a0f11ac~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>其实，当 <code>justify-content</code> 取值为 <code>flex-start</code> 、<code>flex-end</code> 和 <code>center</code> 时，相当于：</p><ul><li><code>flex-start</code> ：主轴起点对齐（<code>ltr</code> 模式是左对齐）；</li></ul>`,15),L=n("ul",null,[n("li",null,[n("code",null,"flex-end"),e(" ：主轴终点对齐（"),n("code",null,"ltr"),e(" 模式是右对齐）；")])],-1),M=a("<ul><li><code>center</code> ：主轴居中对齐。</li></ul><p>因此，在 Flexbox 布局中，常常<strong>使用</strong> <strong><code>justify-content: center</code></strong> <strong>来实现水平居中的布局效果</strong> 。</p><p>你也可以将 <code>justify-content</code> 属性设置为 <code>space-around</code> 、<code>space-between</code> 或 <code>space-evenly</code> ，在 Flex 项目之间分配 Flex 容器的剩余空间。</p><ul><li><code>space-between</code> 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点相吻合，行上最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点相吻合，其它相邻 Flex 项目之间间距相等。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 <code>flex-start</code> 等同。</li></ul>",4),N=n("ul",null,[n("li",null,[n("code",null,"space-around"),e(" 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点间距，和行上最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点间距相等，并且等于其他相邻两个 Flex 项目之间间距的二分之一。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 "),n("code",null,"center"),e(" 等同。")])],-1),Y=a('<ul><li><code>space-evenly</code> 会让行上第一个 Flex 项目的起始边缘与 Flex 容器主轴起点间距，和最后一个 Flex 项目的结束边缘与 Flex 容器主轴终点间距相等，并且等于其他相邻两个 Flex 项目之间间距。当 Flex 容器中只有一个 Flex 项目时，其表现行为和 <code>center</code> 等同。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9308d6f3fb47a4ade43903e5e2fe11~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>注意，在 Flexbox 布局中，可以用于 <code>justify-content</code> 属性的值，除了上述提到的（<code>flex-start</code>、<code>flex-end</code> 、<code>center</code> 、<code>space-around</code> 、<code>space-between</code> 和 <code>space-evenly</code>）之外，还可以使用 <code>start</code> （等同于 <code>flex-start</code>）和 <code>end</code> （等同于 <code>flex-end</code>）。另外，CSS 的关键词 <code>inherit</code> 、<code>initial</code> 、<code>revert</code> 和 <code>unset</code> 也可以用于 <code>justify-content</code> 属性。</p></blockquote><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/486ae89b756d4f46a8c54f77b397b022~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',4),R={href:"https://codepen.io/airen/full/rNvMdEw",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,[e("如果 Flex 容器没有额外的剩余空间，或者说剩余空间为负值时， "),n("code",null,"justify-content"),e(" 属性的值表现形式和前面所述是有差异的：")],-1),B=n("ul",null,[n("li",null,[n("code",null,"flex-start"),e(" 会让 Flex 项目在 Flex 容器主轴终点处溢出 ；")])],-1),G=n("ul",null,[n("li",null,[n("code",null,"flex-end"),e(" 会让 Flex 项目在 Flex 容器主轴起点处溢出；")])],-1),P=n("ul",null,[n("li",null,[n("code",null,"center"),e(" 会让 Flex 项目在 Flex 容器两端溢出；")])],-1),A=n("ul",null,[n("li",null,[n("code",null,"space-between"),e(" 和 "),n("code",null,"flex-start"),e(" 相同；")])],-1),J=n("ul",null,[n("li",null,[n("code",null,"space-around"),e(" 和 "),n("code",null,"center"),e(" 相同；")])],-1),K=n("ul",null,[n("li",null,[n("code",null,"space-evenly"),e(" 和 "),n("code",null,"center"),e(" 相同；")])],-1),O=n("ul",null,[n("li",null,[n("code",null,"start"),e(" 和 "),n("code",null,"flex-start"),e(" 相同；")])],-1),T=a(`<ul><li><code>end</code> 和 <code>flex-end</code> 相同。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cdacd2bcb3a44c8a8d22b8167dd9a9c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上面我们所探讨的是 <code>flex-direction</code> 为 <code>row</code> （默认值）时，使用 <code>justify-content</code> 可以用来控制 Flex 项目在行上的对齐方式和 Flex 容器剩余空间的分配。接下来，我们来看<code>justify-content</code> 将作用于列的效果（即 <code>flex-direction</code> 属性值为 <code>column</code> 时，<code>justify-content</code> 的表现）。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    justify-content<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--justify-content<span class="token punctuation">,</span> flex-start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd25c4b9f55d487eb4a46503a5dfb24c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),Z={href:"https://codepen.io/airen/full/mdLrLQe",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>事实上，不管 <code>flex-direction</code> 属性的值是什么，<code>justify-content</code> 属性<strong>只作用于 Flex 容器主轴上，它会让 Flex 项目在主轴上进行排列或分配主轴方向的 Flex 容器剩余空间</strong> 。不过，当 <code>flex-direction</code> 属性取值为 <code>column</code> 或 <code>column-reverse</code> 时，需要在代码中使用 <code>height</code> 或 <code>block-size</code> 显式指定容器的高度，只有这样才能让 Flex 容器有一定的剩余空间。否则，Flex 容器不会有任何剩余空间可供分配。这主要是因为，CSS 在计算块容器（Flex容器）高度（或块方向尺寸）时，默认以其内容或所有后代元素高度来计算。</p><h2 id="沿侧轴分配空间" tabindex="-1"><a class="header-anchor" href="#沿侧轴分配空间" aria-hidden="true">#</a> 沿侧轴分配空间</h2><blockquote><p><strong>沿侧轴分配空间，又可以看作是 Flexbox 布局中多行（或多列）的对齐方式</strong> ！</p></blockquote><p>在 Flexbox 布局中，当 Flex 容器没有足够多的空间来容纳 Flex 项目时，且 Flex 容器上显式设置了 <code>flex-wrap</code> 属性的值为 <code>wrap</code> （或 <code>wrap-reverse</code>），Flex 项目会换行排列：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/defff9371a344771a10ceea8553bc456~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>由于 <code>align-items</code> 属性的初始值为 <code>stretch</code> ，每个 Flex 项目在侧轴方向被拉伸，Flex 项目高度变高填充了 Flex 容器侧轴空间（即 Flex 容器的 <code>height</code> 或 <code>block-size</code>），并且每行的 Flex 项目高度是相等的。</p><p>我们从前面的课程中可以得知，当 Flex 项目换行排列时，每一行都有其自己独立的主轴方向（也称为 “弹性行”）:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74adeea8b14d4d04b2fa82a9a0177bc2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>只不过，要是在 Flex 项目上显式设置了其高度（<code>height</code> 或 <code>block-size</code>）时，即使 <code>align-items</code> 的值为 <code>stretch</code> ，也不会拉伸 Flex 项目。这个时候弹性行（相邻两行）之间就会有额外的空间出来：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.item</span> <span class="token punctuation">{</span>
    inline-size<span class="token punctuation">:</span> 88px<span class="token punctuation">;</span>
    block-size<span class="token punctuation">:</span> 88px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83dca7261a40473d8a019c44cd299b81~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这个时候，如果你想分配行与行之间的间距（Flex 容器侧轴方向的剩余空间），那就需要使用 <code>align-content</code> 属性。</p><p>Flexbox 布局中的 <code>align-content</code> 属性值和 <code>justify-content</code> 属性值相比多出了一个 <code>stretch</code> 值。这些值的表现行为和 <code>justify-content</code> 属性值相同，不同的是 <strong><code>align-content</code></strong> <strong>用来分配 Flex 容器侧轴方向的剩余空间。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f61ea9b9cf9841079c625e83259ec832~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>注意，<code>align-content</code> 属性可接受的值有 <code>flex-start</code> 、<code>flex-end</code> 、<code>center</code> 、<code>space-around</code> 、<code>space-between</code> 、<code>space-evenly</code> 、<code>start</code> 、<code>end</code> 和 <code>strecth</code> 。</p></blockquote><p>如果 Flex 项目未显式设置 <code>height</code> 或 <code>block-size</code> 时，改变 <code>align-content</code> 属性值时，Flex 项目的高度将会作出相应改变，即它的高度将会是 Flex 项目内容的最大高度：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f98e50396c5e40c09763647153621d81~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,17),I={href:"https://codepen.io/airen/full/RwyoVWW",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,[e("从上面的效果来看，你可以把 "),n("code",null,"align-content"),e(" 状态下侧轴中的整行（弹性行），当作是 "),n("code",null,"justify-content"),e(" 状态下单个 Flex 项目。")],-1),U=n("p",null,[n("code",null,"align-content"),e(" 属性同样会受 "),n("code",null,"flex-direction"),e(" 属性值的影响：")],-1),Q=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b78d48c7b2b4497ab715a8c88ed16d8~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),X={href:"https://codepen.io/airen/full/WNJReYz",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,[e("上面示例展示的都是 Flex 容器在侧轴方向有剩余空间的效果。当 Flex 容器中，所有行的尺寸之和大于 Flex 容器侧轴尺寸（即 "),n("strong",null,"Flex 容器侧轴方向没有剩余空间"),e(" ）时，"),n("code",null,"align-content"),e(" 属性值表现行为：")],-1),nn=n("ul",null,[n("li",null,[n("code",null,"flex-start"),e(" 会让 Flex 容器的行在侧轴结束点溢出；")])],-1),en=n("ul",null,[n("li",null,[n("code",null,"flex-end"),e(" 会让 Flex 容器的行在侧轴起点溢出；")])],-1),sn=n("ul",null,[n("li",null,[n("code",null,"center"),e(" 会让 Flex 容器行在侧轴两端溢出；")])],-1),an=n("ul",null,[n("li",null,[n("code",null,"stretch"),e(" 表现行为类似于 "),n("code",null,"flex-start"),e("；")])],-1),tn=n("ul",null,[n("li",null,[n("code",null,"space-around"),e(" 表现行为类似于 "),n("code",null,"center"),e("；")])],-1),on=n("ul",null,[n("li",null,[n("code",null,"space-between"),e(" 表现行为类似于 "),n("code",null,"flex-start"),e("；")])],-1),cn=a(`<ul><li><code>space-evenly</code> 表现行为类似于 <code>center</code>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b18eb56efd24ba1ae6b79c23a7e67e5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在构建 Web 布局时，可以<strong>使用<code>align-content</code>实现多行垂直居中的布局</strong> 。</p><blockquote><p>需要注意的是，当 Flex 容器中只有一行 Flex 项目，那么 <code>align-content</code> 属性取值为 <code>sapce-around</code> 和 <code>space-evenly</code> 的效果等同于 <code>center</code>；<code>align-content</code> 属性取值为 <code>space-between</code> 的效果等同于 <code>flex-start</code> 和 <code>start</code> 。</p></blockquote><p>在编码的时候，如果要同时设置 <code>justify-content</code> 和 <code>align-content</code> 两个属性的话，那么你可以使用它们的简写属性 <code>place-content</code> 。比如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    justify-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    align-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
​
<span class="token comment">/* 等同于 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    place-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>place-content</code> 属性可以接受一个值，也可以接受两个值：</p><ul><li>如果只显式给 <code>place-content</code> 属性设置了一个值，则表示 <code>justify-content</code> 和 <code>align-content</code> 使用的是同一个值；</li></ul>`,8),ln=a(`<ul><li>如果给 <code>place-content</code> 属性设置了两个值，则第一个值将作用于 <code>align-content</code> ，第二个值将作用于 <code>justify-content</code>。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    place-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    align-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    justify-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.flex-container</span> <span class="token punctuation">{</span>
    place-content<span class="token punctuation">:</span> center space-around<span class="token punctuation">;</span>
    
    <span class="token comment">/* 等同于 */</span>
    align-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    justify-content<span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个小技巧，在 Flexbox 布局中，你可以使用 <code>place-content: center</code> 构建一个<strong>水平垂直居中</strong> 的布局效果：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 水平垂直居中 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    place-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a065f38fbe42451b8f0268f66a2b7bf5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,5),pn={href:"https://codepen.io/airen/full/abGpzjG",target:"_blank",rel:"noopener noreferrer"},dn=a('<p>大家需要知道的是，<strong><code>align-content</code></strong> <strong>只有当</strong> <strong><code>flex-wrap</code></strong> <strong>属性的值为非</strong> <strong><code>nowrap</code></strong> <strong>（即</strong> <strong><code>wrap</code></strong> <strong>或</strong> <strong><code>wrap-reverse</code></strong> <strong>）时才能生效</strong> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2aa871391f71495586181f29c4c68d79~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',2),un={href:"https://codepen.io/airen/full/RwyKPLr",target:"_blank",rel:"noopener noreferrer"},rn=n("p",null,"到这里，我们已经知道了：",-1),gn=n("ul",null,[n("li",null,[e("在 Flex 容器上使用 "),n("code",null,"justify-content"),e("，可以控制 Flex 项目在 Flex 容器的主轴方向的对齐方式，以及 Flex 容器主轴方向剩余空间的分配；")])],-1),mn=a('<ul><li>在 Flex 容器上使用 <code>align-content</code> 可以控制 Flex 行（即 <code>flex-wrap</code> 属性为非 <code>nowrap</code> 时 Flex 项目所在行）在 Flex 容器的侧轴方向的对齐方式，以及 Flex 容器侧轴方向剩余空间的分配。</li></ul><blockquote><p><strong>最后再次提醒，<code>align-content</code>属性只有在</strong> <strong><code>flex-wrap</code></strong> <strong>取值为</strong> <strong><code>wrap</code></strong> <strong>或</strong> <strong><code>wrap-reverse</code></strong> <strong>时才有效</strong> ！</p></blockquote><h2 id="沿侧轴对齐-flex-项目" tabindex="-1"><a class="header-anchor" href="#沿侧轴对齐-flex-项目" aria-hidden="true">#</a> 沿侧轴对齐 Flex 项目</h2><blockquote><p><strong>沿侧轴对齐 Flex 项目，指的是 Flex 容器中单行（或单例）以及单个 Flex 项目的对齐方式</strong> ！</p></blockquote><p>构建 Web 布局时，总有不需要断行（只是单行）的状态，即 <code>flex-wrap</code> 属性的值为 <code>nowrap</code> 。此时，要控制 Flex 项目在 Flex 容器侧轴上的对齐方式，就不能使用 <code>align-content</code> 属性了，但你可以使用 <code>align-items</code> 或 <code>align-self</code> 来控制整行 Flex 项目，或单个 Flex 项目在侧轴上的对齐方式：</p><ul><li><code>align-items</code> 用于 Flex 容器上，控制 Flex 行（所有 Flex 项目所在行）在侧轴上对齐方式；</li></ul>',6),kn=a(`<ul><li><code>align-self</code> 用于 Flex 项目上，控制单个 Flex 项目在侧轴上对齐方式。</li></ul><p>你可以使用 <code>flex-start</code> 、<code>center</code> 、<code>flex-end</code> 、<code>stretch</code> 、<code>baseline</code> 、<code>start</code> 和 <code>end</code> 中的任一值在侧轴方向对齐 Flex 项目：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    align-items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc8d902da91d4367bde4efea54a17e07~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>align-items</code> 属性和 <code>justify-content</code> 一样，也会受 <code>flex-direction</code> 属性值的影响：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001b9f8205e493f90bfc33fecd67df7~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,6),vn={href:"https://codepen.io/airen/full/jOxyWyb",target:"_blank",rel:"noopener noreferrer"},bn=a('<p>在 Flexbox 布局中，当 Flex 容器中只有一个 Flex 行（比如说，所有 Flex 项目都在同一行），那么这个 Flex 行的高度与 Flex 容器是等高的。</p><p>在 Flex 容器上使用 <code>align-items</code> 时，就相同于在整个 Flex 容器的侧轴上对齐 Flex 项目。这和前面课程所介绍的内容并不相矛盾，在介绍 <code>align-content</code> 属性时，我们有介绍过，即，<strong>Flex 容器中的每一行都有自己的主轴方向和侧轴方向</strong> ，而 <code>align-items</code> 属性的值，是用来控制 Flex 项目沿着侧轴方向对齐。言外之意，Flex 容器有多行时，<code>align-items</code> 属性可以用于 Flex 项目沿着侧轴方向对齐：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f03d59946b2944e2adc8383c1473f22f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>默认情况下，Flex 项目在 Flex 容器中断行排列时，每一行的高度是均等的，比如上图中均分了 Flex 容器的高度。这个高度也是每个 Flex 行的初始高度。此时，使用 <code>align-items</code> 属性时，Flex 项目就会沿着所在行的 <strong>侧轴</strong> 方向排列。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df47c93a98640789e606810abb378a3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>使用 <code>flex-direction</code> 改变主轴和侧轴方向时，它们的表现形式是相同的，只不过当 <code>flex-direction</code> 属性的值是 <code>column</code> （或 <code>column-reverse</code>）时，<code>align-items</code> 属性取值为 <code>baseline</code> 时产生的结果与 <code>flex-start</code> 或 <code>start</code> 相同。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b0d835bbc73467f80a39de4452c7b1d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',7),fn={href:"https://codepen.io/airen/full/eYrgxJy",target:"_blank",rel:"noopener noreferrer"},xn=a("<p>从示例的结果我们还可以发现，<strong>当 Flex 容器有多行出现时，使用</strong> <strong><code>align-items: center</code></strong> <strong>无法让它们在 Flex 容器中垂直居中（只能在所在 Flex 行中垂直居中）</strong> 。</p><p>现在我们知道了，使用 Flexbox 布局的时候，在 Flex 容器的侧轴方向，我们可以使用 <code>align-content</code> 和 <code>align-items</code> 来控制 Flex 项目的对齐方式和分配 Flex 容器侧轴的剩余空间。</p><p>这两个属性在一些特定条件之下表现出来的结果是相似的。比如，当 Flex 容器中仅有一行（即 Flex 容器有足够多的空间容纳所有 Flex 项目），且显式将 <code>flex-wrap</code> 属性值设置为 <code>wrap</code> 或 <code>wrap-reverse</code> 时，<code>align-content</code> 属性取值 <code>flex-start</code> 、<code>center</code> 、<code>stretch</code>、<code>flex-end</code> 、<code>start</code> 和 <code>end</code> 表现的结果将和 <code>align-items</code> 属性取值 <code>flex-start</code> 、<code>center</code> 、<code>stretch</code>、<code>flex-end</code> 、<code>start</code> 和 <code>end</code> 相同。</p><p>当然，<code>align-content</code> 和 <code>align-items</code> 也有着本质性的差异：</p><ul><li><code>align-content</code> 属性必须要在 <code>flex-wrap</code> 属性值为 <code>wrap</code> 或 <code>wrap-reverse</code> 条件下才能正常工作；但 <code>align-items</code> 属性则不需要；</li></ul>",5),hn=a(`<ul><li><code>align-content</code> 属性除了可以让 Flex 项目所在行在 Flex 容器侧轴对齐之外，还可以用来分配 Flex 容器侧轴方向的剩余空间，比如 <code>space-around</code> 、<code>space-between</code> 和 <code>spac-evenly</code> 等属性；但 <code>align-items</code> 属性则只用于控制 Flex 项目在 Flex 行侧轴方向的对齐方式。</li></ul><p>这里有一个小技巧，如果在 Flex 容器上，同时设置了<code>align-content</code>属性的值是非<code>stretch</code> 值和<code>align-items</code>属性任一值，那么客户端会以<code>align-content</code>属性为主，而<code>align-items</code>属性则会被客户端忽略；如果在 Flex 容器上，同时设置了<code>align-content</code>属性值是<code>stretch</code>(即默认值)和显式设置了<code>align-items</code>属性任一值，那么客户端会以<code>align-items</code>属性为主，而<code>align-content</code>则会被客户端忽略。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 以 align-items 属性的值为主 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    align-content<span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> <span class="token comment">/* 被客户端忽略 */</span>
    align-items<span class="token punctuation">:</span> center<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
​
<span class="token comment">/* 以 align-content 属性的值为主 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    align-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    align-items<span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* 被客户端忽略 */</span>
<span class="token punctuation">}</span>
​
<span class="token comment">/* align-content 属性被视为无效 */</span>
<span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    align-content<span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 需要配合 flex-wrap 属性值为 wrap 或 wrap-reverse 一起使用*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00d7e6d4ff324fcbaa023c44ee9d39fe~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),Fn={href:"https://codepen.io/airen/full/eYrgabP",target:"_blank",rel:"noopener noreferrer"},_n=a(`<p>你可能已经发现了，不管是使用 <code>align-content</code> 还是 <code>align-items</code> 属性，都是用来控制整行的 Flex 项目（即 一组或多组 Flex 项目），却无法控制单个 Flex 项目。庆幸的是，在 Flexbox 布局中，可以在 Flex 项目上显式设置 <code>align-self</code> 属性，来控制单个 Flex 项目沿着 Flex 容器侧轴来对齐项目。</p><p><code>align-self</code> 和用于 Flex 容器上的 <code>align-items</code> 属性非常相似，它在 <code>align-items</code> 属性值的基础上多了一个 <code>auto</code> 值，并且其默认值是 <code>auto</code> （<code>align-items</code> 属性的默认值是 <code>stretch</code> ）。</p><p>我们可以像下面这样使用 <code>align-self</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.items:nth-child(3n)</span> <span class="token punctuation">{</span>
    align-self<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--align-self<span class="token punctuation">,</span> auto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fba544344440443d92ec77844ce47f72~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>注意，只有 <code>align-content</code> 和 <code>align-items</code> 两个属性取默认值 <code>stretch</code> 时，<code>align-self</code> 属性的 <code>auto</code> 和 <code>stretch</code> 效果才是等同的。</p></blockquote><p>虽然 <code>align-self</code> 可以使单个 Flex 项目沿着 Flex 行的侧轴方向对齐，但当它碰到运用于 Flex 容器的 <code>align-content</code> 和 <code>align-items</code> 还是有一定差异的。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    flex-wrap<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--flex-wrap<span class="token punctuation">,</span> nowrap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    align-content<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--align-content<span class="token punctuation">,</span> stretch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.item</span> <span class="token punctuation">{</span>
    align-self<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--algin-self<span class="token punctuation">,</span> auto<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c60309aad2a4ae58d3e1f5f1762ebc4~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,9),yn={href:"https://codepen.io/airen/full/xxjgoWZ",target:"_blank",rel:"noopener noreferrer"},jn=a(`<p>从上面的效果中不难发现，<strong>当</strong> <strong><code>align-self</code></strong> <strong>碰上了</strong> <strong><code>align-content</code></strong> <strong>属性时，只有</strong> <strong><code>align-content</code></strong> <strong>属性值为</strong> <strong><code>stretch</code></strong> <strong>时，<code>align-self</code>属性的值才有效。</strong></p><p>而 <code>align-items</code> 和 <code>align-self</code> 同时使用则不会像 <code>align-content</code> 属性这样，<strong>只不过 Flex 项目的</strong> <strong><code>align-self</code></strong> <strong>属性取值为</strong> <strong><code>auto</code></strong> <strong>时，不会覆盖 Flex 容器上</strong> <strong><code>align-items</code></strong> <strong>属性值的效果</strong> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.flex-container</span> <span class="token punctuation">{</span>
    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    align-items<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--align-items<span class="token punctuation">,</span> stretch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token selector">​
.item</span> <span class="token punctuation">{</span>
    align-self<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--align-self<span class="token punctuation">,</span> stretch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bcaeb5950a6434b84bd7560d610afde~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,4),qn={href:"https://codepen.io/airen/full/xxjgoWZ",target:"_blank",rel:"noopener noreferrer"},wn=a(`<p>我们在实际生产时，在 Flexbox 中，不管是使用 <code>align-content</code> 、 <code>align-items</code> 还是 <code>justify-content</code> 时，总是不太好实现我们所期望的布局效果，但在 Flex 项目中使用 <code>align-self</code> 会让你变得容易很多，比如下面这个示例中的按钮居右显示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07a8ac6c08b9414cb21fac43cbe208b2~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card__thumb<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">t</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1662879804494<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0 0 1445 1024<span class="token punctuation">&quot;</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2000/svg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">p-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5503<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>M0.005421 131.312941V584.282353a30.117647 30.117647 0 0 0 49.995294 22.889412l271.661177-236.724706a60.235294 60.235294 0 0 1 77.101176 0l259.011765 207.209412 142.757647-142.757647a60.235294 60.235294 0 0 1 80.112941-4.216471l301.176471 240.941176a60.235294 60.235294 0 1 1-75.294118 93.967059l-259.011765-207.209412-142.757647 142.757648a60.235294 60.235294 0 0 1-80.112941 4.21647L361.417186 493.929412l-301.176471 262.625882a180.705882 180.705882 0 0 0-60.235294 136.131765A131.312941 131.312941 0 0 0 131.318362 1024h1183.021177A131.312941 131.312941 0 0 0 1445.65248 892.687059V131.312941A131.312941 131.312941 0 0 0 1314.339539 0H131.318362A131.312941 131.312941 0 0 0 0.005421 131.312941zM1114.358362 421.647059a144.564706 144.564706 0 1 1 144.564706-144.564706A144.564706 144.564706 0 0 1 1114.358362 421.647059z<span class="token punctuation">&quot;</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>currentColor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">p-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5504<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card__content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>UX Design<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span>
      Make it easier to search and filter
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
​
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Read More<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>.card {
  display: flex;
  gap: 1rem;
}
​
.card__thumb {
  min-inline-size: 200px;
  aspect-ratio: 4 / 3;
  display: flex;
  justify-content: center;
  align-items: center;
}
​
.card__content {
  flex: 1;
  min-width: 0;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: 0.25em;
}
​
h3 small {
  display: block;
}
​
.card__content button {
  align-items: center;
  justify-content: center;
  display: inline-flex;
  align-self: flex-end;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),zn={href:"https://codepen.io/airen/full/PoepOwp",target:"_blank",rel:"noopener noreferrer"},Sn=a(`<h2 id="flex-项目上的-margin" tabindex="-1"><a class="header-anchor" href="#flex-项目上的-margin" aria-hidden="true">#</a> Flex 项目上的 <code>margin</code></h2><blockquote><p><strong>在 Flexbox 布局中，Flex 容器上可以使用</strong> <strong><code>align-items</code></strong> <strong>和</strong> <strong><code>align-self</code></strong> <strong>在侧轴方向对齐和分配侧轴空间，但在主轴上不存在</strong> <strong><code>justify-items</code></strong> <strong>和</strong> <strong><code>justify-self</code></strong> <strong>。</strong></p></blockquote><p>Flex 容器不存在 <code>justify-items</code> 和 <code>justify-self</code> ，主要是因为 Flex 项目在 Flex 容器的主轴上被当作一个组。因此，没有将单个 Flex 项目从该组中分离出来的概念，但它们却存在于 CSS Grid 布局中。<code>justify-self</code> 和 <code>justify-items</code> 属性作用于内联轴（Inline Axis），以沿该轴将网格区域内的项目对齐。由于 Flexbox 布局是将 Flex 项目视为一个组，因此，这些属性未在 Flexbox 上下文（FFC）中实现。</p><blockquote><p>注意，有关于 <code>justify-self</code> 和 <code>justify-items</code> ，将会在后面的 CSS Grid 布局的课程中介绍。</p></blockquote><p>虽然在 Flexbox 布局中，无法在 Flex 容器的主轴上，直接使用 <code>justify-self</code> 和 <code>justify-items</code> 将 Flex 项目从一个组中分离出来，但我们可以在 Flex 项目中使用 <code>margin: auto</code> 将 Flex 项目在 Flex 容器的主轴上进行分组。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b097664d9f44f878037c2ed37d81496~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>我们来看一个使用 <code>margin:auto</code> 对 Flex 项目分组的示例。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e9126254302464baf5f16071375999d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logo</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nav</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserProfile</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">header</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--gap<span class="token punctuation">,</span> 1rem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中的 <code>&lt;Logo /&gt;</code> 、<code>&lt;Nav /&gt;</code> 和 <code>&lt;UserProfile /&gt;</code> 三个组件都是 Flex 项目：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/405c8fb9fa174b398f7631e92ff42355~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>就这个示例而言，在 Flex 容器上 <code>&lt;header&gt;</code> 使用 <code>justify-content: space-between</code> 无法达到预期的效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fe413a90a1340939eb3e447d82a25a9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>最为简单的方法，就是在 <code>&lt;UserProfile /&gt;</code> 使用 <code>margin-left: auto</code> 或 <code>margin-inline-start: auto</code> ：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header</span> <span class="token punctuation">{</span>
  display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  gap<span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--gap<span class="token punctuation">,</span> 1rem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">​
.section</span> <span class="token punctuation">{</span>
  margin-inline-start<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),Cn={href:"https://codepen.io/airen/full/qBYrVva",target:"_blank",rel:"noopener noreferrer"},Wn=a(`<p>需要注意的是，<strong>在 Flex 项目上使用</strong> <strong><code>margin: auto</code>，会致使 Flex 项目上的</strong> <strong><code>align-self</code></strong> <strong>属性失效</strong>。</p><h2 id="flexbox-中的溢出对齐" tabindex="-1"><a class="header-anchor" href="#flexbox-中的溢出对齐" aria-hidden="true">#</a> Flexbox 中的溢出对齐</h2><p>使用 CSS 来构建 Web 布局时，有一个最大的目标，即 <strong>保持 Web 页面的内容和元素对访问者（用户）是可见的</strong> 。容器会根据其内容自动扩展到右侧或底部。当内容溢出时，容器变为可滚动的，用户可以滚动来访问“不可见的内容”。除非你在容器上使用 <code>overflow:hidden</code>，禁止容器因内容溢出出现滚动条的行为。</p><p>这是 CSS 最常见的一种设计，但在 Flexbox 布局中，却无法保证这一点。比如下面这个案例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">&lt;div class=&quot;container&quot;&gt;
  &lt;span&gt;CSS&lt;/span&gt;
  &lt;span&gt;is&lt;/span&gt;
  &lt;span&gt;awesome!&lt;/span&gt;
&lt;/div&gt;
.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>align-items</code> 将所有 Flex 项目（即 <code>span</code> 元素）沿着侧轴水平居中对齐。当 Flex 容器 <code>.container</code> 有足够空间时一切都完美，但如果容器没有足够多的空间来容纳 Flex 项目的内容时，就会出现“数据丢失”的情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a00c97cf0134c53b57d966bdb505251~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),Dn=n("strong",null,"左侧的溢出区域超出了 Flex 容器视口的起始边缘，你不能滚动到该区域",-1),Ln={href:"https://drafts.csswg.org/css-align-3/#overflow-values",target:"_blank",rel:"noopener noreferrer"},Mn=n("strong",null,"安全对齐",-1),Nn=n("blockquote",null,[n("p",null,"“安全”对齐会在溢出情况下更改对齐模式，以避免数据丢失。")],-1),Yn=n("p",null,[e("就是给对齐属性新增了 "),n("code",null,"safe"),e(" 和 "),n("code",null,"unsafe"),e(" 两个关键词：")],-1),Rn=n("ul",null,[n("li",null,[n("code",null,"safe"),e("关键字会将因为对齐方式导致溢出时，将设置的对齐模式切换到 "),n("code",null,"start"),e(" 对齐模式下，目的是避免“数据丢失”，其中部分项目超出对齐容器的边界并且无法滚动到。")])],-1),Vn=a(`<ul><li><code>unsafe</code>，即使会导致此类数据丢失，也会遵守对齐方式。</li></ul><p>在上面的示例中，如果我们设置了 <code>align-items: safe center</code> （注意，<code>safe</code> 的 <code>center</code> 之间有一个空格），那么最终 Flex 项目对齐方式会切换到 <code>start</code> (或 <code>flex-start</code>) 模式，不会强制 Flex 项目居中对齐。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  flex-direction<span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  align-items<span class="token punctuation">:</span> safe center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71b198fcaf9e4b97bddaf16ce2005251~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>如果你确实想要对齐（即使它会导致溢出），那么你可以指定 <code>align-items</code> 属性的值为 <code>unsafe center</code> 。然后，你已请求浏览器执行你选择的对齐方式，无论内容随后发生什么。</p><p>溢出对齐对于防止数据丢失是非常有益的，可惜的是，直到写本课程时，仅有 Firefox 浏览器支持该特性。不过，可以使用 <code>margin: auto</code> 来达到相似的效果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c80b8f7c354a48a3ad6bd8d6921b7055~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>`,7),Bn={href:"https://codepen.io/airen/full/KKRWZMO",target:"_blank",rel:"noopener noreferrer"},Gn=n("h2",{id:"书写模式对-flexbox-对齐方式的影响",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#书写模式对-flexbox-对齐方式的影响","aria-hidden":"true"},"#"),e(" 书写模式对 Flexbox 对齐方式的影响")],-1),Pn=n("p",null,"通过前面内容的学习，我想大家对 Flex 项目中的对齐属性有了一定的了解：",-1),An=n("ul",null,[n("li",null,[e("可用于 Flex 容器的属性有 "),n("code",null,"justify-content"),e(" 、"),n("code",null,"align-content"),e(" 和 "),n("code",null,"align-items"),e("；")])],-1),Jn=n("ul",null,[n("li",null,[e("可用于 Flex 项目的属性有 "),n("code",null,"align-self"),e(" 和 "),n("code",null,"margin: auto"),e("；")])],-1),Kn=n("ul",null,[n("li",null,[e("Flexbox 布局中的溢出对齐 "),n("code",null,"safe"),e(" 和 "),n("code",null,"unsafe"),e(" ；")])],-1),On=a('<ul><li>Flexbox 布局中没有 <code>justify-items</code> 和 <code>justify-self</code> 属性。</li></ul><p>在 Flexbox 布局中，这些属性都会受到 <code>flex-direction</code> 属性的影响，其中<code>justify-</code>属性始终用于在主轴上对齐，<code>align-</code>属性始终用于在侧轴上对齐。</p><p>但在 CSS 中，CSS 的书写模式 <code>writing-mode</code> 或阅读模式 <code>direction</code> （HTML 的 <code>dir</code>）也会影响 Web 布局，即 <strong>Web 排版的方向</strong> 。同样的，CSS 的 <code>writing-mode</code> 、<code>dirction</code> 和 HTML 的 <code>dir</code> 对 Flexbox 布局中对齐属性也会产生不同的结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdeef468bbd44e61a16837d6db9d0f18~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>',4),Tn={href:"https://codepen.io/airen/full/BaxWYLN",target:"_blank",rel:"noopener noreferrer"},Zn=n("h2",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),e(" 小结")],-1),En={href:"https://codepen.io/airen/full/NWMpyYd",target:"_blank",rel:"noopener noreferrer"},In=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8aff9df2259e419b893892bd24c9d164~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"})],-1),Hn={href:"https://codepen.io/airen/full/NWMpyYd",target:"_blank",rel:"noopener noreferrer"};function Un(Qn,Xn){const t=l("ExternalLinkIcon");return p(),i("div",null,[u,r,g,m,s(""),k,s(""),v,b,f,s(""),x,s(""),h,n("blockquote",null,[n("p",null,[e("这里提到的对齐相关的属性，最早是出于 Flexbox 布局模块的，但也可以用于 CSS Grid 布局中。因此，在后来 W3C 的 CSS 工作小组，将这些属性纳入到一个独立的功能模块中，即 "),F,e(" ，到目前为止该"),n("a",_,[e("模块最新版本是 Level 3"),o(t)]),e("。")])]),y,j,q,s(""),w,s(""),z,s(""),S,s(""),C,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",W,[e("https://codepen.io/airen/full/MWGezqJ"),o(t)])])]),D,s(""),L,s(""),M,s(""),N,s(""),Y,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",R,[e("https://codepen.io/airen/full/rNvMdEw"),o(t)])])]),V,B,s(""),G,s(""),P,s(""),A,s(""),J,s(""),K,s(""),O,s(""),T,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Z,[e("https://codepen.io/airen/full/mdLrLQe"),o(t)])])]),E,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",I,[e("https://codepen.io/airen/full/RwyoVWW"),o(t)])])]),H,U,Q,n("blockquote",null,[n("p",null,[e("Demo 地址："),n("a",X,[e("https://codepen.io/airen/full/WNJReYz"),o(t)])])]),$,nn,s(""),en,s(""),sn,s(""),an,s(""),tn,s(""),on,s(""),cn,s(""),ln,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",pn,[e("https://codepen.io/airen/full/abGpzjG"),o(t)])])]),dn,n("blockquote",null,[n("p",null,[e("Demo 地址："),n("a",un,[e("https://codepen.io/airen/full/RwyKPLr"),o(t)])])]),rn,gn,s(""),mn,s(""),kn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",vn,[e("https://codepen.io/airen/full/jOxyWyb"),o(t)])])]),bn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",fn,[e("https://codepen.io/airen/full/eYrgxJy"),o(t)])])]),xn,s(""),hn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Fn,[e("https://codepen.io/airen/full/eYrgabP"),o(t)])])]),_n,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",yn,[e("https://codepen.io/airen/full/xxjgoWZ"),o(t)])])]),jn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",qn,[e("https://codepen.io/airen/full/xxjgoWZ"),o(t)])])]),wn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",zn,[e("https://codepen.io/airen/full/PoepOwp"),o(t)])])]),Sn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Cn,[e("https://codepen.io/airen/full/qBYrVva"),o(t)])])]),Wn,n("p",null,[e("由于 Flex 项目始终在 Flex 容器水平居中，Flex 项目宽度大于 Flex 容器宽度时，Flex 项目就会在左右两边溢出。问题是 "),Dn,e(" 。在这种情况下，就需要使用到 "),n("strong",null,[n("a",Ln,[e("CSS Box Alignment Module Level 3"),o(t)])]),e(" （仍处于草案状态）定义 "),Mn,e(" 。")]),Nn,Yn,Rn,s(""),Vn,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Bn,[e("https://codepen.io/airen/full/KKRWZMO"),o(t)])])]),Gn,Pn,An,s(""),Jn,s(""),Kn,s(""),On,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Tn,[e("https://codepen.io/airen/full/BaxWYLN"),o(t)])])]),Zn,n("p",null,[e("在社区中也有很多小游戏，帮助我们用趣味性来理解这些属性在 Flexbox 布局中的使用。这里也简单构建一个小 "),n("a",En,[e("Demo"),o(t)]),e("，希望能更好地帮助大家理解上面的相关属性：")]),In,n("blockquote",null,[n("p",null,[e("Demo 地址： "),n("a",Hn,[e("https://codepen.io/airen/full/NWMpyYd"),o(t)])])])])}const ne=c(d,[["render",Un],["__file","index-04.html.vue"]]);export{ne as default};
