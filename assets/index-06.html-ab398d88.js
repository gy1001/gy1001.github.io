import{_ as t,M as o,p as l,q as c,R as s,t as n,N as p,a1 as a}from"./framework-e8cb8151.js";const i="/assets/5cd963070001e50a06400360-b3b7facf.jpg",r="/assets/image-20230902112946966-36bdd3d4.png",d={},u=a('<h1 id="_06-基础概念和常见配置项介绍-二" tabindex="-1"><a class="header-anchor" href="#_06-基础概念和常见配置项介绍-二" aria-hidden="true">#</a> 06-基础概念和常见配置项介绍（二）</h1><p><img src="'+i+`" alt="img"></p><blockquote><p>构成我们学习最大障碍的是已知的东西，而不是未知的东西。 —— 贝尔纳</p></blockquote><p>除了上篇介绍的的跟 entry 和 output 相关的配置之外，本文将继续介绍 Webpack 其他重要配置。</p><h2 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h2><p>Webpack 进行构建的时候会从入口文件开始（entry）遍历寻找各个模块的依赖，通过 resolve 的配置，可以帮助 Webpack 快速查找依赖，也可以替换对应的依赖（比如开发环境用 dev 版本的 lib 等）。resolve 的基本配置语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolve的配置</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来介绍下常用的 resolve 配置。</p><h3 id="resolve-extensions" tabindex="-1"><a class="header-anchor" href="#resolve-extensions" aria-hidden="true">#</a> resolve.extensions</h3><p><code>resolve.extensions</code>是帮助 Webpack 解析扩展名的配置，默认值：<code>[&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;]</code>，所以我们引入 js 和 json 文件，可以不写它们的扩展名，通常我们可以加上 <code>.css</code>、<code>.less</code>等，但是要确保同一个目录下面没有重名的 css 或者 js 文件，如果存在的话，还是写全路径吧。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.css&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolve-alias" tabindex="-1"><a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a> resolve.alias</h3><p><code>resolve.alias</code> 是最常用的配置，通过设置 <code>alias</code> 可以帮助 <code>webpack</code> 更快查找模块依赖，而且也能使我们编写代码更加方便。例如，我们在实际开发中经常会把源码都放到<code>src</code>文件夹，目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src
├── lib
│   └── utils.js
└── pages
    └── demo
        └── index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>src/pages/demo/index.js</code>中如果要引用<code>src/lib/utils.js</code>那么可以通过：<code>import utils from &#39;../../lib/utils&#39;;</code> ，如果目录更深一些，会越来越难看，这是可以通过设置 alias 来缩短这种写法，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">src</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;@lib&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/lib&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过设置了 alias，我们可以在任意文件中，不用理会目录结构，直接使用<code>require(&#39;@lib/utils&#39;)</code>或者<code>require(&#39;src/lib/utils&#39;)</code>来帮助 Webpack 定位模块。</p>`,17),k=s("p",null,"Tips：",-1),v=s("li",null,[n("alias 的名字可以使用"),s("code",null,"@"),n(),s("code",null,"!"),n(),s("code",null,"~"),n("等这些特殊字符，实际使用中 alias 都使用一种，或者不同类型使用一种，这样可以跟正常的模块引入区分开，增加辨识度；")],-1),m=s("code",null,"@",-1),b={href:"https://docs.npmjs.com/misc/scope",target:"_blank",rel:"noopener noreferrer"},g=s("li",null,"这时在 vscode 中会导致我们检测不到 utils 中的内容，不能帮我们快速编写代码，可以通过在项目根目录创建 jsconfig.json 来帮助我们定位：",-1),y=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//jsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;@lib/&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/lib&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=s("code",null,"alias",-1),x=s("code",null,"lib",-1),f=s("code",null,"debug",-1),j=s("code",null,"dev",-1),_={href:"https://baidu.github.io/san/",target:"_blank",rel:"noopener noreferrer"},q=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">san</span><span class="token operator">:</span>
        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>
          <span class="token operator">?</span> <span class="token string">&#39;san/dist/san.min.js&#39;</span>
          <span class="token operator">:</span> <span class="token string">&#39;san/dist/san.dev.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>alias 还支持在名称末尾添加<code>$</code>符号来缩小范围只命中以关键字结尾的导入语句，这样可以做精准匹配：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">react$</span><span class="token operator">:</span> <span class="token string">&#39;/path/to/react.min.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span> <span class="token comment">// 精确匹配，所以 react.min.js 被解析和导入</span>
<span class="token keyword">import</span> file <span class="token keyword">from</span> <span class="token string">&#39;react/file.js&#39;</span> <span class="token comment">// 非精确匹配，触发普通解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolve-mainfields" tabindex="-1"><a class="header-anchor" href="#resolve-mainfields" aria-hidden="true">#</a> resolve.mainFields</h3><p>有一些我们用到的模块会针对不同宿主环境提供几份代码，例如提供 ES5 和 ES6 的两份代码，或者提供浏览器环境和 nodejs 环境两份代码，这时候在<code>package.json</code>文件里会做如下配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsnext:main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es/index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">//采用ES6语法的代码入口文件</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">//采用ES5语法的代码入口文件，node</span>
  <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/web.js&quot;</span> <span class="token comment">//这个是专门给浏览器用的版本</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Webpack 中，会根据<code>resolve.mainFields</code>的设置去决定使用哪个版本的模块代码，在不同的<code>target</code>下对应的<code>resolve.mainFields</code>默认值不同，默认<code>target=web</code>对应的默认值为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mainFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;browser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在<code>target=web</code>打包时，会寻找<code>browser</code>版本的模块代码。</p><p>下面是不常用的或者比较简单的配置：</p>`,10),w=a("<li><code>resolve.mainFiles</code>：解析目录时候的默认文件名，默认是<code>index</code>，即查找目录下面的<code>index</code>+<code>resolve.extensions</code>文件；</li><li><code>resolve.modules</code>：查找模块依赖时，默认是<code>node_modules</code>；</li>",2),S=s("code",null,"resolve.symlinks",-1),E={href:"https://zh.wikipedia.org/zh-cn/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5",target:"_blank",rel:"noopener noreferrer"},W=s("li",null,[s("code",null,"resolve.plugins"),n("：添加解析插件，数组格式；")],-1),J=s("li",null,[s("code",null,"resolve.cachePredicate"),n("：是否缓存，支持 boolean 和 function，function 传入一个带有 path 和 require 的对象，必须返回 boolean 值。")],-1),$=a(`<h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h2><p>在 webpack 解析模块的同时，不同的模块需要使用不同类型的模块处理器来处理，这部分的设置就在<code>module</code>配置中。module 有两个配置：<code>module.noParse</code>和<code>module.rules</code>，</p><h3 id="module-noparse" tabindex="-1"><a class="header-anchor" href="#module-noparse" aria-hidden="true">#</a> module.noParse</h3><p><code>module.noParse</code>配置项可以让 <strong>Webpack 忽略对部分没采用模块化的文件的递归解析和处理，这样做的好处是能提高构建性能</strong>，接收的类型为正则表达式，或者正则表达式数组或者接收模块路径参数的一个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用正则表达式</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jquery|lodash</span><span class="token regex-delimiter">/</span></span>

    <span class="token comment">// 使用函数，从 Webpack 3.0.0 开始支持</span>
    <span class="token function-variable function">noParse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// content 代表一个模块的文件路径</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：这里一定要确定被排除出去的模块代码中不能包含<code>import</code>、<code>require</code>、<code>define</code>等内容，以保证 webpack 的打包包含了所有的模块，不然会导致打包出来的 js 因为缺少模块而报错。</p></blockquote><h3 id="parser-来控制模块化语法" tabindex="-1"><a class="header-anchor" href="#parser-来控制模块化语法" aria-hidden="true">#</a> parser 来控制模块化语法</h3><p>因为 webpack 是以模块化的 JavaScript 文件为入口，所以内置了对模块化 JavaScript 的解析功能。</p><p>支持 AMD、Commonjs、SystemJs、ES6。</p><p>parse 属性可以更细粒度的配置哪些模块语法要解析，哪些不解析。</p><p>简单来说，如果设置<code>parser.commonjs=false</code>，那么代码里面使用 commonjs 的<code>require</code>语法引入模块，对应的模块就不会被解析到依赖中，也不会被处理，支持的选项包括：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">amd</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 AMD</span>
        <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 CommonJS</span>
        <span class="token literal-property property">system</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 SystemJS</span>
        <span class="token literal-property property">harmony</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 ES6 import/export</span>
        <span class="token literal-property property">requireInclude</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.include</span>
        <span class="token literal-property property">requireEnsure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.ensure</span>
        <span class="token literal-property property">requireContext</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 require.context</span>
        <span class="token literal-property property">browserify</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 browserify</span>
        <span class="token literal-property property">requireJs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁用 requirejs</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：parser 是语法层面的限制，noParse 只能控制哪些文件不进行解析。</p></blockquote><h3 id="module-rules" tabindex="-1"><a class="header-anchor" href="#module-rules" aria-hidden="true">#</a> module.rules</h3><p><code>module.rules</code>是在处理模块时，将符合规则条件的模块，提交给对应的处理器来处理，通常用来配置 loader，其类型是一个数组，数组里每一项都描述了如何去处理部分文件。</p><p>每一项 rule 大致可以由以下三部分组成：</p><ol><li>条件匹配：通过<code>test</code>、<code>include</code>、<code>exclude</code>等配置来命中可以应用规则的模块文件；</li><li>应用规则：对匹配条件通过后的模块，使用<code>use</code>配置项来应用<code>loader</code>，可以应用一个 loader 或者按照<strong>从后往前的顺序</strong>应用一组 loader，当然我们还可以分别给对应 loader 传入不同参数；</li><li>重置顺序：一组 loader 的执行顺序默认是<strong>从后到前（或者从右到左）执行</strong>，通过<code>enforce</code>选项可以让其中一个 loader 的执行顺序放到最前（pre）或者是最后（post）。</li></ol><h3 id="条件匹配" tabindex="-1"><a class="header-anchor" href="#条件匹配" aria-hidden="true">#</a> 条件匹配</h3><p>如上所述，条件匹配相关的配置有<code>test</code>、<code>include</code>、<code>exclude</code>、<code>resource</code>、<code>resourceQuery</code>和<code>issuer</code>。</p><p>条件匹配的对象包括三类：<code>resource</code>，<code>resourceQuery</code>和<code>issuer</code>。</p><ul><li><code>resource</code>：请求文件的绝对路径。它已经根据 resolve 规则解析；</li><li><code>issuer</code>: 被请求资源（requested the resource）的模块文件的绝对路径，即导入时的位置。</li></ul><p>举例来说明：从 <code>app.js</code> 导入 <code>&#39;./style.css?inline&#39;</code>：</p><ul><li><code>resource</code> 是<code>/path/to/style.css</code>；</li><li><code>resourceQuery</code> 是<code>?</code>之后的<code>inline</code>；</li><li><code>issuer</code> 是<code>/path/to/app.js</code>。</li></ul><p>来看下 rule 对应的配置与匹配的对象关系表：</p><table><thead><tr><th style="text-align:left;">rule 配置项</th><th style="text-align:left;">匹配的对象</th></tr></thead><tbody><tr><td style="text-align:left;"><code>test</code></td><td style="text-align:left;"><code>resource</code>类型</td></tr><tr><td style="text-align:left;"><code>include</code></td><td style="text-align:left;"><code>resource</code>类型</td></tr><tr><td style="text-align:left;"><code>exclude</code></td><td style="text-align:left;"><code>resource</code>类型</td></tr><tr><td style="text-align:left;"><code>resource</code></td><td style="text-align:left;"><code>resource</code>类型</td></tr><tr><td style="text-align:left;"><code>resourceQuery</code></td><td style="text-align:left;"><code>resourceQuery</code>类型</td></tr><tr><td style="text-align:left;"><code>issuer</code></td><td style="text-align:left;"><code>issuer</code>类型</td></tr></tbody></table><p>举例说明，下面 rule 的配置项，匹配的条件为：来自<code>src</code>和<code>test</code>文件夹，不包含<code>node_modules</code>和<code>bower_modules</code>子目录，模块的文件路径为<code>.tsx</code>和<code>.jsx</code>结尾的文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;bower_modules&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loader-配置" tabindex="-1"><a class="header-anchor" href="#loader-配置" aria-hidden="true">#</a> <code>Loader</code> 配置</h3><p><code>loader</code>是解析处理器，通过<code>loader</code>我们可以将 ES6 语法的 js 转化成 ES5 的语法，可以将图片转成 base64 的<code>dataURL</code>，在 JavaScript 文件中直接<code>import</code> css 和 html 也是通过对应的<code>loader</code>来实现的。</p><p>我们在使用对应的<code>loader</code>之前，需要先安装它，例如，我们要在 JavaScript 中引入 less，则需要安装<code>less-loader</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> less-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在<code>module.rules</code>中指定<code>*.less</code>文件都是用<code>less-loader</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token string">&#39;less-loader&#39;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来理解上面的配置，<code>test</code>项使用 <code>/\\.less$/</code>正则匹配需要处理的模块文件（即 less 后缀的文件），然后交给<code>less-loader</code>来处理，这里的<code>less-loader</code>是个 string，最终会被作为<code>require()</code>的参数来直接使用。</p><p>这样 less 文件都会被<code>less-loader</code>处理成对应的 css 文件。</p><p>除了直接在<code>webpack.config.js</code>是用 loader 的方式之外，还可以在对应的 JavaScript 文件中是用 loader：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-loader!./loader.html&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码，实际是将<code>loader.html</code>的内容转化成 string 变量，直接给输出了，等同于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./loader.html&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加上下面配置的效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有 html-loader，直接<code>require</code>一个 html 文件，会被当初 js 模块来执行，则会报错：</p><p><img src="`+r+`" alt="image-20230902112946966"></p><blockquote><p>Tips：<code>require(&#39;html-loader!./loader.html&#39;)</code>中<code>!</code>类似 Unix 系统中命令行的管道，这里<code>!</code>隔开的命令是<strong>从右到左解析的</strong>，即先加载<code>loader.html</code>然后在将加载的文件内容传给<code>html-loader</code>处理。</p></blockquote><p>综上，loader 有两种配置方式：</p><ol><li>使用 webpack.config.js 的配置方式：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 JavaScript 文件内使用内联配置方式：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-loader!./loader.html&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// or</span>
<span class="token keyword">import</span> html <span class="token keyword">from</span> <span class="token string">&#39;html-loader!./loader.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：use 中传递字符串（如：<code>use: [&#39;style-loader&#39;]</code>）是 loader 属性的简写方式（如：<code>use: [{loader: &#39;style-loader&#39;}]</code>）</p></blockquote><h4 id="loader-的参数" tabindex="-1"><a class="header-anchor" href="#loader-的参数" aria-hidden="true">#</a> Loader 的参数</h4><p>给 loader 传参的方式有两种：</p><ol><li>通过<code>options</code>传入</li><li>通过<code>query</code>的方式传入：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// inline内联写法，通过 query 传入</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-loader?attrs[]=img:src&amp;attrs[]=img:data-src!./file.html&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// config内写法，通过 options 传入</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;html-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">removeComments</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token literal-property property">collapseWhitespace</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// config内写法，通过 query 传入</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span>
            <span class="token string">&#39;html-loader?minimize=true&amp;removeComments=false&amp;collapseWhitespace=false&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="loader-的解析顺序" tabindex="-1"><a class="header-anchor" href="#loader-的解析顺序" aria-hidden="true">#</a> Loader 的解析顺序</h4><p>对于一些类型的模块，简单配置一个 <code>loader</code> 是不能够满足需求的，</p><p>例如 <code>less</code> 模块类型的文件，只配置了 <code>less-loader</code> 仅仅是将 <code>Less</code> 语法转换成了 <code>CSS</code> 语法，但是 <code>JS</code> 还是不能直接使用，所以还需要添加<code>css-loader</code>来处理，这时候就需要注意 Loader 的解析顺序了。</p><p>前面已经提到了，<code>Webpack</code> 的 <code>Loader</code> 解析顺序是 <strong>从右到左（从后到前）的</strong>，即：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// query 写法从右到左，使用!隔开</span>
<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;css-loader!less-loader!./src/index.less&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 数组写法，从后到前</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要调整 <code>Loader</code> 的执行顺序，可以使用<code>enforce</code>，<code>enforce</code>取值是<code>pre|post</code>，<code>pre</code>表示把放到最前，<code>post</code>是放到最后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// enforce:&#39;post&#39; 的含义是把该 loader 的执行顺序放到最后</span>
    <span class="token comment">// enforce 的值还可以是 pre，代表把 loader 的执行顺序放到最前</span>
    <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="oneof-只应用第一个匹配的规则" tabindex="-1"><a class="header-anchor" href="#oneof-只应用第一个匹配的规则" aria-hidden="true">#</a> oneOf：只应用第一个匹配的规则</h4><p><code>oneOf</code>表示对该资源只应用第一个匹配的规则，一般结合<code>resourceQuery</code>，具体代码来解释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">oneOf</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">resourceQuery</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">inline</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// foo.css?inline</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;url-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">resourceQuery</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">external</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// foo.css?external</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="plugin-插件" tabindex="-1"><a class="header-anchor" href="#plugin-插件" aria-hidden="true">#</a> <code>plugin</code> 插件</h2><p><code>plugin</code>是 Webpack 的重要组成部分，通过<code>plugin</code>可以解决<code>loader</code>解决不了的问题。</p><p>Webpack 本身就是有很多插件组成的，所以内置了很多插件，我们可以直接通过<code>webpack</code>对象的属性来直接使用，例如：<code>webpack.optimize.UglifyJsPlugin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//....</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 压缩js</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了内置的插件，我们也可以通过 <code>NPM</code> 包的方式来使用插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 非默认的插件</span>
<span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;extract-text-webpack-plugin&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//....</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 导出css文件到单独的内容</span>
    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;style.css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：<code>loader</code>面向的是解决某个或者某类模块的问题，而<code>plugin</code>面向的是项目整体，解决的是<code>loader</code>解决不了的问题。</p></blockquote><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>在本小节中，我们讲解了 Webpack 相关的除<code>entry</code>和<code>output</code>外的基础配置项，这里总结下项目经常配置的并且比较重要的配置项列表，供大家复习本小节内容：</p><ul><li><p><code>resolve</code> ：模块依赖查找相关的配置</p><ul><li><code>resolve.extensions</code>：可以省略解析扩展名的配置，配置太多反而会导致 webpack 解析效率下降；</li><li><code>resolve.alias</code>：通过设置 alias 可以帮助 webpack 更快查找模块依赖，精简代码书写时相对路径的书写；</li></ul></li><li><p><code>module.rules</code> ：loader 相关的配置，每个 rule 重要的内容有：</p><ul><li><code>test</code>：正则匹配需要处理的模块文件；</li><li><code>use</code>：loader 数组配置，内部有<code>loader</code>和<code>options</code>；</li><li><code>include</code>：包含；</li><li><code>exclude</code>：排除；</li></ul></li><li><p><code>plugins</code>：插件</p></li></ul><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li>能不能手写一个 Webpack 配置？记住重点配置项：<code>entry</code>、<code>output</code>、<code>module.rules</code>（loader）和<code>plugin</code>。</li><li>在 JS 文件中怎么调用 Loader 来处理一个模块？</li><li>Loader 的解析顺序是怎样的？</li></ol></blockquote>`,75),L={href:"https://github.com/ksky521/webpack-tutorial",target:"_blank",rel:"noopener noreferrer"};function P(T,C){const e=o("ExternalLinkIcon");return l(),c("div",null,[u,s("blockquote",null,[k,s("ol",null,[v,s("li",null,[n("使用"),m,n("注意不要跟 npm 包的"),s("a",b,[n("scope"),p(e)]),n("冲突！")]),g])]),y,s("p",null,[h,n(" 还常被用于给生产环境和开发环境配置不同的 "),x,n(" 库，例如下面写法，在线下开发环境使用具有 "),f,n(" 功能的 "),j,n(" 版本 "),s("a",_,[n("San"),p(e)]),n("：")]),q,s("ul",null,[w,s("li",null,[S,n("：是否解析符合链接（软连接，"),s("a",E,[n("symlink"),p(e)]),n("）；")]),W,J]),$,s("p",null,[n("专栏代码已经整理好给大家共享出来："),s("a",L,[n("https://github.com/ksky521/webpack-tutorial"),p(e)])])])}const Q=t(d,[["render",P],["__file","index-06.html.vue"]]);export{Q as default};
