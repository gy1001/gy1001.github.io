import{_ as e,p as a,q as d,a1 as i}from"./framework-e8cb8151.js";const t="/assets/image-20230728234033029-bbf3204e.png",s="/assets/image-20230728234043807-b2975f0c.png",c="/assets/image-20230728234051547-b412d05f.png",r="/assets/image-20230728234103715-fa075625.png",n="/assets/image-20230728234109830-d19e5ef8.png",o="/assets/image-20230728234121064-7212d197.png",l="/assets/image-20230728234128351-bd35de9e.png",p="/assets/image-20230728234145780-7ef36f9e.png",g="/assets/image-20230728234152058-3eb3ab64.png",m="/assets/image-20230728234159870-535b94b2.png",u={},h=i(`<h1 id="_18-恢复已删除的分支-恢复误删除的分支数据" tabindex="-1"><a class="header-anchor" href="#_18-恢复已删除的分支-恢复误删除的分支数据" aria-hidden="true">#</a> 18-恢复已删除的分支：恢复误删除的分支数据</h1><p><img src="https://img4.mukewang.com/5daee0af00012d6206400359.jpg" alt="img"></p><blockquote><p>成功＝艰苦的劳动＋正确的方法＋少谈空话。 ——爱因斯坦</p></blockquote><p>在使用 Git 的过程中，有时可能会有一些错误操作，造成分支被删除或者丢失，比如 <code>branch -d test</code>，如果我们想恢复此分支，可以通过 reflog 来进行恢复，不过前提是，这个 test 分支的信息没有被 <code>git gc</code> 清除。</p><p>一般情况下，除非手动执行了 <code>git gc</code> 命令，否则 gc 对那些无用的 object 会保留很长时间后才清除的，reflog 是 Git 提供的一个内部工具，用于记录对 Git 仓库进行的各种操作，可以使用 <code>git reflog show</code> 所有的管理类操作日志。</p><h2 id="_18-1-场景复现" tabindex="-1"><a class="header-anchor" href="#_18-1-场景复现" aria-hidden="true">#</a> 18.1 场景复现</h2><p>我们现在模拟一下现场，首先我会新建一个分支，然后修改一些内容，然后提交到版本控制器中，最后再将此分支删除，模拟出分支被删除的情况。</p><p>首先，我们查看当前版本库控制器中有哪些分支，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令后，返回结果如下图所示：</p><p><img src="`+t+`" alt="image-20230728234033029"></p><p>在图中可以看到当前分支处于 master 中，并且本地只存在一个 master 分支。</p><p>接着我们新建一个新的分支，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b retest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，提示信息如下：</p><p><img src="`+s+`" alt="image-20230728234043807"></p><p>在终端的截图中可以看出新建分支已经成功，并且已经自动切换到了 <code>retest</code> 分支上</p><p>接着我们随意修改一下代码，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &#39;测试恢复&#39; &gt; 测试恢复.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行修改代码的命令后，我们再检查一下当前的修改状态，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令后，返回的提示信息如下图所示：</p><p><img src="`+c+`" alt="image-20230728234051547"></p><p>在上图中可以看到新增了一个文件，我们将此文件提交到版本控制器中，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add .  &amp;&amp; git commit . -m &#39;添加测试文件&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行完后返回如下图所示：</p><p><img src="`+r+`" alt="image-20230728234103715"></p><p>在图中可以看到一个文件被修改，新增了一行代码。接着我们开始将此分支删除，首先我们切换到另外一个分支上去，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令之后，返回的信息如下图所示：</p><p><img src="`+n+`" alt="image-20230728234109830"></p><p>在图中可以看到已经成功切换到了 master 分支，接着我再把 <code>retest</code> 分支删除，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -D retest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，返回的信息如下图所示：</p><p><img src="`+o+`" alt="image-20230728234121064"></p><p>在图中可以看到 Git 已经提示删除分支成功，接下来我们查看分支列表，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，返回信息如下图所示：</p><p><img src="`+l+`" alt="image-20230728234128351"></p><p>在图中可以看出当前只剩下 <code>master</code> 分支，之前的 <code>retest</code> 已经不见了；至此我们实验环境已经完成，接下来将开始进行恢复分支的实践。</p><h2 id="_18-2-恢复实践" tabindex="-1"><a class="header-anchor" href="#_18-2-恢复实践" aria-hidden="true">#</a> 18.2 恢复实践</h2><p>恢复的过程，相比实验环境搭建来说很简单，我们只需要两步操作即可，首先通过日志找到 <code>commitid</code>，然后通过新建分支的方式，加入 <code>commitid</code> 即可。</p><h3 id="_18-2-1-找出-commitid" tabindex="-1"><a class="header-anchor" href="#_18-2-1-找出-commitid" aria-hidden="true">#</a> 18.2.1 找出 commitId</h3><p>在之前的章节当中，我们学习了 <code>git log</code> 命令，这条命令可以显示所有提交过的版本信息，但我们对分支的一些管理操作并不会显示出来；这些管理的操作日志并不是没有记录，而是需要使用 <code>git reflog</code> 命令才能显示，显示分支管理命令参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reflog show
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后返回信息如下图所示：</p><p><img src="`+p+`" alt="image-20230728234145780"></p><p>在图中注意看红色框选区域，下面一条是我切换到 <code>retest</code> 分支时候记录下来的，另外一条是执行了提交操作，我们把 <code>commitid</code> 值 <code>b52b955</code> 复制下来。</p><p>接着使用 <code>git branch 分支名称 commit_id</code> 方式建立一个新的分支，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b  retest_v3  b52b955
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，返回信息如下图所示：</p><p><img src="`+g+`" alt="image-20230728234152058"></p><p>在图中可以看出一个成功新建了一个 <code>retest_v3</code> 分支，并自动切换当前所在的分支为 <code>retest_v3</code>，接下来我们查看 <code>commitid</code> 是否也包含在里面，查看提交记录参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行之后，返回的提交版本记录如下图所示：</p><p><img src="`+m+`" alt="image-20230728234159870"></p><p>在图中可以看到，我们之前搭建实验环境时候提交的记录显示出来了，至此我们已经成功把丢失的分支，通过重建分支的方式恢复到了 <code>retest_v3</code> 上了。</p><h2 id="_18-3-常见问题" tabindex="-1"><a class="header-anchor" href="#_18-3-常见问题" aria-hidden="true">#</a> 18.3 常见问题</h2><p>在实验 Git 中，还有很多种方式造成可能丢失记录或分支的情况，恢复起来其实都大同小异，这里针对几个常见的问题进行说明一下。</p><h3 id="_18-3-1-回滚-reset-操作" tabindex="-1"><a class="header-anchor" href="#_18-3-1-回滚-reset-操作" aria-hidden="true">#</a> 18.3.1 回滚 reset 操作</h3><p>如果你不小心使用 <code>git reset</code> 回滚了提交记录，想找回之前的提交记录也是可以的；可以 <code>git reflog</code> 查看操作历史，找到执行 <code>git reset</code> 命令之前 <code>commitid</code>，然后 <code>git reset --hard</code> 到那个 <code>commitid</code> 即可。</p><h3 id="_18-3-2-从历史版本中找回删除的文件" tabindex="-1"><a class="header-anchor" href="#_18-3-2-从历史版本中找回删除的文件" aria-hidden="true">#</a> 18.3.2 从历史版本中找回删除的文件</h3><p>有时候，我们在某个版本中删除了文件，后来又突然发现需要这个文件，也是可以恢复的；恢复之前首先确定要恢复的文件在哪一个版本（commit）中，假设那个版本号是： 7a4312sd，文件路径为 abc.php 那么参考命如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout 7a4312sd abc.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_18-4-小结" tabindex="-1"><a class="header-anchor" href="#_18-4-小结" aria-hidden="true">#</a> 18.4 小结</h2><p>Git 是一个比较成熟的版本控制器系统，通常误操作导致的代码丢失，只要还没有触发 <code>git gc</code> 操作，那么基本都是可以恢复的，恢复的方式主要是通过 <code>git reflog</code> 找出对应的 commitid，然后按照去恢复：</p><ol><li>使用 <code>git reflog</code> 可以查看 Git 的操作的日志，<code>git log</code> 只能查看版本日志；</li><li>找回分支命令参考 <code>git branch 分支名称 commitid</code>。</li></ol>`,67),v=[h];function b(x,_){return a(),d("div",null,v)}const k=e(u,[["render",b],["__file","index-18.html.vue"]]);export{k as default};
