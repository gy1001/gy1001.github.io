import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const p={},t=e(`<h1 id="_64-常用高阶类型" tabindex="-1"><a class="header-anchor" href="#_64-常用高阶类型" aria-hidden="true">#</a> 64-常用高阶类型</h1><p>实践中场景往往比较复杂，因此许多时候我们需要一些复杂的高级类型来确保变量的类型与实际情况相符合。</p><p>这一章我们把一些常见的复杂类型单独拿出来与大家一起来学习一下。</p><h2 id="_1-枚举" tabindex="-1"><a class="header-anchor" href="#_1-枚举" aria-hidden="true">#</a> 1-枚举</h2><p>使用关键字 enum 可定义一个枚举类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Direction<span class="token punctuation">.</span>Up <span class="token comment">// 1</span>
Direction<span class="token punctuation">.</span>Down <span class="token comment">// 2</span>
Direction<span class="token punctuation">.</span>Left <span class="token comment">// 3</span>
Direction<span class="token punctuation">.</span>Right <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意，与 interface 等类型约束关键字不同，枚举类型是真实运行的代码，因此枚举类型是真实存在的对象，而并非仅仅只是简单的类型约束。</p></blockquote><p>如果不赋值，则从 0 开始递增。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Direction<span class="token punctuation">.</span>Up <span class="token comment">// 0</span>
Direction<span class="token punctuation">.</span>Down <span class="token comment">// 1</span>
Direction<span class="token punctuation">.</span>Left <span class="token comment">// 2</span>
Direction<span class="token punctuation">.</span>Right <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以赋值为字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Direction<span class="token punctuation">.</span>Up <span class="token comment">// up</span>
Direction<span class="token punctuation">.</span>Down <span class="token comment">// down</span>
Direction<span class="token punctuation">.</span>Left <span class="token comment">// left</span>
Direction<span class="token punctuation">.</span>Right <span class="token comment">// right</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以反向映射访问</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Direction<span class="token punctuation">.</span>up <span class="token comment">// Up</span>
Direction<span class="token punctuation">.</span>down <span class="token comment">// Down</span>
Direction<span class="token punctuation">.</span>left <span class="token comment">// Lfet</span>
Direction<span class="token punctuation">.</span>right <span class="token comment">// Right</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端的一个特殊性在于，我们通常会将枚举类型的值描述展示在页面上，因此此时如果使用枚举来表达会存在一些问题。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 实践中更多使用这样方式表达枚举的含义</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;微信&#39;</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;QQ&#39;</span><span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;今日头条&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-交叉类型" tabindex="-1"><a class="header-anchor" href="#_2-交叉类型" aria-hidden="true">#</a> 2-<code>&amp;</code> 交叉类型</h2><p>当我们在封装 Drag 组件时，需要兼容移动端的 touch 与 pc 端的 mouse 事件。可问题在于 touch 的事件对象与 mouse 的事件对象是不一样的。那么我们在兼容了这两种事件的回调中，如何去描述该回调的事件对象呢？</p><p>通常使用 &amp; 符号来解决这样的场景，将两种类型合并为一种类型。这样就能够在智能提示中同时访问到两个事件对象的所有属性了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TouchEvent</span> <span class="token operator">=</span> React<span class="token punctuation">.</span>TouchEvent <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>MouseEvent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>demo.gif</p><h2 id="_3-联合类型" tabindex="-1"><a class="header-anchor" href="#_3-联合类型" aria-hidden="true">#</a> 3-<code>|</code> 联合类型</h2><p>当我们想要设定一个变量的类型为 number 时，</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是当我们想要设定他的数据只能是<code>10, 20, 30</code>时，就需要用到 <code>|</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Source</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span> <span class="token number">30</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> Source <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常这种场景与枚举数据有关。</p><p>当然，我们也可以扩展一个数据的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> attr<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意体会 &amp; 与 | 的区别</p></blockquote><h2 id="_4-类型保护" tabindex="-1"><a class="header-anchor" href="#_4-类型保护" aria-hidden="true">#</a> 4-类型保护</h2><p>一个变量，被定义为可能是字符串，也可能是数组。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>per<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们在代码编写时，希望能够自动提示对应的 api，typescript 则不知道应该如何处理这种情况。</p><p>试图调用数组的 map 方法，结果无法找到</p><p>为此，我们应该使用一些判断，帮助编辑器做出正确推断。</p><p>自动提示所有字符串 api 自动提示所有数组 api</p><p>这种处理，就叫做类型保护。</p><h2 id="_5-索引类型" tabindex="-1"><a class="header-anchor" href="#_5-索引类型" aria-hidden="true">#</a> 5-索引类型</h2><p>我们可以使用 <code>keyof</code> 来获取一个对象中的 key 对应的具体值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> Person <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><p>他有点类似于</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Key</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但 keyof 具备更强的灵活性，它会动态的去识别对象中的所有 key 值。</p><p>结合泛型，用一个复杂的例子来体验一下：</p><p>我们来封装这样一个方法：对于一个对象，当我们指定对应的 key 值数组时，希望能够得到所有 key 值对应的 value 值数组。</p><p>需要思考几个问题。目标对象的类型，我们不确定，因此，只能使用一个泛型变量做一个简单约束。key 值的类型呢？我们可以使用 keyof 从泛型对象中获取。于是又定义另外一个泛型变量 K 来接收获取的结果。</p><p>函数定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 声明</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">values</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>o<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> names<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用</span>
<span class="token keyword">let</span> defUser <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&#39;xxx1234sd&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  phone<span class="token operator">:</span> <span class="token string">&#39;12312312313&#39;</span><span class="token punctuation">,</span>
  pwd<span class="token operator">:</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token function">values</span><span class="token punctuation">(</span>defUser<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6-总结</h2><p>这是最常用的高级类型，学会之后，能够应对实践中的大部分场景了。当然，更多的高级类型，大家还要结合官方文档继续学习。</p>`,51),c=[t];function i(o,l){return s(),a("div",null,c)}const u=n(p,[["render",i],["__file","index-64.html.vue"]]);export{u as default};
