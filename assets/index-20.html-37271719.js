import{_ as c,M as t,p as l,q as i,R as n,t as s,N as a,V as r,a1 as p}from"./framework-e8cb8151.js";const d="/assets/image-20230910213420760-d9b7f1f4.png",u="/assets/image-20230910213430411-146f5d9c.png",k={},v=n("h1",{id:"_20-webpack-优化之速度优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-webpack-优化之速度优化","aria-hidden":"true"},"#"),s(" 20-Webpack 优化之速度优化")],-1),m=n("p",null,[n("img",{src:"https://img3.mukewang.com/5cd9640a000113f306400360.jpg",alt:"img"})],-1),b={href:"https://juejin.cn/post/6996816316875161637#heading-18",target:"_blank",rel:"noopener noreferrer"},g=p(`<blockquote><p>什么是路？就是从没路的地方践踏出来的，从只有荆棘的地方开辟出来的。——鲁迅</p></blockquote><p>当 Webpack 的项目文件多了之后，构建过程会越来越慢，这时候就需要做一些构建速度方面的优化手段了，本篇文章就是介绍了构建速度优化相关的配置。</p><p>影响 Webpack 构建速度的有两个「大户」：一个是 loader 和 plugin 方面的构建过程，一个就是压缩，把这两个东西优化起来，可以减少很多发布的时间，所以本文将从<strong>构建过程</strong>和<strong>压缩</strong>两个方面来做讲解。</p><blockquote><p>Tips：</p><ol><li>使用最新版本的 Webpack 4 要比之前的 Webpack 3 和 2 版本快很多，所以单纯升级 Webpack 版本到最新版本就可以提升一大截构建速度；</li><li>区分开发和生产环境两套配置，各司其职，例如在开发阶段，代码压缩、目录清理、计算 hash、提取 CSS 这些都没有必要做。</li></ol></blockquote><p>要优化构建过程，可以从<code>减少查找过程</code>、<code>多线程</code>、<code>提前编译</code>和 <code>Cache</code> 多个角度来优化。</p><h2 id="减少查找过程" tabindex="-1"><a class="header-anchor" href="#减少查找过程" aria-hidden="true">#</a> 减少查找过程</h2><p>在这里我们要做的事情是聚焦 Webpack 要处理的代码目录，帮助缩小 Webpack 的查找过程。</p><h3 id="使用-resolve-alias减少查找过程" tabindex="-1"><a class="header-anchor" href="#使用-resolve-alias减少查找过程" aria-hidden="true">#</a> 使用 <code>resolve.alias</code>减少查找过程</h3><p><code>resolve.alias</code> 配置项通过别名（alias）来把原导入路径映射成一个新的导入路径。</p><p>比如我们经常使用的 react 库，其实 react 库中有两套代码，一套是基于 CommonJs 的模块化代码，一套是打包好的完整代码，react.js 用于开发环境，react.min.js 用生产环境。</p><p>所以通过 resolve.alias 配置，可以让 Webpack 处理时，直接使用打包好的 react，从而跳过耗时的模块解析，还有我们项目中可能会有一些相对路径的写法，可以使用 alias 配置来减少查找过程，具体示例配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 alias 把导入 react 的语句换成直接使用单独完整的 react.min.js 文件，</span>
    <span class="token comment">// 减少耗时的递归解析操作</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">react</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./node_modules/react/dist/react.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;@lib&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/lib/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-resolve-extensions-优先查找" tabindex="-1"><a class="header-anchor" href="#使用-resolve-extensions-优先查找" aria-hidden="true">#</a> 使用 <code>resolve.extensions</code> 优先查找</h3><p>在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试询问文件是否存在，查询的顺序是按照我们配置的<code>resolve.extensions</code>顺序从前到后查找，如果我们配置 <code>resolve.extensions= [&#39;js&#39;, &#39;json&#39;]</code>，那么会先找<code>xxx.js</code>然后没有再查找<code>xxx.json</code>，所以我们应该把常用到的文件后缀写在前面，或者我们<strong>导入模块时，尽量带上文件后缀名</strong>。</p><h4 id="排除不需要解析的模块" tabindex="-1"><a class="header-anchor" href="#排除不需要解析的模块" aria-hidden="true">#</a> 排除不需要解析的模块</h4><p><code>module.noParse</code>配置项可以让 Webpack 忽略对部分没采用模块化的文件递归解析处理，例如：jQuery、ChartJS，它们体积庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义，所以使用<code>module.noParse</code>排除它们</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules\\/(jquery\\.js)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：被忽略掉的文件里不应该包含 <code>import</code>、<code>require</code>、<code>define</code> 等模块化语句，否则会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。</p></blockquote><h3 id="合理配置-rule-的查找范围" tabindex="-1"><a class="header-anchor" href="#合理配置-rule-的查找范围" aria-hidden="true">#</a> 合理配置 rule 的查找范围</h3><p>在 rule 配置上，有<code>test</code>、<code>include</code>、<code>exclude</code>三个可以控制范围的配置，最佳实践是:</p><ul><li>只在 <code>test</code> 和 文件名匹配中使用正则表达式；</li><li>在 <code>include</code> 和 <code>exclude</code> 中使用绝对路径数组；</li><li>尽量避免 <code>exclude</code>，更倾向于使用 <code>include</code>。</li></ul><p>示例配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// test 使用正则</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 排除路径使用数组</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 查找路径使用数组</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：<code>exclude</code>优先级要优于<code>include</code>和<code>test</code>，所以当三者配置有冲突时，<code>exclude</code>会优先于其他两个配置。</p></blockquote><h2 id="利用多线程提升构建速度" tabindex="-1"><a class="header-anchor" href="#利用多线程提升构建速度" aria-hidden="true">#</a> 利用多线程提升构建速度</h2><p>由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。</p><p>我们需要 Webpack 能同一时间处理多个任务，发挥多核 CPU 电脑的威力，HappyPack 就能让 Webpack 做到这点，它把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</p><p>我们知道 Node.js 是单线程模型的，Webpack 运行在 Node.js 上处理事情是一件件处理的，我们可以通过插件方式让 Webpack 支持多个线程进行同时打包，以便提高编译打包的速度。</p><p>但是需要注意的是，如果项目比较简单，没有必要采用这种方式，简单的项目而使用多线程编译打包会因为多线程打包浪费更多的 CPU 资源，这样最终结果是不仅不能加快打包的速度，反而会降低打包的速度。</p>`,29),h={href:"https://github.com/webpack-contrib/thread-loader",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/amireh/happypack",target:"_blank",rel:"noopener noreferrer"},f={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Famireh%2Fhappypack",target:"_blank",rel:"noopener noreferrer"},x=p(`<h3 id="thread-loader" tabindex="-1"><a class="header-anchor" href="#thread-loader" aria-hidden="true">#</a> thread-loader</h3><p>thread-loader 是针对 loader 进行优化的，它会将 loader 放置在一个 worker 池里面运行，以达到多线程构建。</p><p>thread-loader 在使用的时候，需要将其放置在其他 loader 之前，如下面实例：</p><blockquote><p>注意：如果项目量小，增加 thread-loader 可能会增加构建时间。因此，我们应该仅在非常耗时的 loader 前引入 thread-loader。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&#39;thread-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token comment">// 你的高开销的loader放置在此 (e.g babel-loader)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="happypack-webpack-5-已废弃" tabindex="-1"><a class="header-anchor" href="#happypack-webpack-5-已废弃" aria-hidden="true">#</a> HappyPack (webpack 5 已废弃)</h3><p>HappyPack 是通过多进程模型，来加速代码构建，具体的原理部分可以看它的介绍，里面有个详细的流程图，下面直接上它的示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HappyPack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;happypack&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 根据 cpu 数量创建线程池</span>
<span class="token keyword">const</span> happyThreadPool <span class="token operator">=</span> HappyPack<span class="token punctuation">.</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">size</span><span class="token operator">:</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;happypack/loader?id=jsx&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;happypack/loader?id=styles&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;jsx&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 多少个线程</span>
      <span class="token literal-property property">threads</span><span class="token operator">:</span> happyThreadPool<span class="token punctuation">,</span>
      <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;styles&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 自定义线程数量</span>
      <span class="token literal-property property">threads</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),j={href:"https://github.com/amireh/happypack/wiki/Loader-Compatibility-List",target:"_blank",rel:"noopener noreferrer"},_=p(`<h2 id="使用-webpack-dllplugin-来预先编译-webpack-5-已不建议" tabindex="-1"><a class="header-anchor" href="#使用-webpack-dllplugin-来预先编译-webpack-5-已不建议" aria-hidden="true">#</a> 使用 webpack.DllPlugin 来预先编译（webpack 5 已不建议）</h2><blockquote><p>webpack5 开箱即用的持久缓存是比 dll 更优的解决方案。</p></blockquote><p>预先编译和打包不会变动存在的文件，在业务代码中直接引入，加快 Webpack 编译打包的速度，但是并不能减少最后生成的代码体积。</p><p>例如下面代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM<span class="token punctuation">,</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了 react 和 react-dom 两个库，这两个库一般我们日常业务代码开发的时候并不会升级版本或者修改内部代码，但是在每次构建的时候，这些代码都会重新编译和打包，这样就很浪费时间，<code>webpack.DllPlugin</code>就是来解决这个问题的插件，使用它可以在第一次编译打包后就生成一份不变的代码供其他模块引用，这样下一次构建的时候就可以节省开发时编译打包的时间。</p><p>要使用<code>DllPlugin</code>的功能，需要配合<code>webpack.DllReferencePlugin</code>来使用。</p><p><strong>DLLPlugin</strong> 这个插件是在一个额外独立的 Webpack 设置中创建一个只有公共库的 dll 文件，这时候我们项目中应该单独为 dll 文件创建一个配置文件，例如<code>webpack.config.dll.js</code>，<code>webpack.config.dll.js</code> 作用是把所有的第三方库依赖打包到一个 bundle 的 <code>dll</code> 文件里面，还会生成一个名为 <code>manifest.json</code> 文件。生成的 <code>manifest.json</code> 会让 <code>DllReferencePlugin</code>在<code>webpack.config.js</code>配置中映射到相关的依赖上去的。</p><p><strong>DllReferencePlugin</strong> 这个插件是在 <code>webpack.config.js</code> 中使用的，该插件的作用是把刚刚在 <code>webpack.config.dll.js</code> 中打包生成的 dll 文件引用到需要的预编译的依赖上来。什么意思呢？就是说，假设在 <code>webpack.config.dll.js</code> 中打包后会生成 <code>dll.js</code> 文件和 <code>manifest.json</code>两个文件，<code>dll.js</code> 文件包含所有的第三方库文件，<code>manifest.json</code> 文件会包含所有库代码的一个索引，当在使用 <code>webpack.config.js</code> 文件打包 <code>DllReferencePlugin</code> 插件的时候，会使用该 <code>DllReferencePlugin</code> 插件读取 <code>vendor-manifest.json</code> 文件，看看是否有该第三方库。<code>manifest.json</code> 文件就是有一个第三方库的一个映射而已。</p><p>当第一次使用 <code>webpack.config.dll.js</code> 文件会对第三方库打包，打包完成后就不会再打包它了，然后每次运行 <code>webpack.config.js</code> 文件的时候，都会打包项目中本身的文件代码，当需要使用第三方依赖的时候，会使用 <code>DllReferencePlugin</code> 插件去读取第三方依赖库，而只有我们修改第三方公共库的时候，才会执行<code>webpack.config.dll.js</code>。</p><p>本质上来说 DLL 方案就是一种缓存机制。</p><blockquote><p>Tips：DLL 是动态链接库（Dynamic-link library）的英文缩写，最早是微软提出来的一种共享函数库概念，实际就是将一些经常会共享的代码制作成 DLL 文档，当其他代码需要使用这些 DLL 中的代码时，Windows 操作系统会将 DLL 文档加载到内存中。这里借用了 DLL 的概念，帮助 Webpack 使用者理解用途。</p></blockquote><p>我们接下来看看具体怎么配置，首先我们的<code>src/index.js</code>按照正常代码写法即可，例如内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM<span class="token punctuation">,</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>React<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> ReactDOM<span class="token punctuation">,</span> render<span class="token punctuation">,</span> <span class="token string">&#39;hell dll&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们创建一个<code>webpack.config.dll.js</code>，这里面添加了我们需要打包的第三方依赖库 react 和 react-dom：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.dll.js</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 这里是第三方依赖库</span>
<span class="token keyword">const</span> vendors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">]</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义程序中打包公共文件的入口文件vendor.js</span>
    <span class="token literal-property property">vendor</span><span class="token operator">:</span> vendors<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[chunkhash].js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 这里是使用将 verdor 作为 library 导出，并且指定全局变量名字是[name]_[chunkhash]</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;[name]_[chunkhash]&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 这里是设置 mainifest.json 路径</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;manifest.json&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;[name]_[chunkhash]&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候执行<code>webpack --config webpack.config.dll.js</code>，这显示打包成功：</p><p><img src="`+d+`" alt="image-20230910213420760"></p><p>查看一下目录结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── dist
│   └── vendor.1c25daba4f58872736ee.js <span class="token comment"># 这个是刚刚打包出来的 dll 文件</span>
├── manifest.json    <span class="token comment"># 这个是配置文件，后续要用</span>
├── node_modules
├── package.json
├── src
│   └── index.js
├── webpack.config.dll.js <span class="token comment"># dll 配置</span>
└── webpack.config.js <span class="token comment"># 普通配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来看下正常项目的配置文件<code>webpack.config.js</code>是怎么配置的，<code>webpack.config.js</code>中我们需要使用<code>DllReferencePlugin</code>指定<code>manifest.json</code>的内容即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[chunkhash].js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>
      <span class="token comment">// 这里导入 manifest配置内容</span>
      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./manifest.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候执行<code>webpack</code>命令就可以生成<code>app.js</code>文件了，并且<code>app.js</code>并不会包含 dll 打包出来的<code>vendor.js</code>文件内容，打包速度也提升了不少！</p><p><img src="`+u+'" alt="image-20230910213430411"></p>',24),w={href:"https://github.com/SimenB/add-asset-html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},P=p(`<h2 id="缓存-cache-相关" tabindex="-1"><a class="header-anchor" href="#缓存-cache-相关" aria-hidden="true">#</a> 缓存（Cache）相关</h2><p>提升构建速度的另外一个大杀器是使用缓存！下面介绍两种缓存方式。</p><h3 id="babel-loader-配置" tabindex="-1"><a class="header-anchor" href="#babel-loader-配置" aria-hidden="true">#</a> babel-loader 配置</h3><p>Webpack 中打包的核心是 JavaScript 文件的打包，JavaScript 使用的是 babel-loader，其实打包时间长很多时候是 babel-loader 执行慢导致的。</p><p>这时候我们不仅要使用<code>exclude</code>和<code>include</code>来尽可能准确的指定要转换内容的范畴，还需要关注 babel-loader 在执行的时候，可能会产生一些运行期间重复的公共文件，造成代码体积大冗余，同时也会减慢编译的速度。</p><p>babel-loader 提供了 <code>cacheDirectory</code> 配置给 Babel 编译时给定的目录，并且将用于缓存加载器的结果，但是这个设置默认是<code>false</code>关闭的状态，我们需要设置为<code>true</code>，这样 babel-loader 将使用默认的缓存目录<code>node_modules/.cache/babel-loader</code>，</p><p>如果在任何根目录下都没有找到 <code>node_modules</code> 目录，将会降级回退到操作系统默认的临时文件目录。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 排除路径</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token comment">// 查找路径</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;.src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他构建过程的优化点" tabindex="-1"><a class="header-anchor" href="#其他构建过程的优化点" aria-hidden="true">#</a> 其他构建过程的优化点</h2>`,9),q=n("code",null,"devtool",-1),W={href:"https://github.com/yibn2008/fast-sass-loader",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"sass-loader",-1),L=n("h2",{id:"压缩速度优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#压缩速度优化","aria-hidden":"true"},"#"),s(" 压缩速度优化")],-1),R=n("p",null,"相对于构建过程而言，压缩相对我们来说只有生产环境打包才会做，而且压缩我们除了添加 cache 和多线程支持之外，可以优化的空间较小。",-1),C={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},H=p(`<blockquote><p>webpack v5 开箱即带有最新版本的 <code>terser-webpack-plugin</code>。</p><p>如果你使用的是 webpack v5 或更高版本，同时希望自定义配置，那么仍需要安装 <code>terser-webpack-plugin</code>。</p><p>如果使用 webpack v4，则必须安装 <code>terser-webpack-plugin</code> v4 的版本。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启缓存</span>
        <span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 多线程</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要从构建速度角度来介绍如何提升打包速度，分别从构建过程和压缩两个维度来介绍提升速度的方法，其中压缩角度可以优化的点比较少，而在构建过程中可以从减少查找过程、多线程、提前编译和缓存多个角度来优化</p><p>其中重点介绍了使用减少查找过程的几种配置方式，使用 thread-loader 和 HappyPack 来开启多线程，使用 DLLPlugin 来预先编译和使用 babel-loader 的缓存等方法</p><p>实际项目中并不是非要做构建速度的优化，如果项目简单完全没有必要，当做构建速度优化的时候也并不是本文介绍的所有方式都可以使用，要具体问题具体分析。</p><p>不管怎样，保持 Webpack 版本最新是一个既简单又效果不错的方式！</p><blockquote><p>本小节 Webpack 相关面试题：</p><p>本章节一直在回答一个问题：Webpack 怎么优化。</p><p>本小节主要从 Webpack 打包速度的方面介绍 Webpack 优化方案。</p></blockquote>`,8);function T(N,M){const e=t("ExternalLinkIcon"),o=t("RouterLink");return l(),i("div",null,[v,m,n("p",null,[n("a",b,[s("学习 Webpack5 之路（优化篇）- 近 7k 字"),a(e)])]),g,n("p",null,[s("多线程打包有两种方案："),n("a",h,[s("thread-loader"),a(e)]),s("和"),n("a",y,[s("HappyPack"),a(e)]),s("。")]),n("blockquote",null,[n("p",null,[s("但是在 webpack5 就不要再使用 "),n("a",f,[s("happypack"),a(e)]),s(" 了，官方也已经不再维护了，推荐使用 thread-loader。")])]),x,n("blockquote",null,[n("p",null,[s("Tips：给 loader 配置使用 HappyPack 需要对应的 loader 支持才行，例如 url-loader 和 file-loader 就不支持 HappyPack，在 HappyPack 的 wiki 中有一份支持 loader 的"),n("a",j,[s("列表"),a(e)]),s("。")])]),_,n("blockquote",null,[n("p",null,[s("Tips：在实际操作中，HTML 中不会主动引入 dll 的 vendor.js 文件，这时候需要我们想办法手动或者通过插件添加进去，比如使用"),n("a",w,[s("add-asset-html-webpack-plugin"),a(e)]),s("，或者在 dll 打包的时候就修改一下 html-webpack-plugin 的 template 文件，正常打包的时候直接使用这个 template 文件再打包一次即可。")])]),P,n("ol",null,[n("li",null,[s("sourceMap 生成耗时严重，根据之前 "),a(o,{to:"/zh/other/column/webpack-engineering/index-05.html#devtool"},{default:r(()=>[s("sourceMap 表格选择")]),_:1}),s("合适的"),q,s("值")]),n("li",null,[s("切换一些 loader 或者插件，比如："),n("a",W,[s("fast-sass-loader"),a(e)]),s("可以并行处理 sass 文件，要比 "),D,s(" 快 5~10 倍")])]),L,R,n("p",null,[s("我们在使用"),n("a",C,[s("terser-webpack-plugin"),a(e)]),s("的时候可以通过下面的配置开启多线程和缓存：")]),H])}const B=c(k,[["render",T],["__file","index-20.html.vue"]]);export{B as default};
