import{_ as t,M as e,p,q as i,R as n,t as o,N as l,a1 as s}from"./framework-e8cb8151.js";const c="/assets/class-760002e8.png",u="/assets/实现接口-0dd96545.png",r="/assets/泛化-89e6e795.png",d="/assets/关联-6884ac0a.png",k="/assets/聚合-331d32e2.png",m="/assets/组合-03b70034.png",v="/assets/依赖-82b77212.png",h="/assets/实现-泛化-cd95dc1b.png",b="/assets/关联总结-5677a996.png",g={},y=s(`<h1 id="_02-面向对象-oop-和-uml-类图-前端开发的必备编程思想" tabindex="-1"><a class="header-anchor" href="#_02-面向对象-oop-和-uml-类图-前端开发的必备编程思想" aria-hidden="true">#</a> 02-面向对象 OOP 和 UML 类图-前端开发的必备编程思想</h1><h2 id="_01-面向对象-和-uml-类图" tabindex="-1"><a class="header-anchor" href="#_01-面向对象-和-uml-类图" aria-hidden="true">#</a> 01: 面向对象 和 UML 类图</h2><h3 id="主要内容" tabindex="-1"><a class="header-anchor" href="#主要内容" aria-hidden="true">#</a> 主要内容</h3><ul><li>介绍 TS 类型</li><li>面向对象的概念和应用</li><li>画 UML 类图</li></ul><h3 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法" aria-hidden="true">#</a> 学习方法</h3><ul><li>开发环境可直接下载源代码，节省效率</li><li>UML 类图一定要结合代码，综合理解</li><li>要动手画 UML 类图</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>TS 知识点很多，本章先讲基础，以后用到再补充</li></ul><h2 id="_02-介绍-讲义" tabindex="-1"><a class="header-anchor" href="#_02-介绍-讲义" aria-hidden="true">#</a> 02: 介绍-讲义</h2><h2 id="_03-typescript-介绍-前端最热门的编程语言" tabindex="-1"><a class="header-anchor" href="#_03-typescript-介绍-前端最热门的编程语言" aria-hidden="true">#</a> 03：Typescript 介绍 - 前端最热门的编程语言</h2><h2 id="_04-ts-简介-讲义" tabindex="-1"><a class="header-anchor" href="#_04-ts-简介-讲义" aria-hidden="true">#</a> 04: TS 简介-讲义</h2><h3 id="ts-简介" tabindex="-1"><a class="header-anchor" href="#ts-简介" aria-hidden="true">#</a> TS 简介</h3><p>TS 是 JS 的超级 Super-Set ，即包含 JS 所有能力，然后再有自己自己的能力 —— 静态类型。</p><p>PS：大型系统的量大研发保障：1. 静态类型； 2. 自动化测试；</p><p>注意，TS 类型的知识点非常多，先介绍常用的，其他的遇到再说。</p><h3 id="ts-最终编译为-js" tabindex="-1"><a class="header-anchor" href="#ts-最终编译为-js" aria-hidden="true">#</a> TS 最终编译为 JS</h3><p>TS 只是开发环境的工具，构建之后产出 JS 在浏览器运行。</p><p>https://www.tslang.cn/play/index.html</p><h3 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h3><p>值类型</p><ul><li><code>boolean</code></li><li><code>number</code></li><li><code>string</code></li><li><code>symbol</code></li><li><code>any</code> —— 重要</li></ul><p>数组：<code>number[]</code> 或 <code>Array&lt;number&gt;</code></p><p>元组 <code>Array&lt;number | string&gt;</code></p><p>对象 <code>object</code> —— 不常用，一般会用 interface 或 class 代替</p><p>函数 <code>Function</code> —— 不常用，一般用自定义 type 代替</p><p>类型断言：让 TS 计算你需要的类型，而不用自己定义</p><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><ul><li>参数类型</li><li>返回值类型，有 <code>void</code></li></ul><h3 id="自定义-type" tabindex="-1"><a class="header-anchor" href="#自定义-type" aria-hidden="true">#</a> 自定义 type</h3><p>基础类型不能满足，就自定义</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">infoType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token keyword">type</span> <span class="token class-name">fnType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">const</span> a<span class="token operator">:</span> infoType <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">const</span> fn<span class="token operator">:</span> fnType <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface" aria-hidden="true">#</a> 接口 interface</h3><p>一些类型的集合，也可以用自定义 type 和其他 interface</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 注意，interface 的写法</span>
<span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> zhangsan<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>otherName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class" aria-hidden="true">#</a> 类 class</h3><p>在 ES6 class 基础上增加了类型，class 可实现 interface</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>

  <span class="token function">sayHi</span><span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>otherName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>class 还有一些特性，在下一节面向对象介绍</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li>基础类型</li><li>函数</li><li>自定义 type</li><li>interface</li><li>class</li></ul><h2 id="_05-typescript-基础类型" tabindex="-1"><a class="header-anchor" href="#_05-typescript-基础类型" aria-hidden="true">#</a> 05：Typescript 基础类型</h2><h2 id="_06-typescript-自定义类型和-interface" tabindex="-1"><a class="header-anchor" href="#_06-typescript-自定义类型和-interface" aria-hidden="true">#</a> 06：Typescript 自定义类型和 interface</h2><h2 id="_07-面向对象-前端主流的编程思想" tabindex="-1"><a class="header-anchor" href="#_07-面向对象-前端主流的编程思想" aria-hidden="true">#</a> 07：面向对象 - 前端主流的编程思想</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><ul><li>面向对象编程，Object-Oriented-Program（简称 OOP）是一种目前主流的编程思想。已有几十年的历史，1990 年代开始，和 Java 一起开始发展壮大。</li><li>编程本来是抽象的，像做数学题一样。</li><li>一开始的汇编语言，直接操作寄存器、内存，写底层计算。后来的 C 语言，各种函数和指针。</li><li>而 OOP 引入了“对象”概念，对象即对应生活中的实物，这样就把编程具象化了。具象化之后学习成本就低了，也就随着计算机革命普及开来。</li><li>设计模式就是基于 OOP 编程思想的，不适用于其他编程思想（如函数式编程）</li></ul><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h3><ul><li>类，即模板<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>

  <span class="token comment">// 如果函数不写返回值类型，则默认为 void</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> eat something</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, age </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>对象，即实例。一个类可以 <code>new</code> 出很多个对象。<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 创建实例</span>
<span class="token keyword">let</span> zhang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;zhang&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
zhang<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
zhang<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 创建实例</span>
<span class="token keyword">let</span> wang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
wang<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
wang<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="三要素" tabindex="-1"><a class="header-anchor" href="#三要素" aria-hidden="true">#</a> 三要素</h3><ul><li>继承</li><li>封装</li><li>多态</li></ul><h4 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h4><ul><li><p>继承：抽离公共代码，实现代码复用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  school<span class="token operator">:</span> <span class="token builtin">string</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> school<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school
  <span class="token punctuation">}</span>
  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> study</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 可继续派生其他子类</span>

<span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;A小学&#39;</span><span class="token punctuation">)</span>
xiaoming<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>school<span class="token punctuation">)</span>
<span class="token keyword">let</span> xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;xiaohong&#39;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&#39;B小学&#39;</span><span class="token punctuation">)</span>
xiaohong<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h4><ul><li><p>封装：高内聚，低耦合</p></li><li><p>可见性修饰符</p><ul><li><code>public</code> 外部可访问，默认</li><li><code>protected</code> 内部或子类可访问</li><li><code>private</code> 只有内部可访问</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// People 中增加 protected weight: number</span>
<span class="token comment">// Student 中增加 private girlfriend: string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h4><blockquote><p>多态：保证扩展性</p></blockquote><ul><li>重写 - 覆盖父组件的方法</li><li>重载 - 支持多种参数形式<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IStyleInfo</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">JQuery</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数重载</span>
  <span class="token function">css</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
  <span class="token function">css</span><span class="token punctuation">(</span>styleInfo<span class="token operator">:</span> IStyleInfo<span class="token punctuation">)</span>
  <span class="token function">css</span><span class="token punctuation">(</span>keyOrStyleInfo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> IStyleInfo<span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> keyOrStyleInfo <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// key-value 形式</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> keyOrStyleInfo
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Set CSS&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// object 形式</span>
      <span class="token keyword">const</span> styleInfo <span class="token operator">=</span> keyOrStyleInfo
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> styleInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> styleInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Set CSS&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> jquery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
jquery<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
jquery<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;font-size&#39;</span><span class="token operator">:</span> <span class="token string">&#39;14px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="vue-react-组件也是对象" tabindex="-1"><a class="header-anchor" href="#vue-react-组件也是对象" aria-hidden="true">#</a> Vue React 组件也是对象</h3><ul><li><p>组件定义就相当于 class ，组件使用就相当于 new class</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 定义一个 SomeComponent.vue 组件 --&gt;</span>

<span class="token comment">&lt;!-- page1 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>some-component</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>some-component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- page2 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>some-component</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>some-component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>类和对象</li><li>三个特点（重要）</li><li>Vue React 组件也是对象</li></ul><h2 id="_08-uml-类图" tabindex="-1"><a class="header-anchor" href="#_08-uml-类图" aria-hidden="true">#</a> 08：UML 类图</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> <strong>介绍</strong></h3><ul><li><p>UML - Unified Modeling Language - 统一建模语言</p></li><li><p>软件工程（不仅是编程）中的任何设计都可以用它来表述，包含：</p><ul><li><p><strong>类图</strong></p></li><li><p>用例图</p></li><li><p>对象图</p></li><li><p>顺序图</p></li><li><p>协作图</p></li><li><p>状态图</p></li><li><p>活动图</p></li><li><p>组件图</p></li><li><p>配置图</p></li></ul></li></ul><h3 id="uml-类图的作用" tabindex="-1"><a class="header-anchor" href="#uml-类图的作用" aria-hidden="true">#</a> <strong>UML 类图的作用</strong></h3><ul><li>需求指导设计，设计指导开发</li><li>开发之前，写技术方案设计文档，并评审</li><li>UML 类图就是一个重要的工具和表达方式。如果你和同事都熟悉 UML 类图，那会减少很多沟通成本，不用看代码就可以知道你的代码结构，核心属性和方法</li></ul><h3 id="画图工具" tabindex="-1"><a class="header-anchor" href="#画图工具" aria-hidden="true">#</a> <strong>画图工具</strong></h3>`,66),f={href:"https://www.processon.com/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("p",null,"MS Visio")],-1),x=s('<h3 id="单个类" tabindex="-1"><a class="header-anchor" href="#单个类" aria-hidden="true">#</a> <strong>单个类</strong></h3><p>三个区域</p><ul><li><p>类名</p></li><li><p>属性</p></li><li><p>方法</p></li></ul><p>权限描述</p><ul><li><p><code>+</code> public</p></li><li><p><code>#</code> protected</p></li><li><p><code>-</code> private</p></li></ul><p><img src="'+c+'" alt=""></p><h3 id="类图的几种关系" tabindex="-1"><a class="header-anchor" href="#类图的几种关系" aria-hidden="true">#</a> 类图的几种关系</h3><ul><li>实现 - 实现接口</li><li>泛化 - 继承</li><li>关联 - A 是 B 的一个属性 <ul><li>聚合 - 整体包含部分，部分可以脱离整体单独存在</li><li>组合 - 整体包含部分，部分不可脱离整体</li><li>依赖 - 不是属性，函数参数、返回值</li></ul></li></ul><p>【注意】聚合、组合、依赖，<strong>都属于关联关系</strong>，更加细化了。日常工作中没必要区分那么细致，都当做关联关系即可。</p><h4 id="实现接口" tabindex="-1"><a class="header-anchor" href="#实现接口" aria-hidden="true">#</a> 实现接口</h4><p>注意：TS 的 interface 和 Java 的不一样，TS 有属性，而 Java 的没有属性。而 UML 类图是依据 Java 语法而画的（没有属性区域），课程里也合并到一个区域了。</p><p><img src="'+u+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>otherName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛化-继承父类" tabindex="-1"><a class="header-anchor" href="#泛化-继承父类" aria-hidden="true">#</a> 泛化 - 继承父类</h4><p><img src="`+r+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span>otherName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>otherName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> eats something</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">city</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关联" tabindex="-1"><a class="header-anchor" href="#关联" aria-hidden="true">#</a> 关联</h4><p>分类</p><ul><li>单项关联 - 最常见</li><li>双向关联</li><li>自关联</li></ul><p><img src="`+d+`" alt=""></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Emplpyee</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  timeCard<span class="token operator">:</span> TimeCard
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> timeCard<span class="token operator">:</span> TimeCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>timeCard <span class="token operator">=</span> timeCard
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">TimeCard</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联关系的细化" tabindex="-1"><a class="header-anchor" href="#关联关系的细化" aria-hidden="true">#</a> 关联关系的细化</h3><h4 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h4><blockquote><p>整体包含部分，部分可以脱离整体单独存在</p></blockquote><p><img src="`+k+'" alt=""></p><h4 id="组合" tabindex="-1"><a class="header-anchor" href="#组合" aria-hidden="true">#</a> 组合</h4><blockquote><p>整体包含部分，部分<strong>不可</strong>脱离整体</p></blockquote><p><img src="'+m+'" alt=""></p><h4 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h4><blockquote><p>不是属性，函数参数、返回值</p></blockquote><p><img src="'+v+'" alt=""></p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>再次体会 UML 类图的作用</p><ul><li>单个类</li><li>类之间的关系</li><li>关联关系的细分，不必过于较真</li></ul><p><img src="'+h+'" alt=""></p><p><img src="'+b+'" alt=""></p><h2 id="_09-总结" tabindex="-1"><a class="header-anchor" href="#_09-总结" aria-hidden="true">#</a> 09：总结</h2><h3 id="内容回顾" tabindex="-1"><a class="header-anchor" href="#内容回顾" aria-hidden="true">#</a> 内容回顾</h3><ul><li>搭建 webpack + TS 环境</li><li>介绍 TS 类型</li><li>面向对象的概念和应用</li><li>画 UML 类图</li></ul><h3 id="重要细节" tabindex="-1"><a class="header-anchor" href="#重要细节" aria-hidden="true">#</a> 重要细节</h3><ul><li>TS 自定义 type 和 interface</li><li>TS 中的 <code>public</code> <code>protected</code> <code>private</code></li><li>面向三要素：继承 封装 多态</li><li>UML 类图 - 类之间的关系（箭头）</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li>TS 知识点很多，本章先讲基础，以后用到再补充</li><li>UML 类图一定要结合代码，综合理解</li></ul>',43);function _(S,T){const a=e("ExternalLinkIcon");return p(),i("div",null,[y,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[o("https://www.processon.com/"),l(a)])])]),w]),x])}const P=t(g,[["render",_],["__file","index-02.html.vue"]]);export{P as default};
