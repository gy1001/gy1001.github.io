import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t={},p=e(`<h1 id="_07-关于-javascript-的数据类型-你知多少" tabindex="-1"><a class="header-anchor" href="#_07-关于-javascript-的数据类型-你知多少" aria-hidden="true">#</a> 07-关于 JavaScript 的数据类型，你知多少？</h1><p>数据类型通常是一门编程语言的基础知识，JavaScript 的数据类型可以分为 7 种：<code>空（Null）</code>、<code>未定义（Undefined）</code>、<code>数字（Number）</code>、<code>字符串（String）</code>、<code>布尔值（Boolean）</code>、<code>符号（Symbol）</code>、<code>对象（Object）</code>。</p><p>其中前 6 种类型为<strong>基础类型</strong>，最后 1 种为<strong>引用类型</strong>。这两者的区别在于，基础类型的数据在被引用或拷贝时，是<strong>值传递</strong>，也就是说会创建一个完全相等的变量；而引用类型只是创建一个指针指向原有的变量，实际上两个变量是“共享”这个数据的，并没有重新创建一个新的数据。</p><p>下面我们就来分别介绍这 7 种数据类型的重要概念及常见操作。</p><h2 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h2><p><code>Undefined</code> 是一个很特殊的数据类型，它只有一个值，也就是 <code>undefined</code>。可以通过下面几种方式来得到 <code>undefined</code>：</p><ul><li>引用已声明但未初始化的变量；</li><li>引用未定义的对象属性；</li><li>执行无返回值函数；</li><li>执行 void 表达式；</li><li>全局常量 <code>window.undefined</code> 或 <code>undefined</code>。</li></ul><p>对应代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token comment">// undefined</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
o<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>
  <span class="token comment">// undefined</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token keyword">void</span> <span class="token number">0</span> <span class="token comment">// undefined</span>
window<span class="token punctuation">.</span>undefined <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中比较推荐通过 <code>void</code> 表达式来得到 <code>undefined</code> 值，因为这种方式既简便（<code>window.undefined</code> 或 <code>undefined</code> 常量的字符长度都大于 &quot;<code>void 0</code>&quot; 表达式）又不需要引用额外的变量和属性；同时它作为表达式还可以配合三目运算符使用，代表不执行任何操作。</p><p>如下面的代码就表示满足条件 x 大于 0 且小于 5 的时候执行函数 fn，否则不进行任何操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如何判断一个变量的值是否为 <code>undefined</code> 呢？ 下面的代码给出了 3 种方式来判断变量 x 是否为 <code>undefined</code>，你可以先思考一下哪一种可行。</p><ul><li>方式 1 直接通过<strong>逻辑取非</strong>操作来将变量 x 强制转换为布尔值进行判断；</li><li>方式 2 通过 3 个等号将变量 x 与 <code>undefined</code> 做<strong>真值比较</strong>；</li><li>方式 3 通过 typeof 关键字获取变量 x 的类型，然后与 &#39;<code>undefined</code>&#39; 字符串做<strong>真值比较：</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方式2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方式3</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在来揭晓答案，</p><ul><li>方式 1 不可行，因为只要变量 x 的值为 <code>undefined</code>、空字符串、数值 0、<code>null</code> 时都会判断为真。</li><li>方式 2 也存在一些问题，虽然通过 <code>“===”</code> 和 <code>undefined</code> 值做比较是可行的，但如果 x 未定义则会抛出错误 “<code>ReferenceError: x is not defined</code>” 导致程序执行终止，这对于代码的健壮性显然是不利的。</li><li>方式 3 则解决了这一问题。</li></ul><h2 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h2><p><code>Null</code> 数据类型和 <code>Undefined</code> 类似，只有唯一的一个值 <code>null</code>，都可以表示空值，甚至我们通过 “==” 来比较它们是否相等的时候得到的结果都是 <code>true</code>，但 <code>null</code> 是 <code>JavaScript</code> 保留关键字，而 <code>undefined</code> 只是一个常量。</p><p>也就是说我们可以声明名称为 <code>undefined</code> 的变量（虽然只能在老版本的 IE 浏览器中给它重新赋值），但将 <code>null</code> 作为变量使用时则会报错。</p><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h2><p><code>Boolean</code> 数据类型只有两个值：<code>true</code> 和 <code>false</code>，分别代表真和假，理解和使用起来并不复杂。但是我们常常会将各种表达式和变量转换成 <code>Boolean</code> 数据类型来当作判断条件，这时候就要注意了。</p><p>下面是一个简单地将星期数转换成中文的函数，比如输入数字 1，函数就会返回“星期一”，输入数字 2 会返回“星期二”，以此类推，如果未输入数字则返回 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getWeek</span><span class="token punctuation">(</span><span class="token parameter">week</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;日&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;二&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;六&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">星期</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dict<span class="token punctuation">[</span>week<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里在 if 语句中就进行了类型转换，将 <code>week</code> 变量转换成 <code>Boolean</code> 数据类型，而 <code>0、空字符串、null、undefined</code> 在转换时都会返回 <code>false</code>。所以这段代码在输入 0 的时候不会返回“星期日”，而返回 <code>undefined</code>。 我们在做强制类型转换的时候一定要考虑这个问题。</p><h2 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h2><h3 id="两个重要值" tabindex="-1"><a class="header-anchor" href="#两个重要值" aria-hidden="true">#</a> 两个重要值</h3><p><code>Number</code> 是数值类型，有 2 个特殊数值得注意一下，即 <code>NaN</code> 和 <code>Infinity</code>。</p><ul><li><code>NaN（Not a Number）</code>通常在计算失败的时候会得到该值。要判断一个变量是否为 <code>NaN</code>，则可以通过 <code>Number.isNaN</code> 函数进行判断。</li><li><code>Infinity</code> 是无穷大，加上负号 “-” 会变成无穷小，在某些场景下比较有用，比如通过数值来表示权重或者优先级，<code>Infinity</code> 可以表示最高优先级或最大权重。</li></ul><h3 id="进制转换" tabindex="-1"><a class="header-anchor" href="#进制转换" aria-hidden="true">#</a> 进制转换</h3><p>当我们需要将其他进制的整数转换成十进制显示的时候可以使用 <code>parseInt</code> 函数，该函数第一个参数为数值或字符串，第二个参数为进制数，默认为 <code>10</code>，当进制数转换失败时会返回 <code>NaN</code>。所以，如果在数组的 <code>map</code> 函数的回调函数中直接调用 <code>parseInt</code>，那么会将数组元素和索引值都作为参数传入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span> <span class="token comment">// [0, NaN, NaN]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而将十进制转换成其他进制时，可以通过 <code>toString</code> 函数来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1010&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="精度问题" tabindex="-1"><a class="header-anchor" href="#精度问题" aria-hidden="true">#</a> 精度问题</h3><p>对于数值类型的数据，还有一个比较值得注意的问题，那就是<strong>精度问题</strong>，在进行浮点数运算时很容易碰到。比如我们执行简单的运算 0.1 + 0.2，得到的结果是 0.30000000000000004，如果直接和 0.3 作相等判断时就会得到 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token comment">// 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现这种情况的原因在于计算的时候，<code>JavaScript</code> 引擎会先将十进制数转换为二进制，然后进行加法运算，再将所得结果转换为十进制。在进制转换过程中如果小数位是无限的，就会出现误差。同样的，对于下面的表达式，将数字 5 开方后再平方得到的结果也和数字 5 不相等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 5.000000000000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于这个问题的解决方法也很简单，那就是<strong>消除无限小数位</strong>。</p><ul><li>一种方式是先转换成整数进行计算，然后再转换回小数，这种方式适合在小数位不是很多的时候。比如一些程序的支付功能 API 以“分”为单位，从而避免使用小数进行计算。</li><li>还有另一种方法就是舍弃末尾的小数位。比如对上面的加法就可以先调用 <code>toPrecision</code> 截取 12 位，然后调用 <code>parseFloat</code> 函数转换回浮点数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p><code>String</code> 类型是最常用的数据类型了，关于它的基础 <code>API</code> 函数大家应该比较熟悉了，这里我就不多介绍了。下面通过一道笔试题来重点介绍它的使用场景。</p><p><strong>千位分隔符</strong>是指为了方便识别较大数字，每隔三位数会加入 1 个逗号，该逗号就是千位分隔符。如果要编写一个函数来为输入值的数字添加千分位分隔符，该怎么实现呢？</p><p>一种很容易想到的方法就是从右往左遍历数值每一位，每隔 3 位添加分隔符。为了操作方便，我们可以将数值转换成字符数组，而要实现从右往左遍历，一种实现方式是通过 for 循环的索引值找到对应的字符；而另一种方式是通过数组反转，从而变成从左到右操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sep</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\.\\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    i
      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> c <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> c
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式就是将字符串数据转化成引用类型数据，即用数组来实现。</p><p>第二种方式则是通过引用类型，即用正则表达式对字符进行替换来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sep2</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>str <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+\\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h3><p><code>Symbol</code> 是 ES6 中引入的新数据类型，它表示一个唯一的常量，通过 <code>Symbol</code> 函数来创建对应的数据类型，创建时可以添加变量描述，该变量描述在传入时会被强行转换成字符串进行存储。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>description <span class="token operator">===</span> b<span class="token punctuation">.</span>description <span class="token comment">// true</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>description <span class="token comment">// [object Object]</span>
<span class="token keyword">var</span> _a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
_a <span class="token operator">==</span> a <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上面的特性，<code>Symbol</code> 属性类型比较适合用于两类场景中：<strong>常量值和对象属性</strong>。</p><h3 id="避免常量值重复" tabindex="-1"><a class="header-anchor" href="#避免常量值重复" aria-hidden="true">#</a> 避免常量值重复</h3><p>假设有个 <code>getValue</code> 函数，根据传入的字符串参数 key 执行对应代码逻辑。代码如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;A&#39;</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">case</span> <span class="token string">&#39;B&#39;</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码对调用者而言非常不友好，因为代码中使用了魔术字符串（魔术字符串是指在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值），导致调用 <code>getValue</code> 函数时需要查看函数源码才能找到参数 key 的可选值。所以可以将参数 <code>key</code> 的值以常量的方式声明出来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alibaba</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">baidu</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">KEY</span><span class="token punctuation">.</span>alibaba<span class="token operator">:</span>
      <span class="token comment">// ...</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">KEY</span><span class="token punctuation">.</span>baidu<span class="token operator">:</span>
      <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">.</span>baidu<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这样也并非完美，假设现在我们要在 <code>KEY</code> 常量中加入一个 <code>key</code>，根据对应的规则，很有可能会出现值重复的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alibaba</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">baidu</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">bytedance</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这显然会出现问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">.</span>baidu<span class="token punctuation">)</span> <span class="token comment">// 等同于 getValue(KEY.bytedance)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以在这种场景下更适合使用 <code>Symbol</code>，我们不关心值本身，只关心值的<strong>唯一性</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alibaba</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">baidu</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">bytedance</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="避免对象属性覆盖" tabindex="-1"><a class="header-anchor" href="#避免对象属性覆盖" aria-hidden="true">#</a> 避免对象属性覆盖</h3><p>假设有这样一个函数 <code>fn</code>，需要对传入的对象参数添加一个临时属性 <code>user</code>，但可能该对象参数中已经有这个属性了，如果直接赋值就会覆盖之前的值。此时就可以使用 <code>Symbol</code> 来避免这个问题。</p><p>创建一个 <code>Symbol</code> 数据类型的变量，然后将该变量作为对象参数的属性进行赋值和读取，这样就能避免覆盖的情况，示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// {user: {id: xx, name: yy}}</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;zzz&#39;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补充-类型转换" tabindex="-1"><a class="header-anchor" href="#补充-类型转换" aria-hidden="true">#</a> 补充：类型转换</h2><h3 id="什么是类型转换" tabindex="-1"><a class="header-anchor" href="#什么是类型转换" aria-hidden="true">#</a> 什么是类型转换？</h3><p>JavaScript 这种弱类型的语言，相对于其他高级语言有一个特点，那就是在处理不同数据类型运算或逻辑操作时会强制转换成同一数据类型。如果我们不理解这个特点，就很容易在编写代码时产生 bug。</p><p>通常强制转换的目标数据类型为 <code>String</code>、<code>Number</code>、<code>Boolean</code> 这三种。下面的表格中显示了 6 种基础数据类型转换关系。</p><p><img src="https://s0.lgstatic.com/i/image/M00/17/C1/CgqCHl7XaNOAOR-5AAC7iyHcEyQ034.png" alt="前端07.png"></p><p>除了不同类型的转换之外，操作同种数据类型也会发生转换。把基本类型的数据换成对应的对象过程称之为“<strong>装箱转换</strong>”，反过来，把数据对象转换为基本类型的过程称之为“<strong>拆箱转换</strong>”。</p><p>对于装箱和拆箱转换操作，我们既可以显示地手动实现，比如将 <code>Number</code> 数据类型转换成 Number 对象；也可以通过一些操作触发浏览器显式地自动转换，比如将对 Number 对象进行加法运算。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 显式装箱</span>
o<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 显式拆箱</span>
n<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 隐式装箱, 实际操作：var tmp = new Number(n);tmp.toPrecision(3);tmp = null;</span>
o <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment">// 隐式拆箱，实际操作:var tmp = o.valueOf();tmp + 2;tmp = null;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么时候会触发类型转换" tabindex="-1"><a class="header-anchor" href="#什么时候会触发类型转换" aria-hidden="true">#</a> 什么时候会触发类型转换？</h3><p>下面这些常见的操作会触发隐式地类型转换，我们在编写代码的时候一定要注意。</p><ul><li><strong>运算相关的操作符</strong>包括 <code>+</code>、<code>-</code>、<code>+=</code>、<code>++</code>、<code>\\* </code>、<code>/</code>、<code>%</code>、<code>&lt;&lt;</code>、<code>&amp;</code> 等。</li><li><strong>数据比较相关的操作符</strong>包括 <code>&gt;</code>、<code>&lt;</code>、<code>==</code> 、<code>&lt;=</code>、<code>&gt;=</code>、<code>===</code>。</li><li><strong>逻辑判断相关的操作符</strong>包括 <code>&amp;&amp;</code>、<code>!</code>、<code>||</code>、<code>三目运算符</code>。</li></ul><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><p>相对于基础类型，引用类型 <code>Object</code> 则复杂很多。简单地说，<code>Object</code> 类型数据就是键值对的集合，键是一个字符串（或者 <code>Symbol</code>） ，值可以是任意类型的值； 复杂地说，<code>Object</code> 又包括很多子类型，比如 <code>Date</code>、<code>Array</code>、<code>Set</code>、<code>RegExp</code>。</p><p>对于 <code>Object</code> 类型，我们重点理解一种常见的操作，即深拷贝。</p><ul><li>由于引用类型在赋值时只传递指针，这种拷贝方式称为<strong>浅拷贝</strong>。</li><li>而创建一个新的与之相同的引用类型数据的过程称之为<strong>深拷贝</strong>。</li></ul><p>现在我们来实现一个拷贝函数，支持上面 7 种类型的数据拷贝。</p><p>对于 6 种基础类型，我们只需简单的赋值即可，而 <code>Object</code> 类型变量需要特殊操作。因为通过等号“=”赋值只是<strong>浅拷贝</strong>，要实现真正的拷贝操作则需要通过遍历键来赋值对应的值，这个过程中如果遇到 <code>Object</code> 类型还需要再次进行遍历。</p><p>为了准确判断每种数据类型，我们可以先通过 typeof 来查看每种数据类型的描述：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">it</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> it<span class="token punctuation">)</span> <span class="token comment">// [&quot;undefined&quot;, &quot;object&quot;, &quot;boolean&quot;, &quot;string&quot;, &quot;number&quot;, &quot;symbol&quot;, &quot;object&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现 <code>null</code> 有些特殊，返回结果和 <code>Object</code> 类型一样都为&quot;<code>object</code>&quot;，所以需要再次进行判断。按照上面分析的结论，我们可以写出下面的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> data
  keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> item
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历 <code>Object</code> 类型数据时，我们需要把 <code>Symbol</code> 数据类型也考虑进来，所以不能通过<code> Object.keys</code> 获取键名或 <code>for...in</code> 方式遍历，而是通过 <code>getOwnPropertyNames</code> 和 <code>getOwnPropertySymbols</code> 函数将键名组合成数组，然后进行遍历。对于键数组长度为 <code>0</code> 的非 <code>Object</code> 类型的数据可直接返回，然后再遍历递归，最终实现拷贝。</p><p>我们在编写递归函数的时候需要特别注意的是，递归调用的终止条件，避免无限递归。那在这个 <code>clone</code> 函数中有没有可能出现无限递归调用呢？</p><p>答案是有的。那就是当对象数据嵌套的时候，比如像下面这种情况，对象 a 的键 b 指向对象 b，对象 b 的键 a 指向对象 a，那么执行 <code>clone</code> 函数就会出现死循环，从而耗尽内存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
b<span class="token punctuation">.</span>a <span class="token operator">=</span> a
a<span class="token punctuation">.</span>b <span class="token operator">=</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么避免这种情况呢？一种简单的方式就是把已添加的对象记录下来，这样下次碰到相同的对象引用时，直接指向记录中的对象即可。要实现这个记录功能，我们可以借助 <code>ES6</code> 推出的 <code>WeakMap</code> 对象，该对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p><p>我们对 <code>clone</code> 函数改造一下，添加一个 <code>WeakMap</code> 来记录已经拷贝过的对象，如果当前对象已经被拷贝过，那么直接从 <code>WeakMap</code> 中取出，否则重新创建一个对象并加入 <code>WeakMap</code> 中。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">deep</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> data
    <span class="token keyword">const</span> exist <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exist<span class="token punctuation">)</span> <span class="token keyword">return</span> exist
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
    keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deep</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> item
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">deep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这一课时通过实例与原理相结合，带你深入理解了 <code>JavaScript</code> 的 <code>6 种基础数据类型</code>和 <code>1 种引用数据类型</code>。对于 <strong>6 种基础数据类型</strong>，我们要熟知它们之间的转换关系，而引用类型则比较复杂，重点讲了如何深拷贝一个对象。其实引用对象的子类型比较多，由于篇幅所限没有进行一一讲解，需要大家在平常工作中继续留心积累。</p><p>最后布置一道思考题：你能否写出一个函数来判断两个变量是否相等？</p><hr><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h5 id="amanda" tabindex="-1"><a class="header-anchor" href="#amanda" aria-hidden="true">#</a> Amanda：</h5><blockquote><p>已经有第 8 种类型了</p></blockquote><h5 id="玥" tabindex="-1"><a class="header-anchor" href="#玥" aria-hidden="true">#</a> **玥：</h5><blockquote><p>千位分隔符的第一种方法输入整数会输出整数+undefined</p></blockquote><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> **.：</h5><blockquote><p>自带千分位函数(1234567).toLocaleString()</p></blockquote><h6 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h6><blockquote><p>嗯，这是一个高效的方法，但最好指定语言环境，例如 (1234567).toLocaleString(&#39;zh-Hans-CN&#39;)</p></blockquote><h5 id="客" tabindex="-1"><a class="header-anchor" href="#客" aria-hidden="true">#</a> *客：</h5><blockquote><p>&quot;(10).toString(16)&quot; 这里为什么加了&quot;括号&quot;就可以用 toString 方法，不加的话就报错；加&quot;括号&quot;的话，编译器是做了什么吗？</p></blockquote><h6 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a> 讲师回复：</h6><blockquote><p>默认地，数字后的点号会被当成小数来进行解析，所以接“toString”会报错。而加了括号之后在进行词法分析的时候括号内的数字  10  就会被单独解析，和后面的属性  toString  以及参数  16  组合成一个表达式。</p></blockquote><h5 id="文" tabindex="-1"><a class="header-anchor" href="#文" aria-hidden="true">#</a> **文：</h5><blockquote><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p></blockquote><h5 id="用户-7763" tabindex="-1"><a class="header-anchor" href="#用户-7763" aria-hidden="true">#</a> **用户 7763：</h5><blockquote><p>关于改变 this 指向的，call，apply，bind…还有吗 😂😂</p></blockquote><h6 id="讲师回复-2" tabindex="-1"><a class="header-anchor" href="#讲师回复-2" aria-hidden="true">#</a> 讲师回复：</h6><blockquote><p>class 中 this 会指向类的实例。</p></blockquote><h5 id="池" tabindex="-1"><a class="header-anchor" href="#池" aria-hidden="true">#</a> **池：</h5><blockquote><p>这节课很奈斯～ 😇</p></blockquote><h5 id="聪" tabindex="-1"><a class="header-anchor" href="#聪" aria-hidden="true">#</a> *聪：</h5><blockquote><p>还有一种类型：BigInt</p></blockquote><h5 id="珍" tabindex="-1"><a class="header-anchor" href="#珍" aria-hidden="true">#</a> **珍：</h5><blockquote><p>关于浅拷贝，我感觉我很困惑。有些说浅拷贝是一层拷贝，有些浅拷贝是等号赋值。所以具体是哪个？我都懵了 😂</p></blockquote><h6 id="讲师回复-3" tabindex="-1"><a class="header-anchor" href="#讲师回复-3" aria-hidden="true">#</a> 讲师回复：</h6><blockquote><p>没理解你所说的“一层拷贝“~ 浅拷贝你可以理解为给变量起了个别名，并没有创建新的值。</p></blockquote><h5 id="盼" tabindex="-1"><a class="header-anchor" href="#盼" aria-hidden="true">#</a> *盼：</h5><blockquote><p>赞</p></blockquote>`,130),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","index-07.html.vue"]]);export{d as default};
