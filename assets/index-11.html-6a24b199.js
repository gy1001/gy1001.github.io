import{_ as a,p as e,q as i,a1 as h}from"./framework-e8cb8151.js";const r={},d=h('<h1 id="_11-软技能-沟通、总结和学习能力" tabindex="-1"><a class="header-anchor" href="#_11-软技能-沟通、总结和学习能力" aria-hidden="true">#</a> 11-软技能 - 沟通、总结和学习能力</h1><h2 id="_01-开始" tabindex="-1"><a class="header-anchor" href="#_01-开始" aria-hidden="true">#</a> 01:开始</h2><h3 id="为何考察" tabindex="-1"><a class="header-anchor" href="#为何考察" aria-hidden="true">#</a> 为何考察</h3><p>考察个人沟通，考察个人学习能力，考察如何总结项目难点等</p><h3 id="考察重点" tabindex="-1"><a class="header-anchor" href="#考察重点" aria-hidden="true">#</a> 考察重点</h3><ul><li>沟通能力</li><li>学习能力</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>如果技术面试不错，千万不要因为软技能掉链子</li></ul><h2 id="_02-是否看过红宝书" tabindex="-1"><a class="header-anchor" href="#_02-是否看过红宝书" aria-hidden="true">#</a> 02:是否看过红宝书</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>是否看过红宝书？</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>红宝书《Javascript 高级程序设计》是前端开发中最重要的一本书籍，面试官问这个问题，是观察你的学习能力和学习习惯。</p><p>此时你如果回答“没有看过”，那显然是不太符合面试官预期的。虽然不会因此而拒绝你，但如果之前已经累计了一些劣势，那这个问题有可能就是压倒骆驼的最后一根稻草。</p><h3 id="如果你看过" tabindex="-1"><a class="header-anchor" href="#如果你看过" aria-hidden="true">#</a> 如果你看过</h3><p>建议你再重新回顾一下这本书，写一篇《学习笔记》文章，这样记忆更深刻。毕竟跟面试官说看过，得说出一些实际的内容和干货。</p><h3 id="如果没看过" tabindex="-1"><a class="header-anchor" href="#如果没看过" aria-hidden="true">#</a> 如果没看过</h3><p>如果面试在即，实在没有时间去买来看，那就看一看这本书的目录，再去查一查别人写的读书笔记。大概了解一下这本书的内容。</p><p>然后你可以回复面试官：我没有详细看过，但我了解这本书的目录和主要内容 —— 这种答复也是可以接受的，如果你能说出一些实际内容。</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><p>日常学习的途径</p><ul><li>看博客 - 关注技术动态，不求甚解</li><li>看书 - 平心静气，细致学习</li><li>看视频 - 快速了解，追求效率，少走弯路</li></ul><p>最后记住一句话：<strong>浅层学习看输入，深入学习看输出</strong>。无论什么样的学习途径，最后都要输出，这样才能转化为你自己的知识。</p><h2 id="_03-如何做-code-review-要考虑哪些内容" tabindex="-1"><a class="header-anchor" href="#_03-如何做-code-review-要考虑哪些内容" aria-hidden="true">#</a> 03: 如何做 Code-review，要考虑哪些内容</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>如何做 code review ？</p><h3 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1" aria-hidden="true">#</a> 分析</h3><p>code review（简称 CR ）即代码走查。领导对下属的代码进行审查，或者同事之间相互审查。 CR 已经是现代软件研发流程中非常重要的一步，持续规范的执行 CR 可以保证代码质量，避免破窗效应。</p><h3 id="cr-检查什么" tabindex="-1"><a class="header-anchor" href="#cr-检查什么" aria-hidden="true">#</a> CR 检查什么</h3><ul><li>代码规范（eslint 能检查一部分，但不是全部，如：变量命名）</li><li>重复逻辑抽离、复用</li><li>单个函数过长，需要拆分</li><li>算法是否可优化?</li><li>是否有安全漏洞?</li><li>扩展性如何？</li><li>是否和现有的功能重复了？</li><li>是否有完善的单元测试</li><li>组件设计是否合理</li></ul><h3 id="何时-cr" tabindex="-1"><a class="header-anchor" href="#何时-cr" aria-hidden="true">#</a> 何时 CR</h3><p>提交 PR（或者 MR）时，看代码 diff 。给出评审意见，或者评审通过。可让领导评审，也可以同事之间相互评审。<br> 评审人要负责，不可形式主义。万一这段代码出了问题，评审人也要承担责任。</p><p>例行，每周组织一次集体 CR ，拿出几个 PR 或者几段代码，大家一起评审。<br> 可以借机来统一评审规则，也可以像新人来演示如何评审。</p><h3 id="持续优化" tabindex="-1"><a class="header-anchor" href="#持续优化" aria-hidden="true">#</a> 持续优化</h3><p>评审的问题要汇总起来，整理一个代码规范和常见问题，持续积累。持续宣讲，并让新成员学习。</p><h3 id="之前没做过-cr-怎么办" tabindex="-1"><a class="header-anchor" href="#之前没做过-cr-怎么办" aria-hidden="true">#</a> 之前没做过 CR 怎么办</h3><p>记住本节的内容，对 CR 有大概了解。至少面试时能讲出一点内容。</p><p>要如实回复面试官：我没做过 CR ，因为公司环境 xxx 。所以，我才想着去找个更大平台，开阔事业，多实践 —— 把它转换为你离职、要求进步的理由。</p><h2 id="_04-如何学习一门新语言-需要考虑哪些方面" tabindex="-1"><a class="header-anchor" href="#_04-如何学习一门新语言-需要考虑哪些方面" aria-hidden="true">#</a> 04: 如何学习一门新语言，需要考虑哪些方面</h2><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p>如何学习一门新语言，需要考虑哪些方面？</p><h3 id="分析-2" tabindex="-1"><a class="header-anchor" href="#分析-2" aria-hidden="true">#</a> 分析</h3><p>考察你的学习能力和习惯，有没有在学习中积累到经验和方法论。毕竟，前端需要学习的东西太多了。</p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><ul><li>应用场景和优势 —— 存在的价值</li><li>语法（变量和常量，数据类型，运算符，函数等）</li><li>内置模块 和 API</li><li>第三方库和框架</li><li>开发环境和调试工具</li><li>线上环境和发布过程</li></ul><h2 id="_05-你觉得自己还有哪些不足之处" tabindex="-1"><a class="header-anchor" href="#_05-你觉得自己还有哪些不足之处" aria-hidden="true">#</a> 05: 你觉得自己还有哪些不足之处？</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>你目前有何不足的地方？</p><h3 id="分析-3" tabindex="-1"><a class="header-anchor" href="#分析-3" aria-hidden="true">#</a> 分析</h3><p>如果你被问到这个问题，那恭喜你面试快要通过了。一般在 3-4 面，或者 hr 面试时会问道这个问题。<br> 无论是 hr 还是技术人员问，你都要从技术角度来回答这个问题，说自己技术上的不足。不要扯其他方面的，容易掉到坑里。</p><p>你不用担心 hr 听不懂技术，听不懂更好。</p><h3 id="不足-不要乱说" tabindex="-1"><a class="header-anchor" href="#不足-不要乱说" aria-hidden="true">#</a> 不足，不要乱说</h3><p>要限定一个范围</p><ul><li>技术方面的</li><li>非核心技术栈的，即有不足也无大碍</li><li>些容易弥补的，后面才能“翻身”</li></ul><p>错误的示范</p><ul><li>我爱睡懒觉、总是迟到 —— 非技术方面</li><li>我自学的 Vue ，但还没有实践过 —— 核心技术栈</li><li>我不懂 React —— 技术栈太大，不容易弥补</li></ul><p>正确的示范</p><ul><li>脚手架，我还在学习中，还不熟练</li><li>nodejs 还需要继续深入学习</li></ul><h3 id="最后-要把话题反转回来" tabindex="-1"><a class="header-anchor" href="#最后-要把话题反转回来" aria-hidden="true">#</a> 最后，要把话题反转回来</h3><p>不能只说不足，就截止了。一定要通过不足，来突出自己的解决方案，以及未来的预期。<br> 这样给人的印象是：正式了自己的不足 + 有学习的态度 —— 非常好！</p><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><p>套这个模板</p><ul><li>我觉得自己在 xxx 方面还存在不足</li><li>但我已经意识到并且开始学习 xxx</li><li>争取在 xxx 时候把这块补齐</li></ul><h2 id="_06-总结" tabindex="-1"><a class="header-anchor" href="#_06-总结" aria-hidden="true">#</a> 06: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解软技能相关面试题。 考察个人沟通，考察个人学习能力，考察如何总结项目难点等</p><h3 id="考察重点-1" tabindex="-1"><a class="header-anchor" href="#考察重点-1" aria-hidden="true">#</a> 考察重点</h3><ul><li>沟通能力</li><li>学习能力</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li>如果技术面试不错，千万不要因为软技能掉链子</li></ul>',70),l=[d];function n(c,t){return e(),i("div",null,l)}const p=a(r,[["render",n],["__file","index-11.html.vue"]]);export{p as default};
