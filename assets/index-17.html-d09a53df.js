import{_ as t,M as o,p as c,q as l,R as n,t as s,N as e,a1 as p}from"./framework-e8cb8151.js";const i="/assets/image-20230905233927997-d29bd21c.png",r={},u=p('<h1 id="_17-webpack-优化之体积优化" tabindex="-1"><a class="header-anchor" href="#_17-webpack-优化之体积优化" aria-hidden="true">#</a> 17-Webpack 优化之体积优化</h1><p><img src="'+i+'" alt="image-20230905233927997"></p><blockquote><p>自信和希望是青年的特权。 ——大仲马</p></blockquote><p>Webpack 毕竟是个项目打包工具，一般 web 项目，打完包之后，需要发布到服务器上供用户使用，受带宽的限制，我们的项目体积需要越小越好，所以 Webpack 中打包的体积是 Webpack 中重要的一环，</p><p>本小节内容将从 JavaScript、CSS 和其他静态资源体积优化入手，介绍项目的体积优化方案。</p><h2 id="javascript-压缩" tabindex="-1"><a class="header-anchor" href="#javascript-压缩" aria-hidden="true">#</a> JavaScript 压缩</h2>',6),d=n("code",null,"mode=production",-1),k={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/terser-js/terser",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>UglifyJS 在压缩 ES5 方面做的很优秀，但是随着 ES6 语法的普及，UglifyJS 在 ES6 代码压缩上做的不够好，所以有了<code>uglify-es</code>项目，但是之后<code>uglify-es</code>项目不在维护了，terser 是从<code>uglify-es</code>项目拉的一个分支，来继续维护。</p><p>terser-webpack-plugin 具有跟 Uglifyjs-webpack-plugin 相同的参数，我们在 Webpack 中可以通过配置文件直接调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发中，我们可以通过移出一些不用的代码从而达到优化代码体积的作用，Tree-Shaking 也是依赖这个插件的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 使用 cache，加快二次构建速度</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 删除无用的代码</span>
      <span class="token literal-property property">unused</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// 删掉 debugger</span>
      <span class="token literal-property property">drop_debugger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// eslint-disable-line</span>
      <span class="token comment">// 移除 console</span>
      <span class="token literal-property property">drop_console</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// eslint-disable-line</span>
      <span class="token comment">// 移除无用的代码</span>
      <span class="token literal-property property">dead_code</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// eslint-disable-line</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>压缩是发布前处理最耗时间的一个步骤，在 Webpack 配置中可以通过开启 terser-webpack-plugin 的多线程压缩来加速我们的构建压缩速度：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span>
      <span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token comment">// 多线程</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他代码级别优化技巧" tabindex="-1"><a class="header-anchor" href="#其他代码级别优化技巧" aria-hidden="true">#</a> 其他代码级别优化技巧</h3>`,8),b=n("li",null,"合理划分代码职责，适当使用按需加载方案；",-1),g=n("li",null,"善用 webpack-bundle-analyzer 插件，帮助分析 Webpack 打包后的模块依赖关系；",-1),_=n("li",null,"设置合理的 SplitChunks 分组；",-1),h={href:"https://github.com/ant-design/babel-plugin-import",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"使用 lodash、momentjs 这类库，不要一股脑引入，要按需引入，momentjs 可以用 date-fns 库来代替；",-1),f=n("li",null,"合理使用 hash 占位符，防止 hash 重复出现，导致文件名变化从而 HTTP 缓存过期；",-1),S=n("li",null,"合理使用 polyfill，防止多余的代码；",-1),w=n("li",null,"使用 ES6 语法，尽量不使用具有副作用的代码，以加强 Tree-Shaking 的效果；",-1),x=n("li",null,"使用 Webpack 的 Scope Hoisting（作用域提升）功能。",-1),j=p(`<blockquote><p>Tips：其实 webpack 4 中，在 production 模式下已经根据大多数项目的优化经验做了通用的配置，类似 Tree-Shaking、Scope Hoisting 都是默认开启的，而且最新版本的 Webpack 使用的压缩工具就是 terser-webpack-plugin。</p></blockquote><h3 id="什么是-scope-hoisting" tabindex="-1"><a class="header-anchor" href="#什么是-scope-hoisting" aria-hidden="true">#</a> 什么是 Scope Hoisting</h3><p>作用域提升（Scope Hoisting）是指 webpack 通过 ES6 语法的静态分析，分析出模块之间的依赖关系，尽可能地把模块放到同一个函数中。下面通过代码示例来理解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;Hello, Webpack&#39;</span>
<span class="token comment">// entry.js</span>
<span class="token keyword">import</span> str <span class="token keyword">from</span> <span class="token string">&#39;./util.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通打包后，<code>utils.js</code>的内容和<code>entry.js</code>会分开，例如下面代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__util_js__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__WEBPACK_IMPORTED_MODULE_0__util_js__<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    __webpack_exports__<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Hello, Webpack&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置 webpack 4 的<code>optimization.concatenateModules=true</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就开启了 Scope Hoisting，这时候打包变成了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token string">&#39;Hello, Webpack&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现<code>utils.js</code>内容和<code>entry.js</code>的内容合并在一起了！</p><p>所以通过 Scope Hoisting 的功能可以让 Webpack 打包出来的代码文件更小、运行的更快。</p><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><p>除了 JavaScript 外，样式文件也是前端中重要的资源，Webpack 本身是 JavaScript 的打包器，在 CSS 方面通过强大的插件社区，可以实现 CSS 的优化。</p><h3 id="css-导出" tabindex="-1"><a class="header-anchor" href="#css-导出" aria-hidden="true">#</a> CSS 导出</h3>`,15),C=n("code",null,"style-loader",-1),W=n("code",null,"addStyles",-1),P={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},z=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].css&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[contenthash:8].css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">hmr</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得 CSS 章节介绍的<code>contenthash</code>吗，在 CSS 中推荐使用<code>[contenthash]</code>这个占位符做文件的 hash 算法。</p><h3 id="css-压缩-cssnano" tabindex="-1"><a class="header-anchor" href="#css-压缩-cssnano" aria-hidden="true">#</a> CSS 压缩：cssnano</h3>`,3),E={href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer"},T=p(`<ul><li>删除空格和最后一个分号；</li><li>删除注释；</li><li>优化字体权重；</li><li>丢弃重复的样式规则；</li><li>压缩选择器；</li><li>减少手写属性；</li><li>合并规则；</li><li>…</li></ul><p>我们来看个 cssnano 处理之前和处理之后的 CSS 内容就能体会到 cssnano 的强大功能了：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* input */</span>
<span class="token selector">.a</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.b</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.c</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.d</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* output */</span>
<span class="token selector">.a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.a,
.b</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.b,
.c</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.c</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.c,
.d</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.d</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察上面输入和输出的内容差异，我们发现 cssnano 很智能，它能够将 CSS 规则相同的选择器进行合并，并且还能够将<code>color</code>进行任意的切换，这样的意义是为了缩短实际的字符串长度。</p>`,4),q={href:"https://github.com/NMFR/optimize-css-assets-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>optimize-css-assets-webpack-plugin 是一个 CSS 的压缩插件，默认的压缩引擎就是 cssnano。</p><p>我们来看下怎么在 Webpack 中使用这个插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> OptimizeCssAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">assetNameRegExp</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.optimize\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">cssProcessor</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cssnano&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 这里制定了引擎，不指定默认也是 cssnano</span>
      <span class="token literal-property property">cssProcessorPluginOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">discardComments</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">removeAll</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">canPrint</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>optimize-css-assets-webpack-plugin 插件默认的 cssnano 配置已经做的很友好了，不需要额外的配置就可以达到最佳效果。</p><h2 id="图片资源优化" tabindex="-1"><a class="header-anchor" href="#图片资源优化" aria-hidden="true">#</a> 图片资源优化</h2><p>通常我们的代码体积会比图片体积小很多，有的时候整个页面的代码都不如一张头图大。</p><p>好在图片资源不会阻塞浏览器渲染，但是不合理的图片大小也会消耗一定的代码。</p><p>在之前章节中也已经提到使用：url-loader、svg-url-loader 和 image-webpack-loader 来优化图片，还介绍了使用雪碧图来优化图片资源。</p>`,8),J={href:"https://github.com/webpack-contrib/url-loader",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"limit",-1),N=n("code",null,"options",-1),U={href:"https://css-tricks.com/data-uris/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/bhovhannes/svg-url-loader",target:"_blank",rel:"noopener noreferrer"},G={href:"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding",target:"_blank",rel:"noopener noreferrer"},I={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/CSS_Image_Sprites",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"background-position",-1),B={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),A=n("p",null,"本小节是 Webpack 优化的第一篇文章，本文从体积优化方面入手，分别从前端项目中最常见的 JavaScript、CSS 和图片三部分入手，介绍了各自的优化方案，希望对大家项目的实际应用中有所帮助。",-1),D=n("blockquote",null,[n("p",null,"本小节 Webpack 相关面试题："),n("p",null,"本章节一直在回答一个问题：webpack 怎么优化。本小节主要从减少代码体积方面来介绍 Webpack 优化方案。")],-1);function L(F,K){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("在"),d,s("下，Webpack 会自动压缩代码，我们可以自定义自己的压缩工具，这里推荐 "),n("a",k,[s("terser-webpack-plugin"),e(a)]),s("，它是 Webpack 官方维护的插件，使用"),n("a",v,[s("terser"),e(a)]),s("来压缩 JavaScript 代码。")]),m,n("ol",null,[b,g,_,n("li",null,[s("对于一些 UI 组件库，例如 AntDesign、ElementUI 等，可以使用"),n("a",h,[s("bable-plugin-import"),e(a)]),s("这类工具进行优化；")]),y,f,S,w,x]),j,n("p",null,[s("首先我们的 CSS 文件应该是导出到单独的 CSS 文件中，而不要直接打包到 JavaScript 文件中，然后通过"),C,s("的 "),W,s("方法添加进去，导出 CSS 文件就需要使用"),n("a",P,[s("mini-css-extract-plugin"),e(a)]),s("这个插件。")]),z,n("p",null,[n("a",E,[s("cssnano"),e(a)]),s("是基于 postcss 的一款功能强大的插件包，它集成了 30 多个插件，只需要执行一个命令，就可以对我们的 CSS 做多方面不同类型的优化，比如：")]),T,n("p",null,[s("在 Webapck 中，css-loader 已经集成了 cssnano，我们还可以使用"),n("a",q,[s("optimize-css-assets-webpack-plugin"),e(a)]),s("来自定义 cssnano 的规则。")]),H,n("p",null,[n("a",J,[s("url-loader"),e(a)]),s(" 可以按照配置将小于一定体积的静态文件内联进我们的应用。")]),n("p",null,[s("当我们指定了 "),M,s(" 这个 "),N,s(" 选项，它会将文件编码成比无配置更小的 "),n("a",U,[s("Base64 的数据 url"),e(a)]),s(" 并将该 url 返回，这样可以将图片内联进 JavaScript 代码中，并节省一次 HTTP 请求。")]),n("p",null,[n("a",O,[s("svg-url-loader"),e(a)]),s(" 的工作原理类似于 url-loader，除了它利用 "),n("a",G,[s("URL encoding"),e(a)]),s(" 而不是 Base64 对文件编码，对于 SVG 图片来说，svg-url-loader 的这种方式这是有效的，因为 SVG 文件本质上是纯文本文件，这种 URL encoding 编码规模效应更加明显。")]),n("p",null,[s("如果我们的项目中小图片特别多，例如有很多 icon 类的图标，这时候则推荐使用"),n("a",I,[s("雪碧图"),e(a)]),s("（CSS Sprite）来合并这些小图到一张大图中，然后使用"),V,s("来设置图片的位置，通过这样的方式可以节省多次小图片的请求。")]),n("p",null,[s("对于大图片来说，可以使用"),n("a",B,[s("image-webpack-loader"),e(a)]),s("来压缩图片，image-webpack-loader 它支持 JPG、PNG、GIF 和 SVG 格式的图片，因此我们在碰到所有这些类型的图片都会使用它。")]),R,A,D])}const Q=t(r,[["render",L],["__file","index-17.html.vue"]]);export{Q as default};
