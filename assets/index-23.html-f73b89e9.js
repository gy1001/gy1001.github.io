import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t="/assets/5f558f5a0001c88706400426-241e2b84.jpg",i="/assets/5f558fa900012c5e21700294-55f5f19b.png",o="/assets/5f558fb10001e6ec18780382-23a8e17a.png",c="/assets/5f558fb900013a7c18740424-84103eb9.png",p="/assets/5f558fc200018bca18780376-3d5a9402.png",l={},r=e('<h1 id="_23-docker-最佳实践如何构建最小的镜像" tabindex="-1"><a class="header-anchor" href="#_23-docker-最佳实践如何构建最小的镜像" aria-hidden="true">#</a> 23-Docker 最佳实践如何构建最小的镜像</h1><p><img src="'+t+'" alt="img"></p><blockquote><p>与有肝胆人共事，从无字句处读书。——周恩来</p></blockquote><p>镜像作为 Docker 技术中关键的一环，我们日常开发中的一个关键工作就是将我们的应用构建成镜像，然后使用容器集群管理框架，比如 Kubernetes，将镜像部署集群中的多台容器中。</p><p>这个过程中就涉及到镜像的分发问题，如果镜像比较大的话，会导致我们的应用启动时间比较长。虽然有一些镜像分发技术来解决镜像发布的效率问题，但是我们还是希望将镜像构建的越来越小。这篇文章我们就来看一下这个具体的问题：如何构建最小的镜像？</p><h2 id="_1-基础镜像" tabindex="-1"><a class="header-anchor" href="#_1-基础镜像" aria-hidden="true">#</a> 1. 基础镜像</h2><p>构建镜像，或者说编写 Dockerfile 的第一步就是 <code>FROM &lt;base-image&gt;</code> ，这个 base-image 如何选择直接关系到我们最终的镜像大小。</p><h4 id="操作系统镜像" tabindex="-1"><a class="header-anchor" href="#操作系统镜像" aria-hidden="true">#</a> 操作系统镜像</h4><p>一个完整的操作系统一般都比较大。在使用操作系统镜像之前，首先要问自己一个问题是不是真的需要使用一个完整的操作系统镜像。操作系统镜像包含完整的操作系统文件，包括一些 lib 和 bin 文件，如果要使用完整的操作系统里面的 bin 工具可能需要其他一个完整的操作系统镜像，其他情况一些一般都不需要。</p><p>作为完整的操作系统镜像的替代，我们可以使用定制化的操作系统镜像，比如 alpine。在我的 Linux 机器上，完整的 ubuntu 和 alpine 镜像相差达到将近 12 倍。</p><p><img src="'+i+'" alt="图片描述"></p><h4 id="语言开发环境镜像" tabindex="-1"><a class="header-anchor" href="#语言开发环境镜像" aria-hidden="true">#</a> 语言开发环境镜像</h4><p>有些应用需要特定的开发环境来运行，比如 Java 应用需要 JVM 环境，Python 应用需要 Python 环境（作为对比，C 或者 C++ 应用编译成二进制之后则可以直接运行在操作系统中）。</p><p>很多刚开始接触 Docker 的新手遇到这个场景，直接 FROM 一个操作系统镜像，然后在镜像中运行类似 <code>yum install</code> 的命令直接安装 Python 的开发环境，且不说这种在 Dockerfile 中直接安装软件的方式的好坏，使用操作系统镜像一定引入了很多我们不需要的文件，这无疑增加了最终的镜像大小。</p><p>实际上，基本每种开发环境都有自己的独立镜像。比如，</p><h5 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h5><p><img src="'+o+'" alt="图片描述"></p><h5 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h5><p><img src="'+c+'" alt="图片描述"></p><h5 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h5><p><img src="'+p+`" alt="图片描述"></p><p>那么我们在使用的时候就可以按需使用这些镜像，而不是基于操作系统自己来构建了。</p><h4 id="scratch-镜像" tabindex="-1"><a class="header-anchor" href="#scratch-镜像" aria-hidden="true">#</a> scratch 镜像</h4><p>写过 Go 语言程序的同学都知道 Go 应用采用的是静态编译的方式，所有的依赖都会被打包到二进制文件中。这时候我们要构建 Go 语言应用的镜像就会异常地简单，只需要将二进制文件拷贝到基础镜像中即可。那么这个时候我们的基础镜像选什么呢？当然可以选一个操作系统镜像或者定制化的操作系统镜像，但是这样会显得稍微有点浪费。</p><p>这个时候我们可以考虑使用 scratch 镜像，scratch 镜像是 Docker 保留镜像，只能用来构建其他镜像。</p><p>下面我们用实例演示一下用 scratch 镜像构建我们的应用。我们先用 Go 语言编写一个简单的 http server，代码如下。功能很简单，启动一个 http server 监听 8091 端口。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;hello\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8091&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过 <code>go build</code> 命令编译出二进制文件，指定 CGO_ENABLED=0 表示是静态编译。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx code<span class="token punctuation">]</span><span class="token comment"># CGO_ENABLED=0 go build -o http-server</span>
<span class="token punctuation">[</span>root@xxx code<span class="token punctuation">]</span><span class="token comment"># ls -lh</span>
total <span class="token number">7</span>.2M
-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">64</span> Jun <span class="token number">25</span> 00:24 Dockerfile
-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">7</span>.1M Jun <span class="token number">25</span> 00:45 http-server
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">230</span> Jun <span class="token number">25</span> 00:44 http-server.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 Dockerfile 如下，是不是非常的简单。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
<span class="token instruction"><span class="token keyword">ADD</span> http-server /</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8091</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/http-server&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过 docker build 构建镜像，构建出来的镜像只有 7.47MB，对比上面的二进制文件 7.2M，scratch 镜像只有几百 k 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx code<span class="token punctuation">]</span><span class="token comment"># docker build -t http-server:v1 .</span>
Sending build context to Docker daemon  <span class="token number">7</span>.473MB
Step <span class="token number">1</span>/4 <span class="token builtin class-name">:</span> FROM scratch
 ---<span class="token operator">&gt;</span>
Step <span class="token number">2</span>/4 <span class="token builtin class-name">:</span> ADD http-server /
 ---<span class="token operator">&gt;</span> 002016c837b3
Step <span class="token number">3</span>/4 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">8091</span>
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> db4b0ac373cd
Removing intermediate container db4b0ac373cd
 ---<span class="token operator">&gt;</span> 2f2e6000e845
Step <span class="token number">4</span>/4 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">&quot;/http-server&quot;</span><span class="token punctuation">]</span>
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> cdce752a3f60
Removing intermediate container cdce752a3f60
 ---<span class="token operator">&gt;</span> 8445f4264352
Successfully built 8445f4264352
Successfully tagged http-server:v1
<span class="token punctuation">[</span>root@xxx code<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
http-server         v1                  8445f4264352        <span class="token number">12</span> seconds ago      <span class="token number">7</span>.41MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们验证一下应用是不是可以正常工作。通过下面的 <code>docker run</code> 命令启动。其中的 <code>-p</code> 用于将容器的端口 8091 和宿主机的端口 8091 进行映射。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx code<span class="token punctuation">]</span><span class="token comment"># docker run -d -p 8091:8091 http-server:v1</span>
827aee4de71950d3878c58c4b13b69c844514acd60e48de916a8938906c50727
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们访问一下 http server 看看是不是 work。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># curl localhost:8091/hello</span>
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-多阶段构建" tabindex="-1"><a class="header-anchor" href="#_2-多阶段构建" aria-hidden="true">#</a> 2. 多阶段构建</h2><p>多阶段构建是 Docker 官方提出来的概念，原文是 multi-stage build，也是一种用来构建最小镜像的方案。多阶段构建是 Docker 17.05 或者更高版本之后提出来的特性，不仅可以用来减小最小生成的镜像的体积，还可以保持 Dockerfile 文件的可读性和可维护性。</p><p>我们在上面的一个演示 scratch 镜像的时候，Dockerfile 中直接将 Go 应用的二进制文件 COPY 到镜像中，但是在实际的开发中，为了保证多个开发成员的开发环境一致，一般会建议用一个同一个开发或者打包环境。在 Docker 之前，这个打包环境可能是一台机器，但是有了 Docker 之后，我们就可以用 Docker 来替代了。比如 Go 语言的编译打包，我们可以统一使用一个基础镜像来构建我们的镜像就可以了。下面是一个示例，其中 app.go 是开发者开发的程序。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.13.3</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/alexellis/href-counter/</span>
<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v golang.org/x/net/html  </span>
<span class="token instruction"><span class="token keyword">COPY</span> app.go .</span>
<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的 Dockerfile 我们就可以编译出来可执行文件。有了可执行文件，我们部署可以有两种方式：</p><p><strong>1. 直接在原 Dockerfile 中修改使用</strong></p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.13.3</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/alexellis/href-counter/</span>
<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v golang.org/x/net/html  </span>
<span class="token instruction"><span class="token keyword">COPY</span> app.go .</span>
<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./app&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 将可执行文件 COPY 出来使用</strong></p><p>第一种方式应该是大部分人使用的方式，这种方式比较简单，但是对于最终的部署镜像来说，引入了太多不必要的文件，比如 Go 编译环境。</p><p>第二种方式可能是一种更好的方式，我们部署的时候可以直接使用 scratch 镜像，这样最终的镜像会小很多。但是 COPY 的方案可能需要斟酌，比如通过 volume 的方式，将容器目录映射到宿主机目录，然后进行手动拷贝。但是这些手工操作可能会引入其他问题。这里就引入了多阶段构建的概念。</p><p>简单来说，多阶段构建允许我们在一个 Dockerfile 中使用多个 <code>FROM</code> 指令，每个 <code>FROM</code> 可以使用不同的 base 镜像，每个 <code>FROM</code> 会对应一个阶段（stage），所谓多阶段就是多个 <code>FROM</code> 的意思。下面是一个示例。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.13.3</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/alexellis/href-counter/</span>
<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v golang.org/x/net/html  </span>
<span class="token instruction"><span class="token keyword">COPY</span> app.go .</span>
<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span>

<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest  </span>
<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add ca-certificates</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">0</span></span> /go/src/github.com/alexellis/href-counter/app .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./app&quot;</span>]  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的 Dockerfile 中的第 10 行中的 <code>COPY --from=0</code> 就是从阶段 0 拷贝文件。</p><p>多阶段构建的 Dockerfile 使用起来和其他 Dockerfile 没有区别，这样我们只要维护一个 Dockerfile 就可以。下面介绍一些多阶段构建的其他使用方式。</p><h4 id="stage-命名" tabindex="-1"><a class="header-anchor" href="#stage-命名" aria-hidden="true">#</a> stage 命名</h4><p>我们上面的例子中是通过 <code>--from=0</code> 来指定 stage 的，我们也可以为每个 stage 指定一个更具有可读性的名字，示例如下。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.13.3 builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/alexellis/href-counter/</span>
<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v golang.org/x/net/html  </span>
<span class="token instruction"><span class="token keyword">COPY</span> app.go .</span>
<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span>

<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest deployment</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add ca-certificates</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /go/src/github.com/alexellis/href-counter/app .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./app&quot;</span>]  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行到指定的-stage" tabindex="-1"><a class="header-anchor" href="#执行到指定的-stage" aria-hidden="true">#</a> 执行到指定的 stage</h4><p>我们的 Dockerfile 中定一个了一个完整的流程，有的时候没有必要执行完整个流程，那么我们可以通过下面的方式让 docker build 执行到指定的 stage 就不再进行下去。下面的例子是执行到 builder stage。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">--target</span> builder <span class="token parameter variable">-t</span> alexellis2/href-counter:latest <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-定制自己的-base-镜像" tabindex="-1"><a class="header-anchor" href="#_3-定制自己的-base-镜像" aria-hidden="true">#</a> 3. 定制自己的 base 镜像</h2><p>如果我们的很多镜像都有一些共同的部分，比如一些基础环境和二进制工具，那么可以考虑将这些共同的部分抽出来创建一个自己的 base 镜像，然后其他镜像基于这个 base 镜像来构建。</p><p>这么做的一个好处是，Docker 只需要加载一次这些共同的文件层就会自动缓存。这样其他基于这个 base 的镜像也会更快。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>本文介绍如何最小化构建我们的镜像的一些策略，主要介绍了三种方式：选取合适的 base 镜像；多阶段构建；定制 base 镜像。然后重点介绍了前两种方式，这两种方式也是减小构建出来的镜像体积的最有效的方式。</p>`,62),d=[r];function u(k,v){return s(),a("div",null,d)}const m=n(l,[["render",u],["__file","index-23.html.vue"]]);export{m as default};
