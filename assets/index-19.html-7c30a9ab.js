import{_ as e,M as o,p as c,q as l,R as n,t as s,N as t,a1 as p}from"./framework-e8cb8151.js";const i="/assets/image-20230811144119311-44ada5dc.png",u="/assets/image-20230811144138083-d14bd8d9.png",r="/assets/image-20230811144159745-c440be53.png",k="/assets/image-20230811144214191-d72be30a.png",d={},v=n("h1",{id:"_19-策略模式-给螺丝刀换刀头",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_19-策略模式-给螺丝刀换刀头","aria-hidden":"true"},"#"),s(" 19-策略模式：给螺丝刀换刀头")],-1),m=n("p",null,[n("img",{src:"https://img1.mukewang.com/5d107a3a00012a9d06400359.jpg",alt:"img"})],-1),b=n("blockquote",null,[n("p",null,"学习这件事不在乎有没有人教你，最重要的是在于你自己有没有觉悟和恒心。 —— 法布尔")],-1),g=n("p",null,[n("strong",null,"策略模式"),s(" （Strategy Pattern）又称政策模式，其定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。封装的策略算法一般是独立的，策略模式根据输入来调整采用哪个算法。关键是策略的"),n("strong",null,"实现和使用分离"),s("。")],-1),y=n("strong",null,"注意：",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},h={href:"http://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},_={href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},w={href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.im/post/5b51e5d3f265da0f4861143c#heading-5",target:"_blank",rel:"noopener noreferrer"},x=p('<h2 id="_1-你曾见过的策略模式" tabindex="-1"><a class="header-anchor" href="#_1-你曾见过的策略模式" aria-hidden="true">#</a> 1. 你曾见过的策略模式</h2><p>现在电子产品种类繁多，尺寸多种多样，有时候你会忍不住想拆开看看里面啥样（想想小时候拆的玩具车还有遥控器），但是螺丝规格很多，螺丝刀尺寸也不少，如果每碰到一种规格就买一个螺丝刀，家里就得堆满螺丝刀了。所以现在人们都用多功能的螺丝刀套装，螺丝刀把只需要一个，碰到不同规格的螺丝只要换螺丝刀头就行了，很方便，体积也变小很多。</p><p><img src="'+i+`" alt="image-20230811144119311"></p><p>再举个栗子，一辆车的轮胎有很多规格，在泥泞路段开的多的时候可以用泥地胎，在雪地开得多可以用雪地胎，高速公路上开的多的时候使用高性能轮胎，针对不同使用场景更换不同的轮胎即可，不需更换整个车。</p><p>这些都是策略模式的实例，螺丝刀/车属于封装上下文，封装和使用不同的螺丝刀头/轮胎，螺丝刀头/轮胎这里就相当于策略，可以根据需求不同来更换不同的使用策略。</p><p>在这些场景中，有以下特点：</p><ol><li>螺丝刀头/轮胎（策略）之间相互独立，但又可以相互替换；</li><li>螺丝刀/车（封装上下文）可以根据需要的不同选用不同的策略；</li></ol><h2 id="_2-实例的代码实现" tabindex="-1"><a class="header-anchor" href="#_2-实例的代码实现" aria-hidden="true">#</a> 2. 实例的代码实现</h2><p>具体的例子我们用编程上的例子来演示，比较好量化。</p><p>场景是这样的，某个电商网站希望举办一个活动，通过打折促销来销售库存物品，有的商品满 100 减 30，有的商品满 200 减 80，有的商品直接 8 折出售（想起被双十一支配的恐惧），这样的逻辑交给我们，我们要怎样去实现呢。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>discountType <span class="token operator">===</span> <span class="token string">&#39;minus100_30&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 满100减30</span>
    <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>discountType <span class="token operator">===</span> <span class="token string">&#39;minus200_80&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 满200减80</span>
    <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">80</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>discountType <span class="token operator">===</span> <span class="token string">&#39;percent80&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 8折</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.8</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token string">&#39;minus100_30&#39;</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 210</span>
<span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token string">&#39;percent80&#39;</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过判断输入的折扣类型来计算商品总价的方式，几个 <code>if-else</code> 就满足了需求，但是这样的做法的缺点也很明显：</p><ol><li><code>priceCalculate</code> 函数随着折扣类型的增多，<code>if-else</code> 判断语句会变得越来越臃肿；</li><li>如果增加了新的折扣类型或者折扣类型的算法有所改变，那么需要更改 <code>priceCalculate</code> 函数的实现，这是违反开放-封闭原则的；</li><li>可复用性差，如果在其他的地方也有类似这样的算法，但规则不一样，上述代码不能复用；</li></ol><p>我们可以改造一下，将计算折扣的<strong>算法部分提取出来</strong>保存为一个对象，折扣的<strong>类型作为 key</strong>，这样索引的时候<strong>通过对象的键值索引调用具体的算法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> DiscountMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">minus100_30</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">minus200_80</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">80</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">percent80</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.8</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 计算总售价*/</span>
<span class="token keyword">function</span> <span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token string">&#39;minus100_30&#39;</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span>
<span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token string">&#39;percent80&#39;</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span>

<span class="token comment">// 输出: 210</span>
<span class="token comment">// 输出: 200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样<strong>算法的实现和算法的使用就被分开了</strong>，想添加新的算法也变得十分简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>DiscountMap<span class="token punctuation">.</span><span class="token function-variable function">minus150_40</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望计算算法隐藏起来，那么可以借助 IIFE 使用闭包的方式，这时需要添加增加策略的入口，以方便扩展：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> PriceCalculate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 售价计算方式 */</span>
  <span class="token keyword">const</span> DiscountMap <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">minus100_30</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 满100减30</span>
      <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">minus200_80</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 满200减80</span>
      <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">80</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">percent80</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 8折</span>
      <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.8</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">priceClac</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">addStrategy</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 注册新计算方式</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
      DiscountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span> <span class="token operator">=</span> fn
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

PriceCalculate<span class="token punctuation">.</span><span class="token function">priceClac</span><span class="token punctuation">(</span><span class="token string">&#39;minus100_30&#39;</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 210</span>

PriceCalculate<span class="token punctuation">.</span><span class="token function">addStrategy</span><span class="token punctuation">(</span><span class="token string">&#39;minus150_40&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
PriceCalculate<span class="token punctuation">.</span><span class="token function">priceClac</span><span class="token punctuation">(</span><span class="token string">&#39;minus150_40&#39;</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 230</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样算法就被隐藏起来，并且预留了增加策略的入口，便于扩展。</p><h2 id="_3-策略模式的通用实现" tabindex="-1"><a class="header-anchor" href="#_3-策略模式的通用实现" aria-hidden="true">#</a> 3. 策略模式的通用实现</h2><p>根据上面的例子提炼一下策略模式，折扣计算方式可以被认为是策略（Strategy），这些策略之间可以相互替代，而具体折扣的计算过程可以被认为是封装上下文（Context），封装上下文可以根据需要选择不同的策略。</p><p>主要有下面几个概念：</p><ol><li><strong>Context</strong> ：封装上下文，根据需要调用需要的策略，屏蔽外界对策略的直接调用，只对外提供一个接口，根据需要调用对应的策略；</li><li><strong>Strategy</strong> ：策略，含有具体的算法，其方法的外观相同，因此可以互相代替；</li><li><strong>StrategyMap</strong> ：所有策略的合集，供封装上下文调用；</li></ol><p>结构图如下：</p><p><img src="`+u+`" alt="image-20230811144138083"></p><p>下面使用通用化的方法实现一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> StrategyMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">context</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> StrategyMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> StrategyMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

StrategyMap<span class="token punctuation">.</span><span class="token function-variable function">minus100_30</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>
<span class="token punctuation">}</span>

<span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;minus100_30&#39;</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 210</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通用实现看起来似乎比较简单，这里分享一下项目实战。</p><h2 id="_4-实战中的策略模式" tabindex="-1"><a class="header-anchor" href="#_4-实战中的策略模式" aria-hidden="true">#</a> 4. 实战中的策略模式</h2><h3 id="_4-1-表格-formatter" tabindex="-1"><a class="header-anchor" href="#_4-1-表格-formatter" aria-hidden="true">#</a> 4.1 表格 formatter</h3><p>这里举一个 Vue + ElementUI 项目中用到的例子，其他框架的项目原理也类似，和大家分享一下。</p>`,32),M={href:"https://element.eleme.cn/#/zh-CN/component/table#table-biao-ge",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"formatter",-1),C=n("code",null,"Function(row, column, cellValue, index)",-1),E=p(`<p>以文件大小转化为例，后端经常会直接传 bit 单位的文件大小，那么前端需要根据后端的数据，根据需求转化为自己需要的单位的文件大小，比如 KB/MB。</p><p>首先实现文件计算的算法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> StrategyMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* Strategy 1: 将文件大小（bit）转化为 KB */</span>
  <span class="token function-variable function">bitToKB</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;KB&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">/* Strategy 2: 将文件大小（bit）转化为 MB */</span>
  <span class="token function-variable function">bitToMB</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;MB&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Context: 生成el表单 formatter */</span>
<span class="token keyword">const</span> <span class="token function-variable function">strategyContext</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> rowKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> cellValue<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    StrategyMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>rowKey<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> strategyContext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在组件中我们可以直接：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tableData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>日期<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>文件名<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 直接调用 strategyContext --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
      <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sizeKb<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>文件大小(KB)<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>strategyContext(&quot;bitToKB&quot;, &quot;sizeKb&quot;)<span class="token punctuation">&#39;</span></span>
    <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
      <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sizeMb<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>附件大小(MB)<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>strategyContext(&quot;bitToMB&quot;, &quot;sizeMb&quot;)<span class="token punctuation">&#39;</span></span>
    <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> strategyContext <span class="token keyword">from</span> <span class="token string">&#39;./strategyContext.js&#39;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ElTableDemo&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        strategyContext<span class="token punctuation">,</span>
        <span class="token literal-property property">tableData</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2019-05-02&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文件1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">sizeKb</span><span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token literal-property property">sizeMb</span><span class="token operator">:</span> <span class="token number">1234426</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2019-05-04&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文件2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">sizeKb</span><span class="token operator">:</span> <span class="token number">4213</span><span class="token punctuation">,</span> <span class="token literal-property property">sizeMb</span><span class="token operator">:</span> <span class="token number">8636152</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),B={href:"https://codepen.io/SHERlocked93/pen/NmzLBK",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"运行结果如下图：",-1),S=n("p",null,[n("img",{src:r,alt:"image-20230811144159745"})],-1),z=n("h3",{id:"_4-2-表单验证",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-表单验证","aria-hidden":"true"},"#"),s(" 4.2 表单验证")],-1),V=n("p",null,"除了表格中的 formatter 之外，策略模式也经常用在表单验证的场景，这里举一个 Vue + ElementUI 项目的例子，其他框架同理。",-1),D={href:"https://element.eleme.cn/#/zh-CN/component/form",target:"_blank",rel:"noopener noreferrer"},F={href:"https://codepen.io/SHERlocked93/pen/VJbgey",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"data",-1),K=n("code",null,"utils",-1),I=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/utils/validates.js</span>

<span class="token comment">/* 姓名校验 由2-10位汉字组成 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateUsername</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\u4e00-\\u9fa5]{2,10}$</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 手机号校验 由以1开头的11位数字组成  */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateMobile</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\\d{10}$</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 邮箱校验 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateEmail</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>utils/index.js</code> 中增加一个柯里化方法，用来生成表单验证函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/utils/index.js</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Validates <span class="token keyword">from</span> <span class="token string">&#39;./validates.js&#39;</span>

<span class="token comment">/* 生成表格自定义校验函数 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">formValidateGene</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Validates<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 <code>formValidateGene</code> 函数接受两个参数，第一个是验证规则，也就是 <code>src/utils/validates.js</code> 文件中提取出来的通用验证规则的方法名，第二个参数是报错的话表单验证的提示信息。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>
    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleForm<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100px<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo-ruleForm<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rules<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleForm<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>用户名<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleForm.username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>手机号<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleForm.mobile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>邮箱<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleForm.email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Utils <span class="token keyword">from</span> <span class="token string">&#39;../utils&#39;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ElTableDemo&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">ruleForm</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">checkPass</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">validator</span><span class="token operator">:</span> Utils<span class="token punctuation">.</span><span class="token function">formValidateGene</span><span class="token punctuation">(</span>
                <span class="token string">&#39;validateUsername&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;姓名由2-10位汉字组成&#39;</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">validator</span><span class="token operator">:</span> Utils<span class="token punctuation">.</span><span class="token function">formValidateGene</span><span class="token punctuation">(</span>
                <span class="token string">&#39;validateMobile&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;手机号由以1开头的11位数字组成&#39;</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token literal-property property">validator</span><span class="token operator">:</span> Utils<span class="token punctuation">.</span><span class="token function">formValidateGene</span><span class="token punctuation">(</span>
                <span class="token string">&#39;validateEmail&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;不是正确的邮箱格式&#39;</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看见在使用的时候非常方便，把表单验证方法提取出来作为策略，使用柯里化方法动态选择表单验证方法，从而对策略灵活运用，大大加快开发效率。</p>`,6),U={href:"https://codesandbox.io/embed/demo-for-element-validate-ztlie",target:"_blank",rel:"noopener noreferrer"},A=p('<p>运行结果：</p><p><img src="'+k+'" alt="image-20230811144214191"></p><h2 id="_5-策略模式的优缺点" tabindex="-1"><a class="header-anchor" href="#_5-策略模式的优缺点" aria-hidden="true">#</a> 5. 策略模式的优缺点</h2><p>策略模式将算法的<strong>实现和使用拆分</strong>，这个特点带来了很多优点：</p><ol><li>策略之间相互独立，但<strong>策略可以自由切换</strong>，这个策略模式的特点给策略模式带来很多灵活性，也提高了策略的复用率；</li><li>如果不采用策略模式，那么在选策略时一般会采用多重的条件判断，采用策略模式可以<strong>避免多重条件判断</strong>，增加可维护性；</li><li><strong>可扩展性好</strong>，策略可以很方便的进行扩展；</li></ol><p>策略模式的缺点：</p><ol><li>策略相互独立，因此一些复杂的算法逻辑<strong>无法共享</strong>，造成一些资源浪费；</li><li>如果用户想采用什么策略，必须了解策略的实现，因此<strong>所有策略都需向外暴露</strong>，这是违背迪米特法则/最少知识原则的，也增加了用户对策略对象的使用成本。</li></ol><h2 id="_6-策略模式的适用场景" tabindex="-1"><a class="header-anchor" href="#_6-策略模式的适用场景" aria-hidden="true">#</a> 6. 策略模式的适用场景</h2><p>那么应该在什么场景下使用策略模式呢：</p><ol><li>多个算法<strong>只在行为上稍有不同</strong>的场景，这时可以使用策略模式来动态选择算法；</li><li>算法<strong>需要自由切换</strong>的场景；</li><li>有时<strong>需要多重条件判断</strong>，那么可以使用策略模式来规避多重条件判断的情况；</li></ol><h2 id="_7-其他相关模式" tabindex="-1"><a class="header-anchor" href="#_7-其他相关模式" aria-hidden="true">#</a> 7. 其他相关模式</h2><h3 id="_7-1-策略模式和模板方法模式" tabindex="-1"><a class="header-anchor" href="#_7-1-策略模式和模板方法模式" aria-hidden="true">#</a> 7.1 策略模式和模板方法模式</h3><p>策略模式和模板方法模式的作用比较类似，但是结构和实现方式有点不一样。</p><ol><li><strong>策略模式</strong> 让我们在程序运行的时候动态地指定要使用的算法；</li><li><strong>模板方法模式</strong> 是在子类定义的时候就已经确定了使用的算法；</li></ol><h3 id="_7-2-策略模式和享元模式" tabindex="-1"><a class="header-anchor" href="#_7-2-策略模式和享元模式" aria-hidden="true">#</a> 7.2 策略模式和享元模式</h3><p>见享元模式中的介绍。</p>',16);function G(P,L){const a=o("ExternalLinkIcon");return c(),l("div",null,[v,m,b,g,n("blockquote",null,[n("p",null,[y,s(" 本文可能用到一些编码技巧比如 "),n("a",f,[s("IIFE"),t(a)]),s("（Immediately Invoked Function Expression, 立即调用函数表达式），ES6 的语法 "),n("a",h,[s("let/const"),t(a)]),s("、"),n("a",_,[s("箭头函数"),t(a)]),s("、"),n("a",w,[s("rest 参数"),t(a)]),s("，"),n("a",q,[s("短路运算符"),t(a)]),s(" 等，如果还没接触过可以点击链接稍加学习 ~")])]),x,n("p",null,[s("Element 的"),n("a",M,[s("表格控件"),t(a)]),s("的 Column 接受一个 "),j,s(" 参数，用来格式化内容，其类型为函数，并且还可以接受几个特定参数，像这样： "),C,s("。")]),E,n("p",null,[s("代码实例可以参看 "),n("a",B,[s("codepen - 策略模式实战"),t(a)])]),T,S,z,V,n("p",null,[s("ElementUI 的 "),n("a",D,[s("Form 表单"),t(a)]),s(" 具有表单验证功能，用来校验用户输入的表单内容。实际需求中表单验证项一般会比较复杂，所以需要给每个表单项增加 validator 自定义校验方法。")]),n("p",null,[s("我们可以像"),n("a",F,[s("官网示例"),t(a)]),s("一样把表单验证都写在组件的状态 "),N,s(" 函数中，但是这样就不好复用使用频率比较高的表单验证方法了，这时我们可以结合策略模式和函数柯里化的知识来重构一下。首先我们在项目的工具模块（一般是 "),K,s(" 文件夹）实现通用的表单验证方法：")]),I,n("p",null,[s("代码实例可以参看 "),n("a",U,[s("codesandbox - 策略模式表单验证实战"),t(a)])]),A])}const Z=e(d,[["render",G],["__file","index-19.html.vue"]]);export{Z as default};
