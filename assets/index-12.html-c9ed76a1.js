import{_ as n,p as a,q as s,a1 as e}from"./framework-e8cb8151.js";const p={},t=e(`<h1 id="_12-浏览器如何执行-javascript-代码" tabindex="-1"><a class="header-anchor" href="#_12-浏览器如何执行-javascript-代码" aria-hidden="true">#</a> 12-浏览器如何执行 JavaScript 代码？</h1><p>这一课时从编译过程和内存管理两个方面带你来探索 JavaScript 引擎的工作机制。</p><h2 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程" aria-hidden="true">#</a> 编译过程</h2><p>在“加餐 1：手写 CSS 预处理器”中提过编译器的基本工作流程，大体上包括 3 个步骤：<code>解析（Parsing）</code>、<code>转换（Transformation）</code>及<code>代码生成（Code Generation）</code>，JavaScript 引擎与之相比大体上也遵循这个过程，可分为<code>解析</code>、<code>解释</code>和<code>优化</code> 3 个步骤。下面我们就以 V8 引擎为例进行讲解。</p><h3 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h3><p>解析步骤又可以拆分成 2 个小步骤：</p><ul><li><strong>词法分析</strong>，将 JavaScript 代码解析成一个个的令牌（Token）；</li><li><strong>语法分析</strong>，将令牌组装成一棵抽象的语法树（AST）。</li></ul><p>下面是一段简单的代码，声明了一个字符串变量并调用函数 console.log 进行打印。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;web&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<strong>词法分析</strong>会对这段代码逐个字符进行解析，生成类似下面结构的令牌（Token），这些令牌类型各不相同，有关键字、标识符、符号、字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Keyword</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span>
<span class="token class-name">Identifier</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token class-name">Punctuator</span><span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span>
<span class="token class-name">String</span><span class="token punctuation">(</span><span class="token char">&#39;web&#39;</span><span class="token punctuation">)</span>
<span class="token class-name">Identifier</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span>
<span class="token class-name">Punctuator</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token class-name">Identifier</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span>
<span class="token class-name">Punctuator</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Identifier</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token class-name">Punctuator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法分析阶段会用令牌生成类似下面结构的抽象语法树，生成树的过程并不是简单地把所有令牌都添加到树上，而是去除了不必要的符号令牌之后，按照语法规则来生成。</p><p><img src="https://s0.lgstatic.com/i/image/M00/27/1E/Ciqc1F70ZQSAGf1cAAEehLtbbTk491.png" alt="1.png"> 抽象语法树</p><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>在加餐 1 中，我们将 AST 转换成新的 AST，而 JavaScript 引擎是通过解释器 Ignition 将 AST 转换成字节码。字节码是对机器码的一个抽象描述，相对于机器码而言，它的代码量更小，从而可以减少内存消耗。</p><p>下面代码是从示例代码生成的字节码中截取的一段。它的语法已经非常接近汇编语言了，有很多操作符，比如 StackCheck、Star、Return。考虑这些操作符过于底层，涉及处理器的累加器及寄存器操作，已经超出前端范围，这里就不详细介绍了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>generated bytecode <span class="token keyword">for</span> function<span class="token operator">:</span> log <span class="token punctuation">(</span><span class="token number">0x1e680d83fc59</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SharedFunctionInfo</span> log<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token class-name">Parameter</span> count <span class="token number">1</span>
<span class="token class-name">Register</span> count <span class="token number">6</span>
<span class="token class-name">Frame</span> size <span class="token number">48</span>
 <span class="token number">9646</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token number">0x376a94a60ea6</span> @    <span class="token number">0</span> <span class="token operator">:</span> a7                <span class="token class-name">StackCheck</span>
         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
         <span class="token number">0x376a94a60ec9</span> @   <span class="token number">35</span> <span class="token operator">:</span> <span class="token number">26</span> f6             <span class="token class-name">Star</span> r5
 <span class="token number">9683</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token number">0x376a94a60ecb</span> @   <span class="token number">37</span> <span class="token operator">:</span> <span class="token number">5</span>a f9 <span class="token number">02</span> f7 f6 <span class="token number">06</span> <span class="token class-name">CallProperty2</span> r2<span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">this</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> r4<span class="token punctuation">,</span> r5<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
         <span class="token number">0x376a94a60ed1</span> @   <span class="token number">43</span> <span class="token operator">:</span> <span class="token number">0d</span>                <span class="token class-name">LdaUndefined</span>
 <span class="token number">9729</span> <span class="token class-name">S</span><span class="token operator">&gt;</span> <span class="token number">0x376a94a60ed2</span> @   <span class="token number">44</span> <span class="token operator">:</span> ab                <span class="token class-name">Return</span>
<span class="token class-name">Constant</span> pool <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token class-name">Handler</span> <span class="token class-name">Table</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token class-name">Source</span> <span class="token class-name">Position</span> <span class="token class-name">Table</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>解释器在得到 AST 之后，会按需进行解释和执行，也就是说如果某个函数没有被调用，则不会去解释执行它。</p><p>在这个过程中解释器会将一些重复可优化的操作（比如类型判断）收集起来生成分析数据，然后将生成的字节码和分析数据传给编译器 TurboFan，编译器会依据分析数据来生成高度优化的机器码。</p><p>优化后的机器码的作用和缓存很类似，当解释器再次遇到相同的内容时，就可以直接执行优化后的机器码。当然优化后的代码有时可能会无法运行（比如函数参数类型改变），那么会再次反优化为字节码交给解释器。</p><p>整个过程如下面流程图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/27/29/CgqCHl70ZTqAR9m6AAEz8M57qjs116.png" alt="3.png"> JavaScript 编译过程</p><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><p>JavaScript 引擎的内存空间分为<strong>堆（Heap）和栈（Stack）</strong>。堆和栈是两种不同的数据结构，堆是具有树结构的数组，栈也是数组，但是遵循“先进后出”规则。</p><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><p>栈是一个临时存储空间，主要存储局部变量和函数调用（对于全局表达式会创建匿名函数并调用）。</p><p>对于基本数据类型（String、Undefined、Null、Boolean、Number、BigInt、Symbol）的局部变量，会直接在栈中创建，而对象数据类型局部变量会存储在堆中，栈中只存储它的引用地址，也就是我们常说的浅拷贝。全局变量以及闭包变量也是只存储引用地址。总而言之栈中存储的数据都是轻量的。</p><p>对于函数，解释器创建了“调用栈”（Call Stack）来记录函数的调用流程。每调用一个函数，解释器就会把该函数添加进调用栈，解释器会为被添加进的函数创建一个栈帧 （Stack Frame，这个栈帧用来保存函数的局部变量以及执行语句）并立即执行。如果正在执行的函数还调用了其它函数，那么新函数也将会被添加进调用栈并执行。一旦这个函数执行结束，对应的栈帧也会被立即销毁。</p><p>查看调用栈的方式有 2 种：</p><ul><li>调用函数 console.trace() 打印到控制台；</li><li>利用浏览器开发者工具进行断点调试。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>下面的代码是一个计算斐波那契数列的函数，分别通过调用 console.trace() 函数以及断点的方式得到了它的调用栈信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70SjGAI_8JAAANLDVx3V0087.png" alt="image (31).png"> 示例效果图</p><p><img src="https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70SjmAfUtiAAAkCGWd2MI629.png" alt="image (32).png"> 示例效果图</p><p>虽然栈很轻量，只会在使用时创建，使用结束时销毁，但它并不是可以无限增长的。当分配的调用栈空间被占满时，就会引发“栈溢出”错误。</p><p>下面是一个递归函数导致的栈溢出报错代码片段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">recursive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70Sk6ANM__AAAQ-wQno2Q416.png" alt="image (33).png"> 栈溢出错误</p><p>所以我们在编写递归函数的时候一定要注意函数执行边界，也就是退出递归的条件。</p><h2 id="延申-尾调用" tabindex="-1"><a class="header-anchor" href="#延申-尾调用" aria-hidden="true">#</a> 延申：尾调用</h2><p>递归调用由于调用次数较多，同时每层函数调用都需要保存栈帧，所以通常是比较消耗内存的操作。对递归的优化一般有两个思路，<strong>减少递归次数和使用尾调用</strong>。</p><p>尾调用（Tail Call）是指<strong>函数的最后一步返回另一个函数的调用</strong>。例如下面的代码中，函数 a() 返回了函数 b() 的调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像下面的示例中，返回缓存的函数调用结果，或者返回多个函数调用都不属于“尾调用”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token keyword">return</span> c
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">c</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尾调用由于是在 return 语句中，并且是函数的最后一步操作，所以局部变量等信息不需要再用到，从而可以立即释放节省内存空间。</p><p>下面的示例代码通过递归实现了求斐波那契额数列第 n 个数的功能。函数 fibTail() 相对于函数 fib() 就同时使用了尾调用以及减少调用次数两种优化方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fibTail</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a
  <span class="token keyword">return</span> <span class="token function">fibTail</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是由于尾调用也存在一些隐患，比如错误信息丢失、不方便调试，所以浏览器以及 Node.js 环境默认并没有支持这种优化方式。</p><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h3><p>堆空间存储的数据比较复杂，大致可以划分为下面 5 个区域：代码区（Code Space）、Map 区(Map Space)、大对象区（Large Object Space）、新生代（New Space）、老生代（Old Space）。这一课时重点讨论新生代和老生代的内存回收算法。</p><h3 id="新生代" tabindex="-1"><a class="header-anchor" href="#新生代" aria-hidden="true">#</a> 新生代</h3><p>大多数的对象最开始都会被分配在新生代，该存储空间相对较小，只有几十 MB，分为两个空间：from 空间和 to 空间。</p><p>程序中声明的对象首先会被分配到 from 空间，当进行垃圾回收时，会先将 from 空间中存活的的对象（存活对象可以理解为被引用的对象）复制到 to 空间进行保存，对未存活的对象空间进行回收。当复制完成后，from 空间和 to 空间进行调换，to 空间会变为新的 from 空间，原来的 from 空间则变为 to 空间，这种算法称之为 “Scavenge”。</p><p>新生代的内存回收频率很高、速度也很快，但空间利用率较低，因为让一半的内存空间处于“闲置”状态。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/25/15/Cgp9HWBZVYuADfmqAACqB-v2Dq0515.png" alt="1.png"> Scanvage 回收过程</p><h3 id="老生代" tabindex="-1"><a class="header-anchor" href="#老生代" aria-hidden="true">#</a> 老生代</h3><p>新生代中多次回收仍然存活的对象会被转移到空间较大的老生代。因为老生代空间较大，如果回收方式仍然采用 Scanvage 算法来频繁复制对象，那性能开销就太大了。</p><p>所以老生代采用的是另一种“<strong>标记清除</strong>”（<strong>Mark-Sweep</strong>）的方式来回收未存活的对象空间。</p><p>这种方式主要分为<strong>标记</strong>和<strong>清除</strong>两个阶段。标记阶段会遍历堆中所有对象，并对存活的对象进行标记；清除阶段则是对未标记对象的空间进行回收。</p><p><img src="https://s0.lgstatic.com/i/image/M00/27/1E/Ciqc1F70ZZWAeo71AABOQKZ828k489.png" alt="5.png"> 标记清除回收过程</p><p>由于标记清除不会对内存一分为二，所以不会浪费空间。但是进行过标记清除之后的内存空间会产生很多不连续的碎片空间，这种不连续的碎片空间中，在遇到较大对象时可能会由于空间不足而导致无法存储的情况。</p><p>为了解决内存碎片的问题，提高对内存的利用，还需要使用到<strong>标记整理（Mark-Compact）</strong> 算法。标记整理算法相对于标记清除算法在回收阶段进行了改进，标记整理对待未标记的对象并不是立即进行回收，而是将存活的对象移动到一边，然后再清理。当然这种移动对象的操作相对而言是比较耗时的，所以执行速度上，比标记清除要慢。</p><p><img src="https://s0.lgstatic.com/i/image/M00/27/21/Ciqc1F70cS2AU5w_AABOiU6R39g235.png" alt="6.png"> 标记整理回收过程</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本课时的内容偏于底层和抽象，重点在于理解和记忆。</p><p>首先讲解了 JavaScript 引擎的执行过程，包括解析、解释和优化，这一部分可以结合加餐 1 中提到的编译器知识进行理解。</p><p>然后讲到了 JavaScript 引擎的内存分为栈和堆两个部分，栈可以保存函数调用信息以及局部变量，特点是“先进后出”以及“用完立即销毁”。堆区存储的数据对象通常比较大，需要采用一定的回收算法来处理，包括用于新生代的 Scanvage 算法，以及用于老生代的标记清除和标记整理算法。</p><p>最后布置一道思考题：你还了解过哪些内存回收算法，它们有什么优缺点？</p><hr><h2 id="精选评论" tabindex="-1"><a class="header-anchor" href="#精选评论" aria-hidden="true">#</a> 精选评论</h2><h4 id="涛" tabindex="-1"><a class="header-anchor" href="#涛" aria-hidden="true">#</a> **涛：</h4><blockquote><p>感觉越往底层分析越明白算法的重要性</p></blockquote><h4 id="玲" tabindex="-1"><a class="header-anchor" href="#玲" aria-hidden="true">#</a> **玲：</h4><blockquote><p>老师讲得很好</p></blockquote><h4 id="童" tabindex="-1"><a class="header-anchor" href="#童" aria-hidden="true">#</a> **童：</h4><blockquote><p>看完后不太懂，这到底是 js 的编译过程还是执行机制？解析的这一步是 v8 引擎做的是吗？v8 引擎不是解释器吗，但是后面又有其他解释器…求解惑谢谢</p></blockquote><h4 id="讲师回复" tabindex="-1"><a class="header-anchor" href="#讲师回复" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>以 V8 引擎为例讲解的 JavaScript 编译过程，V8 可以编译和执行 JavaScript 代码。</p></blockquote><h4 id="ezra-xu" tabindex="-1"><a class="header-anchor" href="#ezra-xu" aria-hidden="true">#</a> ezra.xu：</h4><blockquote><p>引用计数，标记清除，标记整理，分代回收...</p></blockquote><h4 id="超" tabindex="-1"><a class="header-anchor" href="#超" aria-hidden="true">#</a> **超：</h4><blockquote><p>老师，关于获取摄像头以及麦克风，桌面这些是在哪个进程中实现的呢 🙋</p></blockquote><h4 id="讲师回复-1" tabindex="-1"><a class="header-anchor" href="#讲师回复-1" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>在启用摄像头/麦克风的时候，浏览器会启动   Video Capture  进程。</p></blockquote><h4 id="随行" tabindex="-1"><a class="header-anchor" href="#随行" aria-hidden="true">#</a> **随行：</h4><blockquote><p>所以 v8 的垃圾回收方式跟 Java 中的是一样的么？</p></blockquote><h4 id="讲师回复-2" tabindex="-1"><a class="header-anchor" href="#讲师回复-2" aria-hidden="true">#</a> 讲师回复：</h4><blockquote><p>大体上是相同的</p></blockquote>`,91),c=[t];function o(i,l){return a(),s("div",null,c)}const u=n(p,[["render",o],["__file","index-12.html.vue"]]);export{u as default};
