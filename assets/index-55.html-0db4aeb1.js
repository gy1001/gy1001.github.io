import{_ as p,M as e,p as o,q as c,R as n,t as s,N as l,a1 as a}from"./framework-e8cb8151.js";const i={},u=a('<h1 id="_55-模块化实践案例一" tabindex="-1"><a class="header-anchor" href="#_55-模块化实践案例一" aria-hidden="true">#</a> 55-模块化实践案例一</h1><p>我们先来实现一个简单的场景。</p><p>首先有一个普通的 div。</p><p>然后有一堆设置按钮。</p><p>我们可以通过这堆按钮，来控制 div 的显示或隐藏，背景颜色，边框颜色，长，宽等属性。</p><p>实践中的类似场景非常多，例如手机的设置、控制中心、每个网页的个人中心设置等。</p><p>当然，如果我们仅仅只是通过一个按钮来控制 div 的单一属性。非常简单，但是实践中的场景往往更复杂，第一个难点是我们会有更多的属性需要控制，也会有更多的目标需要控制。第二个难点是我们构建代码之初，目标元素可能存在于不同的模块中，我们如何通过单一的变量来控制不同的目标元素？</p><p>当我们的项目变得越来越复杂，需要管理的状态值也会变得越来越多。如果只是使用我们初学时在当前作用域随便定义一个变量的方式来做，那么多余项目的后期维护而来，是一场灾难。我们需要更多的时间去调试，会修复更多的 bug，需要面对杂乱无章的代码，还要克制我们烦躁的心态，以及无休止的加班。而当需求变动时，我们还不得不忍受自己都看不下去的代码，再重复之前一样的痛苦，没人愿意尝试这种经历。</p><p>所以，针对大型项目中，过多的状态管理，我们应该怎么办？</p><p>目前市面上有许多流行的状态管理机制。例如 redux、mobx、vuex 等。他们就是专门解决状态管理的方案。当然，我们也可以基于观察者模式，创建自己的状态管理工具。</p><p>一起来试试看。</p><h2 id="_01-准备工作" tabindex="-1"><a class="header-anchor" href="#_01-准备工作" aria-hidden="true">#</a> 01-准备工作</h2><p>首先，按照上节课的内容，使用 create react app 创建一个项目。</p>',13),r={href:"https://github.com/yangbo5207/jsCore/tree/master/6.9%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/controldiv",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>因为默认的 demo 中，有了自己的 DOM 渲染，因此我们需要清空他们。将 App.tsx 修改为如下即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;App&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-状态管理模块" tabindex="-1"><a class="header-anchor" href="#_02-状态管理模块" aria-hidden="true">#</a> 02-状态管理模块</h2><p>在 src 目录中，创建一个状态管理模块，命名为 <code>state.ts</code></p><p>首先，我们要创建一个状态树。</p><p>在整个项目中，状态树是唯一的，我们会把所有的状态名与状态值通过 <code>key - value</code> 的形式，保存在状态树中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们的案例中，状态树可能会长这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;#cccccc&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;200&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;200&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ... more</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，给 store 一个类型声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">store</span><span class="token operator">:</span> Store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用时，会对状态树有一些基本的操作和访问，因此会有如下基本方法</p><ul><li>registerState: 新增需要管理的状态值</li><li>getStore: 获取当前整个状态树</li><li>getState: 获取某一个状态的值</li><li>setState: 修改某一个状态的值</li></ul><p>具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 往store中添加一个状态值，并确保传入一个初始值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">registerState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;状态已经存在。&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  store<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>

<span class="token comment">// 获取整个状态树</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store

<span class="token comment">// 获取某个状态的值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">[</span>status<span class="token punctuation">]</span>

<span class="token comment">// 设置某个状态的值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token function">dispatch</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了简化学习，方法比较简单，没有过多的考虑异常情况与健全处理，请勿直接运用于实践，实践可在此基础根据需要扩展</p></blockquote><p>当我们通过交互改变状态值时，其实期待的是界面 UI 能够发生相应的改变。</p><p>UI 的变动可能会比较简单，也可能会非常复杂，因此为了能够更好的维护 UI 改变，我们将每个 UI 变化用函数封装起来，并与对应的状态值对应「绑定」。这样，当状态值改变的同时，调用一下对应的 UI 函数就能够实现界面的实时变动了。</p><p>因此，我们还需要一个 events 对象，来保存专门用于改变 UI 的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type <span class="token function-variable function">EventCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any

<span class="token keyword">interface</span> <span class="token class-name">Events</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> EventCallback<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">events</span><span class="token operator">:</span> Events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个关键因素，就是 store 的 key 值，要与 events 的 key 值保持一致。</p><p>所以，状态值与 UI 函数的对应关系如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;#cccccc&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;200&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;200&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ... more</span>
<span class="token punctuation">}</span>

events <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">backgroundColor</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">width</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">height</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ... more</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过相同的状态命名，我们可以访问到对应的状态值与函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的道理，我们需要提供几个能够操作 events 的方法</p><ul><li>bind: 绑定函数，将函数保存在 events 中，在有的地方，也成为订阅</li><li>remove: 移出函数的绑定</li><li>dispatch: 执行函数，setState 中会调用该方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将状态值与事件绑定在一起，通过status-events 的形式保存在events对象中</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">eventFn</span><span class="token operator">:</span> EventCallback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  events<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> eventFn
<span class="token punctuation">}</span>

<span class="token comment">// 移除绑定</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span> events<span class="token punctuation">[</span>status<span class="token punctuation">]</span>
  <span class="token keyword">return</span> status
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;未绑定任何事件！&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  events<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，一个简单的状态管理模块就完成了。完整代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/state.ts</span>
<span class="token keyword">interface</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type <span class="token function-variable function">EventCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any

<span class="token keyword">interface</span> <span class="token class-name">Events</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> EventCallback<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">events</span><span class="token operator">:</span> Events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">store</span><span class="token operator">:</span> Store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 往store中添加一个状态值，并确保传入一个初始值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">registerState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;状态已经存在。&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  store<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>

<span class="token comment">// 获取整个状态树</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store

<span class="token comment">// 获取某个状态的值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">[</span>status<span class="token punctuation">]</span>

<span class="token comment">// 设置某个状态的值</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token function">dispatch</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>

<span class="token comment">// 将状态值与事件绑定在一起，通过status-events 的形式保存在events对象中</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">eventFn</span><span class="token operator">:</span> EventCallback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  events<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">=</span> eventFn
<span class="token punctuation">}</span>

<span class="token comment">// 移除绑定</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span> events<span class="token punctuation">[</span>status<span class="token punctuation">]</span>
  <span class="token keyword">return</span> status
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">status</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;未绑定任何事件！&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  events<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的重点，就是如何运用该模块。</p><h2 id="_03-注册状态值模块" tabindex="-1"><a class="header-anchor" href="#_03-注册状态值模块" aria-hidden="true">#</a> 03-注册状态值模块</h2><p>我们需要管理很多的状态，可以在每一个使用到这些状态值的模块中各自注册。也可以使用一个单独的模块来注册状态。如果你担心自己会忘记状态值的作用，建议每一个都做好注释。</p><p>注册状态的方式就是利用状态管理模块中定义 registerState 方法来完成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/register.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> registerState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span>

<span class="token function">registerState</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">registerState</span><span class="token punctuation">(</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#cccccc&#39;</span><span class="token punctuation">)</span>
<span class="token function">registerState</span><span class="token punctuation">(</span><span class="token string">&#39;borderColor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#000&#39;</span><span class="token punctuation">)</span>
<span class="token function">registerState</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
<span class="token function">registerState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-工具函数模块" tabindex="-1"><a class="header-anchor" href="#_04-工具函数模块" aria-hidden="true">#</a> 04-工具函数模块</h2><p>每一个项目中，都会使用到大量的工具函数。</p><p>我们可以创建一个工具函数模块，把一些封装好的功能性的方法都在放这个模块中。</p><p>例如我们在实践中常常会遇到在一个数组中拿到最大的那个值，获取 url 中某个属性对应的具体值，对时间格式按需进行处理等等需求，我们就可以直接将这些操作封装好，存放于工具函数模块中，在使用时引入即可。</p><p>当然，这个例子中我们不会用到特别多的功能函数，因此这里就封装了一个示意一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ele</span><span class="token operator">:</span> Element<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// @ts-ignore for IE</span>
  <span class="token keyword">return</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们也可以引入 lodash.js 这样的工具库。lodash 是一个具有一致接口、模块化、高性能的工具库，它封装了许多我们常用的工具函数，在实践开发中对我们的帮助非常大。</p><h2 id="_05-目标元素模块" tabindex="-1"><a class="header-anchor" href="#_05-目标元素模块" aria-hidden="true">#</a> 05-目标元素模块</h2><p>目标元素，也就是可能会涉及到 UI 改变的元素。</p><p>之前在创建状态管理模块时已经提到，我们需要将 UI 改变的动作封装为函数，并保存/绑定到 events 对象中。这个操作就选择在目标元素模块中来完成。</p><p>首先在 <code>public/index.html</code> 中写入一个 div 元素。</p><p>root 元素用于 create react app 默认 demo 中的逻辑，我们不管它。我们新起一个 div 元素用于管理自己的逻辑。</p><p>control_wrap 中是所有的控制按钮</p><p>target 是目标元素</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>control<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>control_wrap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>show/hide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bgcolor_input<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input background color<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bgcolor_btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>sure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bdcolor_input<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input border color<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bdcolor_btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>sure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width_reduce<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width_add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>height<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>height_reduce<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>height_input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">readonly</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>height_add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>清空原有的 <code>index.css</code>，重新写一些简单的默认样式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#control .target</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #cccccc<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.3s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#control .target.hide</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处我们的目标元素是一个正方形的 div 元素，我们将会通过控制按钮来改变它的显示/隐藏，边框，背景，长宽等属性。因此该模块主要要做的事情，就是根据注册的状态变量，绑定 UI 变化的函数。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/box.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bind <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./register&#39;</span>

<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector <span class="token operator">&lt;</span> HTMLElement <span class="token operator">&gt;</span> <span class="token string">&#39;.target&#39;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>div<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象 target 不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// control show or hide</span>
<span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hide&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;hide&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// change background color</span>
<span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// change border color</span>
<span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;borderColor&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&#39;borderWidth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;2px solid #ccc&#39;</span>
  <span class="token punctuation">}</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderColor <span class="token operator">=</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// change width</span>
<span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-按钮控制模块" tabindex="-1"><a class="header-anchor" href="#_06-按钮控制模块" aria-hidden="true">#</a> 06-按钮控制模块</h2><p>我们可能会通过按钮，input 框，或者滑块等不同的方式来改变状态值，因此控制模块将会是一个比较复杂的模块。 为了更好的组织代码，一个可读性和可维护性都很强的方式是将整个控制模块拆分为许多小模块，每一个小模块仅仅只完成一个状态值的控制操作。</p><p>因此我们需要根据需求，分别创建对应的控制模块。</p><p>在 src 目录下创建一个 controlButtons 文件夹，该文件夹中全部用来存放控制模块。然后依次编写控制模块的代码即可。</p><p>控制目标元素显示隐藏的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/show.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state&#39;</span>

<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.show&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>btn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制目标元素背景颜色变化的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/bgColor.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state&#39;</span>

<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector <span class="token operator">&lt;</span> HTMLInputElement <span class="token operator">&gt;</span> <span class="token string">&#39;.bgcolor_input&#39;</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.bgcolor_btn&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input <span class="token operator">||</span> <span class="token operator">!</span>btn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;backgroundColor&#39;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制目标元素边框颜色变化的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/borderColor.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state&#39;</span>

<span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector <span class="token operator">&lt;</span> HTMLInputElement <span class="token operator">&gt;</span> <span class="token string">&#39;.bdcolor_input&#39;</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.bdcolor_btn&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input <span class="token operator">||</span> <span class="token operator">!</span>btn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;borderColor&#39;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制目标元素宽度变化的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/width.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state&#39;</span>

<span class="token keyword">const</span> red_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.width_reduce&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> add_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.width_add&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>red_btn <span class="token operator">||</span> <span class="token operator">!</span>add_btn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

red_btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

add_btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制目标元素高度变化的模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/height.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state&#39;</span>

<span class="token keyword">const</span> red_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.height_reduce&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> add_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.height_add&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> height_input <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector <span class="token operator">&lt;</span> HTMLInputElement <span class="token operator">&gt;</span> <span class="token string">&#39;.height_input&#39;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>red_btn <span class="token operator">||</span> <span class="token operator">!</span>add_btn <span class="token operator">||</span> <span class="token operator">!</span>height_input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;元素对象不存在&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

height_input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">200</span>

red_btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span>
      height_input<span class="token punctuation">.</span>value <span class="token operator">=</span> cur <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

add_btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span>
      height_input<span class="token punctuation">.</span>value <span class="token operator">=</span> cur <span class="token operator">+</span> <span class="token number">5</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将这些模块拼合起来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/controlButtons/index.ts</span>
<span class="token keyword">import</span> <span class="token string">&#39;./show&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./bgColor&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./borderColor&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./width&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./height&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构建工具中，如果我们引入一个文件夹当做模块，那么相当于默认引入的是该文件下的名为 index.ts 的模块，因此我们可以通过在 controlButtons 文件夹下创建 index.ts 的方式，来让该文件夹成为一个模块。</p><p>也就是说，在引入这个模块时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./controlButtons&#39;</span>

<span class="token comment">// 等价于</span>
<span class="token keyword">import</span> <span class="token string">&#39;./controlButtons/index&#39;</span> <span class="token comment">// 后缀名可简写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后面这段话非常重要。</strong></p><p>细心的读者肯定已经发现了，我们给按钮绑定点击事件时，仅仅只是对状态值做了改变，而没有考虑对应的 UI 变化。这是为什么？</p><p>可能在大家以前的开发经验中，要改变一个元素的某个属性，一般来说会有状态值的变化，并且还有对应的 UI 操作。我们这里的做法好像有点不太一样。</p><p>其实我这里是利用这样的一个例子，带大家尝试一下分层的开发思维。这里例子中，我们将状态控制设定为控制层，而 UI 变化设定为 view 层。我们只需要在目标元素模块中，将 view 层的变化封装好，那么利用状态管理模块中的机制，在控制层，我们就只需要单一的考虑状态值的变化即可。</p><p>这样处理之后，我们开发重心，就从考虑整个界面的变化，转移到了仅仅只考虑状态值的变化。这样做的好处是极大的简化了我们在实现需求的过程中所需要考虑的问题。在未来的进阶学习中，大家可能还会大量接触到这样的开发思路。</p><h2 id="_07-最后的拼合模块" tabindex="-1"><a class="header-anchor" href="#_07-最后的拼合模块" aria-hidden="true">#</a> 07-最后的拼合模块</h2><p>在 src 目录下的 index.tsx 文件中，我们可以通过 import 将需要的模块拼合起来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.tsx</span>
<span class="token keyword">import</span> <span class="token string">&#39;./controlButtons&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./box&#39;</span>

<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，这时候，我们需要的项目就已经全部完成了，如果你在跟着动手实践的话，相信现在你已经能够看到项目的最终效果。整个项目的相关目录结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">public</span> <span class="token operator">-</span>
  index<span class="token punctuation">.</span>html <span class="token operator">+</span>
  src <span class="token operator">-</span>
  index<span class="token punctuation">.</span>tsx <span class="token operator">-</span>
  index<span class="token punctuation">.</span>css <span class="token operator">-</span>
  box<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  state<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  utils<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  register<span class="token punctuation">.</span>ts <span class="token operator">+</span>
  controlBtns <span class="token operator">-</span>
  index<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  show<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  bgColor<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  borderColor<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  width<span class="token punctuation">.</span>ts <span class="token operator">-</span>
  height<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-项目小结" tabindex="-1"><a class="header-anchor" href="#_08-项目小结" aria-hidden="true">#</a> 08-项目小结</h2><p>模块化的开发思路，实际上是通过视觉元素，功能性等原则，将代码划分为一个一个拥有各自独立职能的模块。我们通过 ES6 的 modules 语法按需将这些模块组合起来，并借助构建工具打包成为我们熟知的 js 文件的这样一个过程。</p><p>当然在实践中我们可能会遇到更复杂的情况。例如目标元素并非单一元素的改变，而是整个区域发生变化，又例如控制目标元素变化的好几个状态值同时发生变化时带来的性能问题等等。当然大家并不用太过担心，这些问题都会是新的挑战，但是我相信大家在掌握了书中知识的情况下，花点时间去调试和折腾都是能够克服这些挑战的。这也是大家从初级往更高级进步的必经之路。</p><p>当然，大家也可以主动在此例子的基础上去增加复杂度。例如新增多个目标元素。让目标元素某个属性同时由几个状态值控制等。</p>`,85);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("本文的实例项目地址："),n("a",r,[s("点击这里查看"),l(t)])]),k])}const g=p(i,[["render",d],["__file","index-55.html.vue"]]);export{g as default};
