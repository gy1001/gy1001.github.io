import{_ as o,M as l,p as i,q as r,R as e,t as n,N as t,a1 as s}from"./framework-e8cb8151.js";const c={},d=s('<h1 id="vue3-从入门到实战" tabindex="-1"><a class="header-anchor" href="#vue3-从入门到实战" aria-hidden="true">#</a> Vue3 从入门到实战</h1><blockquote><p>进阶式掌握完整知识体系</p></blockquote><h2 id="_1-vue-语法初探" tabindex="-1"><a class="header-anchor" href="#_1-vue-语法初探" aria-hidden="true">#</a> 1. Vue 语法初探</h2><h3 id="_1-1-课前须知-这里有你需要了解的一切" tabindex="-1"><a class="header-anchor" href="#_1-1-课前须知-这里有你需要了解的一切" aria-hidden="true">#</a> 1.1 课前须知，这里有你需要了解的一切</h3><ol><li>Vue3: 更多的 API 特性，体积更小，速度更快，解决遗留问题，更加强壮</li><li>特点 <ul><li>知识体系完整：基础语法，组件原理、动画、代码设计等技术点全面覆盖</li><li>实战能力提升：企业级代码标准、工程化开发流程、真正提升 Vue3 落地能力</li><li>经验技巧分享：前端工作中的“避坑秘籍”、数据驱动、MVVM 设计模式。。。</li></ul></li><li>知识储备：HTML、CSS、JS、Node、Npm、Webpack</li><li>进阶式学习，构建 Vue3 完成知识体系 <ul><li>Vue 基础：体验 Vue 编程乐趣、生命周期函数概念、条件循环渲染指令、页面样式修饰语法、事件绑定语法解析</li><li>Vue 中的组件：真正理解组件的定义、全局组件与局部组件、组件之间的数据传递、插槽基础和复杂使用、动态组件与异步组件</li><li>Vue 中的动画：单组件元素的动画实现、列表动画的实现、状态动画的实现、CSS 动画与 JS 动画</li><li>Vue 中的高级扩展语法：Mixin 混入的开发、Vue 中的自定义指令、Teleport 传送门功能、更加底层的 render 函数、插件的定义和使用</li><li>Vue3 中的 CompositionAPI ：Composition Api 的产生背景、setup 函数的使用及参数、响应式引用语法、计算属性和侦听器的写法、案例开发帮你理解新语法</li><li>Vue 中的生态全家桶：VueCLI 脚手架工具，大型工程结构、单文件组件的使用、Vue-router 入门学习、Vuex 的基础内容学习</li></ul></li><li>实战环节：实现“京东到家”项目</li><li>课程收货 <ul><li>理解并运用 Vue3 的语法特性</li><li>对 Vue 的原理具备一定理解</li><li>形成不错的代码设计能力</li><li>掌握一定的移动端开发经验</li><li>水到渠成上手公司级别项目</li></ul></li></ol><h3 id="_1-2-初学编写-helloworld-和-counter" tabindex="-1"><a class="header-anchor" href="#_1-2-初学编写-helloworld-和-counter" aria-hidden="true">#</a> 1.2 初学编写 HelloWorld 和 Counter</h3>',6),p={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/01-helloworld.html",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"_1-3-编写字符串反转和内容隐藏小功能",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-编写字符串反转和内容隐藏小功能","aria-hidden":"true"},"#"),n(" 1.3 编写字符串反转和内容隐藏小功能")],-1),h={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/02-stringReverse-display.html",target:"_blank",rel:"noopener noreferrer"},m=e("h3",{id:"_1-4-编写-todolist-小功能-了解循环和双向绑定",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-4-编写-todolist-小功能-了解循环和双向绑定","aria-hidden":"true"},"#"),n(" 1.4 编写 TodoList 小功能，了解循环和双向绑定")],-1),_={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/03-Todo-List.html",target:"_blank",rel:"noopener noreferrer"},b=e("h3",{id:"_1-5-组件概念初探-对-todolist-进行组件代码拆分",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-5-组件概念初探-对-todolist-进行组件代码拆分","aria-hidden":"true"},"#"),n(" 1.5 组件概念初探，对 TodoList 进行组件代码拆分")],-1),f={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/04-todo-list-optimize.html",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"_2-vue-基础语法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-vue-基础语法","aria-hidden":"true"},"#"),n(" 2. Vue 基础语法")],-1),g=e("h3",{id:"_2-1-vue-中应用和组件的基础概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-1-vue-中应用和组件的基础概念","aria-hidden":"true"},"#"),n(" 2.1 Vue 中应用和组件的基础概念")],-1),k={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/05-basic-api.html",target:"_blank",rel:"noopener noreferrer"},x=e("h3",{id:"_2-2-理解-vue-中的生命周期函数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-2-理解-vue-中的生命周期函数","aria-hidden":"true"},"#"),n(" 2.2 理解 Vue 中的生命周期函数")],-1),V={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/06-life-cycle.html",target:"_blank",rel:"noopener noreferrer"},q=e("h3",{id:"_2-3-常用模版语法讲解",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-3-常用模版语法讲解","aria-hidden":"true"},"#"),n(" 2.3 常用模版语法讲解")],-1),M={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/07-common-template-syntax.html",target:"_blank",rel:"noopener noreferrer"},R=e("h3",{id:"_2-4-数据-方法-计算属性和侦听器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-4-数据-方法-计算属性和侦听器","aria-hidden":"true"},"#"),n(" 2.4 数据，方法，计算属性和侦听器")],-1),G=e("ul",null,[e("li",null,"computed:当计算属性依赖的内容发生变化时。才会重新执行"),e("li",null,"methods: 主要页面重新渲染，才会重新计算"),e("li",null,"computed 和 methods 都能实现的功能，建议使用 computed, 因为 computed 有缓存优化"),e("li",null,"computed 和 watch 都能实现的功能，建议使用 computed，因为 computed 更加简洁")],-1),y={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/08-data-computed-watch.html",target:"_blank",rel:"noopener noreferrer"},j=e("h3",{id:"_2-5-样式绑定语法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-5-样式绑定语法","aria-hidden":"true"},"#"),n(" 2.5 样式绑定语法")],-1),w=e("p",null,"支持 变量字符串、变量对象、变量数组、行内样式等",-1),S={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/09-class-style.html",target:"_blank",rel:"noopener noreferrer"},C=e("h3",{id:"_2-6-条件渲染",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-6-条件渲染","aria-hidden":"true"},"#"),n(" 2.6 条件渲染")],-1),P=e("p",null,"v-if v-else-if v-else",-1),T=e("p",null,"v-show",-1),A={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/10-conditional-rendering.html",target:"_blank",rel:"noopener noreferrer"},D=s('<h3 id="_2-7-列表渲染" tabindex="-1"><a class="header-anchor" href="#_2-7-列表渲染" aria-hidden="true">#</a> 2.7 列表渲染</h3><ol><li>v-for</li></ol><ul><li>可以循环数组：v-for=&quot;(item, itemIndex) in listArray&quot; :key=&quot;item&quot; <ul><li>更改数组的方法 <ul><li>使用数组的变更函数 push、pop、shift、unshift、splice、sort、reverse</li><li>还可以直接改变数组 ：this.listArray = [&#39;bey&#39;, &#39;world&#39;]</li><li>直接更新数组的某一项内容（新版本支持，旧版本不支持如此）： this.listArray[0] = &#39;唐三藏&#39;</li></ul></li></ul></li><li>可以循环对象：v-for=&quot;(value, key) in listObject&quot; :key=&quot;key&quot;</li><li>循环一个数字： v-for=&quot;item in 10&quot; :key=&quot;item&quot;</li></ul><ol start="2"><li><p>v-for 与 v-if</p><ul><li>同时使用 <code>v-if</code> 和 <code>v-for</code> 是<strong>不推荐的</strong>，因为这样二者的优先级不明显</li><li>当它们同时存在于一个节点上时，<code>v-if</code> 比 <code>v-for</code> 的优先级更高。这意味着 <code>v-if</code> 的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名：</li></ul></li><li><p>通过 key 管理状态</p><p>Vue 默认按照“就地更新”的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。</p><p>默认模式是高效的，但<strong>只适用于列表渲染输出不依赖子组件状态或者临时 DOM 状态 (例如表单输入值)</strong>。</p><p>为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，你需要为每个项目提供一个唯一的 <code>key</code> attribute：</p></li></ol>',4),I={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/11-list-rendering.html",target:"_blank",rel:"noopener noreferrer"},O=s('<h3 id="_2-8-事件处理" tabindex="-1"><a class="header-anchor" href="#_2-8-事件处理" aria-hidden="true">#</a> 2.8 事件处理</h3><ol><li>绑定事件</li></ol><ul><li>@click=&quot;handleClick&quot; 默认参数为 event</li><li>@click=&quot;handleClick(2)&quot; 传递参数 2</li><li>@click=&quot;handleClick(2, $event)&quot; 传递参数 2 和 event</li><li>@click=&quot;handleClick(2, $event), handleClickTwo($event)&quot; 绑定多个点击事件并传递参数</li></ul><ol start="2"><li>修饰符</li></ol><ul><li>事件修饰符:.stop、.prevent、.self、.capture、.once、.passive</li><li>按键修饰符：.enter、.tab、.esc、.space、.up、.down、.left、.right</li><li>鼠标修饰符： left、right、middle</li><li>精确修饰符：exact</li></ul>',5),L={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/12-event-handling.html",target:"_blank",rel:"noopener noreferrer"},E=s(`<h3 id="_2-9-表单输入绑定" tabindex="-1"><a class="header-anchor" href="#_2-9-表单输入绑定" aria-hidden="true">#</a> 2.9 表单输入绑定</h3><ol><li><p>v-model 还可以用于各种不同类型的输入，<strong>textarea</strong>、<strong>select</strong> 元素。它会根据所使用的元素自动扩展到不同的 DOM 属性和事件组合：</p></li><li><p>单选框 input type=&quot;radio&quot;</p></li><li><p>复选框 input type=&quot;checkbox&quot;</p></li><li><p>选择器 select</p><ul><li>单个选择器</li><li>多个选择器（值绑定到一个数组）</li></ul></li><li><p>对于复选框 type=&quot;checkbox&quot; 还可以使用 true-value 和 false-value。 它们 是 Vue 特有的 attributes 且仅会在 v-model 存在时工作。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">true-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">false-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>选择器选项：v-model 同样也支持非字符串类型的值绑定！在上面这个例子中，当某个选项被选中，selected 会被设为该对象字面量值 { number: 123 }</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selected<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 内联对象字面量 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ number: 123 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,2),N={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/13-form-input-binding.html",target:"_blank",rel:"noopener noreferrer"},B=s('<h2 id="_3-探索组件的理念" tabindex="-1"><a class="header-anchor" href="#_3-探索组件的理念" aria-hidden="true">#</a> 3. 探索组件的理念</h2><h3 id="_3-1-组件的定义及复用性-局部组件和全局组件" tabindex="-1"><a class="header-anchor" href="#_3-1-组件的定义及复用性-局部组件和全局组件" aria-hidden="true">#</a> 3.1 组件的定义及复用性，局部组件和全局组件</h3><ol><li>全局注册： app.component() <ul><li>定义了以后，处处可以使用，性能不高，但是使用方便，名字建议 小写字母，中间用 - 链接</li></ul></li><li>局部注册：：components: { ComponentA } <ul><li>定义了以后，要注册以后才能使用，性能比较高，使用起来稍微麻烦点，建议大写驼峰式命名</li><li>局部组件使用时，要做一个名字和组件之间的映射对象</li></ul></li></ol>',3),z={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/14-component-registration.html",target:"_blank",rel:"noopener noreferrer"},U=e("h3",{id:"_3-2-组件间传值及传值校验",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-2-组件间传值及传值校验","aria-hidden":"true"},"#"),n(" 3.2 组件间传值及传值校验")],-1),$=e("ol",null,[e("li",null,"组件间传值用 props"),e("li",null,[n("props 校验 "),e("ul",null,[e("li",null,"type 可以是下列这些原生构造器： String、Number、Boolean、Array、Object、Date、Function、Symbol、"),e("li",null,"required: true/false 可以声明属性非（必）需传"),e("li",null,"default: '' 可以声明属性默认值, 也可以用一个函数表达式进行返回"),e("li",null,"validator: 支持检验函数")])])],-1),J={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/15-component-props.html",target:"_blank",rel:"noopener noreferrer"},H=e("h3",{id:"_3-3-单项数据流的理解",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-3-单项数据流的理解","aria-hidden":"true"},"#"),n(" 3.3 单项数据流的理解")],-1),K=e("blockquote",null,[e("p",null,"所有的 prop 都遵循着单向绑定原则，prop 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改了父组件的状态，不然应用的数据流就会变得难以理解了。")],-1),W=e("ol",null,[e("li",null,"传递多个属性值时候可以用 v-bind"),e("li",null,"组件属性名字过长时候，用-连接，但是组件内部需要用驼峰法来接入"),e("li",null,[n("单向数据流： "),e("ul",null,[e("li",null,"想要更改 prop 通常都符合以下两种场景： - prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性。在这种情况下，最好是新定义一个局部数据属性，从 prop 上获取初始值即可： - prop 以原始的形式传入，但还需作转换。在这种情况中，最好是基于该 prop 值定义一个计算属性：")])])],-1),X={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/16-component-props-one-way-flow.html",target:"_blank",rel:"noopener noreferrer"},F=e("h3",{id:"_3-4-non-props-属性是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-4-non-props-属性是什么","aria-hidden":"true"},"#"),n(" 3.4 Non-Props 属性是什么")],-1),Q=e("blockquote",null,[e("p",null,"其实很简单，之前讲的组件传参，子组件会使用 props:[''] 的方式接收父组件传递的参数，如果子组件不使用 props:[''] 接收参数，那这个参数就是一个 Non-Props 属性。")],-1),Y=e("ol",null,[e("li",null,'父组件传递子组件属性值，子组件却没有使用，也没有声明 props, 最后渲染时，会把传递的属性比如 message = "hello" 原封不动的渲染到了 比如 test 子组件的最外层标签上'),e("li",null,"在子组件中增加属性 inheritAttrs:false，Non-Props 属性 就不会渲染到最外层标签了")],-1),Z={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/17-component-props-non-props.html",target:"_blank",rel:"noopener noreferrer"},ee=s('<h3 id="_3-5-父子组件间如何通过事件进行通信" tabindex="-1"><a class="header-anchor" href="#_3-5-父子组件间如何通过事件进行通信" aria-hidden="true">#</a> 3.5 父子组件间如何通过事件进行通信</h3><ol><li>子组件中通过使用 $emit 函数触发自定义事件，支持 @ 缩写，也支持.once 修饰符</li><li>另外 像组件与 prop 一样，事件的名字也提供了自动的转换。请注意，我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 kebab-case 形式来监听。与 prop 大小写格式一样，在模板中我们也推荐使用 kebab-case 形式来编写监听器。</li><li>可以给 $emit 提供一个值作为额外的参数来传递参数</li><li>emits 可以声明 触发的事件，也可以通过设置为函数对其进行校验</li><li>组件上的 v-model <ul><li>默认属性名为 modelValue, 触发的事件名为 update:modelValue</li></ul><ul><li>也支持自定义，比如 v-model:app , 则子组件中需要接收的属性名为 app, 需要触发的事件名字为 update:app</li></ul></li></ol>',2),ne={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/18-component-events.html",target:"_blank",rel:"noopener noreferrer"},ae=s(`<h3 id="_3-6-组件间双向绑定高级内容" tabindex="-1"><a class="header-anchor" href="#_3-6-组件间双向绑定高级内容" aria-hidden="true">#</a> 3.6 组件间双向绑定高级内容</h3><ol><li><p>多个 v-model 的绑定</p></li><li><p>v-model 的参数</p><ul><li>默认情况下，v-model 在组件上都是使用 modelValue 作为 prop，以 update:modelValue 作为对应的事件。我们可以通过给 v-model 指定一个参数来更改这些名字： v-model:title=&quot;bookTitle&quot;，在这个例子中，子组件应该有一个 title prop，并通过触发 update:title 事件更新父组件值：</li></ul></li><li><p>处理 v-model 修饰符</p><ul><li><p>v-model.capitalize=&quot;myText&quot;： 要给组件的 v-model 添加修饰符，都可以通过 modelModifiers prop 在组件内访问到。在下面的例子中，我们会创建一个包含 modelModifiers prop 的组件，它的默认值是一个空对象：</p></li><li><p>对于又有参数又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + &quot;Modifiers&quot;。举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>v<span class="token operator">-</span>model<span class="token operator">:</span>title<span class="token punctuation">.</span>capitalize<span class="token operator">=</span><span class="token string">&quot;myText&quot;</span>

<span class="token comment">// console.log(props.titleModifiers) // { capitalize: true }</span>
<span class="token comment">// 触发事件 emit(&quot;update:title&quot;)</span>
<span class="token comment">// props: [&#39;title&#39;, &#39;titleModifiers&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>`,2),te={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/19-component-events-add.html",target:"_blank",rel:"noopener noreferrer"},se=s('<h3 id="_3-7-使用插槽和具名插槽解决组件内容传递问题" tabindex="-1"><a class="header-anchor" href="#_3-7-使用插槽和具名插槽解决组件内容传递问题" aria-hidden="true">#</a> 3.7 使用插槽和具名插槽解决组件内容传递问题</h3><blockquote><p>我们已经学习过组件能够接收任意类型的 JavaScript 值作为 props，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。这里就需要用到本节的插槽 slot 来完成</p></blockquote><blockquote><p>通过使用插槽， 组件更加灵活和具有可复用性。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。</p></blockquote><ol><li>作用域规则：任何父组件模板中的东西都只被编译到父组件的作用域中；而任何子组件模板中的东西都只被编译到子组件的作用域中。</li><li>插槽也可以设置默认内容： 在外部没有提供任何内容的情况下，为插槽指定默认内容用于渲染是很有用的。</li><li>具名插槽：有时在一个组件中包含多个插槽的插口是很有用的。对于这种场景，slot 元素可以有一个特殊的 attribute name，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容： <ul><li>要为具名插槽传入内容，我们需要使用一个含 v-slot 指令的 template 元素，并将目标插槽的名字传给该指令： template v-slot:header</li></ul><ul><li>v-slot 有对应的简写 #，因此 template v-slot:header 可以简写为 template #header 其意思就是“将这部分模板片段传入子组件的 header 插槽中”</li></ul></li></ol>',4),oe={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/20-component-slots.html",target:"_blank",rel:"noopener noreferrer"},le=s(`<h3 id="_3-8-作用域插槽" tabindex="-1"><a class="header-anchor" href="#_3-8-作用域插槽" aria-hidden="true">#</a> 3.8 作用域插槽</h3><blockquote><p>在默认插槽和具名插槽中，插槽的内容无法访问到子组件的状态 然而在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。</p></blockquote><ol><li><p>我门可以像对组件传递 prop 那样，向一个插槽的插口上传递 attribute</p></li><li><p>子组件传入插槽的 props 作为了 v-slot 指令的值 比如 v-slot=&quot;slotProps&quot;，可以在插槽内的表达式中访问。你可以将作用域插槽类比为一个传入子组件的函数。子组件会将相应的 prop 作为参数去调用它</p></li><li><p>具名作用域插槽</p><ul><li><p>向具名插槽中传入 props：</p><blockquote><p>注意: 如下代码中，插槽上的 name 是由 Vue 保留的，不会作为 props 传递给插槽。 因此最终 headerProps 的结果是 { message: &#39;hello&#39; }</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span> // MyComponent.vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>具名作用域插槽的工作方式也是类似的，插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到：<code>v-slot:name=&quot;slotProps&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headerProps<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> {{ headerProps }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>`,3),ie={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/21-component-scoped-slots.html",target:"_blank",rel:"noopener noreferrer"},re=e("h3",{id:"_3-9-动态组件和异步组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-9-动态组件和异步组件","aria-hidden":"true"},"#"),n(" 3.9 动态组件和异步组件")],-1),ce=e("ol",null,[e("li",null,"动态组件： 根据数据的变化，结合 component 这个标签，来随时动态切换组件的显示"),e("li",null,"异步组件： defineAsyncComponent 方法接收一个返回 Promise 的加载函数。这个 Promise 的 resolve 回调方法应该在从服务器获得组件定义时调用。")],-1),de={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/22-component-async-dynamic.html",target:"_blank",rel:"noopener noreferrer"},pe=e("h3",{id:"_3-10-基础语法知识点查缺补漏",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-10-基础语法知识点查缺补漏","aria-hidden":"true"},"#"),n(" 3.10 基础语法知识点查缺补漏")],-1),ue=e("ol",null,[e("li",null,"v-once: 只渲染一次，即使数据发生变化"),e("li",null,"ref: 实际上是获取 DOM 节点的一个语法, 还可以获取组件的引用"),e("li",null,"provide/inject")],-1),he={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/23-component-add.html",target:"_blank",rel:"noopener noreferrer"},me=e("h2",{id:"_4-vue-中的动画",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-vue-中的动画","aria-hidden":"true"},"#"),n(" 4. Vue 中的动画")],-1),_e=e("h3",{id:"_4-1-使用-vue-实现基础的-css-过渡与动画效果",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-1-使用-vue-实现基础的-css-过渡与动画效果","aria-hidden":"true"},"#"),n(" 4.1 使用 Vue 实现基础的 CSS 过渡与动画效果")],-1),be=e("ol",null,[e("li",null,[n("基础的 过渡或者动画可以实现的方式 "),e("ul",null,[e("li",null,"class 样式"),e("li",null,"行内 style 样式")])])],-1),fe={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/24-transition-animation.html",target:"_blank",rel:"noopener noreferrer"},ve=s(`<h3 id="_4-2-使用-transition-标签实现单元素组件的过渡和动画效果" tabindex="-1"><a class="header-anchor" href="#_4-2-使用-transition-标签实现单元素组件的过渡和动画效果" aria-hidden="true">#</a> 4.2 使用 transition 标签实现单元素组件的过渡和动画效果</h3><ol><li><p>初步使用 transition 实现 入场 和 出场动画</p><ul><li>需要配合使用相应的 css 样式：v-enter-from v-enter-to v-enter-active v-leave-from v-leave-active v-leave-to</li></ul></li><li><p>可以使用 transition 和 name 属性实现自定义 class 名的 入场 和 出场动画（假设 name 属性值为 hello）</p><ul><li>需要配合使用相应的 css 样式：hello-enter-from hello-enter-to hello-enter-active hello-leave-from hello-leave-active hello-leave-to</li></ul></li><li><p>支持自定义 class 类名：</p><ul><li>enter-from-class、enter-active-class、enter-to-class、leave-from-class、leave-active-class、leave-to-class</li></ul></li><li><p>支持自定义 js 钩子函数</p><ul><li><p>这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用。</p></li><li><p>当只用 JavaScript 过渡的时候，在 enter 和 leave 钩子中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成。添加 :css=&quot;false&quot; 也会让 Vue 会跳过 CSS 的检测，除了性能略高之外，这也可以避免过渡过程中受到 CSS 规则的意外影响。</p></li><li><p>支持的事件如下:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>@before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;
@enter-cancelled=&quot;enterCancelled&quot; @before-leave=&quot;beforeLeave&quot;
@leave=&quot;leave&quot; @after-leave=&quot;afterLeave&quot; @leave-cancelled=&quot;leaveCancelled&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol>`,2),ge={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/25-transition.html",target:"_blank",rel:"noopener noreferrer"},ke=s('<h3 id="_4-3-组件和元素切换动画的实现" tabindex="-1"><a class="header-anchor" href="#_4-3-组件和元素切换动画的实现" aria-hidden="true">#</a> 4.3 组件和元素切换动画的实现</h3><ol><li>多个元素之间的切换 <ul><li>可以通过 appear attribute 设置节点在初始渲染的过渡</li><li>有时候我们正在处理更复杂的动作，需要协调进入和离开的状态，所以 Vue 提供了一个非常有用的工具，称之为<strong>过渡模式</strong>： <ul><li>in-out: 新元素先进行进入过渡，完成之后当前元素过渡离开。</li><li>out-in: 当前元素先进行离开过渡，完成之后新元素过渡进入</li></ul></li></ul></li><li>多个组件之间的切换 <ul><li>使用以上配置也同样适用</li><li>多个单组件之间的切换也同样可以用动态组件来实现</li></ul></li></ol>',2),xe={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/26-transition-between-components.html",target:"_blank",rel:"noopener noreferrer"},Ve=s('<h3 id="_4-4-列表动画" tabindex="-1"><a class="header-anchor" href="#_4-4-列表动画" aria-hidden="true">#</a> 4.4 列表动画</h3><blockquote><p>使用 v-for 的场景下，我们会使用 transition-group 组件</p></blockquote><ol><li>关于这个组件的几个特点： <ul><li>默认情况下，它不会渲染一个包裹元素，但是你可以通过 tag attribute 指定渲染一个元素</li><li>过渡模式不可用，因为我们不再相互切换特有的元素</li><li>内部元素总是需要提供唯一的 key attribute 值</li><li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身</li></ul></li><li>transition-group 组件还有一个特殊之处。除了进入和离开，它还可以为定位的改变添加动画。只需了解新增的 v-move 类就可以使用这个新功能，它会应用在元素改变定位的过程中。像之前的类名一样，它的前缀可以通过 name attribute 来自定义，也可以通过 move-class attribute 手动设置。</li></ol>',3),qe={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/27-transition-group.html",target:"_blank",rel:"noopener noreferrer"},Me=e("h3",{id:"_4-5-状态动画",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-5-状态动画","aria-hidden":"true"},"#"),n(" 4.5 状态动画")],-1),Re=e("p",null,"Vue 的过渡系统提供了非常多简单的方法来设置进入、离开和列表的动效，那么对于数据元素本身的动效呢？比如：数字和运算、颜色的显示、SVG 节点的位置、元素的大小和其他的 property",-1),Ge={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/28-transition-state.html",target:"_blank",rel:"noopener noreferrer"},ye=s('<h2 id="_5-vue-中的高级语法" tabindex="-1"><a class="header-anchor" href="#_5-vue-中的高级语法" aria-hidden="true">#</a> 5. Vue 中的高级语法</h2><h3 id="_5-1-mixin-混入的基础语法" tabindex="-1"><a class="header-anchor" href="#_5-1-mixin-混入的基础语法" aria-hidden="true">#</a> 5.1 Mixin 混入的基础语法</h3><ol><li>mixin 混入 <ul><li>组件 data 优先级高于 mixin data 优先级</li><li>生命周期函数：先执行 mixin 里面的，在执行组件内的</li><li>自定义属性例如 methods 中的方法：组件种的属性优先级高于 mixin 属性的优先级</li><li>mixin 也分为局部的 mixin 和 全局的 mixin</li></ul></li><li>自定义选项合并策略</li></ol><ul><li>自定义选项在合并时，默认策略为简单地覆盖已有值。如果想让某个自定义选项以自定义逻辑进行合并，可以在 <code>app.config.optionMergeStrategies</code> 中添加一个函数：</li></ul><ol start="3"><li>不足：在 Vue 2 中，mixin 是将部分组件逻辑抽象成可重用块的主要工具。但是，他们有几个问题：</li></ol>',5),je=e("li",null,"Mixin 很容易发生冲突：因为每个 mixin 的 property 都被合并到同一个组件中，所以为了避免 property 名冲突，你仍然需要了解其他每个特性。",-1),we=e("li",null,"可重用性是有限的：我们不能向 mixin 传递任何参数来改变它的逻辑，这降低了它们在抽象逻辑方面的灵活性。",-1),Se={href:"https://v3.cn.vuejs.org/guide/composition-api-introduction.html",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/29-mixin.html",target:"_blank",rel:"noopener noreferrer"},Pe=s(`<h3 id="_5-2-开发实现-vue-中的自定义指令" tabindex="-1"><a class="header-anchor" href="#_5-2-开发实现-vue-中的自定义指令" aria-hidden="true">#</a> 5.2 开发实现 Vue 中的自定义指令</h3><blockquote><p>除了 Vue 内置的一系列指令 (比如 v-model 或 v-show) 之外，Vue 还允许你注册自定义的指令。</p></blockquote><ol><li><p>一个自定义指令被定义为一个包含类似于组件的生命周期钩子的对象。(指令钩子,都是可选的)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在绑定元素的 attribute 前</span>
  <span class="token comment">// 或事件监听器应用前调用</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 下面会介绍各个参数的细节</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在元素被插入到 DOM 前调用</span>
  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在绑定元素的父组件</span>
  <span class="token comment">// 及他自己的所有子节点都挂载完成后调用</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件更新前调用</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在绑定元素的父组件</span>
  <span class="token comment">// 及他自己的所有子节点都更新后调用</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件卸载前调用</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件卸载后调用</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>全局注册指令</p></li><li><p>局部注册指令</p></li></ol>`,3),Te={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/30-custom-direcitves.html",target:"_blank",rel:"noopener noreferrer"},Ae=s(`<h3 id="_5-3-teleport-传送门功能" tabindex="-1"><a class="header-anchor" href="#_5-3-teleport-传送门功能" aria-hidden="true">#</a> 5.3 teleport 传送门功能</h3><blockquote><p>Teleport 是一个内置组件，使我们可以将一个组件的一部分模板“传送”到该组件的 DOM 层次结构之外的 DOM 节点中。</p></blockquote><ol><li><p>Teleport 挂载时，传送门的 to 目标必须是已经存在于 DOM 之中</p></li><li><p>也可以禁用 teleport :disabled=&quot;isMobile&quot; 这里的 isMobile 状态可以根据媒体查询的不同结果动态地更新</p></li><li><p>同一目标上多个传送门</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染的结果为：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modals<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,3),De={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/31-teleport.html",target:"_blank",rel:"noopener noreferrer"},Ie=e("h3",{id:"_5-4-更加底层的-render-函数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-4-更加底层的-render-函数","aria-hidden":"true"},"#"),n(" 5.4 更加底层的 render 函数")],-1),Oe={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/32-render.html",target:"_blank",rel:"noopener noreferrer"},Le=e("h3",{id:"_5-5-插件的定义和使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-5-插件的定义和使用","aria-hidden":"true"},"#"),n(" 5.5 插件的定义和使用")],-1),Ee=e("blockquote",null,[e("p",null,"插件是一种能为 Vue 添加全局功能的工具代码。")],-1),Ne=e("li",null,[e("p",null,"它可以是一个拥有 install() 方法的对象，或者就简单地只是一个函数，它自己就是安装函数。安装函数接收应用实例和传递给 app.use() 的额外选项：")],-1),Be=e("p",null,"插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：",-1),ze={href:"https://staging-cn.vuejs.org/api/application.html#app-component",target:"_blank",rel:"noopener noreferrer"},Ue=e("code",null,"app.component()",-1),$e={href:"https://staging-cn.vuejs.org/api/application.html#app-directive",target:"_blank",rel:"noopener noreferrer"},Je=e("code",null,"app.directive()",-1),He={href:"https://staging-cn.vuejs.org/api/application.html#app-provide",target:"_blank",rel:"noopener noreferrer"},Ke=e("code",null,"app.provide()",-1),We={href:"https://staging-cn.vuejs.org/guide/components/provide-inject.html",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://staging-cn.vuejs.org/api/application.html#app-config-globalproperties",target:"_blank",rel:"noopener noreferrer"},Fe=e("code",null,"app.config.globalProperties",-1),Qe={href:"https://github.com/vuejs/vue-router-next",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/33-plugins.html",target:"_blank",rel:"noopener noreferrer"},Ze=e("h3",{id:"_5-6-数据校验插件开发实例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-6-数据校验插件开发实例","aria-hidden":"true"},"#"),n(" 5.6 数据校验插件开发实例")],-1),en={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/34-plugins-validator.html",target:"_blank",rel:"noopener noreferrer"},nn=e("h2",{id:"_6-composition-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-composition-api","aria-hidden":"true"},"#"),n(" 6. Composition API")],-1),an=e("h3",{id:"_6-1-setup-函数的使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-1-setup-函数的使用","aria-hidden":"true"},"#"),n(" 6.1 setup 函数的使用")],-1),tn=e("ol",null,[e("li",null,"setup 函数会在 created 实例被完全初始化之前"),e("li",null,[n("参数为 "),e("ul",null,[e("li",null,"props:一个 setup 函数的 props 是响应式的，并且会在传入新的 prop 时同步更新。但是，props 解构出的变量将会丢失响应性,因此我们推荐通过 props.xxx 的形式来使用其中的 prop 或者 使用 toRefs() 和 toRef() 这两个工具 API"),e("li",null,"context: { attrs, slots, emit, expose }")])])],-1),sn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/35-composition-api-setup.html",target:"_blank",rel:"noopener noreferrer"},on=e("h3",{id:"_6-2-ref-reactive-响应式引用的用法和原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-2-ref-reactive-响应式引用的用法和原理","aria-hidden":"true"},"#"),n(" 6.2 ref，reactive 响应式引用的用法和原理")],-1),ln=e("ol",null,[e("li",null,[n("ref/reactive 响应式: "),e("ul",null,[e("li",null,"原理： 通过 Proxy 对数据进行封装，当数据变化时，触发模板等内容的更新")])]),e("li",null,"reactive: 返回一个对象的响应式代理"),e("li",null,"readonly：接受一个对象 (不论是响应式还是一般的) 或是一个 ref，返回一个原值的只读代理。")],-1),rn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/35-composition-api-setup.html",target:"_blank",rel:"noopener noreferrer"},cn=e("h3",{id:"_6-3-toref-以及-context-参数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-3-toref-以及-context-参数","aria-hidden":"true"},"#"),n(" 6.3 toRef 以及 context 参数")],-1),dn=e("ol",null,[e("li",null,"toRefs、toRef 实现结构后的数据保持响应式"),e("li",null,"context: { attrs, slots, emit, expose }")],-1),pn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/37-composition-api-toref-context.html",target:"_blank",rel:"noopener noreferrer"},un=e("h3",{id:"_6-4-使用-composition-api-开发-todolist",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-4-使用-composition-api-开发-todolist","aria-hidden":"true"},"#"),n(" 6.4 使用 Composition API 开发 TodoList")],-1),hn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/38-composition-api-todolist.html",target:"_blank",rel:"noopener noreferrer"},mn=e("h3",{id:"_6-5-computed-方法生成计算属性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-5-computed-方法生成计算属性","aria-hidden":"true"},"#"),n(" 6.5 computed 方法生成计算属性")],-1),_n=e("ol",null,[e("li",null,"接受一个 getter 函数，返回一个只读的响应式 ref 对象，即 getter 函数的返回值。"),e("li",null,"它也可以接受一个带有 get 和 set 函数的对象来创建一个可写的 ref 对象。")],-1),bn=e("p",null,"注意： 当 computed 接收参数为一个函数时候，它是只读的",-1),fn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/39-composition-api-computed.html",target:"_blank",rel:"noopener noreferrer"},vn=e("h3",{id:"_6-6-watch-和-watcheffect-的使用和差异性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-6-watch-和-watcheffect-的使用和差异性","aria-hidden":"true"},"#"),n(" 6.6 watch 和 watchEffect 的使用和差异性")],-1),gn=e("p",null,"watch: 侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。",-1),kn=e("li",null,"watch() 默认是懒侦听的，即仅在侦听源发生变化时才执行回调函数",-1),xn=e("li",null,[n("第一个参数是侦听器的"),e("strong",null,"源"),n("。这个来源可以是以下几种： "),e("ul",null,[e("li",null,"一个函数，返回一个值"),e("li",null,"一个 ref"),e("li",null,"一个响应式对象"),e("li",null,"...或是由以上类型的值组成的数组")])],-1),Vn=e("li",null,[n("第二个参数是在发生变化时要调用的回调函数。这个回调函数接受三个参数：新值、旧值，以及一个用于注册副作用清理的回调函数。该回调函数会在副作用下一次重新执行前调用，可以用来清除无效的副作用，例如等待中的异步请求。注意："),e("strong",null,"当侦听多个来源时，回调函数接受两个数组，分别对应来源数组中的新值和旧值。")],-1),qn=e("li",null,[e("strong",null,[e("code",null,"immediate")]),n("：在侦听器创建时立即触发回调。第一次调用时旧值是 "),e("code",null,"undefined"),n("。")],-1),Mn=e("strong",null,[e("code",null,"deep")],-1),Rn={href:"https://staging-cn.vuejs.org/guide/essentials/watchers.html#deep-watchers",target:"_blank",rel:"noopener noreferrer"},Gn=e("strong",null,[e("code",null,"flush")],-1),yn={href:"https://staging-cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing",target:"_blank",rel:"noopener noreferrer"},jn=e("strong",null,[e("code",null,"onTrack / onTrigger")],-1),wn={href:"https://staging-cn.vuejs.org/guide/extras/reactivity-in-depth.html#watcher-debugging",target:"_blank",rel:"noopener noreferrer"},Sn=e("li",null,[e("p",null,"watchEffect: 立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。")],-1),Cn=e("p",null,"区别：",-1),Pn={href:"https://staging-cn.vuejs.org/api/reactivity-core.html#watcheffect",target:"_blank",rel:"noopener noreferrer"},Tn=e("code",null,"watchEffect()",-1),An=e("code",null,"watch()",-1),Dn=e("ul",null,[e("li",null,[e("p",null,"懒执行副作用；")]),e("li",null,[e("p",null,"更加明确是应该由哪个状态触发侦听器重新执行；")]),e("li",null,[e("p",null,"可以访问所侦听状态的前一个值和当前值。")])],-1),In=e("li",null,[e("p",null,"与 watch 相比，watchEffect 可以使我们"),e("ul",null,[e("li",null,"立即执行，没有惰性"),e("li",null,"不需要传递你要侦听的内容，自动感知依赖, 不需要传递很多参数，只需要传递一个回调函数即可"),e("li",null,"不过不能获取之前数据的值")])],-1),On={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/40-composition-api-watch-watcheffect.html",target:"_blank",rel:"noopener noreferrer"},Ln=s('<h3 id="_6-7-生命周期函数的新写法" tabindex="-1"><a class="header-anchor" href="#_6-7-生命周期函数的新写法" aria-hidden="true">#</a> 6.7 生命周期函数的新写法</h3><blockquote><p>所有罗列在本页的 API 都应该在组件的 setup() 阶段被同步调用</p></blockquote><ul><li>onMounted: 注册一个回调函数，在组件挂载完成后执行。</li><li>onUpdated: 注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。</li><li>onUnmounted: 注册一个回调函数，在组件实例被卸载之后调用。</li><li>onBeforeMount: 注册一个钩子，在组件被挂载之前被调用。</li><li>onBeforeUpdate: 注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</li><li>onBeforeUnmount: 注册一个钩子，在组件实例被卸载之前调用。</li><li>onErrorCaptured: 注册一个钩子，在捕获了后代组件传递的错误时调用。</li><li>onRenderTracked（Dev only）: 注册一个调试钩子，当响应式依赖被组件的渲染作用追踪后调用。</li><li>onRenderTriggered（Dev only）: 注册一个调试钩子，当响应式依赖触发了组件渲染作用的运行之后调用。</li><li>onActivated: 注册一个回调函数，若组件实例是 KeepAlive 缓存树的一部分，当组件被插入到 DOM 中时调用。</li><li>onDeactivated: 注册一个回调函数，若组件实例是 KeepAlive 缓存树的一部分，当组件从 DOM 中被移除时调用。</li><li>onServerPrefetch（SSR only）: 注册一个异步函数，在组件实例在服务器上被渲染之前调用。</li></ul>',3),En={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/41-composition-api-lifecycle.html",target:"_blank",rel:"noopener noreferrer"},Nn=e("h3",{id:"_6-12-provide-inject-模版-ref-的用法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-12-provide-inject-模版-ref-的用法","aria-hidden":"true"},"#"),n(" 6.12 Provide,Inject,模版 Ref 的用法")],-1),Bn={href:"https://github.com/mineMineGo/Vue-Related/blob/master/vue3-learn-practice-demo/42-composition-api-provide-inject.html",target:"_blank",rel:"noopener noreferrer"},zn=e("h2",{id:"_7-vue-项目开发配套工具讲解",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-vue-项目开发配套工具讲解","aria-hidden":"true"},"#"),n(" 7. Vue 项目开发配套工具讲解")],-1),Un=e("h3",{id:"_7-1-vuecli-的使用和单文件组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-1-vuecli-的使用和单文件组件","aria-hidden":"true"},"#"),n(" 7.1 VueCLI 的使用和单文件组件")],-1),$n={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},Jn=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token function">install</span> nrm <span class="token parameter variable">-g</span> // 切换 <span class="token function">npm</span> 源
nrm <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Hn=s(`<li><p>安装 vue-cli</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli
<span class="token comment"># OR</span>
<span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),Kn=e("p",null,"创建一个项目",-1),Wn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`vue create vue3-demo // vue-demo 项目名字，可以自定义，然后选择相应的配置（默认配置 或者 手动选择）
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Xn={href:"https://github.com/mineMineGo/Vue-Related/commit/ebd3f506b0866506432fad907c2a198258bbdbb4",target:"_blank",rel:"noopener noreferrer"},Fn=e("h3",{id:"_7-2-使用单文件组件编写-todolist",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-2-使用单文件组件编写-todolist","aria-hidden":"true"},"#"),n(" 7.2 使用单文件组件编写 TodoList")],-1),Qn={href:"https://github.com/mineMineGo/Vue-Related/commit/01206f85fdb20e6f72e21a547f72d375153d0667",target:"_blank",rel:"noopener noreferrer"},Yn=s(`<h3 id="_7-3-vue-router-路由的理解和使用" tabindex="-1"><a class="header-anchor" href="#_7-3-vue-router-路由的理解和使用" aria-hidden="true">#</a> 7.3 Vue-Router 路由的理解和使用</h3><ol><li><p>创建新项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   vue create <span class="token number">44</span>-vue3-router-demo // <span class="token number">44</span>-vue3-router-demo 项目名字，可以自定义，然后选择相应的配置（默认配置 或者 手动选择）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>选择时候选择 vue3 vue-router xxx 模式</p></li></ol>`,2),Zn={href:"https://github.com/mineMineGo/Vue-Related/commit/7d709bda8f88fe50ba600b1c12bbf7a40e38127b",target:"_blank",rel:"noopener noreferrer"},ea=s(`<h3 id="_7-4-vuex-的语法详解" tabindex="-1"><a class="header-anchor" href="#_7-4-vuex-的语法详解" aria-hidden="true">#</a> 7.4 VueX 的语法详解</h3><ol><li><p>创建新项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   vue create <span class="token number">45</span>-vue3-vuex-demo // vue-demo 项目名字，可以自定义，然后选择相应的配置（默认配置 或者 手动选择）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>选择时候选择 vue3 vue-router xxx 模式</p></li></ol>`,2),na={href:"https://github.com/mineMineGo/Vue-Related/commit/1e0c7e4abcbc0b09b7bccf88ba0088ab3725aa16",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://github.com/mineMineGo/Vue-Related/commit/634b0a0f8d7230eda99615eadbda5d5452833aab",target:"_blank",rel:"noopener noreferrer"},ta=e("h3",{id:"_7-5-compositionapi-中如何使用-vuex",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-5-compositionapi-中如何使用-vuex","aria-hidden":"true"},"#"),n(" 7.5 compositionAPI 中如何使用 VueX")],-1),sa={href:"https://github.com/mineMineGo/Vue-Related/commit/33d548f94fb0769ea9f0b99232124d911eea9854",target:"_blank",rel:"noopener noreferrer"},oa=s(`<h3 id="_7-6-使用-axios-发送-ajax-请求" tabindex="-1"><a class="header-anchor" href="#_7-6-使用-axios-发送-ajax-请求" aria-hidden="true">#</a> 7.6 使用 axios 发送 ajax 请求</h3><ol><li><p>安装 axios 依赖包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   <span class="token function">npm</span> <span class="token function">install</span> axios <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,2),la={href:"https://github.com/mineMineGo/Vue-Related/commit/991a334e62746d8d7e5f5a3f262635874228a26f",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://github.com/mineMineGo/Vue-Related/commit/d7a7a2a8aa3230e207e6cd29ed6f2af7842e4941",target:"_blank",rel:"noopener noreferrer"},ra=e("h2",{id:"_8-京东到家-项目首页开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-京东到家-项目首页开发","aria-hidden":"true"},"#"),n(" 8. 京东到家 项目首页开发")],-1),ca=e("h3",{id:"_8-1-工程初始化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-1-工程初始化","aria-hidden":"true"},"#"),n(" 8.1 工程初始化")],-1),da={href:"https://github.com/mineMineGo/Vue-Related/commit/e3e5d8875a5bf339031af800c1bde1c250b16a34",target:"_blank",rel:"noopener noreferrer"},pa=s(`<h3 id="_8-2-工程目录代码简介及整理" tabindex="-1"><a class="header-anchor" href="#_8-2-工程目录代码简介及整理" aria-hidden="true">#</a> 8.2 工程目录代码简介及整理</h3><ul><li><p>node_modules 存放第三方的一些依赖模块</p></li><li><p>public</p><ul><li>index.html 入口 html 文件</li><li>favicon.ico 浏览器标签小 icon</li></ul></li><li><p>src</p><ul><li>main.js 文件入口，引用 vue 组件等产生实例并挂载</li></ul><ul><li>App.vue 根组件</li><li>assets：静态文件夹</li><li>components：公用组件</li><li>router：路由文件</li><li>store：状态管理文件</li><li>views：视图组件</li></ul></li><li><p>babel.config.js</p><ul><li>babel 配置文件</li></ul></li><li><p>package.json</p><ul><li>browserslist: &gt;1% 表示支持全球使用量超过 1%的浏览器，last 2 versions 支持最后两个版本</li></ul></li><li><p>package-lock.json</p><ul><li>锁定依赖包版本号</li></ul></li></ul><h3 id="_8-3-基础样式集成及开发模拟器的使用" tabindex="-1"><a class="header-anchor" href="#_8-3-基础样式集成及开发模拟器的使用" aria-hidden="true">#</a> 8.3 基础样式集成及开发模拟器的使用</h3><ol><li><p>安装 normalize.css 来抹平相同标签在不同浏览器之间的表现差异</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> normalize.css <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>main.js</code> 引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;normalize.css&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建 <code>style</code> 文件夹，并创建 <code>style/base.scss</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>html<span class="token punctuation">{</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 20px<span class="token punctuation">;</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token string">&#39;./style/base.scss&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,4),ua={href:"https://github.com/mineMineGo/Vue-Related/commit/37feadd40ec2249dc2079e9076a79b2f4afe69af",target:"_blank",rel:"noopener noreferrer"},ha=e("h3",{id:"_8-4-flex-iconfont-完成首页-docker-样式编写",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-4-flex-iconfont-完成首页-docker-样式编写","aria-hidden":"true"},"#"),n(" 8.4 flex + iconfont 完成首页 docker 样式编写")],-1),ma={href:"https://github.com/mineMineGo/Vue-Related/commit/bec236e9ee3b1495c8e8b09f7459f5e46c81fde2",target:"_blank",rel:"noopener noreferrer"},_a=e("h3",{id:"_8-5-使用-scss-组织地址区域布局",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-5-使用-scss-组织地址区域布局","aria-hidden":"true"},"#"),n(" 8.5 使用 Scss 组织地址区域布局")],-1),ba={href:"https://github.com/mineMineGo/Vue-Related/commit/8db3d42d1cd3733ba57a263c650e3a814634e8f4",target:"_blank",rel:"noopener noreferrer"},fa=e("h3",{id:"_8-6-利用-css-技巧实现搜索及-banner-区域布局",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-6-利用-css-技巧实现搜索及-banner-区域布局","aria-hidden":"true"},"#"),n(" 8.6 利用 CSS 技巧实现搜索及 banner 区域布局")],-1),va={href:"https://github.com/mineMineGo/Vue-Related/commit/20334947151ec6533a188d3217cc1c666c0c0cf3",target:"_blank",rel:"noopener noreferrer"},ga=e("h3",{id:"_8-7-使用-flex-布局实现图标列表布局",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-7-使用-flex-布局实现图标列表布局","aria-hidden":"true"},"#"),n(" 8.7 使用 flex 布局实现图标列表布局")],-1),ka={href:"https://github.com/mineMineGo/Vue-Related/commit/8a002b9bcaa682fa843c3f34fbd936a960ae5477",target:"_blank",rel:"noopener noreferrer"},xa=e("h3",{id:"_8-8-首页布局收尾",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-8-首页布局收尾","aria-hidden":"true"},"#"),n(" 8.8 首页布局收尾")],-1),Va={href:"https://github.com/mineMineGo/Vue-Related/commit/588233e6febf69535668d8b9fd2c15c67925d5fb",target:"_blank",rel:"noopener noreferrer"},qa=s('<h3 id="_8-9-首页组件的合理拆分" tabindex="-1"><a class="header-anchor" href="#_8-9-首页组件的合理拆分" aria-hidden="true">#</a> 8.9 首页组件的合理拆分</h3><h3 id="_8-10-使用-v-for-v-html-指令精简页面代码" tabindex="-1"><a class="header-anchor" href="#_8-10-使用-v-for-v-html-指令精简页面代码" aria-hidden="true">#</a> 8.10 使用 v-for, v-html 指令精简页面代码</h3><h3 id="_8-11-css-作用域约束以及-vue-开发者工具的安装使用" tabindex="-1"><a class="header-anchor" href="#_8-11-css-作用域约束以及-vue-开发者工具的安装使用" aria-hidden="true">#</a> 8.11 CSS 作用域约束以及 Vue 开发者工具的安装使用</h3>',3),Ma={href:"https://github.com/mineMineGo/Vue-Related/commit/cd8e4ceedd05b7561388b3f1929c22fc7d40ace3",target:"_blank",rel:"noopener noreferrer"},Ra=e("h2",{id:"_9-登陆功能开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-登陆功能开发","aria-hidden":"true"},"#"),n(" 9. 登陆功能开发")],-1),Ga=e("h3",{id:"_9-1-登陆页面布局开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-1-登陆页面布局开发","aria-hidden":"true"},"#"),n(" 9.1 登陆页面布局开发")],-1),ya={href:"https://github.com/mineMineGo/Vue-Related/commit/68bb5838e8364d27dfb245c0166bbc6aa694d7b8",target:"_blank",rel:"noopener noreferrer"},ja=e("h3",{id:"_9-2-路由守卫实现基础登陆校验功能",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-2-路由守卫实现基础登陆校验功能","aria-hidden":"true"},"#"),n(" 9.2 路由守卫实现基础登陆校验功能")],-1),wa={href:"https://github.com/mineMineGo/Vue-Related/commit/27fb210cc88d9cfc7cdee5f8b4af7939ec61f88b",target:"_blank",rel:"noopener noreferrer"},Sa=e("h3",{id:"_9-3-注册页面开发及路由串联复习",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-3-注册页面开发及路由串联复习","aria-hidden":"true"},"#"),n(" 9.3 注册页面开发及路由串联复习")],-1),Ca={href:"https://github.com/mineMineGo/Vue-Related/commit/338358f9d0d7ddc1b91948829c4769b501b5ed41",target:"_blank",rel:"noopener noreferrer"},Pa=e("h3",{id:"_9-4-使用-axios-发送登陆-mock-请求",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-4-使用-axios-发送登陆-mock-请求","aria-hidden":"true"},"#"),n(" 9.4 使用 axios 发送登陆 Mock 请求")],-1),Ta={href:"https://github.com/mineMineGo/Vue-Related/commit/c4ff72daf5783afb17046eecce2ac17b4203847c",target:"_blank",rel:"noopener noreferrer"},Aa=e("h3",{id:"_9-5-请求函数的封装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-5-请求函数的封装","aria-hidden":"true"},"#"),n(" 9.5 请求函数的封装")],-1),Da=e("h3",{id:"_9-6-toast-弹窗组件的开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_9-6-toast-弹窗组件的开发","aria-hidden":"true"},"#"),n(" 9.6 Toast 弹窗组件的开发")],-1),Ia={href:"https://github.com/mineMineGo/Vue-Related/commit/c37eb05f215d4880f2778a0b8b8a7f8d6f4e311c",target:"_blank",rel:"noopener noreferrer"},Oa=s('<h3 id="_9-7-通过代码拆分增加逻辑可维护性" tabindex="-1"><a class="header-anchor" href="#_9-7-通过代码拆分增加逻辑可维护性" aria-hidden="true">#</a> 9.7 通过代码拆分增加逻辑可维护性</h3><h3 id="_9-8-setup-函数的职责以及注册功能的实现" tabindex="-1"><a class="header-anchor" href="#_9-8-setup-函数的职责以及注册功能的实现" aria-hidden="true">#</a> 9.8 Setup 函数的职责以及注册功能的实现</h3><h2 id="_10-商家展示功能开发-上" tabindex="-1"><a class="header-anchor" href="#_10-商家展示功能开发-上" aria-hidden="true">#</a> 10. 商家展示功能开发(上)</h2><h3 id="_10-1-首页附近店铺数据动态化-详情页准备" tabindex="-1"><a class="header-anchor" href="#_10-1-首页附近店铺数据动态化-详情页准备" aria-hidden="true">#</a> 10.1 首页附近店铺数据动态化-详情页准备</h3><h3 id="_10-2-动态路由-异步路由与组件拆分复用" tabindex="-1"><a class="header-anchor" href="#_10-2-动态路由-异步路由与组件拆分复用" aria-hidden="true">#</a> 10.2 动态路由，异步路由与组件拆分复用</h3><h3 id="_10-3-搜索布局及路由跳转" tabindex="-1"><a class="header-anchor" href="#_10-3-搜索布局及路由跳转" aria-hidden="true">#</a> 10.3 搜索布局及路由跳转</h3><h3 id="_10-4-路由参数的传递以及商家详情的获取" tabindex="-1"><a class="header-anchor" href="#_10-4-路由参数的传递以及商家详情的获取" aria-hidden="true">#</a> 10.4 路由参数的传递以及商家详情的获取</h3>',7),La={href:"https://github.com/mineMineGo/Vue-Related/commit/2247d2b522f957bf4f0fd84983c02d20008ebf65",target:"_blank",rel:"noopener noreferrer"},Ea=e("h3",{id:"_10-5-商家页面核心样式开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_10-5-商家页面核心样式开发","aria-hidden":"true"},"#"),n(" 10.5 商家页面核心样式开发")],-1),Na={href:"https://github.com/mineMineGo/Vue-Related/commit/ca29408974de4bd1701969d60f411d1a6ede5e49",target:"_blank",rel:"noopener noreferrer"},Ba=s('<h3 id="_10-6-样式的优化与代码复用" tabindex="-1"><a class="header-anchor" href="#_10-6-样式的优化与代码复用" aria-hidden="true">#</a> 10.6 样式的优化与代码复用</h3><h3 id="_10-7-商家详情页分类及内容联动的实现" tabindex="-1"><a class="header-anchor" href="#_10-7-商家详情页分类及内容联动的实现" aria-hidden="true">#</a> 10.7 商家详情页分类及内容联动的实现</h3><h3 id="_10-8-使用-watcheffect-巧妙的进行代码拆分" tabindex="-1"><a class="header-anchor" href="#_10-8-使用-watcheffect-巧妙的进行代码拆分" aria-hidden="true">#</a> 10.8 使用 watchEffect 巧妙的进行代码拆分</h3>',3),za={href:"https://github.com/mineMineGo/Vue-Related/commit/72e7730c3221d44b4d83bb4d2d39cd301cd7bd3f",target:"_blank",rel:"noopener noreferrer"},Ua=e("h2",{id:"_11-商家展示功能开发-下",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-商家展示功能开发-下","aria-hidden":"true"},"#"),n(" 11. 商家展示功能开发（下）")],-1),$a=e("h3",{id:"_11-1-购物车的样式开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-1-购物车的样式开发","aria-hidden":"true"},"#"),n(" 11.1 购物车的样式开发")],-1),Ja={href:"https://github.com/mineMineGo/Vue-Related/commit/ce43bb3d1f18a4038073aaa4e4560c73f7308948",target:"_blank",rel:"noopener noreferrer"},Ha=e("h3",{id:"_11-2-vuex-中购物车数据结构的设计",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-2-vuex-中购物车数据结构的设计","aria-hidden":"true"},"#"),n(" 11.2 Vuex 中购物车数据结构的设计")],-1),Ka=e("h3",{id:"_11-3-使用-computed-完成订单价格计算",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-3-使用-computed-完成订单价格计算","aria-hidden":"true"},"#"),n(" 11.3 使用 computed 完成订单价格计算")],-1),Wa={href:"https://github.com/mineMineGo/Vue-Related/commit/a718f174386fc8b287a0326afb21657bf61e8a7a",target:"_blank",rel:"noopener noreferrer"},Xa=e("h3",{id:"_11-4-购物车及列表双向数据同步功能开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-4-购物车及列表双向数据同步功能开发","aria-hidden":"true"},"#"),n(" 11.4 购物车及列表双向数据同步功能开发")],-1),Fa={href:"https://github.com/mineMineGo/Vue-Related/commit/d3a83b29ea42c4d495bc61924ec8153acc494efa",target:"_blank",rel:"noopener noreferrer"},Qa=e("h3",{id:"_11-5-根据购物车选中状态计算订单金额",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-5-根据购物车选中状态计算订单金额","aria-hidden":"true"},"#"),n(" 11.5 根据购物车选中状态计算订单金额")],-1),Ya=e("h3",{id:"_11-6-全选及清空购物车的功能实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-6-全选及清空购物车的功能实现","aria-hidden":"true"},"#"),n(" 11.6 全选及清空购物车的功能实现")],-1),Za={href:"https://github.com/mineMineGo/Vue-Related/commit/321468b0d8b6490c197c12475fdbc01013d0ee93",target:"_blank",rel:"noopener noreferrer"},et=e("h3",{id:"_11-7-商家详情页面代码优化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-7-商家详情页面代码优化","aria-hidden":"true"},"#"),n(" 11.7 商家详情页面代码优化")],-1),nt={href:"https://github.com/mineMineGo/Vue-Related/commit/dd3f58a99c9fd595526f484408b194d419abc64a",target:"_blank",rel:"noopener noreferrer"},at=s('<h3 id="_11-8-购物车数据结构的变更" tabindex="-1"><a class="header-anchor" href="#_11-8-购物车数据结构的变更" aria-hidden="true">#</a> 11.8 购物车数据结构的变更</h3><h3 id="_11-9-通过-localstorage-实现购物车信息持久存储" tabindex="-1"><a class="header-anchor" href="#_11-9-通过-localstorage-实现购物车信息持久存储" aria-hidden="true">#</a> 11.9 通过 LocalStorage 实现购物车信息持久存储</h3><h2 id="_12-核心购物链路开发" tabindex="-1"><a class="header-anchor" href="#_12-核心购物链路开发" aria-hidden="true">#</a> 12. 核心购物链路开发</h2><h3 id="_12-1-确认订单页面创建及顶部布局" tabindex="-1"><a class="header-anchor" href="#_12-1-确认订单页面创建及顶部布局" aria-hidden="true">#</a> 12.1 确认订单页面创建及顶部布局</h3><h3 id="_12-2-订单商品列表数据获取与布局" tabindex="-1"><a class="header-anchor" href="#_12-2-订单商品列表数据获取与布局" aria-hidden="true">#</a> 12.2 订单商品列表数据获取与布局</h3><h3 id="_12-3-页面布局及展示逻辑开发" tabindex="-1"><a class="header-anchor" href="#_12-3-页面布局及展示逻辑开发" aria-hidden="true">#</a> 12.3 页面布局及展示逻辑开发</h3><h3 id="_12-4-确认订单页面组件拆分及弹框布局制作" tabindex="-1"><a class="header-anchor" href="#_12-4-确认订单页面组件拆分及弹框布局制作" aria-hidden="true">#</a> 12.4 确认订单页面组件拆分及弹框布局制作</h3>',7),tt={href:"https://github.com/mineMineGo/Vue-Related/commit/885b39e7b59780b20cb58fa70b8e93410994e012",target:"_blank",rel:"noopener noreferrer"},st={href:"https://github.com/mineMineGo/Vue-Related/commit/7518926605caa77516e0d43116f46669df6f72b4",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://github.com/mineMineGo/Vue-Related/commit/2e8a3bc6cb377fda22cd9ff0e8318fb8a2393ed5",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://github.com/mineMineGo/Vue-Related/commit/27b402c66f7d1fda6fd734a97a1ab14c46e8c384",target:"_blank",rel:"noopener noreferrer"},it=s('<h3 id="_12-5-购物流程开发完成" tabindex="-1"><a class="header-anchor" href="#_12-5-购物流程开发完成" aria-hidden="true">#</a> 12.5 购物流程开发完成</h3><h3 id="_12-6-下单流程开发优化" tabindex="-1"><a class="header-anchor" href="#_12-6-下单流程开发优化" aria-hidden="true">#</a> 12.6 下单流程开发优化</h3><h3 id="_12-7-订单列表页布局开发" tabindex="-1"><a class="header-anchor" href="#_12-7-订单列表页布局开发" aria-hidden="true">#</a> 12.7 订单列表页布局开发</h3><h3 id="_12-8-订单列表逻辑开发" tabindex="-1"><a class="header-anchor" href="#_12-8-订单列表逻辑开发" aria-hidden="true">#</a> 12.8 订单列表逻辑开发</h3><h3 id="_12-9-订单列表页布局开发" tabindex="-1"><a class="header-anchor" href="#_12-9-订单列表页布局开发" aria-hidden="true">#</a> 12.9 订单列表页布局开发</h3>',5),rt={href:"https://github.com/mineMineGo/Vue-Related/commit/57b48e9ab7b555825d2e31f4ce04881faa5105fa",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://github.com/mineMineGo/Vue-Related/commit/bdcdeab68a961f1bb124cf5f644d052808d9d45f",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://github.com/mineMineGo/Vue-Related/commit/606db3693e2d3b9c8ec290324ed657bfc466a583",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://github.com/mineMineGo/Vue-Related/commit/9716d31c515db7a7416546ca1df2abc2db04fec9",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://github.com/mineMineGo/Vue-Related/commit/030253f712ab424b7ebc0868bf866849336b4ac1",target:"_blank",rel:"noopener noreferrer"},ht=s('<h2 id="_13-真机调试及工程发布流程" tabindex="-1"><a class="header-anchor" href="#_13-真机调试及工程发布流程" aria-hidden="true">#</a> 13. 真机调试及工程发布流程</h2><h3 id="_13-1-如何进行真机调试" tabindex="-1"><a class="header-anchor" href="#_13-1-如何进行真机调试" aria-hidden="true">#</a> 13.1 如何进行真机调试</h3><blockquote><p>同一网络环境下，访问本地服务的 ip 地址进行联调</p></blockquote><h3 id="_13-2-解决真机调试过程中的展示问题" tabindex="-1"><a class="header-anchor" href="#_13-2-解决真机调试过程中的展示问题" aria-hidden="true">#</a> 13.2 解决真机调试过程中的展示问题</h3><p>光标过大、元素之间间距过大、购物车加减图标过大等</p><h3 id="_13-3-实现项目对不同设备的展示适配" tabindex="-1"><a class="header-anchor" href="#_13-3-实现项目对不同设备的展示适配" aria-hidden="true">#</a> 13.3 实现项目对不同设备的展示适配</h3><h3 id="_13-4-项目上线和课程总结" tabindex="-1"><a class="header-anchor" href="#_13-4-项目上线和课程总结" aria-hidden="true">#</a> 13.4 项目上线和课程总结</h3>',7);function mt(_t,bt){const a=l("ExternalLinkIcon");return i(),r("div",null,[d,e("p",null,[n("具体内容查看相应代码: "),e("a",p,[n("点击跳转 github"),t(a)])]),u,e("p",null,[n("具体内容查看相应代码: "),e("a",h,[n("点击跳转 github"),t(a)])]),m,e("p",null,[n("具体内容查看相应代码: "),e("a",_,[n("点击跳转 github"),t(a)])]),b,e("p",null,[n("具体内容查看相应代码："),e("a",f,[n("点击跳转 github"),t(a)])]),v,g,e("p",null,[n("具体内容查看相应代码："),e("a",k,[n("点击跳转 github"),t(a)])]),x,e("p",null,[n("具体内容查看相应代码："),e("a",V,[n("点击跳转 github"),t(a)])]),q,e("p",null,[n("具体内容查看相应代码："),e("a",M,[n("点击跳转 github"),t(a)])]),R,G,e("p",null,[n("具体内容查看相应代码："),e("a",y,[n("点击跳转 github"),t(a)])]),j,w,e("p",null,[n("具体内容查看相应代码："),e("a",S,[n("点击跳转 github"),t(a)])]),C,P,T,e("p",null,[n("具体内容查看相应代码："),e("a",A,[n("点击跳转 github"),t(a)])]),D,e("p",null,[n("具体内容查看相应代码："),e("a",I,[n("点击跳转 github"),t(a)])]),O,e("p",null,[n("具体内容查看相应代码："),e("a",L,[n("点击跳转 github"),t(a)])]),E,e("p",null,[n("具体内容查看相应代码："),e("a",N,[n("点击跳转 github"),t(a)])]),B,e("p",null,[n("具体内容查看相应代码："),e("a",z,[n("点击跳转 github"),t(a)])]),U,$,e("p",null,[n("具体内容查看相应代码："),e("a",J,[n("点击跳转 github"),t(a)])]),H,K,W,e("p",null,[n("具体内容查看相应代码："),e("a",X,[n("点击跳转 github"),t(a)])]),F,Q,Y,e("p",null,[n("具体内容查看相应代码："),e("a",Z,[n("点击跳转 github"),t(a)])]),ee,e("p",null,[n("具体内容查看相应代码："),e("a",ne,[n("点击跳转 github"),t(a)])]),ae,e("p",null,[n("具体内容查看相应代码："),e("a",te,[n("点击跳转 github"),t(a)])]),se,e("p",null,[n("具体内容查看相应代码："),e("a",oe,[n("点击跳转 github"),t(a)])]),le,e("p",null,[n("具体内容查看相应代码："),e("a",ie,[n("点击跳转 github"),t(a)])]),re,ce,e("p",null,[n("具体内容查看相应代码："),e("a",de,[n("点击跳转 github"),t(a)])]),pe,ue,e("p",null,[n("具体内容查看相应代码："),e("a",he,[n("点击跳转 github"),t(a)])]),me,_e,be,e("p",null,[n("具体内容查看相应代码："),e("a",fe,[n("点击跳转 github"),t(a)])]),ve,e("p",null,[n("具体内容查看相应代码："),e("a",ge,[n("点击跳转 github"),t(a)])]),ke,e("p",null,[n("具体内容查看相应代码："),e("a",xe,[n("点击跳转 github"),t(a)])]),Ve,e("p",null,[n("具体内容查看相应代码："),e("a",qe,[n("点击跳转 github"),t(a)])]),Me,Re,e("p",null,[n("具体内容查看相应代码："),e("a",Ge,[n("点击跳转 github"),t(a)])]),ye,e("ul",null,[je,we,e("li",null,[n("建议使用 "),e("a",Se,[n("组合式 API"),t(a)]),n("。")])]),e("p",null,[n("具体内容查看相应代码："),e("a",Ce,[n("点击跳转 github"),t(a)])]),Pe,e("p",null,[n("具体内容查看相应代码："),e("a",Te,[n("点击跳转 github"),t(a)])]),Ae,e("p",null,[n("具体内容查看相应代码："),e("a",De,[n("点击跳转 github"),t(a)])]),Ie,e("p",null,[n("具体内容查看相应代码："),e("a",Oe,[n("点击跳转 github"),t(a)])]),Le,Ee,e("ol",null,[Ne,e("li",null,[Be,e("ul",null,[e("li",null,[n("通过 "),e("a",ze,[Ue,t(a)]),n(" 和 "),e("a",$e,[Je,t(a)]),n(" 注册一到多个全局组件或自定义指令。")]),e("li",null,[n("通过 "),e("a",He,[Ke,t(a)]),n(" 使一个资源"),e("a",We,[n("可被注入"),t(a)]),n("进整个应用。")]),e("li",null,[n("向 "),e("a",Xe,[Fe,t(a)]),n(" 中添加一些全局实例属性或方法")]),e("li",null,[n("一个可能上述三种都包含了的功能库 (例如 "),e("a",Qe,[n("vue-router"),t(a)]),n(")。")])])])]),e("p",null,[n("具体内容查看相应代码："),e("a",Ye,[n("点击跳转 github"),t(a)])]),Ze,e("p",null,[n("具体内容查看相应代码："),e("a",en,[n("点击跳转 github"),t(a)])]),nn,an,tn,e("p",null,[n("具体内容查看相应代码："),e("a",sn,[n("点击跳转 github"),t(a)])]),on,ln,e("p",null,[n("具体内容查看相应代码："),e("a",rn,[n("点击跳转 github"),t(a)])]),cn,dn,e("p",null,[n("具体内容查看相应代码："),e("a",pn,[n("点击跳转 github"),t(a)])]),un,e("p",null,[n("具体内容查看相应代码："),e("a",hn,[n("点击跳转 github"),t(a)])]),mn,_n,bn,e("p",null,[n("具体内容查看相应代码："),e("a",fn,[n("点击跳转 github"),t(a)])]),vn,e("ol",null,[e("li",null,[gn,e("ul",null,[kn,e("li",null,[n("参数详解 "),e("ul",null,[xn,Vn,e("li",null,[n("第三个可选的参数是一个对象，支持以下这些选项 "),e("ul",null,[qn,e("li",null,[Mn,n("：如果源是对象，强制深度遍历，以便在深层级变更时启动回调。参考"),e("a",Rn,[n("深层侦听器"),t(a)]),n("一节。")]),e("li",null,[Gn,n("：调整回调函数的刷新时机。参考"),e("a",yn,[n("回调的刷新时机"),t(a)]),n("一节。")]),e("li",null,[jn,n("：调试侦听器的依赖。参考"),e("a",wn,[n("调试侦听器"),t(a)]),n("一节。")])])])])])])]),Sn,e("li",null,[Cn,e("ul",null,[e("li",null,[e("p",null,[n("与 "),e("a",Pn,[Tn,t(a)]),n(" 相比，"),An,n(" 使我们可以：")]),Dn]),In])])]),e("p",null,[n("具体内容查看相应代码："),e("a",On,[n("点击跳转 github"),t(a)])]),Ln,e("p",null,[n("具体内容查看相应代码："),e("a",En,[n("点击跳转 github"),t(a)])]),Nn,e("p",null,[n("具体内容查看相应代码："),e("a",Bn,[n("点击跳转 github"),t(a)])]),zn,Un,e("ol",null,[e("li",null,[e("p",null,[n("下载安装 node："),e("a",$n,[n("官网"),t(a)])]),Jn]),Hn,e("li",null,[Kn,Wn,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",Xn,[n("点击跳转 github"),t(a)])])])]),Fn,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",Qn,[n("点击跳转 github"),t(a)])]),Yn,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",Zn,[n("点击跳转 github"),t(a)])]),ea,e("p",null,[n("具体内容查看相应代码提交历史： "),e("a",na,[n("vue3+vuex 项目初始化"),t(a)]),e("a",aa,[n("vuex 数据状态的保持以及更改操作"),t(a)])]),ta,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",sa,[n("点击跳转 github"),t(a)])]),oa,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",la,[n("安装引入相关依赖"),t(a)])]),e("p",null,[e("a",ia,[n("模拟请求接口"),t(a)])]),ra,ca,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",da,[n("京东项目初始化"),t(a)])]),pa,e("p",null,[n("具体内容查看相应代码提交历史："),e("a",ua,[n("基础样式集成"),t(a)])]),ha,e("p",null,[n("具体内容查看相应代码："),e("a",ma,[n("底部 docker"),t(a)])]),_a,e("p",null,[n("具体内容查看相应代码："),e("a",ba,[n("点击跳转"),t(a)])]),fa,e("p",null,[n("具体内容查看相应代码："),e("a",va,[n("点击跳转"),t(a)])]),ga,e("p",null,[n("具体内容查看相应代码："),e("a",ka,[n("点击跳转"),t(a)])]),xa,e("p",null,[n("具体内容查看相应代码："),e("a",Va,[n("点击跳转"),t(a)])]),qa,e("p",null,[n("具体内容查看相应代码："),e("a",Ma,[n("点击跳转"),t(a)])]),Ra,Ga,e("p",null,[n("具体内容查看相应代码："),e("a",ya,[n("点击跳转"),t(a)])]),ja,e("p",null,[n("具体内容查看相应代码："),e("a",wa,[n("点击跳转"),t(a)])]),Sa,e("p",null,[n("具体内容查看相应代码："),e("a",Ca,[n("点击跳转"),t(a)])]),Pa,e("p",null,[n("具体内容查看相应代码："),e("a",Ta,[n("点击跳转"),t(a)])]),Aa,Da,e("p",null,[n("具体内容查看相应代码："),e("a",Ia,[n("点击跳转"),t(a)])]),Oa,e("p",null,[n("具体内容查看相应代码："),e("a",La,[n("点击跳转"),t(a)])]),Ea,e("p",null,[n("具体内容查看相应代码："),e("a",Na,[n("点击跳转"),t(a)])]),Ba,e("p",null,[n("具体内容查看相应代码："),e("a",za,[n("点击跳转"),t(a)])]),Ua,$a,e("p",null,[n("具体内容查看相应代码："),e("a",Ja,[n("点击跳转"),t(a)])]),Ha,Ka,e("p",null,[n("具体内容查看相应代码："),e("a",Wa,[n("点击跳转"),t(a)])]),Xa,e("p",null,[n("具体内容查看相应代码："),e("a",Fa,[n("点击跳转"),t(a)])]),Qa,Ya,e("p",null,[n("具体内容查看相应代码："),e("a",Za,[n("点击跳转"),t(a)])]),et,e("p",null,[n("具体内容查看相应代码："),e("a",nt,[n("点击跳转"),t(a)])]),at,e("p",null,[n("具体内容查看相应代码："),e("a",tt,[n("结算页面布局"),t(a)])]),e("p",null,[e("a",st,[n("商品列表数据获取与展示"),t(a)])]),e("p",null,[e("a",ot,[n("提交订单弹框布局"),t(a)])]),e("p",null,[e("a",lt,[n("提交订单弹框逻辑"),t(a)])]),it,e("p",null,[e("a",rt,[n("tabBar 组件的完善以及涉及页面开发"),t(a)])]),e("p",null,[e("a",ct,[n("购物车的页面布局"),t(a)])]),e("p",null,[e("a",dt,[n("购物车页面逻辑"),t(a)])]),e("p",null,[e("a",pt,[n("订单页面布局"),t(a)])]),e("p",null,[e("a",ut,[n("订单页面逻辑开发"),t(a)])]),ht])}const vt=o(c,[["render",mt],["__file","vue3-learn-practice.html.vue"]]);export{vt as default};
