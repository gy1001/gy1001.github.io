import{_ as c,M as t,p as d,q as r,R as n,t as e,N as o,a1 as a}from"./framework-e8cb8151.js";const p="/assets/5cd962eb000160d406400359-c578d027.jpg",l={},i=n("h1",{id:"_03-webpack-开发环境搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_03-webpack-开发环境搭建","aria-hidden":"true"},"#"),e(" 03-Webpack 开发环境搭建")],-1),u=n("p",null,[n("img",{src:p,alt:"img"})],-1),h=n("blockquote",null,[n("p",null,"从不浪费时间的人，没有工夫抱怨时间不够。——杰弗逊")],-1),m={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"因为 Webpack 实际是用 Node.js 写的，所以首先来介绍下 Node.js 的安装。已经准备好环境的，或者之前有过 Node.js 和 NPM 使用经验的可以直接跳过本小节内容。直接跳到下一小节的 Webpack 入门内容。",-1),b=n("h2",{id:"安装-node-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装-node-js","aria-hidden":"true"},"#"),e(" 安装 Node.js")],-1),k={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://nodejs.org/zh-cn/download/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://brew.sh/index_zh-cn",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"node-js-版本管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#node-js-版本管理","aria-hidden":"true"},"#"),e(" Node.js 版本管理")],-1),N={href:"https://github.com/creationix/nvm",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/coreybutler/nvm-windows",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/aliyun-node/tnvm",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"node-js-包管理工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#node-js-包管理工具","aria-hidden":"true"},"#"),e(" Node.js 包管理工具")],-1),x={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"1.x.x",-1),y=n("code",null,"alpha",-1),W=n("code",null,"beta",-1),S={href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"主版本号.次版本号.修订号",-1),C=n("code",null,"MAJOR.MINOR.PATCH",-1),E=a(`<blockquote><p>1.主版本号：当你做了不兼容的 API 修改； 2.次版本号：当你做了向下兼容的功能性新增； 3.修订号：当你做了向下兼容的问题修正；</p></blockquote><p>NPM 中使用了一个命名为<code>package.json</code>的文件作为一个 NPM 包的描述文件，<code>package.json</code>包含了包的基本信息（名称、版本号、描述、作者等）和依赖关系，例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.29.6&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 <code>version</code> 符合 semver 规范以外，再来看下其他两项：</p>`,4),V=n("code",null,"name",-1),z=n("code",null,"demo",-1),A={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"@scope/name",-1),B=n("code",null,"作用域包",-1),L=n("code",null,"@babel/core",-1),R=n("code",null,"@babel",-1),D={href:"https://www.npmjs.cn/misc/scope/",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,[n("code",null,"dependencies"),e("：是"),n("code",null,"demo"),e("这个项目的依赖，就是 demo 这个包内离开"),n("code",null,"webpack"),e("这个包就不能使用了，对应的还有"),n("code",null,"devdependencies"),e("，开发以来，一般需要二次开发 demo 的时候需要安装的包，实际项目中，"),n("code",null,"webpack"),e("是构建工具，代码不会直接用 webpack 的 API，而只在开发和打包的时候采用，所以正确做法是放在"),n("code",null,"devdependencies"),e("中。")],-1),O=n("code",null,"dependencies",-1),H=n("code",null,"webpack",-1),Y=n("code",null,"^",-1),F=n("code",null,"4",-1),G={href:"https://www.npmjs.cn/misc/semver/#ranges",target:"_blank",rel:"noopener noreferrer"},K=a('<h3 id="npm-的常用命令" tabindex="-1"><a class="header-anchor" href="#npm-的常用命令" aria-hidden="true">#</a> NPM 的常用命令</h3><p>下面介绍下 NPM 的常用命令：安装、删除、初始化、配置。</p><h4 id="安装和删除" tabindex="-1"><a class="header-anchor" href="#安装和删除" aria-hidden="true">#</a> <strong>安装和删除</strong></h4><p>安装某个 NPM 包，使用命令<code>npm install packageName</code>，简写<code>npm i packageName</code>，如果执行命令的目录下有<code>package.json</code>则可以直接用<code>npm install</code>安装<code>package.json</code>中的所有依赖。如果我们要安装某个版本的包，则可以使用命令<code>npm i packageName@x.x.x</code>格式。</p><p>如果我们安装依赖包并且将这个依赖写入<code>package.json</code>则可以使用命令<code>npm i packageName --save</code>（简写<code>npm i packageName -S</code>），如果希望写到<code>package.json</code>开发依赖中（<code>devdependencies</code>）则使用命令<code>npm i packageName --save-dev</code>（简写<code>npm i packageName -D</code>）</p><p>删除某个 NPM 包，则使用<code>npm uninstall 包名</code>。</p><h4 id="本地模式和全局模式" tabindex="-1"><a class="header-anchor" href="#本地模式和全局模式" aria-hidden="true">#</a> 本地模式和全局模式</h4><p>npm 的包安装，分为本地模式和全局模式，默认是本地模式，即在执行<code>npm install</code>命令的当前目录创建<code>node_modules</code>，然后下载安装包及其依赖到<code>node_modules</code>目录。全局模式是指安装到全局路径的方式。</p><p>在 Node.js 的 require 依赖之时，会优先查找自己当前文件的<code>node_modules</code>，如果没有，则循环遍历上层的<code>node_modules</code>，如果便历到根目录还找不到，则会使用全局模式安装的模块，另外全局模式安装的包可以指定全局命令，只需要在<code>package.json</code>增加<code>bin</code>字段并且指向包内对应的文件即可。全局安装一个包，使用命令<code>npm install --global</code>，<code>--global</code>可以简写为<code>-g</code>。</p><h4 id="初始化一个-npm-项目" tabindex="-1"><a class="header-anchor" href="#初始化一个-npm-项目" aria-hidden="true">#</a> 初始化一个 NPM 项目</h4><p>npm init 用来初始化生成一个新的 package.json 文件。输入<code>npm init</code>并且根据对应的提示回答问题，会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。 如果使用了 <code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的 <code>package.json</code> 文件。</p><h4 id="设置-npm-镜像" tabindex="-1"><a class="header-anchor" href="#设置-npm-镜像" aria-hidden="true">#</a> 设置 NPM 镜像</h4>',12),Q={href:"https://npm.taobao.org/",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"cnpm",-1),X=n("code",null,"cnpm",-1),Z=a(`<p>单次使用镜像方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token punctuation">[</span>命令<span class="token punctuation">]</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置默认 npm 使用淘宝镜像方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用下面的命令可以安装 cnpm 包，之后直接像使用 npm 一样使用 cnpm 即可，不需要添加<code>register</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="npm-其他常用命令" tabindex="-1"><a class="header-anchor" href="#npm-其他常用命令" aria-hidden="true">#</a> NPM 其他常用命令</h4><ul><li>npm set：设置环境变量，例如：<code>npm set init-author-name &#39;Your name&#39;</code>，初始化的时候会使用默认环境变量；</li><li>npm info：查看某个包的信息，例如：<code>npm info lodash</code>；</li><li>npm search：查找 npm 仓库，后面可以跟字符串或者正则表达式，例如：<code>npm search webpack</code>；</li><li>npm list：树形的展现当前项目安装的所有模块，以及对应的依赖，例如：<code>npm list --global</code>查看全局安装的模块。</li></ul><h3 id="npm-scripts" tabindex="-1"><a class="header-anchor" href="#npm-scripts" aria-hidden="true">#</a> NPM Scripts</h3><p>NPM 不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code> 文件中可以添加 <code>scripts</code> 字段，用于指定脚本命令，供 NPM 直接调用。例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node src/scripts/dev.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>package.json</code>添加上面字段之后，可以直接使用<code>npm run build</code>和<code>npm run start</code>命令了，实际上：</p><ul><li><code>npm run build</code>：相当于执行了当前项目中目录下的<code>webpack</code>命令；</li><li><code>npm run start</code>：相当于执行了<code>node src/scripts/dev.js</code>。</li></ul><p>另外<code>npm run start</code>还可以简写成<code>npm start</code>。</p>`,14),$=n("code",null,"node_modules",-1),ee={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://pnpm.js.org/",target:"_blank",rel:"noopener noreferrer"},se=n("h2",{id:"安装-webpack-cli",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装-webpack-cli","aria-hidden":"true"},"#"),e(" 安装 Webpack-cli")],-1),oe={href:"https://github.com/webpack/webpack-cli",target:"_blank",rel:"noopener noreferrer"},ae=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> webpack-cli --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想全局使用<code>webpack</code>的命令，可以使用<code>npm install -g webpack-cli</code>安装。</p><blockquote><p>Tips：这里建议在项目中安装 webpack-cli 并且使用 <code>--save-dev</code> 的配置将 webpack-cli 放到开发依赖中。</p></blockquote><p>到此，我们就准备好 Webpack 的命令行开发环境了，下面小节开始介绍 webpack-cli 的零配置打包。</p><h5 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h5><p>本小节主要介绍了 Webpack 的开发环境搭建，从 Node.js 安装、NPM 的使用最基础开始讲解，指导学生手把手的上手 Node.js 开发环境。并且介绍了 NPM 相关的命令使用和 NPM Scripts 概念，NPM Scripts 在用 NPM 搭建项目开发命令时被广泛应用，接下来我们开始体验 Webpack-cli 的零配置打包吧！</p><blockquote><p>本小节 Webpack 相关面试题：</p><p>1.什么是 NPM Scripts？NPM Scripts 可以用来做什么？</p><p>2.NPM 的常用命令有哪些？</p></blockquote>`,7);function ce(te,de){const s=t("ExternalLinkIcon");return d(),r("div",null,[i,u,h,n("p",null,[e("本文将包括安装 Node、NPM、WebPack 开发环境，我使用的开发 IDE 是 "),n("a",m,[e("VScode"),o(s)]),e("。")]),_,b,n("p",null,[e("首先进入 "),n("a",k,[e("Node.js 的官网"),o(s)]),e("，选择对应系统的"),n("a",g,[e("下载包"),o(s)]),e("进行下载安装，对于 windows 用户，直接下载安装包安装即可，如果是 Macos 用户，推荐使用 "),n("a",v,[e("brew"),o(s)]),e(" 进行安装。接下来分别介绍下 Node.js 的版本管理和包管理工具。")]),f,n("p",null,[e("Node.js 版本众多，包括稳定版和开发版，可能不同的项目需要的 Node.js 版本不同，这里我推荐大家安装 8.9 以上版本，对于已经安装了 Node.js 的朋友，可以使用 "),n("a",N,[e("nvm"),o(s)]),e("（"),n("a",j,[e("windows 版本"),o(s)]),e("）对 Node.js 进行进行版本管理，（另外阿里有个 "),n("a",w,[e("tnvm"),o(s)]),e(" ，也是管理 Node.js 版本的，增加了 alinode 版本系列的 Node.js）。")]),q,n("p",null,[e("Node.js 之所以这么流行，离不开庞大的社区建设，这里第一功劳就是 NPM 团队的贡献，使用 Node.js 写的代码，可以打包发布到 JavaScript 包管理平台 "),n("a",x,[e("npmjs.com"),o(s)]),e("（这个存放包的地方一般也被称为仓库）上，当我们项目需要使用某个包（模块）时，可以直接使用包管理工具来安装（下载）对应的包，我们也可以免费注册一个账号，发布自己的公共包和私有包供其他人使用。")]),n("p",null,[e("NPM 是围绕着"),n("a",M,[e("语义版本控制（semver）"),o(s)]),e("思想而设计的，我们在软件版本中碰见的：rc、"),P,e("、"),y,e("、"),W,e("等名词都可以在 "),n("a",S,[e("semver.org"),o(s)]),e(" 得到解释介绍，简单来说规范是"),I,e("（"),C,e("）：")]),E,n("ul",null,[n("li",null,[V,e("：上面的代码就是表明了这个项目为"),z,e("，这样如果我们将来发布到 "),n("a",A,[e("npmjs.com"),o(s)]),e(" 会以这个来命名，除了这种方式的名称，还有一种命名的方式是"),T,e("的方式，是"),B,e("，例如我们用来转化 ES6 语法的"),L,e("就是"),R,e("的作用域，详细介绍可以查看 "),n("a",D,[e("package.json 的文档"),o(s)])]),J]),n("p",null,[e("注意到"),O,e(" 中"),H,e(" 的后面版本号前面加了"),Y,e("，意思是主版本是"),F,e("的最新版本，每次执行安装命令的时候，会更新符合这个规则的最新包，可以在"),n("a",G,[e("npm semver range 部分"),o(s)]),e("看到更详细的介绍。")]),K,n("p",null,[e("由于 NPM 网站经常不稳定，所以国内有很多镜像可以使用，"),n("a",Q,[e("淘宝 NPM 镜像"),o(s)]),e("是国内最大的一家 NPM 镜像网站，还有"),U,e("包可以替换官方 NPM 来使用，使用"),X,e("直接使用淘宝镜像安装 NPM 包。")]),Z,n("blockquote",null,[n("p",null,[e("Tips：除了 npm 外，还有一些包管理工具，主要是针对 npm 的下载速度慢、"),$,e(" 混乱等缺点设计的，例如"),n("a",ee,[e("yarn"),o(s)]),e("和 "),n("a",ne,[e("pnpm"),o(s)]),e("。")])]),se,n("p",null,[n("a",oe,[e("Webpack-cli"),o(s)]),e("是 Webpack 的 CLI （Command-line interface）工具，如果在项目中，我们可以使用下面的方式安装：")]),ae])}const pe=c(l,[["render",ce],["__file","index-03.html.vue"]]);export{pe as default};
