import{_ as t,M as o,p as c,q as l,R as n,t as s,N as p,a1 as e}from"./framework-e8cb8151.js";const i={},u=n("h1",{id:"_04-运算符的妙用以及部分机理解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_04-运算符的妙用以及部分机理解析","aria-hidden":"true"},"#"),s(" 04-运算符的妙用以及部分机理解析")],-1),r=n("p",null,"推荐文章",-1),k={href:"https://juejin.cn/post/7221418382107869242",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/qianlegeqian/p/3950044.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="_01-运算符的诡异现象" tabindex="-1"><a class="header-anchor" href="#_01-运算符的诡异现象" aria-hidden="true">#</a> 01: 运算符的诡异现象</h2><h3 id="函数基础知识" tabindex="-1"><a class="header-anchor" href="#函数基础知识" aria-hidden="true">#</a> 函数基础知识</h3><ul><li>普通函数调用时，this 指向的是调用函数的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器中执行</span>

<span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">&#39;let的name&#39;</span> <span class="token comment">// let const 声明的变量 不会挂在 windows 属性上</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">myName</span><span class="token operator">:</span> <span class="token string">&#39;person的Name&#39;</span><span class="token punctuation">,</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myName
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> getName <span class="token operator">=</span> person<span class="token punctuation">.</span>getName

<span class="token keyword">const</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prefix<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;getName&#39;</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;person.getName&#39;</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  person的Name</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;(person.getName)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// person的Name</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;(0, person.getName)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="let-const-声明的变量不会挂载在-windows-上" tabindex="-1"><a class="header-anchor" href="#let-const-声明的变量不会挂载在-windows-上" aria-hidden="true">#</a> let const 声明的变量不会挂载在 windows 上</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器中执行</span>

<span class="token keyword">var</span> nameVar <span class="token operator">=</span> <span class="token string">&#39;nameVar&#39;</span>
<span class="token keyword">let</span> nameLet <span class="token operator">=</span> <span class="token string">&#39;nameLet&#39;</span>
<span class="token keyword">const</span> nameConst <span class="token operator">=</span> <span class="token string">&#39;nameConst&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nameVar:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>nameVar<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nameLet:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>nameLet<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nameConst:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>nameConst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h3><blockquote><p>(person.getName)()</p><p>有没有赋值操作？？</p><p>赋值的话值给了谁？？</p></blockquote><h4 id="其中的引用" tabindex="-1"><a class="header-anchor" href="#其中的引用" aria-hidden="true">#</a> 其中的引用</h4><ul><li>内部引用类型不是语言数据类型</li><li>用于解释诸如 delete typeof 和赋值操作符的行为</li><li>例如，赋值的<strong>左操作数</strong>应该产生一个引用记录</li></ul><h4 id="引用相关的两个重要曹组" tabindex="-1"><a class="header-anchor" href="#引用相关的两个重要曹组" aria-hidden="true">#</a> 引用相关的两个重要曹组</h4><ul><li>GetValue(V): 即<strong>取值</strong>操作，返回的是确定的值</li><li>PutValue(V,W): 设置值，对某个引用设置</li><li>PutValue <strong>要求第一个参数是引用（查看协议）</strong></li></ul><h4 id="v-v的理解" tabindex="-1"><a class="header-anchor" href="#v-v的理解" aria-hidden="true">#</a> v=v的理解</h4><ul><li>可以理解为 <code>v = GetValue(v)</code></li><li>v 在作为左手端的时候，它是引用</li><li>而作为右手端的时候，它是值</li></ul><h3 id="其他赋值操作" tabindex="-1"><a class="header-anchor" href="#其他赋值操作" aria-hidden="true">#</a> 其他赋值操作</h3><table><thead><tr><th>*=赋值乘积</th><th>/=赋值商</th><th>%=赋值求余</th></tr></thead><tbody><tr><td>+=赋值求和</td><td>-=赋值求差</td><td>&lt;&lt;==</td></tr><tr><td>&gt;&gt;=</td><td>&gt;&gt;&gt;=</td><td>&amp;=</td></tr><tr><td>^=</td><td>|=</td><td>&amp;&amp;=</td></tr><tr><td></td><td></td><td>{a,b}={a:1,b:2}</td></tr></tbody></table><h4 id="分组运算符" tabindex="-1"><a class="header-anchor" href="#分组运算符" aria-hidden="true">#</a> 分组运算符()</h4><ul><li>分组运算符里面可以是表达式，也可以是字面量的值</li><li><strong>此算法不将 GetValue 应用于计算 Expression(表达式)的结果。这样做的主要原因是，诸如 delete typeof 等操作符可以应用于括号表达式</strong></li></ul><h4 id="person-getname" tabindex="-1"><a class="header-anchor" href="#person-getname" aria-hidden="true">#</a> (person.getName)()</h4><ul><li>并没有产生 getValue 操作，没有发生取值操作，也没有赋值操作</li></ul><h4 id="_0-person-getname" tabindex="-1"><a class="header-anchor" href="#_0-person-getname" aria-hidden="true">#</a> (0, person.getName)()</h4><ul><li>分组运算符</li><li>逗号运算符 <ul><li>MDN：逗号运算符，对它的的每个操作数<strong>求值(从左到右)</strong>,并返回最后一个操作数的值</li></ul></li><li>此表达式，就产生了赋值操作，等同于(const getName = person.getName)()</li><li>那么 this 就是全局对象 window</li><li>结果就是 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 赋值左操作数</span>
var10 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token number">10</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment">// { a: 1 }  = { a: 1 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof-未声明变量为什么不报错-非严格模式" tabindex="-1"><a class="header-anchor" href="#typeof-未声明变量为什么不报错-非严格模式" aria-hidden="true">#</a> typeof 未声明变量为什么不报错(非严格模式)</h3><ul><li>未发生求值？？？</li><li>答案：引用不可答，直接返回 undefined</li></ul><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器中</span>
<span class="token keyword">var</span> varNum <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">evalCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var varNum = 20</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">evalCode2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> eval<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var varNum = 30</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> 
  <span class="token comment">// 这里算是 eval 的间接引用，间接调用计算出来的是一个值，而不是引用</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;varNum:&#39;</span><span class="token punctuation">,</span> varNum<span class="token punctuation">)</span> <span class="token comment">// 10</span>

<span class="token function">evalCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;varNum:&#39;</span><span class="token punctuation">,</span> varNum<span class="token punctuation">)</span> <span class="token comment">// 10</span>
<span class="token function">evalCode2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;varNum:&#39;</span><span class="token punctuation">,</span> varNum<span class="token punctuation">)</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-窥视delete语法的本质" tabindex="-1"><a class="header-anchor" href="#_02-窥视delete语法的本质" aria-hidden="true">#</a> 02：窥视delete语法的本质</h2><h3 id="delete-的返回值是什么" tabindex="-1"><a class="header-anchor" href="#delete-的返回值是什么" aria-hidden="true">#</a> delete 的返回值是什么</h3><ul><li>Boolean 类型</li><li>true 不一定删除成功，代表<strong>删除没有发生异常</strong></li><li>false 代表一定没有删除成功</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">p1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">p3</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 对象的属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete a.p1:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">.</span>p1<span class="token punctuation">)</span>
<span class="token comment">// 对象上不存在的属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete a.p2:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">.</span>p2<span class="token punctuation">)</span>
<span class="token comment">// 全局对象a</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete var a:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;var a:&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>

<span class="token comment">// 打印结果如下</span>
<span class="token keyword">delete</span> a<span class="token punctuation">.</span>p1<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> a<span class="token punctuation">.</span>p2<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> <span class="token keyword">var</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token keyword">var</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">p3</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-不能删除那些属性" tabindex="-1"><a class="header-anchor" href="#delete-不能删除那些属性" aria-hidden="true">#</a> delete 不能删除那些属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//var</span>
<span class="token keyword">function</span> <span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete var a：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;var a ：：：&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//let const,</span>
<span class="token keyword">function</span> <span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete let a：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;let a ：：：&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//作用域在testLet 中</span>
<span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//不可配置的</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete obj.name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete undefined：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete Infinity：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token number">Infinity</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete NaN：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token number">NaN</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;NaN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete window：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> window<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete window.document：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> window<span class="token punctuation">.</span>document<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 各种内置原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete Object.prototype：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span> <span class="token string">&#39;prototype&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 内置Math的函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete Math.PI：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token string">&#39;PI&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//函数</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete fn：：：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> fn<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;fn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>任何使用 var 声明的属性，不能从全局作用域或者函数的作用域中删除</p></li><li><p>任何使用 let 或者 const 声明的属性，不能从它声明的作用域删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var let const </span>
<span class="token comment">//var </span>
<span class="token keyword">function</span> <span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete var a:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;var a :&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">testVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//let const,</span>
<span class="token keyword">function</span> <span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete let a:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;let a :&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//作用域在testLet 中</span>
<span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不可配置(configurable)的属性不能被删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//不可配置的</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete obj.name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete undefined:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Infinity</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete Infinity:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&quot;Infinity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete NaN:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// window</span>
<span class="token comment">// console.log(&quot;delete window:&quot;, delete window);</span>
<span class="token comment">// console.log(Object.getOwnPropertyDescriptor(window));</span>

<span class="token comment">// document</span>
<span class="token comment">// console.log(&quot;delete window.document&quot;, delete window.document);</span>
<span class="token comment">// Object.getOwnPropertyDescriptor(window, &quot;document&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// delete 内置</span>
<span class="token comment">// 各种内置原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete Object.prototype&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span> <span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 内置Math的函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete Math.PI&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token string">&quot;PI&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="delete-删除原型属性" tabindex="-1"><a class="header-anchor" href="#delete-删除原型属性" aria-hidden="true">#</a> delete 删除原型属性</h3><ul><li>delete 不会遍历原型链，或者说姿势不对</li><li>delete Foo.prototype.bar</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原型上的属性</span>
<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 返回 true，因为删除的是 foo 对象的自身属性</span>
<span class="token keyword">delete</span> foo<span class="token punctuation">.</span>bar
<span class="token comment">// foo.bar 仍然可用，因为它在原型链上可用。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> <span class="token comment">//42</span>
<span class="token comment">// 从原型上删除属性</span>
<span class="token keyword">delete</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token comment">//true</span>
<span class="token comment">// 由于已删除“ bar”属性，因此不能再从Foo继承它。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> <span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// delete 删除原型上的属性</span>
<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 true，因为删除的是 foo 对象的自身属性</span>
<span class="token keyword">delete</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
<span class="token comment">// foo.bar 仍然可用，因为它在原型链上可用。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete 删除自身属性：：：&quot;</span><span class="token punctuation">,</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 42</span>
<span class="token comment">// 从原型上删除属性</span>
<span class="token keyword">delete</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar<span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token comment">// 由于已删除“ bar”属性，因此不能再从Foo继承它。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;delete 删除原型属性：：：&quot;</span><span class="token punctuation">,</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-到底删除的是什么" tabindex="-1"><a class="header-anchor" href="#delete-到底删除的是什么" aria-hidden="true">#</a> delete 到底删除的是什么</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token keyword">var</span> trees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;redwood&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bay&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cedar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;oak&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;maple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> trees<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;trees:&quot;</span><span class="token punctuation">,</span>trees<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// trees：：：  [&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, empty, &quot;maple&quot;]</span>
<span class="token keyword">delete</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> x
<span class="token comment">// 浏览器中运行</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> window<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delete-协议描述" tabindex="-1"><a class="header-anchor" href="#delete-协议描述" aria-hidden="true">#</a> delete 协议描述</h4><blockquote><p>If ref is not a Reference Record, return true</p></blockquote><h4 id="delete-语法的本质是什么" tabindex="-1"><a class="header-anchor" href="#delete-语法的本质是什么" aria-hidden="true">#</a> delete 语法的本质是什么</h4><ul><li>操作表达式结果</li><li><strong>值，字面量</strong>，不操作，直接返回 true</li><li><strong>引用类型</strong>，删除引用</li></ul><h4 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h4><ul><li>SyntaxError: 变量，函数名，函数参数</li><li>TypeError: configurable: false</li><li>ReferenceError: 典型的就是 delete super.property</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 严格 变量 SyntaxError </span>
<span class="token string">&#39;use strict&#39;</span>
<span class="token comment">// 变量</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span>
<span class="token keyword">delete</span> name

<span class="token comment">// 函数</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">delete</span> fn

<span class="token keyword">function</span> <span class="token function">fnArg</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">delete</span> name
<span class="token punctuation">}</span>
<span class="token function">fnArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 严格 configurableTypeError  </span>
<span class="token string">&#39;use strict&#39;</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;帅哥&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">delete</span> person<span class="token punctuation">.</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 严格 refer</span>
<span class="token string">&#39;use strict&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>

  <span class="token function">deleteAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span>getName<span class="token punctuation">)</span>
    <span class="token keyword">delete</span> <span class="token keyword">super</span><span class="token punctuation">.</span>getName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&#39;child&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">delete</span> child<span class="token punctuation">.</span><span class="token function">deleteAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ReferenceError: Unsupported reference to &#39;super&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var 非var</span>
<span class="token keyword">var</span> nameVar <span class="token operator">=</span> <span class="token string">&#39;nameVar&#39;</span>
nameNotVar <span class="token operator">=</span> <span class="token string">&#39;nameNotVar&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nameVar&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;nameVar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nameNotVar&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;nameNotVar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 打印结果如下</span>
nameVar <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nameVar&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;writable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;enumerable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;configurable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
nameNotVar <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nameNotVar&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;writable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;enumerable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;configurable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思考题-1" tabindex="-1"><a class="header-anchor" href="#思考题-1" aria-hidden="true">#</a> 思考题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete null     :&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// null 是一个常量 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete 11       :&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token number">11</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete undefined:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined是 window 的属性</span>

a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete a        :&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> a<span class="token punctuation">)</span> 
<span class="token comment">// 不是通过 var 声明的 configurable 为true 可以被删除</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete b        :&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> b<span class="token punctuation">)</span> 
<span class="token comment">// 通过 var 声明的 configurable 为false，不可被 delete</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete xxxxxxxxx:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> xxxxxxxxx<span class="token punctuation">)</span> 
<span class="token comment">// 不可达未定义，delete 直接返回 true</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete .toString:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>toString<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;obj.toString:&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>toString<span class="token punctuation">)</span>

<span class="token comment">// 打印结果如下(浏览器中使用)</span>
<span class="token keyword">delete</span> <span class="token keyword">null</span>     <span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> <span class="token number">11</span>       <span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> <span class="token keyword">undefined</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token keyword">delete</span> <span class="token literal-property property">a</span>        <span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> <span class="token literal-property property">b</span>        <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token keyword">delete</span> <span class="token literal-property property">xxxxxxxxx</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">delete</span> <span class="token punctuation">.</span>toString<span class="token operator">:</span> <span class="token boolean">true</span>
obj<span class="token punctuation">.</span>toString<span class="token operator">:</span> ƒ <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>native code<span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-位运算符的妙用-奇偶数-色值换算-换值-编码等" tabindex="-1"><a class="header-anchor" href="#_03-位运算符的妙用-奇偶数-色值换算-换值-编码等" aria-hidden="true">#</a> 03: 位运算符的妙用：奇偶数，色值换算，换值， 编码等</h2><h3 id="位运算的基础知识" tabindex="-1"><a class="header-anchor" href="#位运算的基础知识" aria-hidden="true">#</a> 位运算的基础知识</h3><ul><li>操作数是<strong>32位整数</strong></li><li>自动转换为整数</li><li>速度 T0, 在二进制下进行运算</li></ul><h3 id="按位与" tabindex="-1"><a class="header-anchor" href="#按位与" aria-hidden="true">#</a> 按位与 &amp;</h3><ul><li>两个为 1，则为 1，否则为 0</li></ul><h4 id="按位与-判断奇偶数" tabindex="-1"><a class="header-anchor" href="#按位与-判断奇偶数" aria-hidden="true">#</a> 按位与 &amp; 判断奇偶数</h4><ul><li><p>奇数：num &amp; 1 == 1</p></li><li><p>偶数：num &amp; 1 == 0</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkNum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&#39;::是一个奇数&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&#39;::是一个偶数&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">&#39;::未识别&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">checkNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">checkNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">checkNum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">checkNum</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token comment">// 结果如下</span>
<span class="token number">0</span> <span class="token operator">:</span><span class="token operator">:</span>是一个偶数
<span class="token number">1</span> <span class="token operator">:</span><span class="token operator">:</span>是一个奇数
<span class="token number">5</span> <span class="token operator">:</span><span class="token operator">:</span>是一个奇数
<span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span>是一个偶数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="按位或" tabindex="-1"><a class="header-anchor" href="#按位或" aria-hidden="true">#</a> 按位或 |</h3><ul><li>1个位1 则为 1</li></ul><h4 id="按位或-取整" tabindex="-1"><a class="header-anchor" href="#按位或-取整" aria-hidden="true">#</a> 按位或 | 取整</h4><ul><li>x | 0</li><li>2.2 | 0 = 2</li></ul><h4 id="按位或-1" tabindex="-1"><a class="header-anchor" href="#按位或-1" aria-hidden="true">#</a> 按位或 |</h4><ul><li>自身 | 自身 = 自身，可以用来比较数值相等</li></ul><h3 id="按位非" tabindex="-1"><a class="header-anchor" href="#按位非" aria-hidden="true">#</a> 按位非 ~</h3><ul><li><p>按位非运算符(~), 反转操作数的位。表象是对数字求负，然后减 1 （-x-1）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">// 00000000000000000000000000000101</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// 11111111111111111111111111111101</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111111111111111111111111010</span>
<span class="token comment">// expected output: -6</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000000000000000000000000010</span>
<span class="token comment">// expected output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="按位非-判断数组中是否包含某个元素" tabindex="-1"><a class="header-anchor" href="#按位非-判断数组中是否包含某个元素" aria-hidden="true">#</a> 按位非~ 判断数组中是否包含某个元素</h4><ul><li>不存在，indexOf 返回 -1</li><li>~ -1 = (-1) - 1 = 1 - 1 = 0</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token comment">//检查数组中是否包含元素</span>
<span class="token keyword">function</span> <span class="token function">inArrayCompare</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">inArray</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// -1 不存在, ~ -1 == 0, 布尔值为 false</span>
  <span class="token comment">// 其他情况为真值，表示存在</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inArrayCompare</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">inArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按位非-取整" tabindex="-1"><a class="header-anchor" href="#按位非-取整" aria-hidden="true">#</a> 按位非~ 取整</h4><ul><li>~~x: -(-x-1)-1 = x + 1 - 1 = x</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">54.25</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">54.25</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">54.25</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">54.25</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">//原理 ~ ， 实质上是对数字求负，然后减 1 (-x-1).</span>
<span class="token comment">//那么~~就是对数字求负减一后再求负减1 (-（-x-1）)-1 也就可以用于取整</span>
<span class="token keyword">var</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token operator">-</span>num <span class="token operator">-</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>result1<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">-</span>result1 <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc==&#39;</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">54</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc==&#39;</span><span class="token punctuation">,</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 运行结果如下</span>
<span class="token number">54</span>
<span class="token number">54</span>
<span class="token number">54</span>
abc<span class="token operator">==</span> <span class="token operator">-</span><span class="token number">55</span>
<span class="token operator">-</span><span class="token number">55</span>
<span class="token number">55</span>
abc<span class="token operator">==</span> <span class="token number">54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按位异或" tabindex="-1"><a class="header-anchor" href="#按位异或" aria-hidden="true">#</a> 按位异或^</h3><ul><li>只有一个数位存放 1 时，返回1，否则为 0</li></ul><h4 id="按位异或-归零律" tabindex="-1"><a class="header-anchor" href="#按位异或-归零律" aria-hidden="true">#</a> 按位异或^,归零律</h4><ul><li><p>归零律：a^a =0 自己异或自己，位数上的值肯定相同</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 比较数字相等</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5 ^ 5==&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5 ^ 4==&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;25 ^ 4==&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;25 ^ 25==&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token operator">^</span> <span class="token number">25</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0 ^ 0==&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0 ^ 1==&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 ^ 0==&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// 结果如下</span>
<span class="token number">5</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token operator">==</span> <span class="token number">0</span>
<span class="token number">5</span> <span class="token operator">^</span> <span class="token number">4</span><span class="token operator">==</span> <span class="token number">1</span>
<span class="token number">25</span> <span class="token operator">^</span> <span class="token number">4</span><span class="token operator">==</span> <span class="token number">29</span>
<span class="token number">25</span> <span class="token operator">^</span> <span class="token number">25</span><span class="token operator">==</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token operator">==</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token operator">==</span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token operator">==</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="按位异或-恒等律" tabindex="-1"><a class="header-anchor" href="#按位异或-恒等律" aria-hidden="true">#</a> 按位异或^，恒等律</h4><ul><li>恒等律：a^0 = a 自己异或0，自己是啥结果就是啥</li></ul><h4 id="按位异或-自反-结合律" tabindex="-1"><a class="header-anchor" href="#按位异或-自反-结合律" aria-hidden="true">#</a> 按位异或^，自反，结合律</h4><ul><li>自反：a^a^a = 0^a = a</li><li>结合律：a^b^c = c^b^a, 与顺序无关</li></ul><h4 id="按位异或-值交换" tabindex="-1"><a class="header-anchor" href="#按位异或-值交换" aria-hidden="true">#</a> 按位异或^ 值交换</h4><ul><li><p>变量值为数字，完成值的交换（不用增加临时变量）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span>
a <span class="token operator">^=</span> b <span class="token comment">// a = a ^ b</span>
b <span class="token operator">^=</span> a <span class="token comment">// b = a ^ a ^ a = a</span>
a <span class="token operator">^=</span> b <span class="token comment">// a = a ^ b ^ b = b</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// 20 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="rgb-和-16进制颜色值的转换" tabindex="-1"><a class="header-anchor" href="#rgb-和-16进制颜色值的转换" aria-hidden="true">#</a> RGB 和 16进制颜色值的转换</h3><h4 id="rgb转16进制" tabindex="-1"><a class="header-anchor" href="#rgb转16进制" aria-hidden="true">#</a> RGB转16进制</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">colorRGBToHex</span><span class="token punctuation">(</span><span class="token parameter">rgb</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// split 的参数可以是正则</span>
  <span class="token comment">// rgb(204, 0, 255)</span>
  <span class="token keyword">const</span> rgbArr <span class="token operator">=</span> rgb<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// [&quot;&quot;, &quot;204&quot;, &quot;0&quot;, &quot;255&quot;, &quot;&quot;]</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> rgbArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> rgbArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> rgbArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorRGBToHex</span><span class="token punctuation">(</span><span class="token string">&#39;rgb(204,0,255)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// #cc00ff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16进制转rgb" tabindex="-1"><a class="header-anchor" href="#_16进制转rgb" aria-hidden="true">#</a> 16进制转RGB</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// # CCOOFF</span>
<span class="token keyword">function</span> <span class="token function">colorHexToRGB</span><span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 转为6位的16进制 OxCCOOFF</span>
  <span class="token keyword">let</span> newHex <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0x&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> newHex <span class="token operator">&gt;&gt;</span> <span class="token number">16</span>
  <span class="token keyword">let</span> g <span class="token operator">=</span> newHex <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> oxff <span class="token comment">// oxff 255</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> newHex <span class="token operator">&amp;</span> <span class="token number">0xff</span>
  <span class="token keyword">return</span> <span class="token string">&quot;rgb(&quot;</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> g <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorHexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#CC00FF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// rgb(204,0,255)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base64-源码" tabindex="-1"><a class="header-anchor" href="#base64-源码" aria-hidden="true">#</a> base64 源码</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * converts a Uint8Array to a Base64 string.
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> [urlsafe] URL-and-filename-safe a la RFC4648 §5
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> Base64 string
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">fromUint8Array</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u8a<span class="token operator">:</span> Uint8Array<span class="token punctuation">,</span> urlsafe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  urlsafe <span class="token operator">?</span> <span class="token function">_mkUriSafe</span><span class="token punctuation">(</span><span class="token function">_fromUint8Array</span><span class="token punctuation">(</span>u8a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_fromUint8Array</span><span class="token punctuation">(</span>u8a<span class="token punctuation">)</span>
<span class="token comment">// This trick is found broken https://github.com/dankogai/js-base64/issues/130</span>
<span class="token comment">// const utob = (src: string) =&gt; unescape(encodeURIComponent(src));</span>
<span class="token comment">// reverting good old fationed regexp</span>
<span class="token keyword">const</span> <span class="token function-variable function">cb_utob</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cc <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cc <span class="token operator">&lt;</span> <span class="token number">0x80</span>
      <span class="token operator">?</span> c
      <span class="token operator">:</span> cc <span class="token operator">&lt;</span> <span class="token number">0x800</span>
      <span class="token operator">?</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cc <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0xe0</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cc <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cc <span class="token operator">=</span>
      <span class="token number">0x10000</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xd800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xdc00</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0xf0</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cc <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span>cc <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> re_utob <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@deprecated</span> should have been internal use only.
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> src UTF-8 string
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> UTF-16 string
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">utob</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re_utob<span class="token punctuation">,</span> cb_utob<span class="token punctuation">)</span>
<span class="token comment">//</span>
<span class="token keyword">const</span> _encode <span class="token operator">=</span> _hasBuffer
  <span class="token operator">?</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span>
  <span class="token operator">:</span> _TE
  <span class="token operator">?</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_fromUint8Array</span><span class="token punctuation">(</span>_TE<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token operator">:</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_btoa</span><span class="token punctuation">(</span><span class="token function">utob</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * converts a UTF-8-encoded string to a Base64 string.
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> [urlsafe] if \`true\` make the result URL-safe
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> Base64 string
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">encode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> urlsafe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  urlsafe <span class="token operator">?</span> <span class="token function">_mkUriSafe</span><span class="token punctuation">(</span><span class="token function">_encode</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_encode</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> Base64 string
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">encodeURI</span> <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">encode</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// This trick is found broken https://github.com/dankogai/js-base64/issues/130</span>
<span class="token comment">// const btou = (src: string) =&gt; decodeURIComponent(escape(src));</span>
<span class="token comment">// reverting good old fationed regexp</span>
<span class="token keyword">const</span> re_btou <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> <span class="token function-variable function">cb_btou</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cccc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cccc<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
      <span class="token keyword">var</span> cp <span class="token operator">=</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x07</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">|</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span>
          <span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        offset <span class="token operator">=</span> cp <span class="token operator">-</span> <span class="token number">0x10000</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offset <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xd800</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offset <span class="token operator">&amp;</span> <span class="token number">0x3ff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xdc00</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x0f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span>
          <span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">_fromCC</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x1f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> cccc<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现简单加密" tabindex="-1"><a class="header-anchor" href="#实现简单加密" aria-hidden="true">#</a> 实现简单加密</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token number">654</span>
<span class="token keyword">const</span> specialCharacter <span class="token operator">=</span> <span class="token string">&#39;\`%_&#39;</span>

<span class="token keyword">function</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> <span class="token function">handleCode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">decodeStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>specialCharacter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">+=</span> <span class="token function">handleCode</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">charItem</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> <span class="token function">handleCode</span><span class="token punctuation">(</span>charItem<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">handleCode</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//数字类型</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> str <span class="token operator">^</span> password
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> r
    <span class="token keyword">return</span> specialCharacter <span class="token operator">+</span> r <span class="token operator">+</span> specialCharacter
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//字符类型，直接去code 码</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> newCode <span class="token operator">=</span> code <span class="token operator">^</span> password
    <span class="token comment">//再次转换为字符</span>
    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>newCode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> testStr <span class="token operator">=</span> <span class="token string">&#39;嗨喽， 张三，hello35&#39;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">encodeStr</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;encodeStr===&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token keyword">const</span> decodeResult <span class="token operator">=</span> <span class="token function">decodeStr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;decodeStr===&#39;</span><span class="token punctuation">,</span> decodeResult<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>位运算符号</th><th>中文名称</th><th>特点</th><th>应用场景</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>两个操作数都为1，则为1</td><td>1. 判断奇偶数</td></tr><tr><td>|</td><td>按位或</td><td>两个操作数至少一个为1，则为1</td><td>1. 奇偶数<br>2. 等于某个整数值</td></tr><tr><td>~</td><td>按位非</td><td>取反减1，即 -x-1</td><td>1. 取整<br>2. 数组中是否存在某个值</td></tr><tr><td>^</td><td>按位异或</td><td>有且只有一个操作数位1，则为1</td><td>1. 整数比较<br>2. 数字交互</td></tr><tr><td>&gt;&gt;</td><td>位移</td><td>移动指定位数，超出的位数将会被清除，缺省位数将会补零</td><td>1. 转为整数<br>2. 色值转换<br>3. 编码</td></tr></tbody></table><h2 id="_04-计算机是怎样进行数字相加的" tabindex="-1"><a class="header-anchor" href="#_04-计算机是怎样进行数字相加的" aria-hidden="true">#</a> 04: 计算机是怎样进行数字相加的</h2><p><strong>推荐文章</strong></p>`,96),b={href:"https://zhuanlan.zhihu.com/p/363133848",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="_0-1-0-2-0-30000000000000004" tabindex="-1"><a class="header-anchor" href="#_0-1-0-2-0-30000000000000004" aria-hidden="true">#</a> 0.1 + 0.2 = 0.30000000000000004</h3><ul><li>十进制和二进制是如何相互转换的</li><li>浮点数是以什么格式存储的</li><li>计算机是怎么进行加法的</li></ul><h3 id="进制转换-十进制转换二进制" tabindex="-1"><a class="header-anchor" href="#进制转换-十进制转换二进制" aria-hidden="true">#</a> 进制转换-十进制转换二进制</h3><ul><li>整数：除2取余，逆序排列</li><li>小数：乘2取整，顺序排列</li></ul><h4 id="例子-9-375" tabindex="-1"><a class="header-anchor" href="#例子-9-375" aria-hidden="true">#</a> 例子：9.375</h4><ul><li>整数部分：9</li><li>小数部分：0.375</li><li>最终结果：整数 + 小数 = 1001 + 0.011 = 1001.011</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9.375</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">9.375</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">9.375</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 结果如下</span>
<span class="token number">1001.011</span>
<span class="token number">1001.011</span>
<span class="token number">1001.011</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进制转换-二进制转十进制" tabindex="-1"><a class="header-anchor" href="#进制转换-二进制转十进制" aria-hidden="true">#</a> 进制转换-二进制转十进制</h3><ul><li>小数点前：<strong>从右到左</strong>用二进制的每个数乘以2的相应<strong>次方递增</strong></li><li>小数点后：<strong>从左向右</strong>用二进制的每个数乘以2的相应<strong>负次方递增</strong></li></ul><h4 id="_1001-011-转十进制" tabindex="-1"><a class="header-anchor" href="#_1001-011-转十进制" aria-hidden="true">#</a> 1001.011 转十进制</h4><ul><li>整数部分：1 * 2^0 + 0 * 2^1 + 0 * 2^2 + 1 * 2^3 = 1 + 8 = 9</li><li>小数部分：0 * 2^-1 + 1 * 2^-2 + 1 * 2^-3 = 0 + 0.25 + 0.125 = 0.375</li><li>最终结果：9 + 0.375 = 9.375</li></ul><h3 id="ieee-754-二进制浮点数算术标准" tabindex="-1"><a class="header-anchor" href="#ieee-754-二进制浮点数算术标准" aria-hidden="true">#</a> IEEE 754 二进制浮点数算术标准</h3>`,12),f=n("strong",null,"IEEE二进制浮点数算术标准",-1),h=n("strong",null,"IEEE 754",-1),y={href:"https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9%E6%95%B0&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("IEEE 754规定了四种表示浮点数值的方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80比特实做）。只有32位模式有强制要求，其他都是选择性的。大部分编程语言都有提供IEEE浮点数格式与算术，但有些将其列为非必需的。例如，IEEE 754问世之前就有的C语言，现在有包括IEEE算术，但不算作强制要求（C语言的"),n("code",null,"float"),s("通常是指IEEE单精确度，而"),n("code",null,"double"),s("是指双精确度）。")],-1),x=n("p",null,[s("该标准的全称为"),n("strong",null,"IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985）"),s("，又称"),n("strong",null,"IEC 60559:1989，微处理器系统的二进制浮点数算术"),s("（本来的编号是IEC 559:1989）。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。现在最新标准是“IEEE 854-2008标准”。")],-1),j=n("p",null,"在六、七十年代，各家计算机公司的各个型号的计算机，有着千差万别的浮点数表示，却没有一个业界通用的标准。这给数据交换、计算机协同工作造成了极大不便。IEEE的浮点数专业小组于七十年代末期开始酝酿浮点数的标准。在1980年，英特尔公司就推出了单片的8087浮点数协处理器，其浮点数表示法及定义的运算具有足够的合理性、先进性，被IEEE采用作为浮点数的标准，于1985年发布。而在此前，这一标准的内容已在八十年代初期被各计算机公司广泛采用，成了事实上的业界工业标准。",-1),q=e(`<h4 id="双精度-64-位举例" tabindex="-1"><a class="header-anchor" href="#双精度-64-位举例" aria-hidden="true">#</a> 双精度 64 位举例</h4><table><thead><tr><th>名称</th><th>长度</th><th>比特位置</th></tr></thead><tbody><tr><td>符号位S</td><td>1bit</td><td>(b63)</td></tr><tr><td>指数位E</td><td>11bit</td><td>(b62-b52)</td></tr><tr><td>尾数部分M</td><td>52bit</td><td>(b51-b0)</td></tr></tbody></table><h4 id="双精度sem" tabindex="-1"><a class="header-anchor" href="#双精度sem" aria-hidden="true">#</a> 双精度SEM</h4><ul><li>符号位S: 1 表示负数，0表示正数</li><li>指数位E：E = 指数 + 1023(偏移码)</li><li>尾数部分M：1&lt;=M&lt;2，隐含的以 1 开头，默认存储1后面部分</li></ul><h3 id="浮点数运算" tabindex="-1"><a class="header-anchor" href="#浮点数运算" aria-hidden="true">#</a> 浮点数运算</h3><ul><li><p>对阶</p><ul><li><p>对阶-保持指数位数字一致</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">123.5</span> <span class="token operator">+</span> <span class="token number">1426.00456</span>
<span class="token number">1.235</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1.42600456</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">3</span>
<span class="token number">0.1235</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1.42600456</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>小阶对大阶</p></li><li><p>对阶--精度丢失问题</p><ul><li>小阶对大阶，会右移动，容易丢失位数</li><li>相加 或者 相减，值可能溢出</li></ul></li></ul></li><li><p>尾数运算</p><ul><li>尾数运算就是在完成对阶后进行尾数想加减</li></ul></li><li><p>规格化</p><ul><li>1.M的形式，例子：17.051 -&gt; 1.7051</li><li>左移规格化</li><li>右移规格化(可能精度丢失)</li></ul></li><li><p>舍入处理</p><ul><li>舍入到最近 (默认)</li><li>朝 +∞ 方向舍入</li><li>朝 -∞ 方向舍入</li><li>朝 0 方向舍入</li></ul></li><li><p>溢出判断</p><ul><li>运算结果的阶码的值判断是否溢出</li><li>超过最大正数（上溢）：浮点数正数：正上溢；否则，负上溢</li></ul></li></ul><h2 id="_05-why-0-1-0-2-0-3-揭秘" tabindex="-1"><a class="header-anchor" href="#_05-why-0-1-0-2-0-3-揭秘" aria-hidden="true">#</a> 05：why 0.1 + 0.2 !=0.3 揭秘！</h2><h3 id="换算成-ieee-754-标准二进制结构" tabindex="-1"><a class="header-anchor" href="#换算成-ieee-754-标准二进制结构" aria-hidden="true">#</a> 换算成 IEEE 754 标准二进制结构</h3><ul><li><p>0.1 转二进制(小数转二进制)：直到积中的小数部分为0</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 特殊</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.1</span>   
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.2</span>        <span class="token number">0</span>

<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.6</span>        <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.2</span>        <span class="token number">1</span>

<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.6</span>        <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.2</span>        <span class="token number">1</span>

<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token number">0</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.6</span>        <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.2</span>        <span class="token number">1</span>

<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>无限循环<span class="token number">0011.</span><span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>规格化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0.0</span> <span class="token number">0011</span> <span class="token number">00011</span> <span class="token punctuation">(</span><span class="token number">0011</span><span class="token punctuation">)</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token number">1.1001</span> <span class="token number">1000</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token operator">-</span><span class="token number">4</span> 
<span class="token comment">// 变为1.xxx需要进行左移 4位，所以是 * 2^-4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>符号为S: 0</p></li><li><p>指数为：E = 1023 + 指数 = 1023 - 4 = 1019(01111111011)</p></li><li><p>尾数部分M: 由于无限循环(1001), 顾采用就近舍入模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token operator">...</span> （<span class="token number">52</span>位）
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1010</span> <span class="token comment">// 这里需要进1舍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对阶</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 0.1 </span>
<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">01111111011</span> <span class="token operator">-</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">1010</span>

<span class="token comment">// 0.2 </span>
<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">01111111100</span> <span class="token operator">-</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">1010</span>

<span class="token comment">// 对阶：小阶对大阶</span>
<span class="token number">0.1</span> 的指数是 <span class="token number">1019</span>
<span class="token number">0.2</span> 的指数是 <span class="token number">1020</span>
所以，<span class="token number">0.1</span> 的指数部分要变为 <span class="token number">1020</span>， 同时位数右移一位，尾数部分是 <span class="token number">1.</span><span class="token constant">M</span> 形成
所以对阶之后，<span class="token number">0.1</span>就变为
<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">01111111100</span> <span class="token operator">-</span> <span class="token number">110011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">10011001</span> <span class="token number">1010</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>尾数运算</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token number">0.</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1101</span> <span class="token number">0</span> <span class="token comment">// 0.1</span>
<span class="token operator">+</span> <span class="token number">1.</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1010</span> 	<span class="token comment">// 0.2</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
 <span class="token number">10.</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0111</span> <span class="token number">0</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果规格化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">10.</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0111</span> <span class="token number">0</span>  
<span class="token comment">// 规格化后</span>
<span class="token number">1.</span> <span class="token number">00110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0111</span> <span class="token number">0</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>指数位 +1， 变为 1020 + 1 = 1021， 二进制： 01111111101</p></li><li><p>舍入处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span> <span class="token number">00110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0110</span> <span class="token number">0111</span> <span class="token number">0</span>  <span class="token comment">// 54位</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">(</span>四舍五入<span class="token punctuation">)</span>
<span class="token number">1.</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">10</span> 需要进<span class="token number">1</span>然舍去
<span class="token number">1.</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0100</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>溢出检查：指数 1021 没有溢出</p></li><li><p>最终的结果</p><ul><li>符号为 S: 0</li><li>指数位 E: 0.1-1019 0.2-1020 计算完成后 1021 (1111111101)</li><li>尾数位：0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0100</li><li>0-1111111101-0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0100</li></ul></li><li><p>计算公式</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2897d121611448709ba61688c46208f4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>验证下述二进制是否正确</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.30000000000000004</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 结果如下</span>
<span class="token number">0.0100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_0-1-0-2-0-30000000000000004的运算过程" tabindex="-1"><a class="header-anchor" href="#_0-1-0-2-0-30000000000000004的运算过程" aria-hidden="true">#</a> 0.1+0.2=0.30000000000000004的运算过程</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>算法：
<span class="token number">0.1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0.2</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">0</span>
<span class="token number">0.2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0.4</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">0</span>
<span class="token number">0.4</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0.8</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">0</span>
<span class="token number">0.8</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1.6</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">1</span>
<span class="token number">0.6</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1.2</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">1</span>

<span class="token number">0.2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0.4</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">0</span>
<span class="token number">0.4</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0.8</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">0</span>
<span class="token number">0.8</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1.6</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">1</span>
<span class="token number">0.6</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1.2</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 取出整数部分<span class="token number">1</span>

我们可以发现在无限循环
<span class="token number">0.1</span>的二进制结果 <span class="token number">0.0</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token string">&quot;0011的无限循环&quot;</span>
<span class="token number">0.2</span>的二进制结果 <span class="token number">0.0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token string">&quot;0011的无限循环&quot;</span>

取<span class="token number">52</span>位进行计算
<span class="token number">0.1</span> <span class="token operator">=</span> <span class="token number">0.0001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1001</span> <span class="token number">1010</span>
<span class="token number">0.2</span> <span class="token operator">=</span> <span class="token number">0.0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span> <span class="token number">0011</span>

计算的结果是： <span class="token number">0.0100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token number">1100</span> <span class="token operator">...</span>也是无限循环

将二进制转换为十进制：
浮点型数据存储转换为十进制的话 只会取前<span class="token number">17</span>位
<span class="token number">0.300000000000000044408920958</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token operator">=</span> <span class="token number">0.30000000000000004</span>（四舍五入）
所以<span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span>的结果是等于<span class="token number">0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function _(C,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("p",null,[n("a",k,[s("运算符:https://juejin.cn/post/7221418382107869242"),p(a)])]),n("p",null,[n("a",d,[s("【转载】(0, eval)(‘this’)"),p(a)])]),n("p",null,[n("a",m,[s("MDN-eval:直接应用+间接引用"),p(a)])]),v,n("p",null,[n("a",b,[s("非科班前端人的一道送命题：0.1+0.2 等于 0.3 吗？"),p(a)])]),g,n("blockquote",null,[n("p",null,[f,s("（"),h,s("）是20世纪80年代以来最广泛使用的"),n("a",y,[s("浮点数"),p(a)]),s("运算标准，为许多CPU与浮点运算器所采用。这个标准定义了表示浮点数的格式（包括负零-0）与反常值（denormal number）），一些特殊数值（无穷（Inf）与非数值（NaN）），以及这些数值的“浮点数运算符”；它也指明了四种数值舍入规则和五种例外状况（包括例外发生的时机与处理方式）。")]),w,x,j]),q])}const O=t(i,[["render",_],["__file","index-04.html.vue"]]);export{O as default};
