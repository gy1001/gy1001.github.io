import{_ as e,M as o,p as c,q as l,R as s,t as n,N as t,v as i,a1 as p}from"./framework-e8cb8151.js";const u={},r=p('<h1 id="_13-compiler-编译器-构建-compile-编译器" tabindex="-1"><a class="header-anchor" href="#_13-compiler-编译器-构建-compile-编译器" aria-hidden="true">#</a> 13-compiler 编译器-构建 compile 编译器</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01: 前言</h2><p>在上一章节我们了解了 compiler 的作用和大致流程之后，那么这一章节我们将要在 vue-next-mine 中实现一个自己的编译器</p><p>但是我们知道，compiler 是一个非常复杂的概念，我们无法在有限的课程中实现一个完善的编译器，所以，我们将会和之前一样，严格遵循：<strong>没有使用就当不存在</strong>和<strong>最少代码的实现逻辑</strong>这两个标准。只关注<strong>核心</strong>和<strong>当前业务</strong>相关的内容，而忽略其他</p><p>那么明确好了以上内容之后，接下来，就让我们进入编译器的学习把~~~</p><h2 id="_02-扩展知识-javascript-与有限状态机" tabindex="-1"><a class="header-anchor" href="#_02-扩展知识-javascript-与有限状态机" aria-hidden="true">#</a> 02：扩展知识：JavaScript 与有限状态机</h2>',6),d={href:"https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"有限自动状态机",-1),v={href:"https://zh.wikipedia.org/wiki/%E7%8A%B6%E6%80%81",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B_(%E6%95%B0%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>光看着概念，可能难以理解，那么下面我们来看一个具体的例子</p><p>根据<code>packages/compiler-core/src/compile.ts</code>中的代码可知，<code>ast</code>对象的生成是通过<code>baseParse</code>方法得到的，</p><p>而对于<code>baseParse</code>方法而言，接收一个<code>template</code>作为参数，返回一个<code>ast</code>对象</p><p>即：<strong>通过 parse 方法，解析 template,得到 ast 对象</strong>。中键解析的过程，就需要使用到<strong>有限自动状态机</strong></p><p>我们来写如下模板（template)</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue</code>想要把改模板解析成<code>AST</code>，那么就需要利用有限自动状态机队该模板进行分析，分析的过程中主要包含了三个特性</p><blockquote><p>摘自：https://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html</p><ol><li>状态总数是有限的 <ol><li>初识状态</li><li>标签开始状态</li><li>标签名称状态</li><li>文本状态</li><li>结束标签状态</li><li>结束标签名称状态</li><li>。。。</li></ol></li><li>任一时刻，只处在一种状态之中</li><li>某种条件下，会从一种状态转变为另一种状态 <ol><li>比如，从 1 到 2 意味着从初识状态切换到了标签开始状态</li></ol></li></ol></blockquote><p>如下图所示</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42c6b3e56ccd42da86110967a41f08ff~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li>解析<code>&lt;</code>：由<strong>初始状态</strong>进入到<strong>标签开始状态</strong></li><li>解析<code>div</code>：由<strong>标签开始状态</strong>进入到<strong>标签名称状态</strong></li><li>解析<code>&gt;</code>：由<strong>标签名称状态</strong>进入<strong>初始状态</strong></li><li>解析<code>hello world</code>：由<strong>初始状态</strong>进入到<strong>文本状态</strong></li><li>解析<code>&lt;</code>：由<strong>文本状态</strong>进入到<strong>标签开始状态</strong></li><li>解析<code>/</code>：由<strong>标签开始状态</strong>进入到<strong>结束标签状态</strong></li><li>解析<code>div</code>：由<strong>结束标签状态</strong>进入<strong>结束标签名称状态</strong></li></ol><p>经过这样一系列的解析，对于</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而言，我们将得到三个<code>token</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>开始标签：&lt;div&gt;
文本标签：hello world
结束标签：&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这样一个利用有限状态机的状态迁移，来获取<code>tokens</code>的过程，可以叫做：<strong>对模板的标记化</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>那么这一小节，我们了解了什么是有限自动状态机，也知道了它的三个特性</p><p><code>vue</code>利用它来实现了对模板的标记化，得到了对应的<code>token</code></p><p>那么这样的一个<code>tokens</code>有什么用呢？我们下一个小节再说</p><h2 id="_03-扩展知识-扫描-tokens-构建-ast-结构的方案" tabindex="-1"><a class="header-anchor" href="#_03-扩展知识-扫描-tokens-构建-ast-结构的方案" aria-hidden="true">#</a> 03：扩展知识：扫描 tokens 构建 AST 结构的方案</h2><p>在上一小节中，我们已经知道可以通过自动状态机解析模板为<code>tokens</code>，那么解析出来的<code>tokens</code>就是声场<code>AST</code>的关键</p><p>生成<code>AST</code>的过程，就是**<code>tokens</code>扫描的过程**</p><p>我们以以下<code>html</code>结构为例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该<code>html</code>可以被解析为以下<code>tokens</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>开始标签：&lt;div&gt;
开始标签：&lt;p&gt;
文本节点：hello
结束标签：&lt;/p&gt;
开始标签：&lt;p&gt;
文本节点：world
结束标签：&lt;/p&gt;
结束标签：&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的扫描过程为（文档中仅显示初始状态和结束状态）</p><h3 id="初始状态" tabindex="-1"><a class="header-anchor" href="#初始状态" aria-hidden="true">#</a> 初始状态</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e38871574ed40a3b1b11383ede9b89d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="结束状态" tabindex="-1"><a class="header-anchor" href="#结束状态" aria-hidden="true">#</a> 结束状态</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d855e474f8f440198334ee3e0b6aca0d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,32),g={href:"https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%A7%A3%E6%9E%90%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"tokens",-1),h=s("strong",null,"栈",-1),f=s("code",null,"AST(抽象语法树)",-1),w=p(`<h2 id="_04-源码阅读-编译器第一步-依据模板-生成-ast-抽象语法树" tabindex="-1"><a class="header-anchor" href="#_04-源码阅读-编译器第一步-依据模板-生成-ast-抽象语法树" aria-hidden="true">#</a> 04:源码阅读：编译器第一步：依据模板，生成 AST 抽象语法树</h2><p>通过上一下节的学习我们知道，生成<code>AST</code>抽象语法树是在<code>packages/compile-core/src/compile.ts</code>中的第 85 行<code> const ast = isString(template) ? baseParse(template, options) : template</code>生成的</p><p>而当<code>template</code>是字符串时就会调用<code>baseParse</code>这个函数，根据这个方法来生成对应的<code>AST</code>。</p><p>那么我们直接进入这个方法中，这个方法位于<code>vue-next-3.2.37/packages/compiler-core/src/parse.ts</code>这个文件中，我们可以看到这个文件之中有 1000 多行代码，这也证明了 AST 的生成在内部其实是一个非常复杂的过程，并且里面包含了很多边缘性的处理</p><p>所以我们再去看这一块的逻辑，同样会按照之前的方式，只关注当前业务下的逻辑，忽略掉其他逻辑，以此来降低整体复杂度。</p><p>通过<code>packages/compile-core/src/compile.ts</code>中的<code>baseCompile</code>方法可以知道，整个<code>parse</code>的过程是从<code>baseParsr</code>开会的，所以我们可以直接从这个方式进行开始<code>debugger</code></p><p>新建测试示例<code>vue-next-3.2.37/packages/vue/examples/mine/compiler/compiler-ast.html</code>，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token comment">// 创建 template</span>
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token comment">// 生成 render 函数</span>
  <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前对应的<code>template</code>对应的目标极简<code>AST</code>为（这意味着我们将不再关注其他的属性生成）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tagType</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token comment">// 属性，目前我们没有做任何处理，但是需要添加上，否则，生成的ast放到vue源码中会抛出错误</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39; hello world &#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// loc: 位置，这个属性并不影响渲染，但是它必须存在，否则会报错，所以我们给了他一个 {}</span>
  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板解析的<code>token</code>流程为(以<code>&lt;div&gt; hello world&lt;/div&gt;</code>为例)：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. &lt;div
2. &gt;
3. hello world
4. &lt;/div
5. &gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上代码可知</p><ol><li><p>整个 AST 生成的核心方法是 parseChildren 方法</p></li><li><p>生成的过程是，对于整个 template: <code>&lt;div&gt;hello world&lt;/div&gt;</code>进行了解析，整个解析分为 5 步（第二小节的讲解）</p><ol><li><strong>第一次解析</strong>：<code>&lt;div</code>：此时<code>context.srouce = &gt;hello world&lt;/div&gt;</code></li><li><strong>第二次解析</strong>：<code>&gt;</code>：此时<code>context.srouce = hello world&lt;/div&gt;</code></li><li><strong>第三次解析</strong>：<code>hello world</code>：此时<code>context.srouce = &lt;/div&gt;</code></li><li><strong>第四次解析</strong>：<code>&lt;/div</code>：此时<code>&gt;</code></li><li><strong>第五次解析</strong>：<code>&gt;</code>：此时<code>context.srouce = &quot;&quot;</code></li></ol></li><li><p>在这个解析过程中，我们逐步扫描(第三小节的讲解)对应的每次<code>token</code>，得到一个对应的<code>AST</code>对象</p></li></ol><p><code>vue</code>源码中的<code>parse</code>逻辑是非常复杂的，我们当前只是针对<code>&lt;div&gt;hello world&lt;/div&gt;</code>这一种类型的<code>element</code>类型进行处理</p><p>其他的比如<code>&lt;pre&gt;、&lt;img /&gt;</code>这些标签类型的处理，大家可以根据本小节的内容，自己进行测试，我们在课程中就不会一一进行讲解了</p><h2 id="_05-框架实现-构建-parse-方法-生成-context-方法" tabindex="-1"><a class="header-anchor" href="#_05-框架实现-构建-parse-方法-生成-context-方法" aria-hidden="true">#</a> 05：框架实现：构建 parse 方法，生成 context 方法</h2><p>从这一小节开始，我们将实现 vue-next-mini 中的编辑器模块。首先我们第一步要做的就是先生成 AST 对象。但是我们知道 AST 对象的生成颇为复杂，所以我们把整个过程分为三步进行处理</p><ol><li>构建 parse 方法，生成 context 实例</li><li>构建 parseChildren, 处理所有子节点(<strong>最复杂</strong>) <ol><li>构建有限自动状态机解析模板</li><li>构建 token 生成 AST 结构</li></ol></li></ol><p>那么本小节，我们先处理第一步</p><ol><li><p>创建<code>packages/compiler-core/src/compile.ts</code>模板，写入如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> baseParse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./parse&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>packages/compiler-core/src/parse.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ParserContext</span> <span class="token punctuation">{</span>
  source<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ParserContext <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    source<span class="token operator">:</span> content<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/compiler-dom/src/index.ts</code>模块，导出<code>compile</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> baseCompile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;packages/compiler-core/src/compile&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>vue-next-mini/packages/vue/src/index.ts</code>中，导出<code>compile</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/compiler-dom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建测试示例<code>vue-next-mini/packages/vue/example/compile/compiler-ast.html</code>，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行测试示例，可以看到如下打印</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbadb3ba729340fd8d1afd715cd0f95a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_06-框架实现-构建有限自动状态机解析模板-扫描-token-生成-ast-结构" tabindex="-1"><a class="header-anchor" href="#_06-框架实现-构建有限自动状态机解析模板-扫描-token-生成-ast-结构" aria-hidden="true">#</a> 06：框架实现：构建有限自动状态机解析模板，扫描 token 生成 AST 结构</h2><p>上一节中我们成功拿到了上下文对象<code>context</code>,这一节我们就要通过<code>parseChildren</code>方法处理所有的子节点，整个处理的过程可以分为两大块：</p><ol><li>构建有限自动状态机解析模板</li><li>扫描<code>token</code>生成<code>AST</code>结构</li></ol><p>接下里我们来进行实现</p><ol><li><p><code>baseParse</code>方法中调用<code>parseChildren</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 新增加</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>parseChildren</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ElementTypes<span class="token punctuation">,</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ParserContext</span> <span class="token punctuation">{</span>
  source<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> TagType <span class="token punctuation">{</span>
  Start<span class="token punctuation">,</span>
  End<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// ancestors 是一个 elementNode 节点数组</span>
<span class="token keyword">function</span> <span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source
  <span class="token comment">// 如果是 &lt;/ 为开始</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: probably bad performance</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> ancestors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWithEndTagOpen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ancestors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>s
<span class="token punctuation">}</span>

<span class="token comment">// 是否以打开标签的结束标签为开始</span>
<span class="token keyword">function</span> <span class="token function">startsWithEndTagOpen</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">startsWith</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">&#39;&lt;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">+</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> tag<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> searchString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>searchString<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// while 循环，直到最后是一个结束标签</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source
    <span class="token keyword">let</span> node
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;{{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO: {{}}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果上面的判断没有进入，那node就是空的，说明此时内容是 文本</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">pushNodes</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nodes
<span class="token punctuation">}</span>

<span class="token comment">// 把 node 放入 nodes</span>
<span class="token keyword">function</span> <span class="token function">pushNodes</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理标签节点</span>
<span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获得当前 tag 元素</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>Start<span class="token punctuation">)</span>
  ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token comment">// 处理子节点</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
  ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span>children <span class="token operator">=</span> children
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWithEndTagOpen</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> element
<span class="token punctuation">}</span>

<span class="token comment">// 处理文本节点（静态文本节点），所以以 &lt; 或者 {{ 为最后的一个位置处理，</span>
<span class="token keyword">function</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> endTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{{&#39;</span><span class="token punctuation">]</span>
  <span class="token comment">// 先创建当前文本节点的最后索引位置是 当前字符串的长度</span>
  <span class="token keyword">let</span> endIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length
  <span class="token comment">// 如果有找到 上面两种类型的索引位置，并且位置索引小于 endIndex,就更新这个最后的索引位置 endIndex</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> endTokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endTokens<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> endIndex <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      endIndex <span class="token operator">=</span> j
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 截取获得当前文本</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>
    content<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 按照长度截取当前文本，把字符串进行截取</span>
<span class="token keyword">function</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> rawText <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
  <span class="token keyword">return</span> rawText
<span class="token punctuation">}</span>

<span class="token comment">// 按照长度，对当前上下文中的 source 进行截取</span>
<span class="token keyword">function</span> <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> numberOfCharacters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>source <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>numberOfCharacters<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解析标签，</span>
<span class="token keyword">function</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> type<span class="token operator">:</span> TagType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过 context.source  解析出 tag 名字</span>
  <span class="token keyword">const</span> match<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;\\/?([a-z][^\\r\\n\\t\\f /&gt;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span>
  <span class="token keyword">const</span> tag <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">let</span> isSelfClosing <span class="token operator">=</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;/&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 是否是自闭合标签</span>
  <span class="token comment">// 如果是闭合标签，就需要在往后截取2位，否则就是1位</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> isSelfClosing <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
    tag<span class="token operator">:</span> tag<span class="token punctuation">,</span>
    tagType<span class="token operator">:</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>ast.ts</code>，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">{</span>
  <span class="token constant">ROOT</span><span class="token punctuation">,</span>
  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
  <span class="token constant">TEXT</span><span class="token punctuation">,</span>
  <span class="token constant">COMMENT</span><span class="token punctuation">,</span>
  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>
  <span class="token constant">ATTRIBUTE</span><span class="token punctuation">,</span>
  <span class="token constant">DIRECTIVE</span><span class="token punctuation">,</span>
  <span class="token comment">// containers</span>
  <span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">IF</span><span class="token punctuation">,</span>
  <span class="token constant">IF_BRANCH</span><span class="token punctuation">,</span>
  <span class="token constant">FOR</span><span class="token punctuation">,</span>
  <span class="token constant">TEXT_CALL</span><span class="token punctuation">,</span>
  <span class="token comment">// codegen</span>
  <span class="token constant">VNODE_CALL</span><span class="token punctuation">,</span>
  <span class="token constant">JS_CALL_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_OBJECT_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_PROPERTY</span><span class="token punctuation">,</span>
  <span class="token constant">JS_ARRAY_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_FUNCTION_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_CONDITIONAL_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_CACHE_EXPRESSION</span><span class="token punctuation">,</span>

  <span class="token comment">// ssr codegen</span>
  <span class="token constant">JS_BLOCK_STATEMENT</span><span class="token punctuation">,</span>
  <span class="token constant">JS_TEMPLATE_LITERAL</span><span class="token punctuation">,</span>
  <span class="token constant">JS_IF_STATEMENT</span><span class="token punctuation">,</span>
  <span class="token constant">JS_ASSIGNMENT_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_SEQUENCE_EXPRESSION</span><span class="token punctuation">,</span>
  <span class="token constant">JS_RETURN_STATEMENT</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ElementTypes <span class="token punctuation">{</span>
  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
  <span class="token constant">COMPONENT</span><span class="token punctuation">,</span>
  <span class="token constant">SLOT</span><span class="token punctuation">,</span>
  <span class="token constant">TEMPLATE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新运行浏览器，可以看到如下打印效果(<code>parseChildren(context, [])</code>的返回值)</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98324f74245b4cc5b93efc19f4668d48~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_07-框架实现-生成-ast-构建测试" tabindex="-1"><a class="header-anchor" href="#_07-框架实现-生成-ast-构建测试" aria-hidden="true">#</a> 07：框架实现：生成 AST，构建测试</h2><p>接下来我们就需要处理上节返回的一个<code>chilren</code>，我们需要返回一个带有根节点的内容</p><ol><li><p>增加并调用<code>createRoot</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    loc<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token comment">// 返回 createRoot 处理后的对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这时重新运行打印，结果如下（<code>baseCompile中的console.log(JSON.stringify(ast))</code>）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tagType&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>怎么样验证这个结构是否正确呢？我们修改<code>vue-next-3.2.37/packages/vue/dist/vue.global.js</code>中的<code>ast</code>生成内容，然后修改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// const ast = isString(template) ? baseParse(template, options) : template;</span>
<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tagType</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;hello world test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样先把<code>ast</code>生成内容修改成我们在第 2 步中生成的相似的任意内容，然后创建测试示例<code>ue-next-3.2.37/packages/vue/examples/mine/compiler/compile-ast-test.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../../dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> render<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          &lt;div&gt;hello world&lt;/div&gt;
        </span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">render</span><span class="token operator">:</span> renderFn<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运到到浏览器中，可以看到页面中正常渲染出来了<code>hello world test</code>内容</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b2a567e0ee401b9ed6823e59899424~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_08-扩展知识-ast-到-javascript-ast-的转化策略和注意事项" tabindex="-1"><a class="header-anchor" href="#_08-扩展知识-ast-到-javascript-ast-的转化策略和注意事项" aria-hidden="true">#</a> 08：扩展知识：AST 到 JavaScript AST 的转化策略和注意事项</h2><p>在生成了<code>AST</code>之后，我们知道接下来就需要把<code>AST</code>转换为<code>JavaScript AST</code>了。但是在转化过程中，有一些对应的策略和注意事项，我们需要再本小节中进行描述</p><h3 id="转换策略" tabindex="-1"><a class="header-anchor" href="#转换策略" aria-hidden="true">#</a> 转换策略</h3><p>我们知道从<code>AST</code>转换为<code>JavaScript AST</code>本质上就是一个对象结构的变化，变化的本质是为了后面更方便的解析对象，生成<code>render</code>函数</p><p>在转换的过程中，我们需要遵循如下策略</p><ol><li>深度优先</li><li>转化函数分离</li><li>上下文对象</li></ol><h4 id="深度优先" tabindex="-1"><a class="header-anchor" href="#深度优先" aria-hidden="true">#</a> 深度优先</h4><p>我们知道<code>AST</code>而言，它是包含层级的，比如</p><ol><li>最外层是<code>ROOT</code></li><li><code>children</code>是根节点</li><li>。。。</li></ol><p>这样的结构下，就会存在一个自上而下的层级，那么针对这样的一个层级而言，我们需要遵循<strong>深度优先，自上而下</strong>的一个转化方案</p><p>因为父节点的状态往往需要根据子节点的情况才能进行确定，比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转换函数分离" tabindex="-1"><a class="header-anchor" href="#转换函数分离" aria-hidden="true">#</a> 转换函数分离</h4><p>在处理<code>AST</code> 的时候，我们知道，针对不同的 <code>token</code>，那么会使用不同的 <code>parseXXX</code> 方法进行处理，那么同样的，在 <code>transfrom</code> 的过程中，我们也会通过不同的 <code>transformXXX</code> 方法进行转化</p><p>但是为了防止 <code>transform</code> 模块过于臃肿，所以我们会通过 <code>options</code> 的方式对 <code>transformXXX</code> 方法进行注入(类似于 <code>render</code> 的 <code>option</code>)</p><p>所有注入的方法，会生成一个 <code>nodeTransFrorms</code> 数组，通过 <code>options</code> 传入</p><h4 id="上下文对象" tabindex="-1"><a class="header-anchor" href="#上下文对象" aria-hidden="true">#</a> 上下文对象</h4><p>上下文对象即 <code>context</code>, 对于上下文对象而言我们并不陌生。比如在 <code>parse</code> 时、<code>setup</code> 函数中、<code>vuex</code> 的 <code>action</code> 上，都出现过 <code>context</code> 对象</p><p>对于 <code>context</code> 而言，我们可以把他理解为一个 <strong>全局变量</strong> 或者 <strong>单例的全局变量</strong>，它是一个多模块都可以访问的唯一对象</p><p>在 <code>transform</code> 的策略中，因为存在<strong>转化函数分离</strong>这样的一个特性，所以我们必须要构建出这样的<code>context</code> 对象，用来保存当前节点的 <code>node</code> 节点等数据</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p>说完了转化策略以后，我们来看下注意事项</p>`,51),x=s("code",null,"transform",-1),E=s("code",null,"vue",-1),T=p(`<p>但是对于我们当前而言，我们不需要考虑这些复杂的情况，仅查看最简单的静态数据渲染，以此来简化整体逻辑</p><h2 id="_09-源码阅读-编译器第二步-转换-ast-得到-javascript-ast" tabindex="-1"><a class="header-anchor" href="#_09-源码阅读-编译器第二步-转换-ast-得到-javascript-ast" aria-hidden="true">#</a> 09： 源码阅读：编译器第二步：转换 AST，得到 JavaScript AST</h2><p>这一小节，我们就来看下对应的<code>transform</code>逻辑，我们创建如下测试示例</p><h2 id="_10-框架实现-转换-javascript-ast-构建深度优先" tabindex="-1"><a class="header-anchor" href="#_10-框架实现-转换-javascript-ast-构建深度优先" aria-hidden="true">#</a> 10：框架实现：转换 JavaScript AST，构建深度优先</h2><p>明确好了 <code>transform</code> 的大致逻辑之后，这一小节我们就开始实现以下对应的代码，我们代码的逻辑实现我们分为两个小节来讲</p><ol><li>深度优先排序</li><li>完成具体的节点转化</li></ol><p>这一小节，我们先来完成深度优先排序</p><ol><li><p>在 <code>packages/compiler-core/src/compile.ts</code> 中的 <code>baseCompile</code> 中，增加<code> transform</code> 的方法触发</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> extend <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> baseParse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./parse&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> transform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./transform&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> transformElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./transforms/transformElement&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> transformText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./transforms/transformText&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token comment">// 新增加 transform 函数调用</span>
  <span class="token function">transform</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>transformElement<span class="token punctuation">,</span> transformText<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/compile-core/src/transforms/transforElement.ts</code>模块，导出<code>transformElement</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 对 element 节点的转化方法</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">postTransformElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/compiler-core/src/transforms/transformText.ts</code>模块，导出<code>transformText</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../ast&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/compiler-core/src/transform.ts</code>模块，创建<code>transform</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span>

<span class="token comment">// 声明 transform 上下文</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TransformContext</span> <span class="token punctuation">{</span>
  <span class="token comment">// AST  根节点</span>
  root
  <span class="token comment">// 每次转化时记录的父节点</span>
  parent<span class="token operator">:</span> ParentNode <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token comment">// 每次转化时记录的子节点索引</span>
  childIndex<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token comment">// 当前处理的节点</span>
  currentNode
  <span class="token comment">// 协助创建 JavaScript AST 属性 helpers, 该属性是一个 map,key值为 Symbol(方法名)表示 helper 函数中创建节点的方法</span>
  helpers<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>
  <span class="token generic-function"><span class="token function">helper</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token comment">// 转化方法的集合</span>
  nodeTransforms<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建 transform 上下文</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span> nodeTransforms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context<span class="token operator">:</span> TransformContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    nodeTransforms<span class="token punctuation">,</span>
    root<span class="token punctuation">,</span>
    helpers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    currentNode<span class="token operator">:</span> root<span class="token punctuation">,</span>
    parent<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    childIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token function">helper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> count <span class="token operator">=</span> context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>
      context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> name
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> context
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 根据 AST 生成 JavaScript AST
 * <span class="token keyword">@param</span> <span class="token parameter">root</span> AST
 * <span class="token keyword">@param</span> <span class="token parameter">options</span> 配置对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建 transform 上下文</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token comment">// 按照深度优先依次处理 node 节点转化</span>
  <span class="token function">traverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 深度优先</span>
<span class="token doc-comment comment">/**
 * 遍历转化节点，转化的过程中一定是深度优先的（即：孙 -&gt; 子 -&gt; 父) 因为当时节点的状态往往需要根据子节点的情况来确定
 * 转化的过程分为两个阶段
 * 1. 进入阶段：存储所有节点的转化函数到 exitFns  中
 * 2. 退出阶段：执行 exitFns中缓存的函数，且一定是倒序的，因为这样才能保证整个执行过程中是深度优先的
 */</span>
<span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token comment">// apply transform plugins</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> nodeTransforms <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> exitFns<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nodeTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> onExit <span class="token operator">=</span> nodeTransforms<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token operator">:</span>
      <span class="token function">traversChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// exit transforms</span>
  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">traversChildren</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent
    context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> index
    <span class="token function">traverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_11-构建-transformxxx-方法-转化对应节点" tabindex="-1"><a class="header-anchor" href="#_11-构建-transformxxx-方法-转化对应节点" aria-hidden="true">#</a> 11：构建 transformXXX 方法，转化对应节点</h2><ol><li><p>新建<code>packages/compiler-core/src/transform/transformElement.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes<span class="token punctuation">,</span> createVNodeCall <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../ast&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">postTransformElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode
    <span class="token comment">// 如果节点不是 ELEMENT 类型直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> node
    <span class="token keyword">let</span> vnodeTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">let</span> vnodeProps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children
    <span class="token comment">// 为当前节点增加 codegenNode 属性</span>
    node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>
      context<span class="token punctuation">,</span>
      vnodeTag<span class="token punctuation">,</span>
      vnodeProps<span class="token punctuation">,</span>
      vnodeChildren
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ast.ts 中增加 createVNodeCall 方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./runtimeHelpers&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> props<span class="token operator">?</span><span class="token punctuation">,</span> children<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token punctuation">,</span>
    tag<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新建 runtimeHelpers.ts 文件，内容如下</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createElementVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CREATE_VNODE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;createVNode&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> helperNameMap<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createElementVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token constant">CREATE_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">createVNode</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>packages/compiler-core/src/transform/transformText.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../ast&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils&#39;</span>

<span class="token doc-comment comment">/**
 * 将 相邻的文本节点 和表达式 合并为一个表达式
 * 例如：
 * &lt;div&gt; hello <span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span> &lt;/div&gt;
 * 上述模板包含两个节点：
 * 1. hello TEXT文本节点
 * 2. <span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span> INTERPOLATION 表达式节点
 * 这两个节点在 生成 render 函数时候，需要被合并成 &quot;hello&quot; + _toDisplayString(_ctx.msg)
 * 那么在合并时候需要多出来这个 + 加号
 * 例如：children: [ <span class="token punctuation">{</span>TEXT 文本节点<span class="token punctuation">}</span>， &quot; + &quot;, <span class="token punctuation">{</span> INTERPOLATION 表达式节点 <span class="token punctuation">}</span>]
 * <span class="token keyword">@param</span> <span class="token parameter">node</span>
 * <span class="token keyword">@param</span> <span class="token parameter">context</span>
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span> <span class="token operator">||</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children
      <span class="token keyword">let</span> currentContainer
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> next <span class="token operator">=</span> children<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token comment">// 如果接下来的节点也是 文本节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                currentContainer <span class="token operator">=</span> children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createCompundExpression</span><span class="token punctuation">(</span>
                  <span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>
                  child<span class="token punctuation">.</span>loc
                <span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> + </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> next<span class="token punctuation">)</span>
              children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
              j<span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token comment">// 如果第一个节点是 text 第二个节点不是 text 则不需要合并</span>
              currentContainer <span class="token operator">=</span> <span class="token keyword">undefined</span>
              <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createCompundExpression</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> loc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">,</span>
    loc<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新建 utils.ts 文件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_12-框架实现-处理根节点的转化-生成-javascript-ast" tabindex="-1"><a class="header-anchor" href="#_12-框架实现-处理根节点的转化-生成-javascript-ast" aria-hidden="true">#</a> 12：框架实现：处理根节点的转化，生成 JavaScript AST</h2><ol><li><p>修改<code>transform.ts</code>中的 <code>transform</code>方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isSingleElementRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./transforms/hoistStatic&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token function">traverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token comment">// 处理根节点</span>
  <span class="token function">createRootCodegen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
  root<span class="token punctuation">.</span>helpers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>directives <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>imports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>hoists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>temps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  root<span class="token punctuation">.</span>cached <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createRootCodegen</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> root
  <span class="token comment">// vue2 仅支持单个根节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingleElementRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> child<span class="token punctuation">.</span>codegenNode
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// vue3 支持多个根节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建文件<code>transforms/hoistStatic.ts</code>文件，内容如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../ast&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSingleElementRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> root
  <span class="token keyword">return</span> children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开测试示例<code>/packages/vue/examples/compiler/compiler-ast.html</code>，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行浏览器，查看打印结果</p><blockquote><p>注意：baseCompile 方法中的打印代码: console.log(ast); console.log(JSON.stringify(ast))</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c878cb152da4676942b90bbaff0043d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>怎么样验证这个结果对吗，我们在<code>vue-next-3.2.37/packages/compiler-core/src/compile.ts</code>中修改代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./runtimeHelpers&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>
  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>
  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>
	<span class="token operator">...</span>

  <span class="token comment">// 第一个参数结构与上面浏览器打印结果结构保持一致</span>
  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
          tagType<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          codegenNode<span class="token operator">:</span> <span class="token punctuation">{</span>
            type<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
            tag<span class="token operator">:</span> <span class="token string">&#39;&quot;div&quot;&#39;</span><span class="token punctuation">,</span>
            props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      loc<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      codegenNode<span class="token operator">:</span> <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
        tag<span class="token operator">:</span> <span class="token string">&#39;&quot;div&quot;&#39;</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 注意：这里 JSON.stringify 后，是 null, 需要我们手动更改引入</span>
      helpers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      hoists<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      temps<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      cached<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      prefixIdentifiers
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在源码项目中运行命令:<code>npm run dev</code></p></li><li><p>运行源码<code>vue-next-3.2.7</code>中的测试示例，内容如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../../dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> render<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          &lt;div&gt;hello world&lt;/div&gt;
        </span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">render</span><span class="token operator">:</span> renderFn<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以看到页面中正确显示了文本内容</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87ff1f1229f84f97b2eb697e8b88e07e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ol><h2 id="_13-扩展知识-render-函数的生成方案" tabindex="-1"><a class="header-anchor" href="#_13-扩展知识-render-函数的生成方案" aria-hidden="true">#</a> 13：扩展知识：render 函数的生成方案</h2><p>当我们得到了 <code>JavaScript AST</code> 之后，下面就可以生成对应的 <code>render</code> 函数了</p><p>那么我们如何根据 <code>JavaScript AST</code> 来生成对应的 <code>render</code> 函数呢？</p><p>我们先来看 vue 源码中的 <code>render</code></p><ol><li><p>在 <code>packages/compiler-core/src/compile.ts</code>中的 <code>baseCompile</code>方法下，使用此代码（咱们自己生成的 <code>JavaScript AST</code>）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        tagType<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        codegenNode<span class="token operator">:</span> <span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
          tag<span class="token operator">:</span> <span class="token string">&#39;&quot;div&quot;&#39;</span><span class="token punctuation">,</span>
          props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    loc<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    codegenNode<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
      tag<span class="token operator">:</span> <span class="token string">&#39;&quot;div&quot;&#39;</span><span class="token punctuation">,</span>
      props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&#39;hello world111&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    helpers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    hoists<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    temps<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    cached<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    prefixIdentifiers<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成的 render 函数如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue

<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> createElementVNode<span class="token operator">:</span> _createElementVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue
    <span class="token keyword">return</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello world111&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>那么我们来分析一下上面这个函数的生成，即：生成方案</p><p>函数的生成方案，分为三部分</p><ol><li>函数本质上就是一段字符</li><li>字符串的拼接方式</li><li>字符串拼接的格式处理</li></ol><h3 id="函数本质上就是一段字符" tabindex="-1"><a class="header-anchor" href="#函数本质上就是一段字符" aria-hidden="true">#</a> 函数本质上就是一段字符</h3><p><strong>函数本质上就是一段字符</strong>，所以我们可以把以上函数比作一个比较大的<strong>字符串</strong></p><p>那么想要生成这样的一个大字符串，本质上就是各个小的字符串的拼接</p><p>例如，我们可以期望如下的拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
 const _Vue = Vue \\n\\n return function render(_ctx,_cache){ \\n\\n const {
 createElementVNode: _createElelemtVNode } = _Vue \\n\\n return 
 _createElementVNode(&quot;div&quot;, [], [&quot; hello world &quot;]) \\n\\n }
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把上述字符串处理之后，我们就可以得到一样函数格式的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
	const _Vue = Vue
	return function render(_ctx, _cache){
		const { createElementVNode, _creaElementVNode } = _Vue
		return _createElementVNode(&quot;div&quot;, [], [ &quot;hello world&quot; ])
	}
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符拼接的方式" tabindex="-1"><a class="header-anchor" href="#字符拼接的方式" aria-hidden="true">#</a> 字符拼接的方式</h3><p>当我们明确好了属性本身就是字符，这样的概念之后，那么接下来就是如何拼接这样的字符</p><p>我们把上面的函数分为 4 个部分</p><ol><li><p>函数的前置代码: <code>const _Vue = Vue</code></p></li><li><p>函数名：<code>function render</code></p></li><li><p>函数的参数：<code>_ctx、_cache</code></p></li><li><p>函数体</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createElementVNode<span class="token punctuation">,</span> _creaElementVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue
<span class="token keyword">return</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>我们只需要把以上的内容拼接到一起，那么就可以得到最终的目标结果。</p><p>那么为了完成对应的拼接，我们可以提供一个 push 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>code <span class="token operator">+=</span> code
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以此来完成对应的拼接</p><h3 id="关于字符串的格式" tabindex="-1"><a class="header-anchor" href="#关于字符串的格式" aria-hidden="true">#</a> 关于字符串的格式</h3><p>在去处理这样的一个字符串的过程中，我们不光需要处理拼接，还需要处理对相应的格式问题，比如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
	const _Vue = Vue
	(换行)
	return function render(_ctx, _cache){
  (缩进)const { createElementVNode, _creaElementVNode } = _Vue
		return _createElementVNode(&quot;div&quot;, [], [ &quot;hello world&quot; ])
	}
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于字符串而言，我们知道换行可以通过 <code>\\n</code>来进行表示，缩进就是 空格 的处理</p><p>所以我们需要提供对应的方法，来进行相应的处理，比如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>context<span class="token punctuation">.</span>indentLevel <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 表示缩进</span>
<span class="token comment">// 换行</span>
<span class="token keyword">function</span> <span class="token function">newline</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">newline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 缩进 +  换行</span>
<span class="token keyword">function</span> <span class="token function">indent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">++</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 取消缩进 + 换行</span>
<span class="token keyword">function</span> <span class="token function">deindent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">--</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">newline</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>code <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-源码阅读-编译器第三步-生成-render-函数" tabindex="-1"><a class="header-anchor" href="#_14-源码阅读-编译器第三步-生成-render-函数" aria-hidden="true">#</a> 14：源码阅读：编译器第三步：生成 render 函数</h2><h2 id="_15-框架实现-构建-codegencontext-上下文对象" tabindex="-1"><a class="header-anchor" href="#_15-框架实现-构建-codegencontext-上下文对象" aria-hidden="true">#</a> 15. 框架实现：构建 CodegenContext 上下文对象</h2><p>对于 <code>generate</code> 的构建，我们将分成两部分来进行实现</p><ol><li>构建 <code>context</code> 上下文对象</li><li>利用 <code>context</code> 完成函数拼接</li></ol><p>那么这一小节，我们先实现第一部分</p><ol><li><p>在<code>packages/compiler-core/src/compile.ts</code>的<code>baseCompile</code>方法中，完成 <code>generate</code> 的调用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> generate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./codegen&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建<code>packages/compiler-core/src/codegen.ts</code> 模块，构建 <code>generate</code> 和 <code>createCodegenContext</code> 方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> helperNameMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./runtimeHelpers&#39;</span>

<span class="token keyword">function</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
    runtimeGlobalName<span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span>
    code<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    source<span class="token operator">:</span> ast<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>source<span class="token punctuation">,</span>
    indentLevel<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    isSSR<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token function">helper</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span>code <span class="token operator">+=</span> code
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">newline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">++</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">deindent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">--</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">newline</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>code <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> context
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> newline<span class="token punctuation">,</span> deindent<span class="token punctuation">,</span> indent <span class="token punctuation">}</span> <span class="token operator">=</span> context
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_16-框架实现-解析-javascript-ast-拼接-render-函数" tabindex="-1"><a class="header-anchor" href="#_16-框架实现-解析-javascript-ast-拼接-render-函数" aria-hidden="true">#</a> 16:框架实现：解析 JavaScript AST，拼接 render 函数</h2><blockquote><p>大概的一个结构类似如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue
<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createElementVNode<span class="token punctuation">,</span> _creaElementVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue
  <span class="token keyword">return</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol><li><p>我们接着完成 <code>generate</code> 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NodeTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ast&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getVNodeHelper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isArray<span class="token punctuation">,</span> isString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">aliasHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> newline<span class="token punctuation">,</span> deindent<span class="token punctuation">,</span> indent <span class="token punctuation">}</span> <span class="token operator">=</span> context

  <span class="token comment">// 前置代码</span>
  <span class="token function">getFunctionPreamble</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 接着是函数和参数</span>
  <span class="token keyword">const</span> functionName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">render</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;_ctx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_cache&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> signature <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>functionName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>signature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) {</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> hasHelpers <span class="token operator">=</span> ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasHelpers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">} = _Vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 再处理函数的调用以及参数的处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">null</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 处理最后的 {</span>
  <span class="token function">deindent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    ast<span class="token punctuation">,</span>
    code<span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token operator">:</span>
      <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span>
      <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> helper <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> isComponent<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> patchFlag<span class="token punctuation">,</span> dynamicProps <span class="token punctuation">}</span> <span class="token operator">=</span> node
  <span class="token keyword">const</span> callHelper <span class="token operator">=</span> <span class="token function">getVNodeHelper</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>isSSR<span class="token punctuation">,</span> isComponent<span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>callHelper<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">genNullableArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    tag<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    patchFlag<span class="token punctuation">,</span>
    dynamicProps<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">genNodeList</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNullableArgs</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> args<span class="token punctuation">.</span>length
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意这里是双不等 != 不是 !==, 要排除undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">null</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">genNodeListArray</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNodeListArray</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span>
  <span class="token function">genNodeList</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getFunctionPreamble</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> runtimeGlobalName<span class="token punctuation">,</span> newline <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">const</span> VueBinding <span class="token operator">=</span> runtimeGlobalName
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">const _Vue = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>VueBinding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// utils.ts 中增加 getVNodeHelper 方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">,</span> <span class="token constant">CREATE_VNODE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./runtimeHelpers&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getVNodeHelper</span><span class="token punctuation">(</span>ssr<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> isComponent<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> ssr <span class="token operator">||</span> isComponent <span class="token operator">?</span> <span class="token constant">CREATE_VNODE</span> <span class="token operator">:</span> <span class="token constant">CREATE_ELEMENT_VNODE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建一个测试示例<code>/packages/vue/example/compile/compiler-codegen.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world test&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打印结果如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue

<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">createElementVNode</span><span class="token operator">:</span> _createElementVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue
  <span class="token keyword">return</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello world test&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改测试示例如下</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world test&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> renderFn<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>renderFn<span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时我们打印结果<code>renderFn</code>如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94de2e13bee84677ab279f1c200588d4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>我们的代码中目前并没有<code>createElementVNode</code>这个方法，所以我们在<code>packages/runtime-core/src/vnode.ts</code>中增加如下代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> createVNode <span class="token keyword">as</span> createElementVNode <span class="token punctuation">}</span> <span class="token comment">//可以 把 createVNode 作为 createElementVNode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后在进行导出</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/runtime-core/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> createElementVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./vnode&#39;</span>

<span class="token comment">// packages/vue/src/index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> createElementVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/runtime-core&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以看到页面中已经正常显示了</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/456cf6021538440a9e61462f84aab4e8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_17-框架实现-新建-compat-模块-把-render-转化为-function" tabindex="-1"><a class="header-anchor" href="#_17-框架实现-新建-compat-模块-把-render-转化为-function" aria-hidden="true">#</a> 17: 框架实现：新建 compat 模块，把 render 转化为 function</h2><p>上一节中已经成功把 <code>JavaScript AST</code> 拼接成了 <code>render</code> 函数，但是跟我们日常使用略有不同。上一节的测试示例中我们手动声明了一个<code>new Function(code)()</code>，手动生成了一个<code>renderFn</code>函数</p><p>接下来我们就来处理 把 <code>render</code> 转化为 <code>function</code></p><ol><li><p>新建<code>/packages/vue-compact/src/index.ts</code>文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/compiler-dom&#39;</span>

<span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> render
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> compileToFunction <span class="token keyword">as</span> compile <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>/packages/vue/src/index.ts</code>导出</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// export { compile } from &#39;@vue/compiler-dom&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/vue-compact&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建测试示例 <code>packages/vue/example/compile/compiler-render.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;hello world renderFn&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> renderFn <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> renderFn<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行浏览器，可以看到正常渲染</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7747004e5214b6ba83cf6233fdecf32~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></li></ol><h2 id="_18-总结" tabindex="-1"><a class="header-anchor" href="#_18-总结" aria-hidden="true">#</a> 18: 总结</h2><p>到这里我们就已经完成了一个基础的编辑器处理</p><p>我们知道整个编辑器的处理过程分为了三部分</p><ol><li>解析模板 <code>template</code> 为 <code>AST</code><ol><li>在这一步过程中，我们使用了 <ol><li>有限自动状态机解析模板得到了 <code>tokens</code></li><li>通过扫描 <code>tokens</code> 最终得到了 <code>AST</code></li></ol></li></ol></li><li>转换为 <code>AST</code> 为 <code>JavaScript AST</code><ol><li>这一步是为了最终生成 <code>render</code> 函数做准备</li><li>利用了<strong>深度优先</strong>的方式，进行了<strong>自下而上</strong>的逐层转化</li></ol></li><li>生成 <code>render</code> 函数 <ol><li>这一步也是最后的解析环节，我们需要对 <code>JavaScript AST</code> 进行处理，得到最终的 <code>render 函数</code></li></ol></li></ol>`,59);function N(_,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("我们知道想要实现 compiler 第一步是构建 AST 对象，那么想要构建 AST，就需要利用 "),s("a",d,[n("有限状态机"),t(a)]),n("的概念")]),s("p",null,[n("有限状态机也被叫做"),k,n("，表示"),s("strong",null,[n("有限个"),s("a",v,[n("状态"),t(a)]),n("以及在这些状态之间的转移和动作等行为的"),s("a",m,[n("数学计算模型"),t(a)])]),n("。")]),b,s("p",null,[n("在刚才的图示中，我们通过"),s("a",g,[n("递归下降算法"),t(a)]),n("这样的一种扫描形式把"),y,n("解析"),h,n("解析成了"),f]),w,s("p",null,[n("对于 "),x,n(" 转化方法而言，"),E,n(" 本身的视线非常复杂，比如：指令、"+i()+"。。。 都会在这里处理",1)]),T])}const q=e(u,[["render",N],["__file","index-13.html.vue"]]);export{q as default};
