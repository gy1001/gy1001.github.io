import{_ as t,M as o,p as c,q as i,R as n,t as s,N as p,a1 as a}from"./framework-e8cb8151.js";const l="/assets/image-20240221160318186-ffaec40b.png",u={},r=a(`<h1 id="_01-node-脚手架篇-打造自己的脚手架工具" tabindex="-1"><a class="header-anchor" href="#_01-node-脚手架篇-打造自己的脚手架工具" aria-hidden="true">#</a> 01-Node 脚手架篇 - 打造自己的脚手架工具</h1><h2 id="_01-自定义脚手架概述" tabindex="-1"><a class="header-anchor" href="#_01-自定义脚手架概述" aria-hidden="true">#</a> 01：自定义脚手架概述</h2><h3 id="什么是脚手架" tabindex="-1"><a class="header-anchor" href="#什么是脚手架" aria-hidden="true">#</a> 什么是脚手架</h3><ul><li>全局命令行工具</li><li>具有创建项目初始化代码文件及目录的能力</li></ul><h3 id="脚手架的基本能力有哪些" tabindex="-1"><a class="header-anchor" href="#脚手架的基本能力有哪些" aria-hidden="true">#</a> 脚手架的基本能力有哪些</h3><ul><li>全局命令行执行能力</li><li>命令行交互能力</li><li>项目初始化代码下载能力</li></ul><h3 id="如何实现一个自己的脚手架工具" tabindex="-1"><a class="header-anchor" href="#如何实现一个自己的脚手架工具" aria-hidden="true">#</a> 如何实现一个自己的脚手架工具</h3><ul><li>创建自定义全局命令</li><li>命令参数接受处理</li><li>终端交互</li><li>下载远程项目代码</li><li>项目初始化完成提示</li></ul><h2 id="_02-创建自定义全局指令" tabindex="-1"><a class="header-anchor" href="#_02-创建自定义全局指令" aria-hidden="true">#</a> 02: 创建自定义全局指令</h2><h3 id="新建本地软连gy-cli-server" tabindex="-1"><a class="header-anchor" href="#新建本地软连gy-cli-server" aria-hidden="true">#</a> 新建本地软连<code>gy-cli-server</code></h3><p>新建文件夹 Node-Cli，并在新建文件 bin/index.js, 内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello i am node-cli&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时执行<code>npm init</code> 进行项目初始化后，生成的<code>package.json</code>内容如下（多增加 bin 相关的属性配置）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node-cli&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;node-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/index.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改上述<code>bin</code> 属性为如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>	<span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;gy-cli-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/index.js&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时执行 <code>npm link</code> 后进行本地挂载软软连接, 成功后，在终端中执行命令<code>gy-cli-server</code> 就可以看到如下打印信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>hello i am node<span class="token operator">-</span>cli <span class="token comment">// bin/index.js 中的内容打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何获得命令行参数呢" tabindex="-1"><a class="header-anchor" href="#如何获得命令行参数呢" aria-hidden="true">#</a> 如何获得命令行参数呢？</h3><p>修改<code>bin/index.js</code> 内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行脚本命令<code>gy-cli-server --help</code>，得到的打印结果如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ gy<span class="token operator">-</span>cli<span class="token operator">-</span>server  <span class="token operator">--</span>help
<span class="token punctuation">[</span> <span class="token string">&#39;/usr/local/bin/node&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/local/bin/gy-cli-server&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--help&#39;</span> <span class="token punctuation">]</span> <span class="token comment">// 如下打印结果</span>
<span class="token comment">// 第一个结果是使用的什么脚本</span>
<span class="token comment">// 第二个结果是使用的脚本文件所在目录</span>
<span class="token comment">// 第三个结果是使用脚本的命令行参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们修改代码如下来获取并处理命令行参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">&#39;--help&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这里获取的 --help命令行参数&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-使用commander处理help选项" tabindex="-1"><a class="header-anchor" href="#_03-使用commander处理help选项" aria-hidden="true">#</a> 03：使用commander处理help选项</h2><blockquote><p>上一节中我们可以使用 <code>process.argv[2]</code> 来获取命令行参数，并进行逻辑处理，但是略显麻烦，我们可以使用目前已经成熟的方案库：commander</p></blockquote><h3 id="安装-依赖库" tabindex="-1"><a class="header-anchor" href="#安装-依赖库" aria-hidden="true">#</a> 安装 依赖库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> commander --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改<code>bin/index.js</code>代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>program<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再次终端中再次执行脚本命令<code>gy-cli-server --help</code>，得到的打印结果如下(默认会把 --help 选项参数写好)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gy-cli-server <span class="token parameter variable">--help</span>
Usage: gy-cli-server <span class="token punctuation">[</span>options<span class="token punctuation">]</span>
Options:
  -h, <span class="token parameter variable">--help</span>  display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何增加其他参数选项" tabindex="-1"><a class="header-anchor" href="#如何增加其他参数选项" aria-hidden="true">#</a> 如何增加其他参数选项？？？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>program<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span>
program
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-d, --debug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;是否开启调试模式&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --envName &lt;envName&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;获取环境变量名称&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建 envName 命令</span>
  <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再次终端中再次执行脚本命令，得到的打印结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gy-cli-server <span class="token parameter variable">--help</span>
Usage: gy-cli-server <span class="token punctuation">[</span>options<span class="token punctuation">]</span>

Options:
  -d, <span class="token parameter variable">--debug</span>              是否开启调试模式 <span class="token punctuation">(</span>default: <span class="token boolean">true</span><span class="token punctuation">)</span>
  -e, <span class="token parameter variable">--envName</span> <span class="token operator">&lt;</span>envName<span class="token operator">&gt;</span>  获取环境变量名称
  -h, <span class="token parameter variable">--help</span>               display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>
  
$ gy-cli-server <span class="token parameter variable">-d</span> <span class="token boolean">false</span>
$ gy-cli-server <span class="token parameter variable">--debug</span>
$ gy-cli-server <span class="token parameter variable">-e</span> development
$ gy-cli-server <span class="token parameter variable">--envName</span> development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-commander-处理自定义指令选项" tabindex="-1"><a class="header-anchor" href="#_04-commander-处理自定义指令选项" aria-hidden="true">#</a> 04: commander 处理自定义指令选项</h2><p>修改<code>bin/index.js</code>代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>program<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;commander&quot;</span><span class="token punctuation">)</span>

program
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;-d, --debug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;是否开启调试模式&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --envName &lt;envName&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;获取环境变量名称&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建 envName 命令</span>

<span class="token comment">// 创建 create 命令</span>
program
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;create &lt;project&gt; [other...]&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;crt&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 别名</span>
  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;创建项目&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">project<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> other<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，创建了一个 create 的 command 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gy-cli-server create myDemo xxx
myDemo <span class="token punctuation">[</span> <span class="token string">&#39;xxx&#39;</span> <span class="token punctuation">]</span>

$ gy-cli-server create myDemo a1 a2 
myDemo <span class="token punctuation">[</span> <span class="token string">&#39;a1&#39;</span>, <span class="token string">&#39;a2&#39;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-逻辑代码模块化拆分" tabindex="-1"><a class="header-anchor" href="#_05-逻辑代码模块化拆分" aria-hidden="true">#</a> 05：逻辑代码模块化拆分</h2><p>上一节中我们使用了 command 和 option 选项来实现各种命令以及参数，如果选项太多会造成逻辑复杂，需要进行逻辑代码上的拆分，方便后续优化</p><p>新建文件<code>lib/help.js</code>内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myHelp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">program</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  program
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d, --debug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;是否开启调试模式&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-e, --envName &lt;envName&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;获取环境变量名称&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 创建 envName 命令</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> myHelp <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建<code>lib/commander.js</code>内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createAction <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./action&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">createCommander</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">program</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建 create 命令</span>
  program
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;create &lt;project&gt; [other...]&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&#39;crt&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 别名</span>
    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;创建项目&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>createAction<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> createCommander <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建<code>lib/action.js</code>内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">project<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> other<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  createAction
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就对以上逻辑进行了拆分抽离</p><p>修改主入口文件<code>bin/index.js</code> 内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> myHelp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../lib/help&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createCommander <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../lib/commander&#39;</span><span class="token punctuation">)</span>
<span class="token function">myHelp</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span>
<span class="token function">createCommander</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token comment">// 解析参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中运行命令，结果不变</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gy-cli-server <span class="token parameter variable">--help</span>
Usage: gy-cli-server <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>

Options:
  -d, <span class="token parameter variable">--debug</span>                      是否开启调试模式 <span class="token punctuation">(</span>default: <span class="token boolean">true</span><span class="token punctuation">)</span>
  -e, <span class="token parameter variable">--envName</span> <span class="token operator">&lt;</span>envName<span class="token operator">&gt;</span>          获取环境变量名称
  -h, <span class="token parameter variable">--help</span>                       display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>

Commands:
  create<span class="token operator">|</span>crt <span class="token operator">&lt;</span>project<span class="token operator">&gt;</span> <span class="token punctuation">[</span>other<span class="token punctuation">..</span>.<span class="token punctuation">]</span>  创建项目
  <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>                   display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>
  
$ gy-cli-server create myDemo a1 a2
myDemo <span class="token punctuation">[</span> <span class="token string">&#39;a1&#39;</span>, <span class="token string">&#39;a2&#39;</span> <span class="token punctuation">]</span>

$ gy-cli-server create myDemo xxx
myDemo <span class="token punctuation">[</span> <span class="token string">&#39;xxx&#39;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-命令行问答交互-inquirer" tabindex="-1"><a class="header-anchor" href="#_06-命令行问答交互-inquirer" aria-hidden="true">#</a> 06: 命令行问答交互 inquirer</h2><blockquote><p>比如使用 npm init 命令后，会根据一定的提示以及用户输入来进行初始化</p><p>使用的npm 库为 inquirer</p></blockquote><p>安装命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 注意 Inquirer v9 and higher are native esm modules
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> inquirer@^8.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们修改 action.js 文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> framework <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">createAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">project<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(project, other)</span>
  inquirer
    <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;framework&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">choices</span><span class="token operator">:</span> framework<span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;请选择你要使用的框架&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then&#39;</span><span class="token punctuation">,</span> answers<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  createAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们把相关的配置信息，统一存放在 config.js 文件中，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">framework</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;koa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;egg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时执行终端命令，结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gy-cli-server create myDemo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如下: (选择列表可以通过上下箭头来进行选择)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>? 请选择你要使用的框架 <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>
❯ express 
  koa 
  egg 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击确定按钮后，结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">then</span> <span class="token punctuation">{</span> framework: <span class="token string">&#39;express&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_07-下载远程仓库模板代码-download-git-repo" tabindex="-1"><a class="header-anchor" href="#_07-下载远程仓库模板代码-download-git-repo" aria-hidden="true">#</a> 07: 下载远程仓库模板代码 download-git-repo</h2>`,70),d={href:"https://gitee.com/beiyaoyaoyao",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"上述仓库下分别对应三个不同选择对应的模板代码",-1),v=a(`<p>安装依赖库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> download-git-repo <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试文件 download.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;download-git-repo&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 第一个参数// 第一个参数空下载链接</span>
<span class="token comment">// 第二个参数：保存的本地文件目录</span>
<span class="token comment">// 第三个参数：克隆等配置</span>
<span class="token comment">// 第四个参数：回调函数</span>
<span class="token function">download</span><span class="token punctuation">(</span>
  <span class="token string">&#39;direct:https://gitee.com/beiyaoyaoyao/egg-template.git&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">clone</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端中执行命令<code>node download.js</code> 就可以进行下载，就可以看到本地文件目录内多了个一个 dist 目录，其中就是下载的文件模板</p><p>根据上一节的后续，我们可以得知，我们要根据用户选择的框架去下载不同的仓库模板，</p><p>修改配置文件<code>config.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">framework</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;koa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;egg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">frameworkUrl</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">express</span><span class="token operator">:</span> <span class="token string">&#39;https://gitee.com/beiyaoyaoyao/express-template.git&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">koa</span><span class="token operator">:</span> <span class="token string">&#39;https://gitee.com/beiyaoyaoyao/koa-template.git&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">egg</span><span class="token operator">:</span> <span class="token string">&#39;https://gitee.com/beiyaoyaoyao/egg-template.git&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增文件<code>lib/download.js</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;download-git-repo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">downloadFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">clone</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  downloadFunc<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>action.js</code> 中进行引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> framework<span class="token punctuation">,</span> frameworkUrl <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> downloadFunc <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./download&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">createAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">project<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  inquirer
    <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;framework&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">choices</span><span class="token operator">:</span> framework<span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;请选择你要使用的框架&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> url <span class="token operator">=</span> frameworkUrl<span class="token punctuation">[</span>answers<span class="token punctuation">.</span>framework<span class="token punctuation">]</span>
      <span class="token function">downloadFunc</span><span class="token punctuation">(</span><span class="token string">&#39;direct:&#39;</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> project<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  createAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以在终端中根据交互获得用户选择的框架下载对应的仓库模板。</p><p>这里有个小问题：下载时候是没有任何提示的，也就是一直等待中，是不是可以做成普遍框架下载时候的圈圈动画，以及有相应的提示语呢？</p><h2 id="_08-下载等待提示交互-ora" tabindex="-1"><a class="header-anchor" href="#_08-下载等待提示交互-ora" aria-hidden="true">#</a> 08：下载等待提示交互 ora</h2><blockquote><p>命令行任务等待工具 ORA</p></blockquote><p>安装命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> ora 
// 注意：从 <span class="token number">6.0</span> 以后开始使用了ES Module 方式进行引入，使用require 方式引入的话可以使用最近的 <span class="token number">5.4</span>.1

<span class="token function">npm</span> <span class="token function">install</span> ora@5.4.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h3><p>新建<code>test/ora.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ora 的使用方式</span>
<span class="token keyword">const</span> ora <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ora&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">&#39;正在下载模板...&#39;</span><span class="token punctuation">)</span>

spinner<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;这是一条提示信息&#39;</span>
spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// spinner.fail(&#39;下载失败&#39;)</span>
  <span class="token comment">// spinner.info(&#39;下载中...&#39;)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令<code>node test/ora.js</code> 运行结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> ora.js
⠋ 这是一条提示信息 // 一条信息转圈并显示
// 3s 后输出
下载完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正式代码演示" tabindex="-1"><a class="header-anchor" href="#正式代码演示" aria-hidden="true">#</a> 正式代码演示</h3><p>修改<code>lib/download.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;download-git-repo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ora <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ora&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">downloadFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">&#39;正在下载模板...&#39;</span><span class="token punctuation">)</span>
  spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">clone</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      spinner<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&#39;下载失败&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">请使用 cd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 进入项目</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;并使用 npm install 或 yarn 安装依赖&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;然后使用 npm run dev 或 yarn dev 启动项目&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  downloadFunc<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后运行终端，重新执行脚本<code>gy-cli-server create myDemo</code> 我们就可以看到在下载时就会有：转圈圈提示语：正在下载模板...</p><p>下载完成后，提示下载完成并由相关帮助语，进行启动项目</p><p>小Tips: 最后的提示语我们使用了 console.log 打印出来是白色，有没有办法变成五彩的或者指定的颜色的</p><h2 id="_09-命令行样式渲染工具-chalk" tabindex="-1"><a class="header-anchor" href="#_09-命令行样式渲染工具-chalk" aria-hidden="true">#</a> 09：命令行样式渲染工具 chalk</h2>`,30),m={href:"https://github.com/chalk/chalk/releases/tag/v5.0.0",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>这里我们要使用 require 方式进行引入</p><p>安装方式如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> chalk@4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试代码-1" tabindex="-1"><a class="header-anchor" href="#测试代码-1" aria-hidden="true">#</a> 测试代码</h3><p>新建<code>test/chalk.js</code> 内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chalk&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;内容&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token string">&#39;加粗内容&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token string">&#39;内容&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行脚本<code>node chalk.js</code>后，效果如下</p><p><img src="`+l+`" alt="image-20240221160318186"></p><h3 id="结合项目代码" tabindex="-1"><a class="header-anchor" href="#结合项目代码" aria-hidden="true">#</a> 结合项目代码</h3><p>修改<code>lib/download.js</code>,代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> download <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;download-git-repo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ora <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ora&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chalk&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入 chalk 方式</span>
<span class="token keyword">const</span> <span class="token function-variable function">downloadFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">&#39;正在下载模板...&#39;</span><span class="token punctuation">)</span>
  spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">clone</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      spinner<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&#39;下载失败&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">请使用 cd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 进入项目</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用 chalk 方式改变字体样式</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;并使用 npm install 或 yarn 安装依赖&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;然后使用 npm run dev 或 yarn dev 启动项目&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  downloadFunc<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-总结-如何实现一个自己的脚手架工具" tabindex="-1"><a class="header-anchor" href="#_10-总结-如何实现一个自己的脚手架工具" aria-hidden="true">#</a> 10：总结：如何实现一个自己的脚手架工具</h2><ol><li>创建自定义全局命令</li><li>命令参数接受处理</li><li>终端交互</li><li>下载远程项目代码</li><li>项目初始化完成提示</li></ol>`,13);function g(h,f){const e=o("ExternalLinkIcon");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[s("下载仓库地址："),n("a",d,[s("https://gitee.com/beiyaoyaoyao"),p(e)])]),k]),v,n("blockquote",null,[n("p",null,[s("Chalk 5 is ESM. If you want to use Chalk with TypeScript or a build tool, you will probably want to use Chalk 4 for now. "),n("a",m,[s("Read more."),p(e)])])]),b])}const j=t(u,[["render",g],["__file","index-01.html.vue"]]);export{j as default};
