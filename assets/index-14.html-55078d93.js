import{_ as t,M as o,p as c,q as i,R as n,t as s,N as e,a1 as p}from"./framework-e8cb8151.js";const l="/assets/image-20230905224258273-91da8494.png",r="/assets/image-20230905224653051-8335e873.png",d={},u=n("h1",{id:"_14-webpack-dev-server-本地开发服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-webpack-dev-server-本地开发服务","aria-hidden":"true"},"#"),s(" 14-Webpack Dev Server 本地开发服务")],-1),v=n("p",null,[n("img",{src:l,alt:"image-20230905224258273"})],-1),k=n("blockquote",null,[n("p",null,"不想当将军的士兵，不是好士兵。 ——拿破仑")],-1),m={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},b={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/webpack/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"它还有一个通过 Socket IO 连接着 webpack-dev-server 服务器的小型运行时程序。",-1),w=n("p",null,"webpack-dev-server 发送关于编译状态的消息到客户端，客户端根据消息作出响应。",-1),y={href:"https://expressjs.com/zh-cn/guide/using-middleware.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/webpack/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/webpack-contrib/webpack-hot-middleware",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"关于 webpack-dev-middleware 和 webpack-hot-middleware 中间件来实现 webpack-dev-server 的内容，在后续章节还会有介绍。",-1),j=p(`<h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><p>webpack-dev-server 安装之后，会提供一个 bin 命令行，通过命令行可以启动对应的服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 项目中安装 webpack-dev-server</span>
<span class="token function">npm</span> i webpack-dev-server
<span class="token comment"># 使用 npx 启动</span>
npx webpack-dev-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>webpack-dev-server</code>命令之后，它会读取 Webpack 的配置文件（默认是 webpack.config.js）</p><p>然后将文件打包到内存中（所以看不到<code>dist</code>文件夹的生产，Webpack 会打包到硬盘上），</p><p>这时候打开 server 的默认地址：<code>localhost:8080</code>就可以看到文件目录或者页面（默认是显示 index.html，没有则显示目录）。</p><p>跟<code>webpack-cli</code>一样，<code>webpack-dev-server</code>也有一些选项可以添加：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改端口号和 host</span>
webpack-dev-server <span class="token parameter variable">--port</span> <span class="token number">3000</span> <span class="token parameter variable">--host</span> <span class="token number">127.0</span>.0.1
<span class="token comment"># 启动inline 模式的自动刷新</span>
webpack-dev-server <span class="token parameter variable">--hot</span> <span class="token parameter variable">--inline</span>
<span class="token comment"># 手动指定 webpack config 文件</span>
webpack-dev-server <span class="token parameter variable">--config</span> webpack.xxx.js
<span class="token comment"># 指定 webpack 的 mode</span>
webpack-dev-server <span class="token parameter variable">--mode</span> development
<span class="token comment"># watch 功能，文件发生变化则触发重新编译</span>
webpack-dev-server <span class="token parameter variable">--watch</span>
<span class="token comment"># dev-server默认会将工作目录（当前目录）最为基本目录，可以手动修改它</span>
webpack-dev-server --content-base ./build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面只介绍了常用的并且比较重要的一些命令行选项，要查看全部，可以使用<code>webpack-dev-server -h</code>查看帮助。</p><p>我们还可以将<code>webpack-dev-server</code>放到<code>package.json</code>的<code>scripts</code>里面，例如下面例子，执行<code>npm run dev</code>实际就是执行的对应<code>webpack-dev-server</code>命令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server --mode development --config webpack.config.dev.js --hot --inline --port 3000&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动刷新" tabindex="-1"><a class="header-anchor" href="#自动刷新" aria-hidden="true">#</a> 自动刷新</h3><p>在开发中，我们希望边写代码，边看到代码的执行情况，<code>webpack-dev-server</code> 提供自动刷新页面的功能可以满足我们的需求。</p><p><code>webpack-dev-server</code> 支持两种模式的自动刷新页面。</p><ul><li><code>iframe</code> 模式：页面被放到一个 <code>iframe</code> 内，当发生变化时，会重新加载；</li><li><code>inline</code> 模式：将 <code>webpack-dev-server</code> 的重载代码添加到产出的 <code>bundle</code> 中。</li></ul><p>两种模式都支持模块热替换（<code>Hot Module Replacement</code>）。</p><p>模块热替换的好处是只替换更新的部分，而不是整个页面都重新加载。</p><p>使用方式：<code>webpack-dev-server --hot --inline</code>是开启<code>inline</code>模式的自动刷新。</p><h2 id="和-webpack-配置结合" tabindex="-1"><a class="header-anchor" href="#和-webpack-配置结合" aria-hidden="true">#</a> 和 Webpack 配置结合</h2><p>webpack-dev-server 被 Webpack 作为内置插件对外提供了，这样可以直接在对应的 Webpack 配置文件中通过<code>devServer</code>这个属性的配置来配置自己的<code>webpack-dev-server</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>devServer.port</code> 表示服务器的监听端口，即运行后我们可以通过 <code>http://localhost:9000</code> 来访问应用；</p><p>而 <code>devServer.contentBase</code> 表示服务器将从哪个目录去查找内容文件（即页面文件，比如 HTML）。</p><p>配置完之后，在项目中执行<code>webpack-dev-server</code>就可以看到命令行控制台有输出：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code>｢wds｣<span class="token operator">:</span> Project is running at <span class="token url">http://localhost:9000/</span>
｢wds｣<span class="token operator">:</span> webpack output is served from <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以用 http://localhost:9000/这个地址来访问本地开发服务了。</p><blockquote><p>Tips：</p><ol><li>启动 devserver 是通过<code>webpack-dev-server</code>命令行来启动的，不是<code>webpack</code>命令，执行<code>webpack</code>时<code>devServer</code>内容会被忽略</li><li>在使用数组导出配置的方式时，只会使用第一个配置中的 <code>devServer</code> 选项，并将其用于数组中的其他所有配置。</li></ol></blockquote><h2 id="hot-module-replacement" tabindex="-1"><a class="header-anchor" href="#hot-module-replacement" aria-hidden="true">#</a> Hot Module Replacement</h2><p>HMR 即模块热替换（Hot Module Replacement）的简称，它可以在应用运行的时候，<strong>不需要刷新页面</strong>，就可以直接替换、增删模块。</p><p>Webpack 可以通过配置 <code>webpack.HotModuleReplacementPlugin</code> 插件来开启全局的 HMR 能力，开启后 <code>bundle</code> 文件会变大一些，因为它加入了一个小型的 HMR 运行时（runtime），当你的应用在运行的时候，Webpack 监听到文件变更并重新打包模块时，HMR 会判断这些模块是否接受 update，若允许，则发信号通知应用进行热替换。</p><p>要开启 HMR 功能，需要三步：</p><ol><li><p>设置 <code>devServer.hot=true，devServer.inline=true</code>（默认）；</p><ul><li><code>devServer.hot=true</code>：会给 entry 添加<code>webpack/hot/dev-serve</code>或者<code>webpack/hot/only-dev-serve</code>（<code>devServer.hotOnly=true</code>），这个是实现 HMR 的服务端代码；</li><li><code>devServer.inline=true</code>：会给 entry 添加<code>webpack-dev-server/client</code>，这是通信客户端；</li></ul></li><li><p>在<code>webpack.config.js</code>中添加 plugins：<code>new webpack.HotModuleReplacementPlugin()</code>；</p></li><li><p>修改入口文件添加 HMR 支持代码：</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在入口文件index.js最后添加如下代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通知 webpack 该模块接受 hmr</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot apply HMR update.&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终修改后的<code>webpack.config.js</code>内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>
    <span class="token comment">// 开启 hmr 支持</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 添加 hmr plugin</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上面配置之后，再次执行<code>webpack-dev-server</code>，打开<code>http://localhost:9000</code>，然后修改<code>index.js</code>内容，就能看到效果了</p><p><img src="`+r+`" alt="image-20230905224653051"></p><blockquote><p>Tips：使用 webpack-dev-server 的 CLI 功能只需要命令行中添加<code>--hot</code>，webpack-dev-server 会自动将<code>webpack.HotModuleReplacementPlugin</code>这个插件添加到 Webpack 的配置中去，所以开启 HotModuleReplacementPlugin 最简单的方式就是使用 inline 模式（命令行添加<code>--inline</code>）。</p></blockquote><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> proxy</h2><p>在实际开发中，本地开发服务器是不能直接请求线上数据接口的，这是因为浏览器的同源安全策略导致的跨域问题，我们可以使用<code>devServer.proxy</code>来解决本地开发跨域的问题。</p><p>下面的配置是将页面访问的<code>/api</code>所有请求都转发到了<code>baidu.com</code>上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，我们请求<code>/api/users</code>则会被转发到<code>http://baidu.com/api/users</code>线上地址。</p><p><code>devServer.proxy</code>的值还支持高级属性，通过高级属性我们可以做更多的事情，如上面的需求变成，将<code>/api/users</code>转发到<code>http://baidu.com/users</code>，那么配置就需要改成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们需要转发的网站是支持 https 的，那么需要增加<code>secure=false</code>，来防止转发失败：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;https://baidu.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>又有新的需求了，这时候只能代理<code>json</code>接口的数据，对于<code>html</code>文件，还是使用打包后 dist 文件夹中文件，那么我们使用<code>bypass</code>来实现这个需求：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span>
        <span class="token function">bypass</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 判断请求头中的 accept 值</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Skipping proxy for browser request.&#39;</span><span class="token punctuation">)</span>
            <span class="token comment">// 返回的是 contentBase 的路径</span>
            <span class="token keyword">return</span> <span class="token string">&#39;/index.html&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，我们需要代理<code>http://baidu.com</code>下面的<code>/api</code>和<code>/auth</code>两个地址，其他的地址都放行，这时候可以使用<code>context</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/auth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),S={href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"},M=p(`<h2 id="自定义中间件" tabindex="-1"><a class="header-anchor" href="#自定义中间件" aria-hidden="true">#</a> 自定义中间件</h2><p>在 webpack-dev-server 中有两个时机可以插入自己实现的中间件，分别是在<code>devServer.before</code>和<code>devServer.after</code>两个时机，即 webpack-dev-server 加载所有内部中间件之前和之后两个时机。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/some/path&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token string">&#39;response&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义中间件在开发中常常被用来做 mock server 使用。</p><p>现在 before after 已经废弃，官方最新的 API: <code>devServer.setupMiddlewares</code></p><h2 id="mock-server" tabindex="-1"><a class="header-anchor" href="#mock-server" aria-hidden="true">#</a> mock server</h2><p>现在的前端团队一般都会采取前后端分离的开发模式，这样可以做到前后端同时并行开发，而前端同学开发的时候需要依赖后端同学提供的数据接口，后端同学的数据接口没有开发完成的时候，前端不能傻傻得等着，所以这就需要一个 mock server 来根据前后端接口的约定格式伪造一些假数据，这样前端开发就可以继续下去，加快开发进度。</p><p>webpack-dev-server 提供了自定义中间件的 Hook，所以我们可以很简单的实现自己的 mock server。</p><p>下面代码是在<code>devServer.before</code>插入一个接口<code>/api/mock.json</code>的接口响应：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>
    <span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/mock.json&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 before after 已经废弃，官方最新的 API: <code>devServer.setupMiddlewares</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">setupMiddlewares</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">middlewares<span class="token punctuation">,</span> devServer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>devServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-dev-server is not defined&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      devServer<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/setup-middleware/some/path&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;setup-middlewares option GET&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 如果你想在所有其他中间件之前运行一个中间件或者当你从 \`onBeforeSetupMiddleware\` 配置项迁移时，</span>
      <span class="token comment">// 可以使用 \`unshift\` 方法</span>
      middlewares<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;first-in-array&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// \`path\` 是可选的</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo/path&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Foo!&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 如果你想在所有其他中间件之后运行一个中间件或者当你从 \`onAfterSetupMiddleware\` 配置项迁移时，</span>
      <span class="token comment">// 可以使用 \`push\` 方法</span>
      middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;hello-world-test-one&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// \`path\` 是可选的</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo/bar&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Foo Bar!&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> middlewares
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们修改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">setupMiddlewares</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">middlewares<span class="token punctuation">,</span> devServer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>devServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-dev-server is not defined&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      devServer<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/mock.json&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;helo world&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> middlewares
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 dev server，访问 http://localhost:9000/api/mock.json 就可以看到这个接口返回的数据了。</p><p>https://juejin.im/post/5afba2746fb9a07aaf356327</p><h2 id="devserver-compress-服务开启-gzip-压缩" tabindex="-1"><a class="header-anchor" href="#devserver-compress-服务开启-gzip-压缩" aria-hidden="true">#</a> <code>devServer.compress</code>：服务开启 Gzip 压缩；</h2><blockquote><p>Tips：<code>devServer.setup</code>也可以用于设置 mock server，但是已经被废弃了，将来版本肯定会被删除，不过使用<code>devServer.before</code>和<code>devServer.after</code>这俩 Hook 已经够用了。</p></blockquote><h2 id="webpack-dev-server-常用配置" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server-常用配置" aria-hidden="true">#</a> Webpack Dev Server 常用配置</h2>`,19),H=p("<li><code>devServer.historyApiFallback</code>：配置如果找不到页面就默认显示的页面；</li><li><code>devServer.compress</code>：启用 gzip 压缩；</li><li><code>devServer.hotOnly</code>：构建失败的时候是否不允许回退到使用刷新网页；</li><li><code>devServer.inline</code>：模式切换，默认为内联模式，使用<code>false</code>切换到 iframe 模式；</li><li><code>devServer.open</code>：启动后，是否自动使用浏览器打开首页；</li><li><code>devServer.openPage</code>：启动后，自动使用浏览器打开设置的页面；</li><li><code>devServer.overlay</code>：是否允许使用全屏覆盖的方式显示编译错误，默认不允许；</li><li><code>devServer.port</code>：监听端口号，默认 8080；</li><li><code>devServer.host</code>：指定 host，使用<code>0.0.0.0</code>可以让局域网内可访问；</li><li><code>devServer.contentBase</code>：告诉服务器从哪里提供内容，只有在你想要提供静态文件时才需要；</li><li><code>devServer.publicPath</code>：设置内存中的打包文件的虚拟路径映射，区别于<code>output.publicPath</code>；</li>",11),R=n("code",null,"devServer.staticOptions",-1),W=n("code",null,"express.static",-1),E={href:"http://expressjs.com/en/4x/api.html#express.static",target:"_blank",rel:"noopener noreferrer"},P=p("<li><code>devServer.clientLogLevel</code>：在 inline 模式下用于控制在浏览器中打印的 log 级别，如<code>error</code>, <code>warning</code>, <code>info</code> or <code>none</code>；</li><li><code>devServer.quiet</code>：静默模式，设置为<code>true</code>则不在控制台输出 log；</li><li><code>devServer.noInfo</code>：不输出启动 log；</li><li><code>devServer.lazy</code>: 不监听文件变化，而是当请求来的时候再重新编译；</li><li><code>devServer.watchOptions</code>：watch 相关配置，可以用于控制间隔多少秒检测文件的变化；</li><li><code>devServer.headers</code>：自定义请求头，例如自定义 userAgent 等；</li><li><code>devServer.https</code>：https 需要的证书签名等配置。</li>",7),B=p('<h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Webpack 的 webpack-dev-server 是 Webpack 生态链上很重要的一环，在我们日常的开发环境，我们可以使用 webpack-dev-server 启动本地服务器，而且能够实现 API 接口代理、静态资源服务器、HMR，甚至还能够通过编写 Express 中间件的方式来扩展功能。</p><p>但是 webpack-dev-server 本身也有它的局限性，比如我们项目本身就有一个 Node.js 的业务服务，那么在使用 webpack-dev-server 来模拟接口数据就显得多此一举了。</p><p>后面实战章节我们将介绍使用 Express 的中间件来实现一个自己的 dev-server！</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li><p>webpack-dev-server 的 inline 模式和 iframe 模式有何异同？</p></li><li><p>webpack-dev-server 怎么配置 HMR？</p></li><li><p>webpack-dev-server 怎么使用 Express 中间件？</p></li><li><p>能够说下你对 webpack-dev-server 理解吗？原理吗？</p><blockquote><p>webpack-dev-server 启动了一个<strong>使用 express 的 Http 服务器</strong>，这个服务器与客户端采用 websocket 通信协议，当原始文件发生改变，webpack-dev-server 会实时编译。</p></blockquote></li></ol></blockquote>',5);function I(O,T){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,v,k,n("p",null,[n("a",m,[s("webpack-dev-server"),e(a)]),s("是一个基于 "),n("a",b,[s("Express"),e(a)]),s(" 的本地开发服务器（看 Roadmap 下个版本内核会从 Express 切换到 Koa）。")]),n("p",null,[s("它使用 "),n("a",h,[s("webpack-dev-middleware"),e(a)]),s(" 中间件来为通过 Webpack 打包生成的资源文件提供 Web 服务。")]),g,w,n("blockquote",null,[n("p",null,[s("Tips：简单来说 webpack-dev-server 就是一个 Express 的小型服务器，它是通过 Express 的"),n("a",y,[s("中间件"),e(a)]),s(),n("a",f,[s("webpack-dev-middleware"),e(a)]),s("和 Webpack 进行交互的。")]),n("p",null,[s("所以我们如果自己的项目本身就是个 Express 服务器，那么可以使用 webpack-dev-middleware 和 "),n("a",x,[s("webpack-hot-middleware"),e(a)]),s(" 两个中间件来实现 HMR 功能。")]),_]),j,n("p",null,[s("原理上来说，webpack-dev-server 使用了 "),n("a",S,[s("http-proxy-middleware"),e(a)]),s("中间件来实现的 proxy 功能，所以更多配置项及其实现可以直接参考 "),n("a",q,[s("http-proxy-middleware"),e(a)]),s("的文档")]),M,n("ul",null,[H,n("li",null,[R,s("：为 Express.js 的 "),W,s("配置参数，参考文档： "),n("a",E,[s("http://expressjs.com/en/4x/api.html#express.static"),e(a)])]),P]),B])}const A=t(d,[["render",I],["__file","index-14.html.vue"]]);export{A as default};
