import{_ as e,M as o,p as c,q as l,R as n,t as s,N as t,a1 as p}from"./framework-e8cb8151.js";const i={},u=p(`<h1 id="_07-runtime-运行时-运行时核心设计原则" tabindex="-1"><a class="header-anchor" href="#_07-runtime-运行时-运行时核心设计原则" aria-hidden="true">#</a> 07-runtime 运行时-运行时核心设计原则</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01：前言</h2><p>从本章开始我们将要进入到<strong>渲染系统</strong>的学习，也就是<strong>运行时 runtime</strong></p><p>在之前我们明确过什么是<strong>运行时</strong>，看下面的代码（第二章节运行时使用过该代码）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
  <span class="token comment">// 生成 VNode</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码代表了一个基本的<strong>运行时</strong>。即：<strong>把 vnode 渲染到页面中</strong>.所以大家可以简单的把运行时理解为：就是把 vnode 渲染到页面中</p><h2 id="_02-html-dom-节点树与虚拟-dom-树" tabindex="-1"><a class="header-anchor" href="#_02-html-dom-节点树与虚拟-dom-树" aria-hidden="true">#</a> 02: HTML DOM 节点树与虚拟 DOM 树</h2><p>首先我们先来学习两个运行时的基本概念</p><ol><li>HTML DOM 节点树</li><li>虚拟 DOM 树</li></ol><p>我们来看下面这段 HTML</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- TODO: comment --&gt;</span>
  hello div
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当浏览器看到这一段 html 时，它会生成一个对应的 DOM 树 来进行表示</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b27dd0ac1d6246eda7d56b7c7debc55c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>以上我们通过 节点 Node 来描述以上所有的元素，在 HTML 中所有的元素都是一个节点，注意、文本都属于节点的一部分</p><p>这样的通过节点构成的一个属性结构，我们就把它叫做<strong>HTML DOM 节点树</strong></p><p>那么明确了什么叫做节点树之后，什么是<strong>虚拟 DOM 树呢？</strong></p><p>可能有很多同学听过<strong>虚拟 DOM</strong>的概念，<strong>虚拟 DOM 树</strong>和虚拟 DOM 是息息相关的</p>`,17),r={href:"https://cn.vuejs.org/guide/extras/rendering-mechanism.html#virtual-dom",target:"_blank",rel:"noopener noreferrer"},d={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>虚拟 DOM 是一种理念，比如我期望通过 一个 JavaScript 对象来描述一个 div 节点的子节点是一个文本节点 text ，则可以这么写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;div&gt;text&lt;/div&gt;</span>
<span class="token comment">//  通过虚拟 dom 表示</span>
<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个对象中，我们通过 type 来表示当前为一个 div 节点，通过 children 来表示它的子节点，通过 text 表示子节点是一个文本节点，内容是 text</p><p>这里所设计的 vnode，是一个<strong>纯 JavaScript 对象</strong>。我们通常使用它来表示一个<strong>虚拟节点（或者虚拟节点树）</strong>。它里面的属性名不是固定的，比如我们可以使用 type 表示这个是一个 div,也可以使用 tag 进行表示，都是可以的</p><p>在 vue 的源码中，通过使用它来表示所需要创建元素的所有信息，比如</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- TODO: comment --&gt;</span>
  hello div
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该例子如果使用 vnode 进行表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello h1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Comment<span class="token punctuation">,</span> <span class="token literal-property property">chidren</span><span class="token operator">:</span> <span class="token string">&#39;TODO comment&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;hello div&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行时 runtime，渲染器 renderer 会遍历整个虚拟 DOM 树，并据此构建真实的 DOM 树，这个过程可以把它叫做<strong>挂载 mount</strong></p><p>当这个 VNode 对象发生变化时，我们会对比 <strong>旧的 VNode 和新的 VNode</strong>之间的区别，找出它们的之间的区别，并把这些其中的变化应用到真实的 DOM 上，这个过程被称为<strong>更新 patch</strong></p><p>那么这样的一个挂载和更新的过程，具体是怎么做的呢？</p><h2 id="_03-挂载与更新" tabindex="-1"><a class="header-anchor" href="#_03-挂载与更新" aria-hidden="true">#</a> 03: 挂载与更新</h2><p>这一小节，我们将通过一个极简的案例，来了解两个比较重要的概念</p><ol><li>挂载：mount</li><li>更新：patch</li></ol><h3 id="挂载-mount" tabindex="-1"><a class="header-anchor" href="#挂载-mount" aria-hidden="true">#</a> 挂载：mount</h3><p>首先我们先来构建这个案例（该案例在第二章第七小节《运行时》进行过大致的讲解）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VNode <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello render&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mount</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
  ele<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
  container<span class="token punctuation">.</span><span class="token function">appendChildren</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前案例中，我们首先创建了一个 render 渲染函数，该函数接收三个参数</p><ol><li>oldVNode: 旧的 VNode</li><li>newVNode：新的 VNode</li><li>container：容器</li></ol><p>当 oldVNode 不存在时，那么我们就认为这是一个全新的渲染，也就是<strong>挂载</strong></p><p>所以以上的 mount 方法，我们就可以把它称为一个<strong>挂载方法</strong></p><h3 id="更新-patch" tabindex="-1"><a class="header-anchor" href="#更新-patch" aria-hidden="true">#</a> 更新：patch</h3><p>旧的视图不可能被一直展示，它会在未来某一个时刻被更新为全新的视图</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VNode <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello render&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> VNode2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello render更新了&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
  ele<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
  container<span class="token punctuation">.</span><span class="token function">appendChildren</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token function">mount</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> vnode2<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在原有的代码中新增了一部分，新增了 patch 函数</p><p>在 patch 函数中，我们先<strong>删除了旧的 VNode，然后创建了一个新的 VNode</strong>。这样的一个过程，我们就把它叫做<strong>更新：patch</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3>`,27),v=n("strong",null,"更新 mount",-1),m=n("strong",null,"更新 Patch",-1),g={href:"https://cn.vuejs.org/guide/extras/rendering-mechanism.html#virtual-dom",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"挂载",-1),b={href:"https://cn.vuejs.org/guide/extras/reactivity-in-depth.html",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("strong",null,"更新"),s("：当一个依赖发生变化后，副作用会重新运行，这时候会创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，然后将必要的更新应用到真实 DOM 上去。")],-1),y=p(`<p>这两个概念在我们后面去实现 renderer 渲染器的时候还会经常的使用到</p><h2 id="_04-h-函数与-render-函数" tabindex="-1"><a class="header-anchor" href="#_04-h-函数与-render-函数" aria-hidden="true">#</a> 04：h 函数与 render 函数</h2><p>不知道大家还记不记得，我们在<strong>第二章节</strong>讲解<strong>运行时</strong>的时候，曾经使用过这样的一个案例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>Vue
    <span class="token comment">// 生成 vnode</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 拿到 承载的容器</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当时，我们说：有些同学可能看不懂当前代码是什么意思，没有关系，这不重要，后面我们会详细去讲，那么现在就是讲解这个的时候了</p><p>根据前面两个小节的介绍，我们已经知道了，vue 的渲染分为：挂载和更新。两个步骤</p><p>无论是挂载还是更新，都是借助于 VNode 来进行实现的</p><p>在以上代码中，我们知道了主要涉及了两个函数</p><ol><li>h 函数</li><li>render 函数</li></ol><p>那么下面我们一个一个来说</p><h3 id="h-函数" tabindex="-1"><a class="header-anchor" href="#h-函数" aria-hidden="true">#</a> h 函数</h3><p>根据以上代码，我们可以通过 h 函数得到一个 vnode</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello render&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印当前的 vnode,可以得到以下内容</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1376ca168914afcb92f716ff8ad868f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>以上内容，我们剔除无用的内容之后，就得到一个精简的 json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 当前节点类型</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否是一个 VNode 对象</span>
  <span class="token property">&quot;__v_isVNode&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 当前节点的属性</span>
  <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;class&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 它的子节点</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello render&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可知 h 函数本质上其实就是一个<strong>用来生成 VNode 的函数</strong></p>`,18),_={href:"https://cn.vuejs.org/guide/extras/render-function.html#creating-vnodes",target:"_blank",rel:"noopener noreferrer"},q=n("ol",null,[n("li",null,"type: string|Component: 既可以是一个字符串（用于原生元素）也可以是一个 Vue 组件定义"),n("li",null,"props?: object | null: 要传递的 prop"),n("li",null,"children?: Children | Slot | Slots: 子节点")],-1),x=n("p",null,"官方示例详细描述了它的详细使用方式，这个就不在写在文档里了",-1),w=n("h3",{id:"render-函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#render-函数","aria-hidden":"true"},"#"),s(" render 函数")],-1),V={href:"https://cn.vuejs.org/guide/extras/render-function.html#declaring-render-function",target:"_blank",rel:"noopener noreferrer"},j=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从以上代码我们可知，render 函数主要接收了两个参数</p><ol><li>vnode: 虚拟节点树或者叫做 虚拟 DOM 树，两者叫法皆可</li><li>container：承载的容器。真实节点渲染的位置</li></ol><p>通过 render 函数，我们可以：<strong>使用编程式的方式，创建虚拟 DOM 树对应的真实 DOM 树，到指定位置</strong></p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>这小节，我们知道了 <code>h 函数</code>和 <code>render 函数</code>的作用，这两个函数是整个运行时的关键函数，后面我们实际运行的代码，核心就是实现这两个函数</p><h2 id="_05-运行时的核心设计原则" tabindex="-1"><a class="header-anchor" href="#_05-运行时的核心设计原则" aria-hidden="true">#</a> 05：运行时的核心设计原则</h2><p>那么到这里为止，我们已经了解了在学习运行时之前需要掌握的前置知识</p><p>那么在本小节中，我们就需要看一下 vue3 运行时的一些设计原则，这样可以帮助我们更好的整体了解 <code>runtime</code></p><p>需要大家在本小节中了解的设计原则分为两个</p><ol><li><code>runtime-core</code> 与<code> runtime-dom</code>的关系，为什么要这么设计</li><li>渲染时，挂载和更新的逻辑处理</li></ol><h3 id="runtime-core-与-runtime-core-的关系-为什么要这么设计" tabindex="-1"><a class="header-anchor" href="#runtime-core-与-runtime-core-的关系-为什么要这么设计" aria-hidden="true">#</a> runtime-core 与 runtime-core 的关系，为什么要这么设计</h3><p>在 vue 源码中，关于运行时的包主要由两个</p><ol><li><code>packages/runtime-core</code>：运行时的核心代码</li><li><code>packages/runtime-dom</code>:运行时关于浏览器渲染的代码</li></ol><p>其中第一个 <code>runtime-core</code> 的概念比较好理解，但是<code>runtime-dom</code>它是干什么的呢？为什么要单独分出来这样的一个包呢？</p><p><code>runtime-dom</code>中包含了相关的一些 dom 操作函数，这样做的一个主要目的的进行逻辑抽离，对于 vue 而言，它的主要目的有两种：<strong>浏览器渲染</strong>、<strong>服务器渲染</strong></p><p>除了这些，其实还有其他的一些渲染场景: 阿里的 weex、uni-app</p><p>所以<code>runtime-core</code>只会放一些运行时的核心代码，而不会把平台相关操作放进来。当我们需要对浏览器进行操作的时候，可以吧浏览器的相关操作当做参数传入，如果需要其他平台的操作，就把其他平台的操作对象传入即可。</p><p>本质就是为了针对不同的宿主环境，使用不同的 API</p><h3 id="渲染时-挂载和更新的逻辑处理" tabindex="-1"><a class="header-anchor" href="#渲染时-挂载和更新的逻辑处理" aria-hidden="true">#</a> 渲染时，挂载和更新的逻辑处理</h3><h2 id="_06-总结" tabindex="-1"><a class="header-anchor" href="#_06-总结" aria-hidden="true">#</a> 06：总结</h2><p>在本章中，我们掌握了开发 <code>runtime</code>之前的一些必备知识</p><p>通过本章的内容，我们可知整个<code>runtime</code> 核心的方法有两个</p><ol><li><code>h函数</code></li><li><code>render函数</code></li></ol><p>那么我们在后面去实现<code>runtime</code>时，也会以这两个函数为核心进行实现</p><p>即：先实现 <code>h</code> 函数，在实现 <code>render</code> 函数</p><p>以此来完成整个运行时 <code>runtime</code> 的处理</p><p>那么准备好了吗</p>`,28);function N(M,O){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("官方文档"),t(a)])]),n("p",null,[s("虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。这个概念是由 "),n("a",d,[s("React"),t(a)]),s(" 率先开拓，随后在许多不同的框架中都有不同的实现，当然也包括 Vue。")])]),k,n("p",null,[s("本小节我们通过一个简单的例子讲解了"),v,s("和"),m,s("的概念。这两个概念在 "),n("a",g,[s("Vue3 官方文档"),t(a)]),s("中也对此进行了详细的介绍")]),n("ol",null,[n("li",null,[h,s("：运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。这一步会作为"),n("a",b,[s("响应式副作用"),t(a)]),s("执行，因此它会追踪其中所用到的所有响应式依赖。")]),f]),y,n("p",null,[n("a",_,[s("h 函数"),t(a)]),s("最多可接收三个参数")]),q,x,w,n("p",null,[s("那么在了解了 h 函数的作用之后，下面我们来看 "),n("a",V,[s("render 函数"),t(a)])]),j])}const T=e(i,[["render",N],["__file","index-07.html.vue"]]);export{T as default};
