import{_ as s,p as n,q as a,a1 as e}from"./framework-e8cb8151.js";const p="/assets/5f1680da0001139406400359-6f764e10.jpg",o="/assets/5f3a1c730001f24e08000450-4c8ccd0f.png",t="/assets/5f3a1c87000188e811360290-42427e0f.png",r="/assets/5f3a1c9000019ca115880098-b0bcb0f7.png",c="/assets/5f3a1c990001131e16190221-2214d75d.png",i="/assets/5f3a1ca200014ba715310146-0103f88d.png",u="/assets/5f3a1caa0001b36914500124-1e5b2e24.png",l="/assets/5f3a1cb60001759e14060194-f215220c.png",m="/assets/5f3a1cbd0001884017900195-dbc476d8.png",d="/assets/5f3a1cc400019ef115440122-c34a38af.png",b="/assets/5f3a1ccc00016a4519040317-f62e25dd.png",k={},g=e('<h1 id="_13-docker-资源限制的幕后主使-cgroup" tabindex="-1"><a class="header-anchor" href="#_13-docker-资源限制的幕后主使-cgroup" aria-hidden="true">#</a> 13-Docker 资源限制的幕后主使：cgroup</h1><p><img src="'+p+'" alt="img"></p><blockquote><p>虚心使人进步，骄傲使人落后。——毛泽东</p></blockquote><p>上一篇文章介绍了 Docker 中的隔离技术：NameSpace，这篇文章我们看一下 Docker 中的资源限制技术：CGroups。Linux Cgroups 的全称是 Linux Control Group，简单来说，<strong>CGroups 的作用就是限制一个进程组能够使用的资源上限，CPU，内存等</strong>。</p><h2 id="_1-cgroups-的历史" tabindex="-1"><a class="header-anchor" href="#_1-cgroups-的历史" aria-hidden="true">#</a> 1. CGroups 的历史</h2><p>CGroups 最初由 Google 的工程师 Paul Menage 和 Rohit Seth 发起，当时项目名叫 <code>Process Container</code> 。后来为了避免 Linux 系统中各种各样的 <code>container</code> 含义引入歧义，改名为 <code>control groups</code> 。</p><p>CGroups 的正式面世在 2008 年初，伴随 Linux 的内核版本 2.6.24 的 release 发布，这个是版本 version 1。后来越来越多的特性开始被加入到 CGroups 中，但是由于设计并不是很好，后面 CGroups 中代码越来越多，越难维护，甚至出现某些情况下冲突的问题。</p><p><img src="'+o+'" alt="图片描述"></p><p>为了解决上面 CGroups version 1 的问题，在 Linux Kernel 3.10 版本开始了 version 2 的开发工作，相当于重写了 version 1 的 CGroups。Version 2 版本的 CGroups 在 Linux 4.5 发布中正式面世。</p><p>尽管 CGroups v2 旨在替换 CGroups v1，但是考虑到兼容性，目前这两个版本是并存的，而且目前来看官方也没有移除 CGroups v1 的计划。</p><p>目前 CGroups v2 只是实现了 v1 中的 controller 的一个子集。我们可以在同一个系统中同时挂载 CGroups 的 v1 和 v2 版本。</p><p>举个例子：我们可以使用 v2 中实现的 controller，同时使用 v2 中没有实现而在 v1 中实现的 controller。需要注意的是我们不能同时使用在 v1 和 v2 中都实现的 controller。</p><h2 id="_2-核心概念" tabindex="-1"><a class="header-anchor" href="#_2-核心概念" aria-hidden="true">#</a> 2. 核心概念</h2><p>CGroups 中有几个重要概念：</p><ul><li><strong>cgroup</strong>：通过 CGroups 系统进行限制的一组进程。CGroups 中的资源限制都是以进程组为单位实现的，一个进程可以加入到某个进程组，从而受到相同的资源限制。</li><li><strong>task</strong>：在 CGroups 中，task 可以理解为一个进程。</li><li><strong>hierarchy</strong>：可以理解成层级关系，CGroups 的组织关系就是层级的形式，每个节点都是一个 cgroup。cgroup 可以有多个子节点，子节点默认继承父节点的属性。</li><li><strong>subsystem</strong>：更准确的表述应该是 <em><strong>resource controllers</strong></em>，也就是资源控制器，比如 cpu 子系统负责控制 cpu 时间的分配。子系统必须应用（attach）到一个 hierarchy 上才能起作用。</li></ul><p>其中最核心的是 <em><strong>subsystem</strong></em>，CGroups 目前支持的 <em><strong>subsystem</strong></em> 包括：</p><ul><li><strong>cpu</strong>：限制进程的 cpu 使用率；</li><li><strong>cpuacct</strong>：统计 CGroups 中的进程的 cpu 使用情况；</li><li><strong>cpuset</strong>：为 CGroups 中的进程分配单独的 cpu 节点或者内存节点；</li><li><strong>memory</strong>：限制进程的内存使用；</li><li><strong>devices</strong>：可以控制进程能够访问哪些设备；</li><li><strong>blkio</strong>：限制进程的块设备 IO；</li><li><strong>freezer</strong>：挂起或者恢复 CGroups 中的进程；</li><li><strong>net_cls</strong>：标记进程的网络数据包，然后可以使用防火墙或者 tc 模块（traffic controller）控制该数据包。这个控制器只适用从该 cgroup 离开的网络包，不适用到达该 cgroup 的网络包；</li><li><strong>ns</strong>：将不同 CGroups 下面的进程应用不同的 namespace；</li><li><strong>perf_event</strong>：监控 CGroups 中的进程的 perf 事件（注：perf 是 Linux 系统中的性能调优工具）；</li><li><strong>pids</strong>：限制一个 cgroup 以及它的子节点中可以创建的进程数目；</li><li><strong>rdma</strong>：限制 cgroup 中可以使用的 RDMA 资源。</li></ul><p>通过上面列举出来的 <em><strong>subsystem</strong></em>，我们可以简单的了解到，通过 Linux CGroups 我们可以控制的资源包括：CPU、内存、网络、IO、文件设备等。</p><h2 id="_2-使用演示" tabindex="-1"><a class="header-anchor" href="#_2-使用演示" aria-hidden="true">#</a> 2. 使用演示</h2><p>CGroups 在使用之前需要挂载一下，正常我们使用的系统都应该挂载了，我们可以通过下面的命令查看一下：</p><p><img src="'+t+'" alt="图片描述"></p><p>我们可以看到 CGroups 是以文件系统的形式组织起来的，为了文件系统目录 <code>/sys/fs/cgroup/</code> 目录下，其中每个子目录对应一个 <em><strong>subsystem</strong></em> ，或者说资源控制器。我们看一下 cpu 和 memory 子目录中的数据。</p><p><img src="'+r+'" alt="图片描述"></p><p><img src="'+c+'" alt="图片描述"></p><p>除了一些和 cpu 和 memory 特有的文件，这两个 <em><strong>subsystem</strong></em> 有一些共同的文件，比如 tasks 就表示这个 <em><strong>subsystem</strong></em> 控制的进程 id 列表。下面我们以 <em><strong>cpu subsystem</strong></em> 为例来演示一下。</p><p><img src="'+i+'" alt="图片描述"></p><p>从上面的截图我们可以发现，创建完 hello 文件夹之后，系统为我们自动创建了一些 cgroup 相关的文件，比如 <em><strong>cpu.cfs_period_us</strong></em> 和 <em><strong>cpu.cfs_quota_us</strong></em> 表示进程在长度为 <em><strong>cfs_period</strong></em> 的一段时间内只能被分配到总量为 <em><strong>cfs_quota</strong></em> 的 CPU 时间。<em><strong>cpu.cfs_period_us</strong></em> 默认值为 100000，也就是 100000 us；</p><p><img src="'+u+`" alt="图片描述"></p><p>这个时候我们启动 for 循环的脚本把 cpu 打满。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker cpu<span class="token punctuation">]</span><span class="token comment"># while : ; do : ; done &amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">2020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过命令 <code>top -p 2020</code> 查看这个进程的资源使用情况，CPU 确实是被打满了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> - <span class="token number">17</span>:21:06 up <span class="token number">70</span> days, <span class="token number">16</span>:59,  <span class="token number">1</span> user,  load average: <span class="token number">1.92</span>, <span class="token number">1.13</span>, <span class="token number">1.02</span>
Tasks:   <span class="token number">1</span> total,   <span class="token number">1</span> running,   <span class="token number">0</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: <span class="token number">43.7</span> us,  <span class="token number">5.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">51.4</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span> <span class="token number">15992076</span> total,   <span class="token number">574432</span> free,  <span class="token number">3809156</span> used, <span class="token number">11608488</span> buff/cache
KiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used. <span class="token number">11763044</span> avail Mem

  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
 <span class="token number">2020</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">115524</span>    <span class="token number">656</span>    <span class="token number">168</span> R <span class="token number">100.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:46.30 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们将该进程加入到我们之前建的 hello 那个 cpu cgroup 里面。我们首先将 hello cpu cgroup 的 <em><strong>cpu.cfs_quota_us</strong></em> 改完 50000，相当于 <em><strong>cpu.cfs_period_us</strong></em> 的一半，这样理论上就可以将 cpu 的使用率限制到 50% 了。我们试试。其中第二行将进程 id 写入到 cgroup 的 tasks 文件中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker hello<span class="token punctuation">]</span><span class="token comment"># echo 50000 &gt; cpu.cfs_quota_us</span>
<span class="token punctuation">[</span>root@docker hello<span class="token punctuation">]</span><span class="token comment"># echo 2020 &gt; tasks</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我再使用 <code>top -p 2020</code> 查看进程 2020 的资源使用情况如下，我们可以看到 CPU 使用率在 49.8%，基本等于一半，符合预期。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> - <span class="token number">17</span>:26:46 up <span class="token number">70</span> days, <span class="token number">17</span>:05,  <span class="token number">1</span> user,  load average: <span class="token number">1.40</span>, <span class="token number">1.89</span>, <span class="token number">1.44</span>
Tasks:   <span class="token number">1</span> total,   <span class="token number">1</span> running,   <span class="token number">0</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: <span class="token number">12.9</span> us,  <span class="token number">0.3</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">86.7</span> id,  <span class="token number">0.1</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span> <span class="token number">15992076</span> total,   <span class="token number">592312</span> free,  <span class="token number">3805440</span> used, <span class="token number">11594324</span> buff/cache
KiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used. <span class="token number">11766784</span> avail Mem

  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
 <span class="token number">2020</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">115524</span>    <span class="token number">656</span>    <span class="token number">168</span> R  <span class="token number">49.8</span>  <span class="token number">0.0</span>   <span class="token number">5</span>:42.52 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-docker-使用-cgroup" tabindex="-1"><a class="header-anchor" href="#_3-docker-使用-cgroup" aria-hidden="true">#</a> 3. Docker 使用 CGroup</h2><p>我们可以在 <code>docker run</code> 命令启动容器的时候指定 cgroup，我们可以通过 help 命令来查看 docker 支持的参数。 比如支持的 cpu 限制如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run --help | grep cpu</span>
      --cpu-period int                 Limit CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> period
      --cpu-quota int                  Limit CPU CFS <span class="token punctuation">(</span>Completely Fair Scheduler<span class="token punctuation">)</span> <span class="token function">quota</span>
      --cpu-rt-period int              Limit CPU real-time period <span class="token keyword">in</span> microseconds
      --cpu-rt-runtime int             Limit CPU real-time runtime <span class="token keyword">in</span> microseconds
  -c, --cpu-shares int                 CPU shares <span class="token punctuation">(</span>relative weight<span class="token punctuation">)</span>
      <span class="token parameter variable">--cpus</span> decimal                   Number of CPUs
      --cpuset-cpus string             CPUs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
      --cpuset-mems string             MEMs <span class="token keyword">in</span> <span class="token function">which</span> to allow execution <span class="token punctuation">(</span><span class="token number">0</span>-3, <span class="token number">0,1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持 memory 限制如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run --help | grep memory</span>
      --kernel-memory bytes            Kernel memory limit
  -m, <span class="token parameter variable">--memory</span> bytes                   Memory limit
      --memory-reservation bytes       Memory soft limit
      --memory-swap bytes              Swap limit equal to memory plus swap: <span class="token string">&#39;-1&#39;</span> to <span class="token builtin class-name">enable</span> unlimited swap
      --memory-swappiness int          Tune container memory swappiness <span class="token punctuation">(</span><span class="token number">0</span> to <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面细心的同学应该已经发现在每个 <em><strong>subsystem</strong></em> 下面都有一个 docker 目录，没错，docker 目录下面就是我们机器上面运行的 docker 进程。</p><p><img src="`+l+'" alt="图片描述"></p><p>其中的那一串字符对应就是 container id，我们可以通过 <code>docker ps</code> 查看。</p><p><img src="'+m+'" alt="图片描述"></p><p>我们进入到其中一个子目录。</p><p><img src="'+d+'" alt="图片描述"></p><p>还记得我们前面说的 tasks 文件是该 cgroup 包含的进程吧，我们查看一下。</p><p><img src="'+b+'" alt="图片描述"></p><p>显然 tasks 中的进程 ID 就是 docker 进程对应到宿主机上面的进程 ID。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>在这篇文章中，我们先简单了解了一下 CGroups 的历史和特性，然后通过实践为大家演示了如何通过 cgroup 限制进程的 cpu 使用率。并演示了 cgroup 在 docker 中的体现。</p><p>限于篇幅，本篇文章只举例如何通过 cgroup 限制 cpu 使用率，希望大家可以自己动手实践其他的 cgroup 的 subsystem。</p>',53),v=[g];function h(f,_){return n(),a("div",null,v)}const y=s(k,[["render",h],["__file","index-13.html.vue"]]);export{y as default};
