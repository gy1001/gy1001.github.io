import{_ as o,M as l,p as c,q as p,R as t,t as n,N as s,a1 as a}from"./framework-e8cb8151.js";const d={},i=t("h1",{id:"_25-webpack-的-compiler-和-compilation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_25-webpack-的-compiler-和-compilation","aria-hidden":"true"},"#"),n(" 25 Webpack 的 Compiler 和 Compilation")],-1),r=t("p",null,"更新时间：2019-06-27 09:57:45",-1),u=t("p",null,[t("img",{src:"https://img.mukewang.com/5cd9645f000128e506400360.jpg",alt:"img"})],-1),k=t("p",null,"与有肝胆人共事，从无字句处读书。",-1),m=t("p",null,"——周恩来",-1),y=t("a",{href:"TODO"},"Webpack 工作流程",-1),g={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"Compiler",-1),v=t("code",null,"Compiler",-1),b=t("code",null,"Compilation",-1),x=t("code",null,"Compilation",-1),h=t("code",null,"Compiler",-1),q=t("code",null,"Compilation",-1),C=a(`<h2 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> Compiler</h2><p><code>Compiler</code> 模块是 Webpack 最核心的模块。每次执行 Webpack 构建的时候，在 Webpack 内部，会首先实例化一个 Compiler 对象，然后调用它的 run 方法来开始一次完整的编译过程。我们直接使用 Webpack API <code>webpack(options)</code>的方式得到的就是一个<code>Compiler</code>实例化的对象，这时候 Webpack 并不会立即开始构建，需要我们手动执行<code>comipler.run()</code>才可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.js&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 只传入 config</span>
<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span>
<span class="token comment">// 开始执行</span>
compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>

<span class="token comment">// 上面两句等价于</span>
<span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：使用 webpack-dev-server API 方式时，只需要传入 compiler 对象给 dev server 即可，不需要手动执行<code>compiler.run()</code>。</p></blockquote><p>我们如果要手动实例化一个<code>Compiler</code>对象，可以通过<code>const Compiler = webpack.Compiler</code>来获取它的类，一般只有一个父 <code>Compiler</code>，而子 <code>Compiler</code> 可以用来处理一些特殊的事件。</p><p>在 webpack plugin 中，每个插件都有个<code>apply</code>方法。这个方法接收到的参数就是<code>Compiler</code>对象，我们可以通过在对应的钩子时机绑定处理函数来编写插件，下面主要介绍下<code>Compiler</code>对象的钩子。</p><h3 id="compiler-钩子" tabindex="-1"><a class="header-anchor" href="#compiler-钩子" aria-hidden="true">#</a> Compiler 钩子</h3><p>在<a href="TODO">Webpack 工作流程</a>中，我们通过下面的代码，获取了对应的钩子名称：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
<span class="token comment">// 遍历hooks，添加回调，输出\`hookName\`</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">hookName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>hookName<span class="token punctuation">]</span><span class="token punctuation">.</span>tap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>hookName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&#39;anyString&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">run -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hookName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 触发webpack的编译流程</span>
compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到<code>compiler.run()</code>之后的工作流程：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>run -&gt; beforeRun
run -&gt; run
run -&gt; normalModuleFactory
run -&gt; contextModuleFactory
run -&gt; beforeCompile
run -&gt; compile
run -&gt; thisCompilation
run -&gt; compilation
run -&gt; make
run -&gt; afterCompile
run -&gt; shouldEmit
run -&gt; emit
run -&gt; afterEmit
run -&gt; done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方式只是输出<code>compiler.run()</code>之后的一部分钩子，<code>Compiler</code> 还有好多钩子。比如在 watch 模式下，还会有 <code>watchRun</code>、<code>watchClose</code> 和 <code>invalid</code>。我们如果要绑定某个钩子，则可以使用下面的方法来绑定：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&#39;MyPlugin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过一个表格来说明下对应的关系：</p><table><thead><tr><th style="text-align:left;">钩子名</th><th style="text-align:left;">Tapable 类型</th><th style="text-align:left;">触发时机</th><th style="text-align:left;">传入 callback 的参数</th></tr></thead><tbody><tr><td style="text-align:left;">entryOption</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">在 webpack 中的 entry 配置处理过之后</td><td style="text-align:left;"><code>context</code>，<code>entry</code></td></tr><tr><td style="text-align:left;">afterPlugins</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">初始化完内置插件之后</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">afterResolvers</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">resolver 完成之后（后面解释 resolver 是什么）</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">environment</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">准备编译环境，webpack plugins 配置初始化完成之后</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">afterEnvironment</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">编译环境准备好之后</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">beforeRun</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">开始正式编译之前</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">run</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">开始编译之后，读取 records 之前；监听模式触发<code>watch-run</code></td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">watchRun</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">监听模式下，一个新的编译触发之后</td><td style="text-align:left;"><code>compiler</code></td></tr><tr><td style="text-align:left;">normalModuleFactory</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">NormalModuleFactory 创建之后</td><td style="text-align:left;"><code>normalModuleFactory</code>实例</td></tr><tr><td style="text-align:left;">contextModuleFactory</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">ContextModuleFactory 创建之后</td><td style="text-align:left;"><code>contextModuleFactory</code>实例</td></tr><tr><td style="text-align:left;">beforeCompile</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">compilation 实例化需要的参数创建完毕之后</td><td style="text-align:left;"><code>compilationParams</code></td></tr><tr><td style="text-align:left;">compile</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">一次 compilation 编译创建之前</td><td style="text-align:left;"><code>compilationParams</code></td></tr><tr><td style="text-align:left;">thisCompilation</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">触发 compilation 事件之前执行</td><td style="text-align:left;"><code>compilation</code>，<code>compilationParams</code></td></tr><tr><td style="text-align:left;">compilation</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">compilation 创建成功之后</td><td style="text-align:left;"><code>compilation</code>，<code>compilationParams</code></td></tr><tr><td style="text-align:left;">make</td><td style="text-align:left;">AsyncParallelHook</td><td style="text-align:left;">完成编译之前</td><td style="text-align:left;"><code>compilation</code></td></tr><tr><td style="text-align:left;">afterCompile</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">完成编译和封存（seal）编译产出之后</td><td style="text-align:left;"><code>compilation</code></td></tr><tr><td style="text-align:left;">shouldEmit</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">发布构建后资源之前触发，回调必须返回<code>true</code>/<code>false</code>，<code>true</code>则继续</td><td style="text-align:left;"><code>compilation</code></td></tr><tr><td style="text-align:left;">emit</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">生成资源到 output 目录之前</td><td style="text-align:left;"><code>compilation</code></td></tr><tr><td style="text-align:left;">afterEmit</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">生成资源到 output 目录之后</td><td style="text-align:left;"><code>compilation</code></td></tr><tr><td style="text-align:left;">done</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">compilation 完成之后</td><td style="text-align:left;"><code>stats</code></td></tr><tr><td style="text-align:left;">failed</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">compilation 失败</td><td style="text-align:left;"><code>error</code></td></tr><tr><td style="text-align:left;">invalid</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">监听模式下，编译无效时</td><td style="text-align:left;"><code>fileName</code>，<code>changeTime</code></td></tr><tr><td style="text-align:left;">watchClose</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">监听模式停止</td><td style="text-align:left;">无</td></tr></tbody></table><blockquote><p>Tips：整个<code>Compiler</code>完整地展现了 Webpack 的构建流程：</p><ul><li>准备阶段：<code>make</code>之前做的事情都属于准备阶段，这阶段的<code>calback</code>入参以<code>compiler</code>为主；</li><li>编译阶段：这阶段以<code>compilation</code>的钩子为主，<code>calback</code>入参以<code>compilation</code>为主；</li><li>产出阶段：这阶段从<code>compilation</code>开始，最后回到<code>Compiler</code>钩子上，<code>calback</code>传入参数是跟结果相关的数据，包括<code>stats</code>、<code>error</code>。</li></ul></blockquote><h4 id="注解-1-resolver" tabindex="-1"><a class="header-anchor" href="#注解-1-resolver" aria-hidden="true">#</a> 注解 1：Resolver</h4>`,17),S={href:"https://github.com/webpack/enhanced-resolve",target:"_blank",rel:"noopener noreferrer"},H=t("code",null,"require.resolve()",-1),w=t("code",null,"resolve",-1),j=t("code",null,"resolveLoader",-1),_=a(`<ul><li>Normal：通过绝对路径或相对路径，解析一个模块；</li><li>Context：通过给定的上下文（context）解析一个模块；</li><li>Loader：解析一个 webpack loader。</li></ul><h4 id="注解-2-thiscompilation和compilation" tabindex="-1"><a class="header-anchor" href="#注解-2-thiscompilation和compilation" aria-hidden="true">#</a> 注解 2：<code>thisCompilation</code>和<code>compilation</code></h4><p>这里为什么会有 <code>thisCompilation</code>和<code>compilation</code> 两个钩子呢？其实是跟子编译（child compiler）有关， Compiler 实例通过 <code>createChildCompiler</code> 方法可以创建子编译实例 <code>childCompiler</code>。创建<code>childCompiler</code>时，<code>childCompiler</code>会复制 compiler 实例的任务点监听器。<strong><code>compilation</code>的钩子会被复制，而<code>thisCompilation</code> 钩子则不会被复制</strong>。</p><h2 id="compilation" tabindex="-1"><a class="header-anchor" href="#compilation" aria-hidden="true">#</a> Compilation</h2><p>在 Compilation 阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)，Compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以监听（watch）模式运行时，每当检测到一个文件变化，一次新的 Compilation 将被创建。Compilation 对象也提供了很多事件回调供插件做扩展，通过 Compilation 也能读取到 Compiler 对象。</p><h3 id="compilation-钩子" tabindex="-1"><a class="header-anchor" href="#compilation-钩子" aria-hidden="true">#</a> Compilation 钩子</h3><p>在 Compilation 中处理的对象分别是<code>module</code>、<code>chunk</code>、<code>asset</code>，由 modules 组成<code>chunks</code>，由<code>chunks</code>生成<code>assets</code>，处理顺序是：<code>module → modules → chunks → assets</code>，先从单个 module 开始处理，查找依赖关系，最后完成单个 module 处理，完成全部 modules 之后，开始 chunks 阶段处理，最后在根据优化配置，按需生成 assets。</p><p>所以整个 Compilation 的生命周期钩子虽然比较多，但是大规律上是围绕这个顺序进行的，下面是大部分钩子表格如下，其中带<code>★</code>的是比较重要的钩子：</p><table><thead><tr><th style="text-align:left;">钩子名</th><th style="text-align:left;">Tapable 类型</th><th style="text-align:left;">触发时机</th><th style="text-align:left;">传入 callback 的参数</th></tr></thead><tbody><tr><td style="text-align:left;">buildModule</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">在模块构建开始之前触发</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">rebuildModule</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">在重新构建一个模块之前触发</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">failedModule</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">模块构建失败时执行</td><td style="text-align:left;"><code>module</code>，<code>error</code></td></tr><tr><td style="text-align:left;">succeedModule</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">模块构建成功时执行</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">finishModules</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">所有模块都完成构建</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">finishRebuildingModule</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">一个模块完成重新构建</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">seal</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">★ 编译（compilation）停止接收新模块时触发</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">unseal</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">编译（compilation）开始接收新模块时触发</td><td style="text-align:left;"><code>module</code></td></tr><tr><td style="text-align:left;">optimizeDependencies</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">依赖优化开始时触发</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">afterOptimizeDependencies</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">依赖优化结束时触发</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">optimize</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">★ 优化阶段开始时触发</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">optimizeModules</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">★ 模块的优化</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">afterOptimizeModules</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">模块优化结束时触发</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">optimizeChunks</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">★ 优化 chunks</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">afterOptimizeChunks</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">chunk 优化完成之后触发</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">optimizeTree</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">异步优化依赖树</td><td style="text-align:left;"><code>chunks</code>，<code>modules</code></td></tr><tr><td style="text-align:left;">afterOptimizeTree</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">异步优化依赖树完成时</td><td style="text-align:left;"><code>chunks</code>，<code>modules</code></td></tr><tr><td style="text-align:left;">optimizeChunkModules</td><td style="text-align:left;">SyncBailHook</td><td style="text-align:left;">优化单个 chunk 中的 modules 开始</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">afterOptimizeChunkModules</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">优化单个 chunk 中的 modules 结束</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">shouldRecord</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;"></td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">reviveModules</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">从 records 中恢复模块信息</td><td style="text-align:left;"><code>modules</code>，<code>records</code></td></tr><tr><td style="text-align:left;">optimizeModuleOrder</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">将模块从最重要的到最不重要的进行排序</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">beforeModuleIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">处理 modulesId 之前</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">moduleIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">处理 modulesId</td><td style="text-align:left;"><code>modules</code></td></tr><tr><td style="text-align:left;">optimizeModuleIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">优化 modulesId</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">afterOptimizeModuleIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">优化 modulesId 之后</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">reviveChunks</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">从 records 中恢复 chunk 信息</td><td style="text-align:left;"><code>modules</code>，<code>records</code></td></tr><tr><td style="text-align:left;">optimizeChunkOrder</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">将 chunk 从最重要的到最不重要的进行排序</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">beforeOptimizeChunkIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">chunk id 优化之前触发</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">optimizeChunkIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">chunk id 优化开始触发</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">afterOptimizeChunkIds</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">chunk id 优化结束触发</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">recordModules</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">将模块信息存储到 records</td><td style="text-align:left;"><code>modules</code>，<code>records</code></td></tr><tr><td style="text-align:left;">recordChunks</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">将 chunk 信息存储到 records</td><td style="text-align:left;"><code>chunks</code>，<code>records</code></td></tr><tr><td style="text-align:left;">beforeHash</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">在编译被哈希（hashed）之前</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">afterHash</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">在编译被哈希（hashed）之后</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">record</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">将 compilation 相关信息存储到 records 中</td><td style="text-align:left;"><code>compilation</code>，<code>records</code></td></tr><tr><td style="text-align:left;">beforeChunkAssets</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">在创建 chunk 资源（asset）之前</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">additionalChunkAssets</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">为 chunk 创建附加资源（asset）</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">additionalAssets</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">★ 为编译（compilation）创建附加资源（asset）</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">optimizeChunkAssets</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">★ 优化所有 chunk 资源（asset）</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">afterOptimizeChunkAssets</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">chunk 资源（asset）已经被优化</td><td style="text-align:left;"><code>chunks</code></td></tr><tr><td style="text-align:left;">optimizeAssets</td><td style="text-align:left;">AsyncSeriesHook</td><td style="text-align:left;">★ 优化存储在 compilation.assets 中的所有资源（asset）</td><td style="text-align:left;"><code>assets</code></td></tr><tr><td style="text-align:left;">afterOptimizeAssets</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">优化 compilation.assets 中的所有资源（asset）之后</td><td style="text-align:left;"><code>assets</code></td></tr><tr><td style="text-align:left;">moduleAsset</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">一个模块中的一个资源被添加到编译中</td><td style="text-align:left;"><code>module</code>，<code>filename</code></td></tr><tr><td style="text-align:left;">chunkAsset</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">一个 chunk 中的一个资源被添加到编译中</td><td style="text-align:left;"><code>chunk</code>，<code>filename</code></td></tr><tr><td style="text-align:left;">assetPath</td><td style="text-align:left;">SyncWaterfallHook</td><td style="text-align:left;">asset 路径确认之后</td><td style="text-align:left;"><code>filename</code>，<code>data</code></td></tr><tr><td style="text-align:left;">childCompiler</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">子编译（compiler）触发</td><td style="text-align:left;"><code>childCompiler</code>，<code>compilerName</code>，<code>compilerIndex</code></td></tr><tr><td style="text-align:left;">normalModuleLoader</td><td style="text-align:left;">SyncHook</td><td style="text-align:left;">★ 普通模块 loader，真正（一个接一个地）加载模块图（graph）中所有模块的函数</td><td style="text-align:left;"><code>loaderContext</code>，<code>module</code></td></tr></tbody></table><h3 id="compilation-和-stats-对象" tabindex="-1"><a class="header-anchor" href="#compilation-和-stats-对象" aria-hidden="true">#</a> Compilation 和 Stats 对象</h3><p>在 Webpack 的回调函数中会得到<code>stats</code>对象。这个对象实际来自于<code>Compilation.getStats()</code>，返回的是主要含有<code>modules</code>、<code>chunks</code>和<code>assets</code>三个属性值的对象。</p><ul><li>modules：记录了所有解析后的模块；</li><li>chunks：记录了所有 chunk；</li><li>assets：记录了所有要生成的文件。</li></ul><p>Stats 对象本质上来自于<code>lib/Stats.js</code>的类实例，常用的方法<code>stats.hasWarnings()</code>、<code>stats.hasErrors()</code>、<code>stats.toJson()</code>和<code>stats.toString()</code>都可以在这个类里面找到对应的实现。</p><h4 id="stats-对象数据结构" tabindex="-1"><a class="header-anchor" href="#stats-对象数据结构" aria-hidden="true">#</a> Stats 对象数据结构</h4><p>Stats 对象的 JSON 数据结构，除了通过<code>Compilation.getStats()</code>获得，还可以在 webpack 回调中，通过 callback 参数获得：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过 webpack-cli 的选项将本次打包的 stats 存入一个 json 文件：<code>webpack --profile --json &gt; compilation-stats.json</code>。</p><p><code>stats.toJson()</code>得到的数据结构格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4.29.6&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用来编译的 webpack 的版本</span>
  <span class="token property">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11593e3b3ac85436984a&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 编译使用的 hash</span>
  <span class="token property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">2469</span><span class="token punctuation">,</span> <span class="token comment">// 编译耗时 (ms)</span>
  <span class="token property">&quot;filteredModules&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 当 \`exclude\`传入\`toJson\` 函数时，统计被无视的模块的数量</span>
  <span class="token property">&quot;outputPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token comment">// path to webpack 输出目录的 path 路径</span>
  <span class="token property">&quot;assetsByChunkName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用作映射的 chunk 的名称</span>
    <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;web.js?h=11593e3b3ac85436984a&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;named-chunk&quot;</span><span class="token operator">:</span> <span class="token string">&quot;named-chunk.web.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;other-chunk&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;other-chunk.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;other-chunk.css&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// asset 对象 (asset objects) 的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;chunks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// chunk 对象 (chunk objects) 的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 模块对象 (module objects) 的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 错误字符串 (error string) 的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;warnings&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 警告字符串 (warning string) 的数组</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面除了编译基本信息、报错和 warnings 之外，就是<code>modules</code>、<code>chunks</code>和<code>assets</code>三个对应的数组，里面是单个的<code>module</code>、<code>chunk</code>和<code>asset</code>。</p><blockquote><p>Tips：<code>stats.toJson</code>可以指定要不要输出对应的数据。例如不想输出 <code>modules</code> 和 <code>chunks</code>，可以使用<code>stats.toJson({modules: false, chunks: false})</code>。</p></blockquote><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h4><p>在每个 module 中，我们可以得到它的所有信息，这些信息可以分为四大类：</p><ol><li>基本信息：包括最基本的内容、大小、id；</li><li>依赖关系：<code>module.reasons</code>对象描述了这个模块被加入依赖图表的理由，包含了引入的方式、引入的 module 信息及其对应代码在第几行第几列等，可以通过这个计算出 module 之间的依赖关系图表（graph）；</li><li>chunks 和 assets 关系：<code>module.chunks</code>和<code>module.assets</code>包含到 chunks 和 assets 中的对应 id 等；</li><li>被 webpack 处理的后的信息：包含<code>module.failed</code>、<code>module.errors</code>、<code>module.warnings</code>等。</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// asset对象 (asset objects)的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;built&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块会参与 Loaders , 解析, 并被编译</span>
  <span class="token property">&quot;cacheable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块是否会被缓存</span>
  <span class="token property">&quot;chunks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 包含这个模块的 chunks 的 id</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 处理这个模块发现的错误的数量</span>
  <span class="token property">&quot;failed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 编译是否失败</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 这个模块的ID (类似于 \`module.id\`)</span>
  <span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// webpack内部使用的唯一的标识</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 实际文件的地址</span>
  <span class="token property">&quot;optional&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 每一个对这个模块的请求都会包裹在 \`try... catch\` 内 (与ESM无关)</span>
  <span class="token property">&quot;prefetched&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个模块是否会被 prefetched</span>
  <span class="token property">&quot;profile&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 有关 \`--profile\` flag 的这个模块特有的编译数据 (ms)</span>
    <span class="token property">&quot;building&quot;</span><span class="token operator">:</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token comment">// 载入和解析</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token comment">// 编译依赖</span>
    <span class="token property">&quot;factory&quot;</span><span class="token operator">:</span> <span class="token number">11</span> <span class="token comment">// 解决依赖</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;reasons&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 见下文描述</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">3593</span><span class="token punctuation">,</span> <span class="token comment">// 预估模块的大小 (byte)</span>
  <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;// Should not break it...\\r\\nif(typeof...&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 字符串化的输入</span>
  <span class="token property">&quot;warnings&quot;</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 处理模块时警告的数量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>module.reasons</code>数据结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;33:24-93&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 导致这个被加入依赖图标的代码行数</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 所基于模块的相对地址 context</span>
  <span class="token property">&quot;moduleId&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 模块的 ID</span>
  <span class="token property">&quot;moduleIdentifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块的地址</span>
  <span class="token property">&quot;moduleName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 可读性更好的模块名称 (用于 &quot;更好的打印 (pretty-printing)&quot;)</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;require.context&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 使用的请求的种类 (type of request)</span>
  <span class="token property">&quot;userRequest&quot;</span><span class="token operator">:</span> <span class="token string">&quot;../../cases&quot;</span> <span class="token comment">// 用来 \`import\` 或者 \`require\` 的源字符串</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chunk" tabindex="-1"><a class="header-anchor" href="#chunk" aria-hidden="true">#</a> chunk</h4><p>在每个 chunk 中，信息也可以分为四大类：</p><ol><li>基本信息：包括最基本的内容、大小、id；</li><li>来源：<code>chunk.origins</code>对象描述了这个模块被加入的理由，包含了引入的方式、引入的 module 信息及其对应代码在第几行第几列等，可以通过这个计算出 module 之间的依赖关系图表（graph）；</li><li>引用关系：<code>chunk.parents</code>和<code>chunk.children</code>被引用和引用的 ids；</li><li>包含和被包含：<code>chunk.files</code>和<code>chunk.modules</code>包含到 assets 和自己包含 modules 中信息等。</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;entry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是否包含 webpack 的运行时</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 一个包含这个 chunk 的文件名的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;filteredModules&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 见上文的 结构</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 这个 chunk 的id</span>
  <span class="token property">&quot;initial&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是开始就要加载还是 懒加载(lazy-loading)</span>
  <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 模块对象 (module objects)的数组</span>
    <span class="token string">&quot;web.js?h=11593e3b3ac85436984a&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;names&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 包含在这个 chunk 内的 chunk 的名字的数组</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;origins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 下文详述</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 父 chunk 的 ids</span>
  <span class="token comment">// 生成 assets 的原因</span>
  <span class="token property">&quot;reason&quot;</span><span class="token operator">:</span> <span class="token string">&quot;split chunk (cache group: asyncVendors) (name: async)&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;170746935298270ad813&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 自己引用谁</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 引用的顺序</span>
  <span class="token property">&quot;childrenByOrder&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rendered&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 chunk 是否会参与进编译</span>
  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">188057</span> <span class="token comment">// chunk 的大小(byte)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>chunk.origins</code>对应的格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 具体是哪行生成了这个chunk</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块的位置</span>
  <span class="token property">&quot;moduleId&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 模块的ID</span>
  <span class="token property">&quot;moduleIdentifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(webpack)\\\\test\\\\browsertest\\\\lib\\\\index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块的地址</span>
  <span class="token property">&quot;moduleName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/index.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块的相对地址</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token comment">// chunk的名称</span>
  <span class="token property">&quot;reasons&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 模块对象中\`reason\`的数组</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asset" tabindex="-1"><a class="header-anchor" href="#asset" aria-hidden="true">#</a> asset</h4><p><code>asset</code>相对简单一些，内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;chunkNames&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这个 asset 包含的 chunk</span>
  <span class="token property">&quot;chunks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这个 asset 包含的 chunk 的 id</span>
  <span class="token property">&quot;emitted&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表示这个 asset 是否会让它输出到 output 目录</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10.web.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 输出的文件名</span>
  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">1058</span> <span class="token comment">// 文件的大小</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本小节主要介绍 Webpack 中两个核心的类 Compiler 和 Compilation。Compiler 是每次 Webpack 全部生命周期的对象，而 Compilation 是 Webpack 中每次构建过程的生命周期对象，Compilation 是通过 Compiler 创建的实例。两个类都有自己生命周期，即有自己不同的 Hook，通过添加对应 Hook 事件，可以拿到各自生命周期关键数据和对象。Compilation 有个很重要的对象是 Stats 对象，通过这个对象可以得到 Webpack 打包后的所有 module、chunk 和 assets 信息，通过分析 Stats 对象可以得到很多有用的信息，比如 webpack-bundle-analyzer 这类分析打包结果的插件都是通过分析 Stats 对象来得到分析报告的。另外 Webpack 中<code>lib/Stats.js</code>的源码也可以看下，对于分析打包结果和编写插件都有很大的启发。</p><blockquote><p>本小节 Webpack 相关面试题：</p><ol><li>Webpack 的 Compiler 和 Compilation 对象有什么区别？</li><li>Webpack 的 Compiler 和 Compilation 对象有哪些重要的 Hooks？</li><li>怎么获取 Webpack 的 Compiler 和 Compilation 对象？</li><li>Webpack 的 Stats 对象可以做什么？有什么用？怎么获取？</li></ol></blockquote>`,39);function M(z,W){const e=l("ExternalLinkIcon");return c(),p("div",null,[i,r,u,k,m,t("p",null,[n("在 "),y,n(" 文章中已经提到过，Compiler 和 Compilation 都是继承自"),t("a",g,[n("Tapable"),s(e)]),n(" ，不同点是"),f,n("是每个 Webpack 的配置，对应一个"),v,n("对象，记录着整个 Webpack 的生命周期；在构建的过程中，每次构建都会产生一次"),b,n("，"),x,n("则是构建周期的产物。本文将进一步介绍"),h,n("和"),q,n("，通过本章节的学习，将会对 Webpack 构建过程有一个更加宏观的掌握。")]),C,t("p",null,[n("Compiler 的 Resolver 是指来自于"),t("a",S,[n("enhanced-resolve"),s(e)]),n("模块，它主要功能是一个提供异步"),H,n("，即从哪里去查找文件的路径，可以通过 Webpack 的"),w,n("和"),j,n("来配置。Compiler 类有三种类型的内置 Resolver：")]),_])}const I=o(d,[["render",M],["__file","index-25.html.vue"]]);export{I as default};
