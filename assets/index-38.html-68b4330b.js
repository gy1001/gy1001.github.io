import{_ as n,p as s,q as a,a1 as p}from"./framework-e8cb8151.js";const t={},e=p(`<h1 id="_38-封装运动框架" tabindex="-1"><a class="header-anchor" href="#_38-封装运动框架" aria-hidden="true">#</a> 38-封装运动框架</h1><p>单从技术的角度来看，JavaScript 动画能力的掌握与否，会将前端程序员的能力水平划分到不同的 level 中。很显然，大多数人并不知道如何使用 JavaScript 封装一个动画函数，去满足日常的动画需求。因此，不管你承认还是不承认，不掌握动画能力，你自己就会感觉比别人弱一等。这就是动画的重要性。</p><p>当然，使用原生代码自己封装动画，也并非那么困难，跟着我的思路，一起来思考并动手实践就能搞定。</p><h2 id="_1-如何让元素动起来" tabindex="-1"><a class="header-anchor" href="#_1-如何让元素动起来" aria-hidden="true">#</a> 1-如何让元素动起来</h2><p>在封装拖拽和封装无缝滚动时，我们都有思考过这个问题。此时我们还需要继续思考。</p><p>如果我是想改变元素的位置信息，那么就可以通过改变元素的 <code>left, top, translate</code> 等属性，让元素的位置发生改变，这时元素就能动起来。</p><p>如果我是想改变元素的宽度，那么就可以通过改变元素的 <code>width</code> 属性就能做到。</p><p>如果我是想改变元素的颜色，那么就可以通过改变元素的<code>color</code> 属性就能做到。</p><p>因此，运动的实现，与 css 属性息息相关。</p><p>此时我们还需要思考一个非常重要的问题，在实践中，我们<strong>使用动画的目的是什么？</strong> 这关系到动画原理的核心。</p><p>例如我们修改元素的宽度，想要从 100px 修改成为 200px，如果不使用动画，可以直接修改为 200px。而使用动画的目的，是为了让这个改变的效果更为直观，看上去逼格更高，页面功能更生动。因此，本来能一次就做到的事情，我们分成很多次来完成。</p><p>这就是动画的核心：<strong>将目标分片，并连续执行</strong></p><p>这里面涉及到两个概念需要我们搞清楚，一个是<strong>如何切分目标</strong> 。二个是<strong>如何连续执行</strong></p><h2 id="_2-如何将目标分片" tabindex="-1"><a class="header-anchor" href="#_2-如何将目标分片" aria-hidden="true">#</a> 2-如何将目标分片</h2><p>要思考如何将目标分片，那么必然的，就必须知道目标是多少。例如我们希望元素能够移动 100 像素，那么目标就是 100 像素。</p><p>这时方案就有很多种，</p><p>我们可以每一次就移动 1px，移动 100 次。也可以每一次就移动 2px，移动 50 次。那么应该如何选择，这里面的已知条件有哪些？</p><p>很显然，就是时间。</p><p>一个是<strong>目标时间</strong>。我们常常会将移动的总时间作为参数，传入到运动过程中，告诉函数，这 100px，需要在 1s 之内完成。</p><p>另外一个还需要重视的知识点，就是<strong>时间间隔</strong>。只有存在时间间隔，才能延长动画总时间。而时间间隔应该取多少比较合适呢？这和浏览器的渲染频率有关系。</p><p>大多数浏览器的渲染频率是 1 秒钟，渲染 60 次「刷新率 60Hz」。在这个频率之下，浏览器能够流畅的完成自己的工作。也就是说，合理的时间间隔应该是 1000/60 约等于 16.7 ms.</p><p>如果我们设定的间隔时间小于了 16.7 ms，那么对于浏览器来说，就造成了额外的压力，页面就会卡顿，甚至掉帧「分片的某一片被跳过而无法渲染」。</p><p>于是，有了总时间，有了间隔时间，有了目标距离，那么如何分片就变得很简单</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 执行多少次 = 目标时间 / 间隔时间</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token comment">// 每一次运动多少距离 = 目标距离 / 次数</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">/</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-如何连续执行" tabindex="-1"><a class="header-anchor" href="#_3-如何连续执行" aria-hidden="true">#</a> 3-如何连续执行</h2><p>要连续执行，又跟间隔时间有关系，我们很自然就能够想到定时器函数 <code>setInterval/setTimeout/requestAnimationFrame</code>。</p><p>但是了解 <code>setInterval</code> 内部机制的同学应该知道，<code>setInterval</code> 设置的间隔时间，包含了函数的执行时间。</p><p>比如如下一个例子。我们试图每隔 100ms 执行一次函数 foo。实现如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 伪函数</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这 100ms，会包含函数 foo 的执行时间。如下图所示。</p><p>也就是说，函数的真实间隔时间，会小于 100ms。而如果函数的执行时间，超过了 100ms，那么真实间隔实践就会变得不存在。</p><p>基于这个原因，通常清晰下我们不会选择 <code>setInterval</code> 来达到我们连续执行的目的。</p><p>如果我们使用 setTimeout 应该怎么做呢？</p><p>setTimeout 自身并不具备连续执行的特性，因此需要使用递归在符合条件的情况下，反复创建新的 setTimeout 函数。代码大概如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 打个 log 观察一下函数执行</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ani 执行了一次&#39;</span><span class="token punctuation">)</span>
  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>ani<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>requestAnimationFrame</code> 同样能够使用与 setTimeout 类似的方式，做到连续执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;step 执行了一次&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，该 api 对应的是浏览器的渲染次数，也就是说，每一次渲染，都能够执行一次，所以我们并不用去为它设置间隔时间，默认的间隔时间，就是浏览器的渲染间隔 1000 / 60。</p><p>相比于 setTimeout，requestAnimationFrame 有几个明显的优势。</p><ol><li>requestAnimationFrame 的执行与浏览器渲染严格一致，例如在页面切换等场景下，浏览器不再绘制页面，它也会停止绘制，这种同步能够极大的节省资源。</li><li>setTimeout 需要独立绘制，而多个 requestAnimationFrame 可以同时进行，因此，当多个动画执行时，流畅度 setTimeout 完败。</li><li>通过事件循环我们可以知道，setTimeout 只能串行执行，会影响到其他 js 代码的处理。</li></ol><p>综合评估之下，使用 requestAnimationFrame 性能更佳，交互体验更流畅。</p><p>因此我们在实践中，只要浏览器支持，就会优先考虑使用 requestAnimationFrame。</p><p>兼容代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nextFrame <span class="token operator">=</span>
  window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> curtime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span>curtime <span class="token operator">-</span> lasttime<span class="token punctuation">)</span><span class="token punctuation">)</span>
    lasttime <span class="token operator">=</span> curtime <span class="token operator">+</span> delay
    <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

<span class="token comment">// 偷个懒</span>
<span class="token keyword">const</span> cancelFrame <span class="token operator">=</span>
  window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>
  clearTimeout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-动画函数" tabindex="-1"><a class="header-anchor" href="#_4-动画函数" aria-hidden="true">#</a> 4-动画函数</h2><p>在使用 css3 实现动画时，我们知道通过设置不同的动画函数就能够做到不同的运动曲线。例如 <code>linear, ease, ease-in, ease-out, ease-in-out</code>。使用 JavaScript 也能够做到同样的事情。</p><p>动画函数的作用在于帮助我们在给目标分片时，让每一帧运行的分片不同。以此来让运动速度发生变化。</p><p>有许多大神已经研究出来了许多常用的动画函数，我们直接使用即可。</p><p>JavaScript 有一个工具库 Tween 与之对应的，我们可以搜索使用，在本案例中，我们就从其中拿几个出来完成运动的实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 动画函数</span>
<span class="token keyword">const</span> tween <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">linear</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> d <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">ease</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-in&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-out&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-in-out&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b
    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">bounce</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/=</span> d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> t <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">1.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">2.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2.25</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.9375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2.625</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.984375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lasttime <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">const</span> nextFrame <span class="token operator">=</span>
  window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> curtime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span>curtime <span class="token operator">-</span> lasttime<span class="token punctuation">)</span><span class="token punctuation">)</span>
    lasttime <span class="token operator">=</span> curtime <span class="token operator">+</span> delay
    <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

<span class="token comment">// 偷个懒</span>
<span class="token keyword">const</span> cancelFrame <span class="token operator">=</span>
  window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>
  window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>
  clearTimeout

<span class="token comment">// 动画函数</span>
<span class="token keyword">const</span> tween <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">linear</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> d <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">ease</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-in&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-out&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ease-in-out&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b
    <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">bounce</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/=</span> d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> t <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">1.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">2.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2.25</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.9375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-=</span> <span class="token number">2.625</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.984375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.rect&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 动画持续时间</span>
<span class="token keyword">const</span> duration <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token comment">// target 为目标距离</span>
<span class="token keyword">function</span> <span class="token function">slideTo</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">cancelFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> offset <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> stime<span class="token punctuation">)</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> tween<span class="token punctuation">.</span><span class="token function">ease</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rect<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>s <span class="token operator">*</span> target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
      timer <span class="token operator">=</span> <span class="token function">nextFrame</span><span class="token punctuation">(</span>ani<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">slideTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-思考题" tabindex="-1"><a class="header-anchor" href="#_5-思考题" aria-hidden="true">#</a> 5-思考题</h2><p>1、如果要进一步封装成为一个工具方法应该怎么做？变量是什么？公共逻辑又是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> target<span class="token punctuation">,</span> easing <span class="token operator">=</span> <span class="token string">&#39;linear&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// todo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、如果修改的是 width 或者透明度等其他属性动画应该怎么做呢？</p>`,56),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","index-38.html.vue"]]);export{r as default};
