const e=JSON.parse('{"key":"v-343c66d8","path":"/zh/other/class/typescript-advanced/index-03.html","title":"03-深入 TS 核心语法+各种实战应用（下）","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"01：TS 函数类型和相关解构","slug":"_01-ts-函数类型和相关解构","link":"#_01-ts-函数类型和相关解构","children":[]},{"level":2,"title":"02: TS 函数类型复杂实战：手写 Promise 开头两段源码","slug":"_02-ts-函数类型复杂实战-手写-promise-开头两段源码","link":"#_02-ts-函数类型复杂实战-手写-promise-开头两段源码","children":[]},{"level":2,"title":"03：interface 和 type 的区别","slug":"_03-interface-和-type-的区别","link":"#_03-interface-和-type-的区别","children":[{"level":3,"title":"1. 定义类型范围不同","slug":"_1-定义类型范围不同","link":"#_1-定义类型范围不同","children":[]},{"level":3,"title":"2. 接口可以 extends 一个或者多个接口或者类来实现一个接口，也可以继承 type","slug":"_2-接口可以-extends-一个或者多个接口或者类来实现一个接口-也可以继承-type","link":"#_2-接口可以-extends-一个或者多个接口或者类来实现一个接口-也可以继承-type","children":[]},{"level":3,"title":"3. 用 type 交叉类型 & 可以让类型中的成员合并成一个新的 type 类型，但接口不能交叉合兵","slug":"_3-用-type-交叉类型-可以让类型中的成员合并成一个新的-type-类型-但接口不能交叉合兵","link":"#_3-用-type-交叉类型-可以让类型中的成员合并成一个新的-type-类型-但接口不能交叉合兵","children":[]},{"level":3,"title":"4：接口可以声明合并","slug":"_4-接口可以声明合并","link":"#_4-接口可以声明合并","children":[]}]},{"level":2,"title":"04: 元组 tuple","slug":"_04-元组-tuple","link":"#_04-元组-tuple","children":[{"level":3,"title":"什么是元组","slug":"什么是元组","link":"#什么是元组","children":[]}]},{"level":2,"title":"05：TS 数组和数组元素怎么样同时为只读","slug":"_05-ts-数组和数组元素怎么样同时为只读","link":"#_05-ts-数组和数组元素怎么样同时为只读","children":[]},{"level":2,"title":"06: 可变元组和它的应用场景","slug":"_06-可变元组和它的应用场景","link":"#_06-可变元组和它的应用场景","children":[]},{"level":2,"title":"07: 可变元组 tag 和 tag 的意义","slug":"_07-可变元组-tag-和-tag-的意义","link":"#_07-可变元组-tag-和-tag-的意义","children":[]},{"level":2,"title":"08：类，静态属性，何时用静态属性","slug":"_08-类-静态属性-何时用静态属性","link":"#_08-类-静态属性-何时用静态属性","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"展开特征","slug":"展开特征","link":"#展开特征","children":[]},{"level":3,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":3,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":3,"title":"静态成员：静态属性+静态方法","slug":"静态成员-静态属性-静态方法","link":"#静态成员-静态属性-静态方法","children":[]}]},{"level":2,"title":"09：企业项目何时用静态成员？","slug":"_09-企业项目何时用静态成员","link":"#_09-企业项目何时用静态成员","children":[]},{"level":2,"title":"10：TS 常见面试题——TS 单件（例）模式的两种实现和静态成员执行的时机","slug":"_10-ts-常见面试题——ts-单件-例-模式的两种实现和静态成员执行的时机","link":"#_10-ts-常见面试题——ts-单件-例-模式的两种实现和静态成员执行的时机","children":[{"level":3,"title":"单例模式实现","slug":"单例模式实现","link":"#单例模式实现","children":[]},{"level":3,"title":"静态成员的执行时机","slug":"静态成员的执行时机","link":"#静态成员的执行时机","children":[]}]},{"level":2,"title":"11：常见面试题——单件（例）模式的第二种实现","slug":"_11-常见面试题——单件-例-模式的第二种实现","link":"#_11-常见面试题——单件-例-模式的第二种实现","children":[]},{"level":2,"title":"12: TS 类 getter setter 使用和意义","slug":"_12-ts-类-getter-setter-使用和意义","link":"#_12-ts-类-getter-setter-使用和意义","children":[]},{"level":2,"title":"13：实战晋级：TS 静态成员、方法拦截器在大中项目中的实战+作业","slug":"_13-实战晋级-ts-静态成员、方法拦截器在大中项目中的实战-作业","link":"#_13-实战晋级-ts-静态成员、方法拦截器在大中项目中的实战-作业","children":[]},{"level":2,"title":"14：方法拦截器进一步深度理解和本章总结说明","slug":"_14-方法拦截器进一步深度理解和本章总结说明","link":"#_14-方法拦截器进一步深度理解和本章总结说明","children":[]}],"git":{"updatedTime":1690779498000},"filePathRelative":"zh/other/class/typescript-advanced/index-03.md"}');export{e as data};
