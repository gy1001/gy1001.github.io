import{_ as t,M as o,p as c,q as l,R as n,t as s,N as p,a1 as a}from"./framework-e8cb8151.js";const i={},r=a('<h1 id="_02-vue3-源码结构-搭建框架雏形" tabindex="-1"><a class="header-anchor" href="#_02-vue3-源码结构-搭建框架雏形" aria-hidden="true">#</a> 02-Vue3 源码结构-搭建框架雏形</h1><h2 id="_01-前言" tabindex="-1"><a class="header-anchor" href="#_01-前言" aria-hidden="true">#</a> 01：前言</h2><p>从本章节我们将要去搭建自己的 vue 框架项目了，我们叫他 <code>vue-next-mini</code></p><p>在搭建的过程中，我们将会参考 <code>vue</code>源代码的项目结构和构建方案，从而可以构建出一个<strong>小而美</strong>的<code>vue</code>框架</p><p>所以本章的内容将会分为两个大的部分</p><ol><li><strong>vue 源码解析</strong>：在这部分，我们需要下载 vue 的源代码，同事对它进行 debugger 和 源码阅读</li><li><strong>构建 vue-next-mini</strong>: 在这部分，我们会参考 vue 源代码的基本结构，来创建我们的<code>vue-next-mini</code></li></ol><p>那么明确好以上内容之后，接下来就让我们开始本章节的学习吧</p><h2 id="_02-探索源码设计-vue3-源码设计大解析" tabindex="-1"><a class="header-anchor" href="#_02-探索源码设计-vue3-源码设计大解析" aria-hidden="true">#</a> 02:探索源码设计：Vue3 源码设计大解析</h2><p>本小节中，我们需要做两件事情</p><ol><li>下载 <code>vue</code>源代码(这里使用版本 v3.2.37)</li><li>了解 <code>vue</code>的源码结构</li></ol><h3 id="下载-vue-源代码-版本-v3-2-37" tabindex="-1"><a class="header-anchor" href="#下载-vue-源代码-版本-v3-2-37" aria-hidden="true">#</a> 下载 vue 源代码（版本 v3.2.37）</h3>',11),u={href:"https://github.com/vuejs/core/releases/tag/v3.2.37",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/lgd8981289/vue-next-3.2.37",target:"_blank",rel:"noopener noreferrer"},k=a(`<h3 id="vue-源码结构" tabindex="-1"><a class="header-anchor" href="#vue-源码结构" aria-hidden="true">#</a> vue 源码结构</h3><p>下载好 vue 源码以后，我们看下它的基本结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">|</span><span class="token operator">--</span> core<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.37</span>
    <span class="token operator">|</span><span class="token operator">--</span> tsconfig<span class="token punctuation">.</span>json <span class="token comment">// typescript 配置文件</span>
    <span class="token operator">|</span><span class="token operator">--</span> rollup<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment">// rollup 的配置文件</span>
    <span class="token operator">|</span><span class="token operator">--</span> packages <span class="token comment">// 核心代码区</span>
        <span class="token operator">|</span><span class="token operator">--</span> vue<span class="token operator">-</span>compat <span class="token comment">// 用于兼容 vue2 的代码</span>
        <span class="token operator">|</span><span class="token operator">--</span> vue <span class="token comment">// 重要：测试实例、打包之后的 dist 都会放在这里</span>
        <span class="token operator">|</span><span class="token operator">--</span> template<span class="token operator">-</span>explorer <span class="token comment">// 提供了一个线上的测试(https://template-explorer.vuejs.org) 用于把template 转为 render</span>
        <span class="token operator">|</span><span class="token operator">--</span> size<span class="token operator">-</span>check <span class="token comment">// 测试运行时包大小</span>
        <span class="token operator">|</span><span class="token operator">--</span> shared <span class="token comment">// 重要：共享的工具类</span>
        <span class="token operator">|</span><span class="token operator">--</span> sfc<span class="token operator">-</span>playground <span class="token comment">// sfc 工具 如：https://sfc.vuejs.org/</span>
        <span class="token operator">|</span><span class="token operator">--</span> server<span class="token operator">-</span>render <span class="token comment">// 服务端渲染</span>
			  <span class="token operator">|</span><span class="token operator">--</span> runtime<span class="token operator">-</span>test <span class="token comment">// runtime 测试相关</span>
			  <span class="token operator">|</span><span class="token operator">--</span> runtime<span class="token operator">-</span>dom <span class="token comment">// 重要：基于浏览器平台的运行时</span>
			  <span class="token operator">|</span><span class="token operator">--</span> runtime<span class="token operator">-</span>core <span class="token comment">// 重要：运行时的核心代码，内部针对不同平台进行了实现</span>
			  <span class="token operator">|</span><span class="token operator">--</span> reactivity<span class="token operator">-</span>transform <span class="token comment">// 已过期，无需关注</span>
			  <span class="token operator">|</span><span class="token operator">--</span> reactivity <span class="token comment">// 重要：响应性的核心模块</span>
			  <span class="token operator">|</span><span class="token operator">--</span> global<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts <span class="token comment">// 全局的 ts 声明</span>
			  <span class="token operator">|</span><span class="token operator">--</span> compiler<span class="token operator">-</span>ssr <span class="token comment">// 服务器端渲染的编译模块</span>
			  <span class="token operator">|</span><span class="token operator">--</span> compiler<span class="token operator">-</span>sfc <span class="token comment">// 单文件组件(.vue)的编译模块</span>
			  <span class="token operator">|</span><span class="token operator">--</span> compiler<span class="token operator">-</span>dom <span class="token comment">// 重要：浏览器相关的编译模块</span>
			  <span class="token operator">|</span><span class="token operator">--</span> compiler<span class="token operator">-</span>core <span class="token comment">// 重要：浏览器核心代码</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment">// npm 包管理工具</span>
    <span class="token operator">|</span><span class="token operator">--</span> netlify<span class="token punctuation">.</span>toml <span class="token comment">// 自动化部署相关</span>
    <span class="token operator">|</span><span class="token operator">--</span> jest<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment">// 测试相关</span>
    <span class="token operator">|</span><span class="token operator">--</span> api<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>json <span class="token comment">// Typescript 的 API 分析工具</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">SECURITY</span><span class="token punctuation">.</span>md <span class="token comment">// 报告漏洞，危害安全的声明文件</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">README</span><span class="token punctuation">.</span>md   <span class="token comment">// 项目声明文件</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">LICENSE</span> <span class="token comment">// 开源协议</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">CHANGLOG</span><span class="token punctuation">.</span>md <span class="token comment">// 更新日志</span>
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">BACKERS</span><span class="token punctuation">.</span>md <span class="token comment">// 赞助声明</span>
    <span class="token operator">|</span><span class="token operator">--</span> test<span class="token operator">-</span>dts <span class="token comment">// 测试相关，不需要关注</span>
    <span class="token operator">|</span><span class="token operator">--</span> scripts <span class="token comment">// 配置文件相关，不需要关注</span>
    <span class="token operator">|</span><span class="token operator">--</span> pnpm<span class="token operator">-</span>workspace<span class="token punctuation">.</span>yaml <span class="token comment">// pnpm 相关配置</span>
    <span class="token operator">|</span><span class="token operator">--</span> pnpm<span class="token operator">-</span>lock<span class="token punctuation">.</span>yaml  <span class="token comment">// 使用 pnpm 下载的依赖包版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-创建测试实例-在-vue-源码中运行测试实例" tabindex="-1"><a class="header-anchor" href="#_03-创建测试实例-在-vue-源码中运行测试实例" aria-hidden="true">#</a> 03：创建测试实例：在 Vue 源码中运行测试实例</h2><p>现在我们已经大概了解了 vue 源代码的基本结构，那么接下来我们来看下，如何在 vue3 中运行测试实例，并进行 debugger</p><h3 id="运行-vue3-源代码" tabindex="-1"><a class="header-anchor" href="#运行-vue3-源代码" aria-hidden="true">#</a> 运行 Vue3 源代码</h3>`,6),v=a(`<li><p>因为 <code>vue3</code>是通过<code>pnpm</code>作为包管理工具的，所以想要运行<code>vue3</code>那么首先需要安装 <code>pnpm</code></p></li><li><p>我们可以通过如下命令安装 <code>pnpm</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),m=n("code",null,"pnpm",-1),b=n("strong",null,"集中管理",-1),g=n("strong",null,"电脑中所有项目",-1),h=n("strong",null,"节约电脑磁盘",-1),y={href:"https://www.pnpm.cn/",target:"_blank",rel:"noopener noreferrer"},f=a(`<li><p>安装完<code>pnpm</code>后，接下来在项目根目录中运行脚本，来安装依赖包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>等待所有的依赖包安装完成之后，执行如下命令进行打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行完毕以后，可以发现<code>packages/vue/dist</code> 文件夹下，生成乳腺癌文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">|</span><span class="token operator">--</span> dist
    <span class="token operator">|</span><span class="token operator">--</span> vue<span class="token punctuation">.</span>cjs<span class="token punctuation">.</span>js
 		<span class="token operator">|</span><span class="token operator">--</span> vue<span class="token punctuation">.</span>cjs<span class="token punctuation">.</span>prod<span class="token punctuation">.</span>js
 		<span class="token operator">|</span><span class="token operator">--</span> vue<span class="token punctuation">.</span>esm<span class="token operator">-</span>broser<span class="token punctuation">.</span>js
 		<span class="token operator">|</span><span class="token operator">--</span> vue<span class="token punctuation">.</span>esm<span class="token operator">-</span>bundler<span class="token punctuation">.</span>js
 		<span class="token operator">|</span><span class="token operator">--</span> xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),q=a(`<h3 id="运行测试实例" tabindex="-1"><a class="header-anchor" href="#运行测试实例" aria-hidden="true">#</a> 运行测试实例</h3><p>之前说过 <code>packags/vue/examples</code>下放的是测试的实例，所以我们可以在这里新建一个文件夹，用来表示代码的测试实例</p><ol><li><p>创建 <code>/packages/vue/example/mine</code>文件夹，</p></li><li><p>在该文件夹中创建一个测试实例<code>reactive.html</code>，比恩写入以下代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 从 Vue 中解构出 reactive effect 方法</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token comment">// 声明响应式数据 obj</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 effect 方法</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>name
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 定时修改数据，视图发生变化</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;猪八戒&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用 vscode 的 <code>live server</code>插件，用浏览器打开此网页服务，就可以看到数据定时修改后的效果</p></li></ol><h2 id="_04-跟踪解析运行行为-为-vue-开启-sourcemap" tabindex="-1"><a class="header-anchor" href="#_04-跟踪解析运行行为-为-vue-开启-sourcemap" aria-hidden="true">#</a> 04:跟踪解析运行行为：为 Vue 开启 sourceMap</h2><p>此时，我们已经成功的运行了一个测试实例代码，但是在这样的一个测试实例代码中，Vue 内部是如何执行的呢？</p><p>如果想要知道这个，那么我们需要对<code>vue</code>代码进行<code>debugger</code>来操作<code>vue</code>代码的执行</p><p>那么问题来了，<strong>如何对 Vue 进行 debugger 操作呢？</strong></p><p>如果想要对<code>Vue</code>进行<code>debugger</code>操作，那么我们必须开启 vue 的 <code>source-map</code>功能</p><h3 id="开启-vue-的-sourcemap" tabindex="-1"><a class="header-anchor" href="#开启-vue-的-sourcemap" aria-hidden="true">#</a> 开启 Vue 的 SourceMap</h3><p>那么如何开启<code>Vue</code>的<code>source-map</code>呢？</p>`,10),j=a('<li><p>打开<code>package.json</code>可以发现，当我们执行<code>npm run build</code>时，其实执行的是<code>node scripts/build.js</code> 指令</p></li><li><p>这就意味着，它的配置文件读取的是<code>scripts/build.js</code>这个文件</p></li><li><p>那么在该文件中存在如下的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;minimist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> sourceMap <span class="token operator">=</span> args<span class="token punctuation">.</span>sourcemap <span class="token operator">||</span> args<span class="token punctuation">.</span>s\n\n<span class="token keyword">await</span> <span class="token function">execa</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;--environment&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">COMMIT:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>commit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">NODE_ENV:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>env<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TARGET:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      formats <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">FORMATS:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>formats<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      buildTypes <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TYPES:true</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      prodOnly <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">PROD_ONLY:true</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      sourceMap <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SOURCE_MAP:true</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// sourceMap 配置项</span>\n    <span class="token punctuation">]</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上面的<code>sourceMap</code>相关的配置最终会被 <code>rollup</code>读取</p></li>',4),x={href:"https://www.npmjs.com/package/minimist",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"minimist 包文档",-1),w=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;minimist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

node example<span class="token operator">/</span>parse<span class="token punctuation">.</span>js <span class="token operator">-</span>x <span class="token number">3</span> <span class="token operator">-</span>y <span class="token number">4</span> <span class="token operator">-</span>n5 <span class="token operator">-</span>abc <span class="token operator">--</span>beep<span class="token operator">=</span>boop foo bar baz
<span class="token punctuation">{</span>
	<span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
	<span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
	<span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
	<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">beep</span><span class="token operator">:</span> <span class="token string">&#39;boop&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=a(`<li><p>所以我们在<code>package.json</code>中修改<code>build</code>命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;build&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;node scripts/build.js -s&quot;</span>,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后重新运行<code>npm run build</code> 就可以看到新打包的文件中，产生了<code>xxx.js.map</code></p></li><li><p>如此，我们就为 vue 开启了 sourceMap</p></li>`,3),T=a('<h2 id="_05-授人以鱼-如何针对源码进行-debugger" tabindex="-1"><a class="header-anchor" href="#_05-授人以鱼-如何针对源码进行-debugger" aria-hidden="true">#</a> 05: 授人以鱼：如何针对源码进行 debugger</h2><p>此时我们已经成功的开启了<code>sourceMap</code>，那么开启了<code>SourceMap</code>之后有什么变化呢？</p><p>此时我们在来看刚才启动的项目</p><p>在刚才启动的项目中，按住 <code>F12</code>打开控制台，进入<code>srouces</code>模块，此时可以看到如下内容</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f8bc5d8f1a149e98330be1d6ab473dd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其中左侧展示的，就是当期使用的 vue 源代码了。</p><p>那么我们知道此时我们是使用了<code>reactive</code>方法声明的响应式数据，<code>reactive</code>方法对应的代码位置在<code>packages/reactivity/src/reactive.ts</code>中的第 90 行</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ad84efa8b8c4b658ca961f908f4eb0c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>那么此时我们就可以在这里打上一个断点，来跟踪整个<code>reactive</code>的代码执行逻辑, 然后刷新页面，可以看到，此时代码已经进入了<code>debugger</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/190c1e1ba4f747e6a6f69545fac0e33c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>因为我们目前还没有开始学习 vue 源码内容，所以我们此时先到此为止，大家可以根据自己的情况，看一下是否要继续跟踪执行</strong></p><p>那么这样我们就已经成功的为 vue 测试实例开启了 debugger 功能，后续我们的开发之中，就可以利用这样的方式，来跟踪并查看 vue 源码的执行逻辑</p><p>那么我们最后在总结一下这几个小节所介绍的步骤</p><p>想要对 vue 代码执行 debugger，那么共分为以下几个步骤</p>',14),V={href:"https://github.com/lgd8981289/vue-next-3.2.37",target:"_blank",rel:"noopener noreferrer"},E=n("strong",null,"直接下载 ZIP 文件会导致 build 出错",-1),O=a("<li>为源代码开启<code>sourcemap</code>,以方便后续进行<code>debugger</code></li><li>再<code>packages/vue/examples</code>中，创建文件，导入<code>../../dist/vue.global.js</code>，书写测试实例</li><li>通过 <code>Live Server</code>启动服务</li><li>在浏览器控制台的<code>Sources</code>中查看运行代码，并进行<code>debugger</code></li>",4),R=a(`<h2 id="_06-授人以渔-如何阅读源码" tabindex="-1"><a class="header-anchor" href="#_06-授人以渔-如何阅读源码" aria-hidden="true">#</a> 06: 授人以渔：如何阅读源码</h2><p>那么上一小节中我们已经知道了如何对<code>vue</code>的源代码进行<code>debugger</code>，但是如果想要学习或者了解 vue 的代码执行，那么光靠 debugger 是不够的，除此之外我们还需要掌握另外一个能力，就是<strong>如何阅读源代码</strong></p><h3 id="阅读源代码的误区" tabindex="-1"><a class="header-anchor" href="#阅读源代码的误区" aria-hidden="true">#</a> 阅读源代码的误区</h3><p>很多同学在阅读源代码的时候，都会面临一个<strong>误区</strong>，那就是：<strong>我需要把源代码中每一行代码都读得明白</strong></p><p>这是一个非常不对的行为 ，很容易让我们<strong>事倍功半</strong></p><p>所以在这里我们需要先给大家明确一点：<strong>阅读源码绝对不是要读明白其中每一行代码的意思，而是在众多的业务代码中寻找到主线，跟随这个主线来进行阅读</strong></p><h3 id="阅读源码的正确姿势" tabindex="-1"><a class="header-anchor" href="#阅读源码的正确姿势" aria-hidden="true">#</a> 阅读源码的正确姿势</h3><p>想要快速、轻松的阅读源码，正确的姿势非常重要，主要有两点</p><ol><li>摒弃边缘情况</li><li>跟随一条主线</li></ol><h4 id="摒弃边缘情况" tabindex="-1"><a class="header-anchor" href="#摒弃边缘情况" aria-hidden="true">#</a> 摒弃边缘情况</h4><p>在大型项目的源码中，都会充斥着非常多的业务代码，这些业务代码是用来处理很多<strong>边缘情况</strong>的，如果我们过分深入这些业务代码则会让我们陷入一个<strong>代码泥潭中</strong>，在繁琐的业务中找不到方向</p><p>所以，我们在阅读源代码之前，必须要明确一点，那就是<strong>仅阅读核心逻辑</strong></p><h4 id="跟随一条主线" tabindex="-1"><a class="header-anchor" href="#跟随一条主线" aria-hidden="true">#</a> 跟随一条主线</h4><p>对于像 Vue 这种重量级的项目来说，哪怕我们只是去阅读它的核心代码，你也会发现是非常困难的，我们之前说过 vue 的核心大致可以分为三块</p><ol><li>响应性</li><li>运行时</li><li>编译器</li></ol><p>每一块的内容又分为很多的业务分支，所以哪怕阅读核心代码已然是一个浩大的工作量</p><p>所以我们还需要另外一个方式，那就是<strong>跟随一条主线</strong></p><blockquote><p>举个例子，我们以前面的 packages/examples/mine/reactive.html 为例</p></blockquote><p>在该代码中，我们通过 reactive 声明了一个响应式数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明响应式数据 obj</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们就可以以该代码为主，来去查看 reactive 方法的主线逻辑</p><ol><li><p>首先要在<code>reactive</code>方法中进行了一个逻辑判断，判断 <code>target</code>是否为只读的，如果是只读的，就直接返回<code>target</code>,意思是：传的是啥返回啥</p></li><li><p>如果不是只读的，则触发<code>createReactiveObject</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// if trying to observe a readonly proxy, return the readonly version.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    mutableHandlers<span class="token punctuation">,</span>
    mutableCollectionHandlers<span class="token punctuation">,</span>
    reactiveMap
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>createReactiveObject</code>方法中，又进行了一堆判断，最后返回了<code>proxy</code>实例对象，所以我们得到 <code>obj</code>应该就是一个<code>proxy</code>实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> Target<span class="token punctuation">,</span>
  <span class="token literal-property property">isReadonly</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">baseHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">collectionHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">proxyMap</span><span class="token operator">:</span> WeakMap<span class="token operator">&lt;</span>Target<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>

 	<span class="token operator">...</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    targetType <span class="token operator">===</span> TargetType<span class="token punctuation">.</span><span class="token constant">COLLECTION</span> <span class="token operator">?</span> collectionHandlers <span class="token operator">:</span> baseHandlers
  <span class="token punctuation">)</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
  <span class="token keyword">return</span> proxy
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打印 obj 你会发现确实如此</p></li></ol><p>这样的一个简单的例子，就是告诉大家应该如何来通过<code>debugger</code>配合<code>正确姿势</code>来快速的阅读源代码</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>这一小节我们讲解了如何阅读源代码，以上方式不知可以应用到 vue 中，也可以应用到其他的框架之中，所以我们把这一小节叫做<code>授人以渔</code></p><p>当然，我们这里只是通过一个简单的方式来进行了举例，在大家实际阅读的过程之中，肯定还会遇到很多的困难的，不过好在，在这个过程中，我们会一起进行阅读</p><h2 id="_07-开始搭建自己的框架-创建-vue-next-mini" tabindex="-1"><a class="header-anchor" href="#_07-开始搭建自己的框架-创建-vue-next-mini" aria-hidden="true">#</a> 07: 开始搭建自己的框架：创建 vue-next-mini</h2><p>那么经过我们现在的学习，我们大概已经了解了 <code>vue</code> 源码中的一些大概模块，并且也知道了如何对<code>vue</code> 的代码进行实例测试、代码追踪与代码阅读</p><p>那么明确好了这些之后，接下来我们就可以创建自己的 vue 框架项目：<code>vue-next-mini</code></p><p>创建<code>vue-next-mini</code>与我们之前创建项目不同，不可以再借助<code>vue-cli</code>或者<code>vite</code>等脚手架工具快速生成<code>vue</code>项目基本架构了，所以我们需要从 0 来搭建这样一个项目</p><ol><li><p>创建<code>vue-next-mini</code>文件夹</p></li><li><p>通过 vscode 打开</p></li><li><p>在终端中执行如下命令，创建<code>package.json</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建<code>packages</code>文件夹，作为<strong>核心代码</strong>区域</p></li><li><p>创建<code>packages/vue</code>文件夹：打包、测试实例、项目整体入口模块</p></li><li><p>创建<code>packages/shared</code>文件夹：共享公共方法模块</p></li><li><p>创建<code>packages/compiler-core</code>文件夹：编译器核心模块</p></li><li><p>创建<code>packages/compiler-dom</code>文件夹：浏览器部分编辑器模块</p></li><li><p>创建<code>packages/reactivity</code>文件夹：响应式模块</p></li><li><p>创建<code>packages/runtime-core</code>文件夹：运行时核心模块</p></li><li><p>创建<code>packages/runtime-dom</code>文件夹：浏览器部分运行时模块</p></li></ol><p>因为 Vue3 是使用 TS 进行构建的，所以在我们的项目中，也将通过 TS 进行构建整个项目，那么我们又应该如何在项目中使用 TS 呢？</p><h2 id="_08-为框架进行配置-导入-ts" tabindex="-1"><a class="header-anchor" href="#_08-为框架进行配置-导入-ts" aria-hidden="true">#</a> 08: 为框架进行配置：导入 ts</h2><p>想要在项目中使用 ts 构建(课程使用的 ts 版本为 4.7.4)，那么首先我们在项目中创建对应的<code>tsconfig.json</code>配置文件</p>`,34),S=a(`<li><p>在项目根目录中，创建<code>tsconfig.json</code>文件</p></li><li><p>该<code>tsconfig.json</code>文件指定编译项目所需的<code>入口文件</code>和<code>编译器</code>配置</p></li><li><p>我们也可以通过以下指令来生成<code>包含默认配置</code>的<code>tsconfig.json</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 需要首先安装 ts
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript@4.7.4
// 生成默认配置
tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>tsconfig.json</code>中指定如下配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// http:www.typescriptlang.org/tsconfig 也可以使用 tsc -init 生成默认的 tsconfig.jso 文件进行属性查找</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 编译器配置</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根目录</span>
    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 严格模式标志</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定类型脚本如何从给定的模块说明符查找文件</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// js 语言版本</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 允许未读取局部变量</span>
    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 允许未读取的参数</span>
    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 允许解析 json</span>
    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 支持语法迭代</span>
    <span class="token property">&quot;downlevelIteration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 允许使用隐式的any 类型（有助于我们简化 ts 的复杂度，从而更加专注于逻辑本身）</span>
    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 模块化</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 转换为 Javascript 时从 Typescript 文件中删除所有注释</span>
    <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 禁用 sourceMap</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 入口</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*/src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,4),A={href:"https://www.staging-typescript.org/tsconfig",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,[n("p",null,[s("注意：在"),n("code",null,"packages"),s("文件夹下，为每一个文件创建一个"),n("code",null,"src"),s("文件夹，并依次新建"),n("code",null,"index.ts"),s("文件")])],-1),I=a(`<h2 id="_09-引入代码格式化工具-prettier-让你的代码结构更加规范" tabindex="-1"><a class="header-anchor" href="#_09-引入代码格式化工具-prettier-让你的代码结构更加规范" aria-hidden="true">#</a> 09: 引入代码格式化工具：prettier 让你的代码结构更加规范</h2><p>因为对于 vue 而言，他是一个开源的可以被众多开发者贡献的框架项目，所以为了保证整个项目的代码书写具备统一风格，<code>vue</code> 导入了 <code>eslint</code> 和 <code>prettier</code> 进行代码格式化的控制</p><p>但是对于我们而言，因为这并不是一个开源的代码仓库，所以我们无需专门导入<code>eslint</code>增加项目的额外复杂度，只需要导入<code>prettier</code>帮助我们控制代码格式化即可</p><ol><li><p>在<code>vscode</code>扩展中，安装<code>prettier</code>辅助插件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba7850e9c1b74e84b27232f4527a8c79~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p>在项目根目录下，创建<code>.prettierrc</code>文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 结尾无分号</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 全部使用单引号</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 每行长度为 80</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token comment">// 不添加尾随 , 号</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 省略箭头函数括号</span>
  <span class="token property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avoid&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至此，<code>prettier</code>配置成功</p></li></ol><p>将来我们就可以指定<code>prettier</code>作为项目的代码格式化工具了</p><h2 id="_10-模块打包器-rollup" tabindex="-1"><a class="header-anchor" href="#_10-模块打包器-rollup" aria-hidden="true">#</a> 10： 模块打包器：rollup</h2><p><code>rollup</code>是一个模块打包器，和<code>webpack</code>一样可以将<code>javascript</code>打包为指定的模块</p><p>但是不同的是，对于<code>webpack</code>而言，它在打包的时候会产生<code>冗余的代码</code>，这样的一种情况在我们开发大型项目的时候没有什么影响，但是如果我们是开发一个<code>库</code>的时候，那么这些冗余的代码就会大大增加库体积，这就不美好了</p><p>所以我们需要一个<strong>小而美</strong>的模块打包器，这就是<code>rollup</code></p><blockquote><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，如 library 或者应用程序</p></blockquote><p>因为 rollup 并不是咱们课程的重点，所以我们不会花费大量的篇幅来讲解 rollup 的概念，只会讲解<code>rollup</code>的一些基础概念，能够满足我们当前的使用即可。大家可以把 <code>rollup</code>理解为一个<code>打包库</code>的模块打包器，而在应用程序的打包中选择 <code>webpack</code></p><h3 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup" aria-hidden="true">#</a> rollup</h3><p>我们可以在项目根目录下，创建<code>rollup.config.js</code>文件作为<code>rollup</code>的配置文件(就像<code>webpack.config.js</code>一样)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span>
<span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span>
<span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-typescript&#39;</span>
<span class="token comment">// 默认导出一个数组，数组的每一个对象都是一个单独的导出文件配置，</span>
<span class="token comment">// 详细可查： https://www.rollupjs.com/guide/big-list-of-options</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 入口文件</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;packages/vue/src/index.ts&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 打包出口</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 导出 iife 模式的包</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// 开启 sourceMap</span>
        <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 导出文件地址</span>
        <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;./packages/vue/dist/vue.js&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 生成包的格式</span>
        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;iife&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 变量名</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// ts 支持</span>
      <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 模块导入的路径补全</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 将 commonjs 转换为 ESM</span>
      <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖包的详细版本为</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;@rollup/plugin-commonjs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;22.0.1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;@rollup/plugin-node-resolve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^13.3.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;@rollup/plugin-typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.3.4&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么至此我们就配置了一个基本的<code>rollup</code>的配置文件</p><p>然后我们可以在<code>input</code>路径下创建对应的<code>index.ts</code>，冰鞋去初始化代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello vue-next-mini&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时因为我们使用的是 ts ，所以还需要安装 <code>tslib</code> <code>typescript</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev tslib@2.4.0 typescript@4.7.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么至此，所有的配置完成</p><p>此时我们可以在<code>package.json</code>中新增一个<code>scripts</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup -c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行 <code>npm run build</code>可以看到 <code>packages/vue/dist/vue.js</code>产生了，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello &#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//# sourceMappingURL=vue.js.map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-初见框架雏形-配置路径映射" tabindex="-1"><a class="header-anchor" href="#_11-初见框架雏形-配置路径映射" aria-hidden="true">#</a> 11: 初见框架雏形：配置路径映射</h2><p>我们知道在当前的项目中 ，<code>shared</code>文件夹内承担的事公开的工具方法，比如我们可以创建如下文件:<code>packages/shared/src</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断是否为一个数组</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span>isArray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这个方法可能会在多项目的多个地方被使用，所以我们可能会经常使用到如下代码<code>packages/vue/src/index.ts</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> isArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们希望可以通过<code>@vue/shared</code>来直接导入 <code>packages/shared/index.ts</code>下的 <code>isArray</code>方法</p>`,32),N=n("code",null,"tsconfig",-1),P={href:"https://www.staging-typescript.org/tsconfig#paths",target:"_blank",rel:"noopener noreferrer"},L=n("strong",null,"路径映射",-1),H=a(`<p>在<code>tsconfig.json</code>中添加如下代码</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 编辑器配置</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置快捷导入</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;@vue/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*/src&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这表示，我们可以通过<code>@vue/*</code>来代替 <code>packages/*/src/index</code>的路径</p><p>那么此时，我们的导入即可成功，可重新执行<code>npm run build</code>进行测试</p><h2 id="_12-总结" tabindex="-1"><a class="header-anchor" href="#_12-总结" aria-hidden="true">#</a> 12： 总结</h2><p>在本章节中，我们主要做了两件事情</p><ol><li>了解了<code>vue</code>的源码设计，同时也知道了如何对阅读框架的源代码，并且对<code>vue</code>的源码进行了<code>debugger</code></li><li>创建了咱们自己的<code>vue-next-mini</code>库，并且对该项目进行了结构和配置上的初始化</li></ol><p>那么做完了这些之后，从下一章节开始我们就要开始逐步的接触到<code>vue</code>的核心代码和设计内容了，并且逐步实现<code>vue-next-mini</code>了</p><p>那么让我们拭目以待吧</p>`,9);function U(D,B){const e=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("大家可以点击"),n("a",u,[s("这里"),p(e)]),s("进入 vue3 的源代码的 github 仓库")]),n("p",null,[s("或者点击"),n("a",d,[s("这里"),p(e)]),s("下载老师 fork 的仓库")]),k,n("ol",null,[v,n("li",null,[n("p",null,[m,s("会通过一个"),b,s("的方式来管理"),g,s("的依赖包，以达到"),h,s("的目的，具体可以点击"),n("a",y,[s("这里"),p(e)]),s("查看")])]),f]),q,n("ol",null,[j,n("li",null,[n("p",null,[s("而根据"),n("a",x,[_,p(e)]),s("实例，可以看出，它是获取运行参数的，官网示例如下")]),w]),M]),T,n("ol",null,[n("li",null,[s("下载 vue 源代码，推荐通过"),n("a",V,[s("该仓库"),p(e)]),s("下载指定版本（注意："),E,s("）")]),O]),R,n("ol",null,[S,n("li",null,[n("p",null,[s("配置项的详细介绍，大家可以点击"),n("a",A,[s("这里"),p(e)]),s("进行查看")])]),C]),I,n("p",null,[s("那么如果想要达到这样的效果 ，那么就必须要设置 "),N,s("的"),n("a",P,[L,p(e)]),s("功能")]),H])}const $=t(i,[["render",U],["__file","index-02.html.vue"]]);export{$ as default};
