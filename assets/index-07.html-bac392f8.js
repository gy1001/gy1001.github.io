import{_ as e,p as a,q as i,a1 as d}from"./framework-e8cb8151.js";const s="/assets/image-20230728150232091-8157ea88.png",t="/assets/image-20230728150242905-ed7b96ab.png",n="/assets/image-20230728150251889-7c688920.png",c="/assets/image-20230728150309330-640b578a.png",r="/assets/image-20230728150321944-ba318f2b.png",l="/assets/image-20230728150330481-0da8bd2b.png",p="/assets/image-20230728150339909-fd399fc2.png",o="/assets/image-20230728150347003-91b4a713.png",m={},g=d('<h1 id="_07-忽略文件权限-解决提示文件权限被修改问题" tabindex="-1"><a class="header-anchor" href="#_07-忽略文件权限-解决提示文件权限被修改问题" aria-hidden="true">#</a> 07-忽略文件权限：解决提示文件权限被修改问题</h1><p><img src="'+s+`" alt="image-20230728150232091"></p><blockquote><p>老骥伏枥，志在千里；  烈士暮年，壮心不已。  ——曹操</p></blockquote><p>Git 在进行版本管理的时候，默认将文件权限也包含在内，但很多时候，我们可能并不需要让文件权限保持一致。比如当我们代码发布到生产服务器中，然后修改了某个文件的权限，当我再次拉取代码时，如果这个文件正好有代码修改，这个时候 Git 就会提示文件冲突。</p><h2 id="_7-1-权限冲突实验" tabindex="-1"><a class="header-anchor" href="#_7-1-权限冲突实验" aria-hidden="true">#</a> 7.1 权限冲突实验</h2><p>为了让大家更好地理解忽略文件权限，下面我做一个简单的实验，来演示文件权限冲突的情况：首先我们模拟两个客户端，通过 cp 命令先复制一个版本库，并进入其中一个目录，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cp -r test201907   copy  &amp;&amp;  cd test201907
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-1-1-修改权限" tabindex="-1"><a class="header-anchor" href="#_7-1-1-修改权限" aria-hidden="true">#</a> 7.1.1 修改权限</h3><p>进入文件夹之后，先通过 <code>ls -l</code> 命令，查看当前文件夹权限信息，结果如下图所示：</p><p><img src="`+t+`" alt="image-20230728150242905"></p><p>然后通过 <code>chmod</code> 命令，修改一个文件的权限，然后使用 <code>git status</code> 命令查看文件修改列表，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chmod 777 index.php &amp;&amp; git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后结果如下图所示，在图中可以看到 <code>index.php</code> 文件已经变成了 <code>modified</code> 状态</p><p><img src="`+n+`" alt="image-20230728150251889"></p><h3 id="_7-1-2-提交代码" tabindex="-1"><a class="header-anchor" href="#_7-1-2-提交代码" aria-hidden="true">#</a> 7.1.2 提交代码</h3><p>接着再将 index.php 文件提交到版本控制器，并推送到远程，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit . -m &#39;权限测试&#39; &amp;&amp; git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后结果如下图所示：</p><p><img src="`+c+`" alt="image-20230728150309330"></p><h3 id="_7-1-3-冲突验证" tabindex="-1"><a class="header-anchor" href="#_7-1-3-冲突验证" aria-hidden="true">#</a> 7.1.3 冲突验证</h3><p>现在我们进入另外一个文件夹，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd ../copy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入文件夹之后，先不要拉取代码，然后同样修改 <code>index.php</code> 文件的权限，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chmod 755 index.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>文件权限被修改之后，我们使用 <code>git diff</code> 命令查看一下文件修改的内容，可以看到原始文件的权限是 644，新的权限已经变成了 755，如下图所示：</p><p><img src="`+r+'" alt="image-20230728150321944"></p><p>在确认文件权限修改之后，我们再在这里拉取一下代码，会提示文件冲突，如下图所示：</p><p><img src="'+l+`" alt="image-20230728150330481"></p><p>通过上面的实验可以看出，git 会记录文件权限，如果两个地方的文件权限不一样，很有可能会导致代码冲突问题。</p><h2 id="_7-2-解决办法" tabindex="-1"><a class="header-anchor" href="#_7-2-解决办法" aria-hidden="true">#</a> 7.2 解决办法</h2><p>在 Git 进行代码管理时，如果不想让 Git 记录文件权限，可以通过 git 配置让其忽略文件权限的信息，参考命令如下：</p><p>#当前版本库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#当前版本库
git config core.filemode false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想让你电脑上所有的版本库，都忽略文件权限，可以在命令中加入 <code>--global</code>，参考命令如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git config --global core.fileMode false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当上面的命令被执行之后，就设置了忽略文件权限，此时通过 <code>cat</code> 查看配置文件<code>.git/config</code>，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat .git/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置文件中，如果看到 <code>fileMode false</code> 则代表配置成功，如下图所示：</p><p><img src="`+p+'" alt="image-20230728150339909"></p><p>这时候再次使用 <code>git pull</code> 命令更新代码就不会再提示有冲突，如下图所示：</p><p><img src="'+o+'" alt="image-20230728150347003"></p><h2 id="_7-3-小结" tabindex="-1"><a class="header-anchor" href="#_7-3-小结" aria-hidden="true">#</a> 7.3 小结</h2><p>在这一节当中，主要通过一个小实验演示了文件权限冲突问题，以及如何解决此问题，包含以下几个知识点：</p><ol><li>Git 会记录文件的权限信息；</li><li>可以通过配置忽略文件权限；</li><li>忽略文件权限配置，支持按照版本库和全局。</li></ol>',44),u=[g];function h(v,x){return a(),i("div",null,u)}const b=e(m,[["render",h],["__file","index-07.html.vue"]]);export{b as default};
