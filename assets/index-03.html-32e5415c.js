import{_ as e,M as o,p as c,q as i,R as s,t as n,N as t,a1 as p}from"./framework-e8cb8151.js";const l="/assets/image-20230817120502602-98dae4f2.png",u="/assets/20190727223543-a5dbcbc4.png",r="/assets/20190727224607-801c897b.png",k="/assets/20190728155833-7987744a.png",d={},v=p(`<h1 id="_03-jest难点进阶" tabindex="-1"><a class="header-anchor" href="#_03-jest难点进阶" aria-hidden="true">#</a> 03-Jest难点进阶</h1><blockquote><p>本章主要讲解 Jest中 snapshot 以及高级 mock 技巧，帮助大家深入理解在不同情况下，如何使用高级知识点完成不同的测试需求。</p></blockquote><h2 id="_01-snapshot-快照测试" tabindex="-1"><a class="header-anchor" href="#_01-snapshot-快照测试" aria-hidden="true">#</a> 01: snapshot 快照测试</h2><h3 id="tomatchsnapshot" tabindex="-1"><a class="header-anchor" href="#tomatchsnapshot" aria-hidden="true">#</a> toMatchSnapshot</h3><p>第一次进行快照测试后，会保存一个快照文件。再次进行快照测试后，会检测新的快照是否与之前保存的快照文件相匹配。如果不匹配，就会进行报错提示 比如如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的测试文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.test.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> generateConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./demo&quot;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateConfig 函数&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时如果运行<code>npm run test</code>就会通过</p><p>以上过程未免过于麻烦，比如：如果更改了<code>demo.js</code>中的配置信息，我们需要相应的在<code>demo.test.js</code>中进行修改，过于繁琐，使用快照测试就可以避免这种麻烦</p><p>修改<code>demo.test.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.test.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> generateConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./demo&quot;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateConfig 函数&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时如果运行<code>npm run test</code>就会通过，并产生一个<code>__snapshots__/demo.test.js.snap</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>

exports<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">测试 generateConfig 函数 1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
{
  &quot;port&quot;: 8080,
  &quot;server&quot;: &quot;http://localhost&quot;,
}
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时如果更改了<code>demo.js</code>文件，比如改为如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8081</span> <span class="token comment">// 更改为 8081</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行<code>npm run test</code>,就会报错，错误如下</p><p><img src="`+l+`" alt="image-20230817120502602"></p><p>后面还有一句话: 检查你的代码更改的或者 运行<code>npm test --u</code> 来更新他们，使下次测试不会报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Snapshot Summary
 › 1 snapshot failed from 1 test suite. Inspect your code changes or run \`npm test -- -u\` to update them.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的代码中有一个动态数据，比如如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateAppConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8082</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 每次运行测试，都是一个新的时间</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.test.js</span>
<span class="token function">test</span><span class="token punctuation">(</span> <span class="token string">&#39;测试 generateAppConfig 函数&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述代码，我们执行<code>npm run test</code>还是<code>npm run test -u</code> 后再次运行<code>npm run test</code>，结果都是测试不通过。因为时间和快照时间不一致，那么怎么办呢？我们需要更改测试代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span> <span class="token string">&#39;测试 generateAppConfig 函数&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span> <span class="token comment">// 这样再次进行快照测试时候，只要类型一致即可</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行<code>npm run test</code> 测试就通过了</p><h3 id="tomatchinlinesnapshot" tabindex="-1"><a class="header-anchor" href="#tomatchinlinesnapshot" aria-hidden="true">#</a> toMatchInlineSnapshot</h3><blockquote><p>内联快照和普通快照(<code>.snap</code> 文件)表现一致，只是会将快照值自动写会源代码中。 这意味着你可以从自动生成的快照中受益，并且不用切换到额外生成的快照文件中保证值的正确性。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.test.js</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateConfig InlineSnapShot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateConfig InlineSnapShot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完<code>npm run test</code> 你会发现，他没有在快照的单独文件中体现，而是在测试文件中体现，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateConfig InlineSnapShot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    {
      &quot;port&quot;: 8081,
      &quot;server&quot;: &quot;http://localhost&quot;,
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 generateAppConfig InlineSnapShot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">generateAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchInlineSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> expect<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span> <span class="token comment">// 这样再次进行快照测试时候，只要类型一致即可</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  {
    &quot;port&quot;: 8082,
    &quot;server&quot;: &quot;http://localhost&quot;,
    &quot;time&quot;: Any&lt;Date&gt;,
  }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-mock-深入学习" tabindex="-1"><a class="header-anchor" href="#_02-mock-深入学习" aria-hidden="true">#</a> 02: mock 深入学习</h2><p>之前我们通过这种方式来模拟异步请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.js</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 假设后端返回的数据：</span>
<span class="token comment">// {</span>
<span class="token comment">// data: &quot;(function (){ return &#39;123&#39; })()&quot;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.test.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetchData 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  axios<span class="token punctuation">.</span>get<span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;(function (){ return &#39;123&#39; })()&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟异步请求是需要时间的，如果请求多的话时间就很长，这时候可以在本地 mock 数据，在根目录下新建 <code>__mocks__</code> 文件夹，里面新建一个 <code>demo.js</code></p><p><img src="`+u+`" alt="img"></p><p>意思是准备使用 <code>__mocks__</code> 中的 <code>demo.js</code> 来替换我们需要测试的 <code>demo.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// __mocks__ 中的 demo.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolved<span class="token punctuation">,</span> rejects</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolved</span><span class="token punctuation">(</span><span class="token string">&quot;(function (){ return &#39;123&#39; })()&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在 mocks 中写成 promise 同步的函数，直接 resolved 返回数据，现在去修改 <code>demo.test.js</code> 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;./demo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetchData 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议将 <code>jest.mock(&#39;./demo&#39;)</code> 置顶，表示使用 jest 去模拟当前文件夹下的 demo 文件，jest 就会<strong>自动</strong>到 <code>__mocks__</code> 目录下去找 demo 文件，先模拟，再引入模块</p><p>这种模拟数据的方式，就<strong>不用</strong>去模拟 <strong>axios</strong> 这个库，而是去直接模拟 <strong>fetchData</strong> 这个方法</p><p>使用 mock 的文件来替换我们真实的文件，从一个异步请求转变为同步函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">unmock</span><span class="token punctuation">(</span><span class="token string">&#39;./demo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取消模拟，这样测试就不会通过，jest 就不会使用我们 mock 的数据，而是使用真实的 demo 发送一个请求</p><p>还可以通过配置文件的形式，不用在代码中写</p><p>先注释掉 <code>jest.mock(&#39;./demo&#39;)</code></p><p>修改 <code>jest.config.js</code> 文件，将 <strong>automock</strong> 设置为 <strong>true</strong>，默认 false，并解除注释</p><p>重启测试命令 <code>npm run test</code>，可以发现测试也是通过的</p><p>一旦设置了 <strong>automock: true</strong>，当我们导入方法的时候，会<strong>自动</strong>去找是否有 mock 目录，是否有 demo 这个文件，这和直接写 <strong>jest.mock</strong> 效果是一样的，这样当你 mock 的文件比较多的时候，就不用一行一行的 <strong>jest.mock</strong> 啦</p><p>如果我们需要测试两个函数，其中一个需要 mock，而另一个本身就是同步函数，不需要 mock，怎么写</p><p>先将 <strong>automock</strong> 改为 <strong>false</strong>，并且将 <code>jest.mock(&#39;./demo&#39;)</code> 还原，重启测试</p><p>这个时候在真实的 <code>demo.js</code> 中增加一个函数进行测试</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">123</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;getNumber 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存后测试用例是过不了的，因为我们的 <strong>demo</strong> 是通过 <strong>mock</strong> 替换的，mock 中我们并没有写 <strong>getNumber</strong> 这个函数</p><p><img src="`+r+`" alt="img"></p><p>实际上我们希望的是，如果该函数被 mock 了，就使用 mock 中的函数，如果没有，就使用真实文件中的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;./demo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> getNumber <span class="token punctuation">}</span> <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">requireActual</span><span class="token punctuation">(</span><span class="token string">&#39;./demo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fetchData 是通过我们 mock 文件中的函数，而 getNumber 则是使用 <code>jest.requireActual</code> 方法，从真实文件中引入的</p><p>这时测试就可以通过了</p>`,61),m={href:"https://jestjs.io/docs/en/mock-function-api",target:"_blank",rel:"noopener noreferrer"},b={href:"https://jestjs.io/docs/en/jest-object",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="_03-mock-timers" tabindex="-1"><a class="header-anchor" href="#_03-mock-timers" aria-hidden="true">#</a> 03: mock timers</h2><p>对于定时器函数，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// timer.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的测试代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> timer <span class="token keyword">from</span> <span class="token string">&#39;./timer&#39;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述代码，需要等到定时器到时间，也就是3s后才会打印成功。这样的话，时间太长。</p><p>修改测试代码如下: 这样运行时就会发现立即触发了回调</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> timer <span class="token keyword">from</span> <span class="token string">&#39;./timer&#39;</span>

jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">timer</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">runAllTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那接着我们修改<code>timer.js</code>内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候在运行<code>npm run test</code>就会发现报错，报错信息如下(愿因：runAllTimers 是运行所有的 timer)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ yarn test
 FAIL  ./timer.test.js
  ✕ timer 测试 (2 ms)

  ● timer 测试

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 2

       6 |   timer(fn)
       7 |   jest.runAllTimers()
    &gt;  8 |   expect(fn).toHaveBeenCalledTimes(1)
         |              ^
       9 | })
      10 |

      at Object.toHaveBeenCalledTimes (timer.test.js:8:14)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        0.314 s, estimated 1 s
Ran all test suites.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那有没有一种办法，只想运行当前需要执行的 timer 呢 ？比如我们只想立即执行最外层的 timer，那么测试用例该如下写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> timer <span class="token keyword">from</span> <span class="token string">&#39;./timer&#39;</span>

jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">timer</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">runOnlyPendingTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 我只运行在队列中即将被运行的 timer</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个更优秀的 Api:<code>advanceTimersByTime</code>, 先看修改后的测试代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> timer <span class="token keyword">from</span> <span class="token string">&#39;./timer&#39;</span>

jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">timer</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入3s后</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入3s后, 这里可以看到 这个时间快进，是在上一个快进基础上的</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此执行结果正常</p><p>如果说我们有多个呢，如果你害怕 timer 被混用，可以利用之前的 beforeEach</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> timer <span class="token keyword">from</span> <span class="token string">&#39;./timer&#39;</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 测试时，发现不加 beforeEach 同样不会报错，只是这样更稳妥些</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">timer</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token comment">// jest.runAllTimers()</span>
  <span class="token comment">// jest.runOnlyPendingTimers() // 我只运行在队列中即将被运行的 timer</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入3s后</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入3s后</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;timer1 测试&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">timer</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入2s后</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  jest<span class="token punctuation">.</span><span class="token function">advanceTimersByTime</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment">// 立即让时间进入3s后</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-【讨论题】jest-中的-mock-的实现" tabindex="-1"><a class="header-anchor" href="#_04-【讨论题】jest-中的-mock-的实现" aria-hidden="true">#</a> 04:【讨论题】Jest 中的 Mock 的实现</h2><h2 id="_05-es6-中类的测试" tabindex="-1"><a class="header-anchor" href="#_05-es6-中类的测试" aria-hidden="true">#</a> 05: ES6 中类的测试</h2><p>新创建如下文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// util.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span>  <span class="token class-name">Util</span> <span class="token punctuation">{</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 非常复杂</span>
    <span class="token comment">// 涉及到异步请求等</span>
  <span class="token punctuation">}</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 非常复杂</span>
    <span class="token comment">// 涉及到异步请求等</span>
  <span class="token punctuation">}</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 非常复杂</span>
    <span class="token comment">// 涉及到异步请求等</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.js</span>
<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&quot;./util&quot;</span>
<span class="token keyword">const</span> <span class="token function-variable function">demoFunction</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  util<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  util<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> demoFunction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// util.test.js</span>
<span class="token comment">// 这里我们对 util 的 a b 方法进行书写逻辑校验</span>
<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&quot;./util&quot;</span>
<span class="token keyword">let</span> util <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;测试 util 的 a 函数&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  util<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;测试 util 的 b 函数&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  util<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们写测试文件<code>demo.test.js</code></p><blockquote><p>注意：我们想测试 demoFuncton 但是其内部调用了 Util类，是非常复杂的过程，那么怎么去模拟呢？我们可以使用 jest.mock 类进行模拟调用</p><p>如果类太复杂，使用 <code>jest.mock</code> 可以帮助你在测试时模拟类的行为，从而使测试更加可控和可预测。下面是一些使用 <code>jest.mock</code> 实现对类的测试的步骤：</p><p>ps：如果引用的类太复杂，我们其实很多时候只需要知道它执行了这个方法即可，而没有必要真正的执行（具体的执行逻辑，在类的单独测试文件中进行测试）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&quot;./util&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 会自动提到最前面开始执行</span>

<span class="token comment">// jest.mock 发现 util 是一个类，会自动把类的构造函数和方法变成 jest.fn()，如下：</span>
<span class="token comment">// const Util = jest.fn()</span>
<span class="token comment">// Util.a = jest.fn()</span>
<span class="token comment">// Util.b = jest.fn()</span>
<span class="token comment">// Util.init = jest.fn()</span>

<span class="token keyword">import</span> demoFunction <span class="token keyword">from</span> <span class="token string">&quot;./demo&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&quot;./util&quot;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;测试 demoFunction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">demoFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里引申出一个 <strong>单元测试</strong> 和 <strong>集成测试</strong> 的概念</p><p>对于上述文件<code>demo.test.js</code> 中我们使用到了 util 类，但是并没有真正执行其中的代码逻辑，只是真正测试了 demo.ts 中的函数<code>demoFunction</code>，可以理解它为<strong>单元测试</strong>，由此我们可以知道，使用<code>jest.mock</code>可以提高单元测试性能，当然也包括其他手段</p><p>假如我们在上述代码中不仅仅对<code>demoFunction</code>做了测试，同时也对<code>util</code>中的<code>Util</code>类做了测试，可以理解为<code>集成测试</code>。</p><p>单元测试是测试和组装软件的系统化技术，主要目标是发现与接口有关的问题1。</p><p>集成测试，也叫组装测试或联合测试，是在单元测试的基础上将所有模块按照设计要求组装成为子系统或系统进行测试</p><p>当然除了上述方法我们还可以对他进行</p><ol><li>自定义模拟:</li></ol><ul><li>新建 <code>__mocks_</code>文件夹，增加<code>util.js</code>文件，内容如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Util <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Util</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token class-name">Util</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Util
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行<code>npm run test</code>，结果一切正常</p><ol start="2"><li>自定义模拟2</li></ol><blockquote><p>前提是删除 __mocks__文件夹，或者改名为 其他名字，就不会走此文件的数据</p></blockquote><p>修改<code>demo.test.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&quot;./util&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> Util <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token class-name">Util</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;__a&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token class-name">Util</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;__b&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Util
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> demoFunction <span class="token keyword">from</span> <span class="token string">&quot;./demo&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">&quot;./util&quot;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;测试 demoFunction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">demoFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行<code>npm run test</code>就可以看到运行正常，且相应的 log 都被打印了</p><h2 id="_06-jest-中对-dom-节点操作的测试" tabindex="-1"><a class="header-anchor" href="#_06-jest-中对-dom-节点操作的测试" aria-hidden="true">#</a> 06: Jest 中对 DOM 节点操作的测试</h2><blockquote><p>需要安装 <code>jest-environment-jsdom</code>， 并且配置 <code>jest.config.js</code> 中的 <code>testEnvironment: &#39;jsdom&#39;</code></p></blockquote><p>先安装 Jquery</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i jquery <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">addDivToBody</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div/&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> addDivToBody

<span class="token keyword">import</span> addDivToBody <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;测试 addDivToBody&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">addDivToBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">addDivToBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt="img"></p><p>在 <code>Jest</code> 里对 <code>Dom</code> 操作非常简单，<code>Jest</code> 实际是在 <code>Node</code> 的环境中，但 <code>Node</code> 本身不具备 <code>Dom</code></p><p>原因是 <code>Jest</code> 在 <code>Node</code> 中自己模拟了一套 <code>Dom API</code>，一般称作 <strong>jsDom</strong></p><p>这里不用 <code>JQuery</code>，直接使用 <code>document.getElementsByTagName</code> 这种原生 JS 的写法也是没问题的</p>',53);function f(j,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[v,s("p",null,[n("更多 mock 的细节可以参考官方文档 "),s("a",m,[n("mock-function-api"),t(a)]),n(" 和 "),s("a",b,[n("jest-object"),t(a)])]),g])}const x=e(d,[["render",f],["__file","index-03.html.vue"]]);export{x as default};
