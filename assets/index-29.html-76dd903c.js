import{_ as t,M as o,p as c,q as i,R as s,t as n,N as p,a1 as a}from"./framework-e8cb8151.js";const l={},r=a('<h1 id="_29-实战-使用-postcss-打造移动适配方案" tabindex="-1"><a class="header-anchor" href="#_29-实战-使用-postcss-打造移动适配方案" aria-hidden="true">#</a> 29 实战：使用 PostCSS 打造移动适配方案</h1><p>更新时间：2019-07-05 10:41:18</p><p><img src="https://img4.mukewang.com/5cd964a00001e41606400360.jpg" alt="img"></p><p>生活永远不像我们想像的那样好，但也不会像我们想像的那样糟。</p><p>——莫泊桑</p><p>在 Web 移动开发中，手机屏幕适配是个很大的话题，最开始做屏幕适配可以追溯到桌面页面（PC）阶段。随着电脑屏幕越来越大和 iPad 的出现，前端工程师需要适配不同的屏幕页面，当时最火的技术是响应式布局，即通过媒体查询（Media Queries）将主流的设备进行分类，根据设备屏幕宽度占比划分出来大中小等多个标准尺寸，然后设置不同的尺寸，这样做有两个缺点：</p><ol><li>并不能完美适配屏幕；</li><li>冗余代码较多，写起来还比较麻烦。</li></ol><p>随着 CSS 标准和浏览器的支持，REM+视口单位（Viewport units）方式越来越成熟，在移动端上可以用来做更好的适配方案。</p><h2 id="视口单位-viewport-units" tabindex="-1"><a class="header-anchor" href="#视口单位-viewport-units" aria-hidden="true">#</a> 视口单位（Viewport units）</h2><p>简单来说，视口指的是浏览器的可视区域。在桌面设备上，视口值得是浏览器的可视区域；但是移动设备上视口有三个不同的概念值，分别是 Layout Viewport（布局视口）、 Visual Viewport（视觉视口）、Ideal Viewport（理想视口）。</p><p>下面以 iPhone 6 为例来说明下移动设备中 Layout Viewport、 Visual Viewport、Ideal Viewport 的区别。</p><ul><li>Layout Viewport：这是浏览器设置 Viewport 元标签（meta）之后定义的一个虚拟布局视口，大小跟 web 页面可呈现的区域有关系；</li><li>Visual Viewport：物理设备的可视区域，物理像素来表示，iPhone 6 的物理像素值为 <code>750x1334</code>；</li><li>Ideal Viewport：这是我们通常说的屏幕分辨率，iPhone 6 的分辨率为<code>375x667</code>。</li></ul><blockquote><p>Tips：因为 iPhone 6 的屏幕分辨率为<code>375x667</code>而实际的物理像素为<code>750x1334</code>，所以一个分辨率的像素点实际等于 4 个物理像素点，即我们平时说的两倍屏（<code>@2x</code>），即 <code>dpr（Device Pixel Ratio）= 750/375 = 2</code>，即下图所示：</p></blockquote><p><img src="http://img.mukewang.com/5d077f1d0001f34005070271.png" alt="图片描述"> 视口单位根据设备不同，代表的意义不同。在桌面端，视口单位是浏览器的可视区域来划分的；但在移动端，它指的是<strong>布局视口</strong>（Layout Viewport）。CSS3 规范中，规定了四个视口单位：</p><ul><li>vw：<code>1vw</code> 等于视口宽度的 1%；</li><li>vh：<code>1vh</code> 等于视口高度的 1%；</li><li>vmin：选取 vw 和 vh 中最小的那个；</li><li>vmax：选取 vw 和 vh 中最大的那个。</li></ul><blockquote><p>Tips：很多朋友看到这里可能会觉得：视口单位看上去跟<code>%</code>单位一样？视口单位是<strong>依赖于视口的尺寸，根据视口尺寸的百分比来定义的</strong>，在页面的任意元素 1vw 的值是固定的；而<code>%</code>单位则是依赖于元素的祖先元素，不同的祖先元素，则<code>1%</code>值不同。</p></blockquote>',16),d={href:"https://caniuse.com/#search=vw",target:"_blank",rel:"noopener noreferrer"},u=a(`<p><img src="http://img.mukewang.com/5d077f2e0001029412600442.png" alt="图片描述"></p><blockquote><p>Tips：做过小程序开发的朋友，可能会想起 WXSS 中使用了 rpx 这个长度单位。rpx 是以小程序容器宽度（等于设备宽度）恒等于 750rpx 来做定义的，<code>rpx</code>跟 vw 值意义类似，都是相对于视口宽度的固定值。</p></blockquote><h2 id="rem-单位和-rem-布局" tabindex="-1"><a class="header-anchor" href="#rem-单位和-rem-布局" aria-hidden="true">#</a> rem 单位和 rem 布局</h2><p>下面再来介绍个 CSS3 规范中的新单位：rem（root em）。顾名思义，rem 是 em 的「变种」，是一个相对单位值，相对的元素是 <code>root</code>元素，即 HTML 标签的 <code>font-size</code>值，所以如果 HTML 的<code>font-size=14px</code>，则<code>1rem=14px</code>。</p><p>在来看看 rem 的兼容性：</p><p><img src="http://img.mukewang.com/5d077f530001799312580460.png" alt="图片描述"> rem 布局指的是页面固定宽高的元素使用 rem 来标示大小。<strong>rem 的本质是相对的等比例缩放，所以 rem 布局提供了等比例缩放的布局</strong>。</p><p>当我们拿到一张视觉稿，完成切图之后，需要在不同的浏览器能够实现等比例缩放。假设视觉稿宽度可以分为 100 份，每一份用<code>x</code>来表示，某个元素我们根据视觉稿测量宽高，并且在 CSS 中设置了宽高为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.sth</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 400x<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们的页面在不同屏幕宽度进行渲染的时候，我们需要上门的<code>x</code>单位能够根据不同的屏幕自动进行缩放（跟视觉稿等比例），这样我们就不需要写任何代码都可以适配不同宽度的设备屏幕了。根据前面提到的 <strong>rem 的本质是相对的等比例缩放</strong>，我们将宽高设置为<code>rem</code>的对应值，这样不管页面怎么变，我们 rem 会跟着其相对的值来进行变化，即根据<code>root</code>元素的<code>font-size</code>进行变化，即 HTML 的<code>font-size</code>。</p><p>所以，我们可以将 HTML 的<code>font-size</code>设置为：屏幕宽度的<code>1/100</code>：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">fons-size</span><span class="token punctuation">:</span> screen_width / 100<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.sth</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 400rem<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们还需要通过 JavaScript 来计算 HTML 元素<code>font-size</code>值，即下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是 rem 布局切图的原理。为了做好横屏竖屏的适配，还需要添加上视口宽度变化和横竖屏事件绑定，在视口宽度发生变化后，重新设置 HTML 的<code>font-size</code>。</p><h2 id="使用-vw-rem-postcss-实现移动页面适配方案" tabindex="-1"><a class="header-anchor" href="#使用-vw-rem-postcss-实现移动页面适配方案" aria-hidden="true">#</a> 使用 vw + rem + postcss 实现移动页面适配方案</h2><p>上面的 rem 布局切图中，我们做了一个假设，假设存在一个单位<code>x</code>值为宽度的 1/100，后来这个<code>x</code>值是经过 JavaScript 来计算得到的，那么我们学习了视口单位的概念之后，应该很快想到：我们不需要计算 HTML 的 font-size 啊，直接用 1vw 不就行了吗？1vw 就是我们假设的单位<code>x</code>啊！</p><p>所以，在视口单位的兼容性做得还不够好的时候，rem 是最好的解决方案。而当设备浏览器升级之后，视口单位已经做了很好的支持，我们完全可以省掉计算 html font-size 的步骤，直接使用<code>vw</code>来布局。</p><p>为了兼容两者，我们在实际开发中，采用了<code>vw</code>+<code>rem</code>的布局方式，同时配合 postcss 的插件，可以直接使用视觉稿的实际尺寸来进行布局计算，这样减少了我们转换单位的时间，也不需要考虑兼容性问题，极大地提升了我们的开发效率和开发体验。下面来详细介绍下我们项目中使用的移动页面适配方案。</p><p>首先前面提到了，vw 的浏览器兼容性不如 rem 好，所以我们需要使用 JavaScript 来做好兼容，支持 vw 的则设置 html font-size 为<code>1vw</code>，不支持的则设置为<code>clinetWidth/100</code>。然后页面布局的时候，还是使用 rem 来计算尺寸：</p><ol><li>如果支持 vw，那么 1rem 实际等于 1vw，相当于我们直接使用了 vw 单位；</li><li>不支持 vw，1rem 等于<code>clientWidth / 100</code>，相当于自己实现了 vw 单位。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此段代码需要放到html页面 head 中</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> win</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个元素，检测是否支持1vw</span>
  <span class="token keyword">var</span> dummy <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style
  dummy<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;1vw&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dummy<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置root fontsize 为1vw</span>
    doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&#39;1vw&#39;</span>
    <span class="token comment">// 支持就不在做处理</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果不支持，那么就用 JavaScript 来计算 font-size</span>
  <span class="token keyword">var</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">,</span>
    resizeEvt <span class="token operator">=</span> <span class="token string">&#39;orientationchange&#39;</span> <span class="token keyword">in</span> win <span class="token operator">?</span> <span class="token string">&#39;orientationchange&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">recalc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> clientWidth <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clientWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> clientWidth <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// 初始化 font-size</span>
  <span class="token function">recalc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 添加事件绑定</span>
  win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>resizeEvt<span class="token punctuation">,</span> recalc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),k=s("code",null,"pr",-1),m=s("code",null,"pr",-1),v={href:"https://www.npmjs.com/package/postcss-plugin-pr2rem",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"1242px",-1),h=s("code",null,"621px",-1),g=s("code",null,"font-size=1vw",-1),w=a(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 621pr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f={href:"https://www.npmjs.com/package/postcss-plugin-pr2rem",target:"_blank",rel:"noopener noreferrer"},y=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> postcss-plugin-pr2rem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),x={href:"https://www.npmjs.com/package/postcss-plugin-pr2rem",target:"_blank",rel:"noopener noreferrer"},_=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pr2rem <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-plugin-pr2rem&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> pr2remConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设计图为1242px，一份 root 对应着rootWidth/100=12.42px</span>
  <span class="token literal-property property">rootValue</span><span class="token operator">:</span> <span class="token number">12.42</span><span class="token punctuation">,</span>
  <span class="token comment">// 这里是基本单位，前面设置了1vw</span>
  <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">propWhiteList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">propBlackList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;font-size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">selectorBlackList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ignoreIdentifier</span><span class="token operator">:</span> <span class="token string">&#39;00&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">pr2rem</span><span class="token punctuation">(</span>pr2remConfig<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么执行 Webpack 打包之后，对应的代码变成：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* input */</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 621pr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* output */</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要介绍 vw 和 rem 两个 css3 规范的新单位，并且通过介绍 rem 布局原理，逐步推导出使用<code>vw</code>+<code>rem</code>的新移动适配方案，最后介绍了使用 Webpack 和 postcss 插件来实现自动转换 rem 的方式。</p><blockquote><p>本小节 Webpack 相关面试题：</p><p>你们项目是怎么实现移动屏幕适配的？</p></blockquote>`,6);function S(z,V){const e=o("ExternalLinkIcon");return c(),i("div",null,[r,s("p",null,[n("既然是 CSS3 规范的新单位，所以需要看下移动设备上的支持情况，下面是 "),s("a",d,[n("caniuse.com 网站"),p(e)]),n("上对视口单位支持情况：")]),u,s("p",null,[n("在我们实际项目中，为了区分 rem 和 vw，专门引入了一个新的单位"),k,n("（再次类似小程序的 rpx），这样我们写 pr 的时候，经过 postcss 处理会被转换成对应的 rem，而不是直接写 rem（防止混淆，万一真的用到 rem 或者 vw 呢），为了转换"),m,n("单位，这里引入了一个 postcss 插件："),s("a",v,[n("postcss-plugin-pr2rem"),p(e)]),n("。假设我们拿到一个以 iPhone 6 Plus 为基准的视觉稿，宽度为 "),b,n("，视觉稿上有个 "),h,n(" 宽度的 div，那么 html "),g,n("，所以我们写 CSS 则根据实际宽度来写：")]),w,s("p",null,[n("然后安装"),s("a",f,[n("postcss-plugin-pr2rem"),p(e)]),n("，")]),y,s("p",null,[n("并在 postcsss.config.js 中配置 "),s("a",x,[n("postcss-plugin-pr2rem"),p(e)]),n("：")]),_])}const E=t(l,[["render",S],["__file","index-29.html.vue"]]);export{E as default};
