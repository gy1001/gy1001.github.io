import{_ as e,p as o,q as r,a1 as t}from"./framework-e8cb8151.js";const n={},p=t('<h1 id="_06-设计原则" tabindex="-1"><a class="header-anchor" href="#_06-设计原则" aria-hidden="true">#</a> 06-设计原则</h1><blockquote><p>学习这件事不在乎有没有人教你，最重要的是在于你自己有没有觉悟和恒心。 —— 法布尔</p></blockquote><p>在前文我们介绍了面向对象三大特性之继承，本文将主要介绍面向对象六大原则中的单一职责原则（SRP）、开放封闭原则（OCP）、最少知识原则（LKP）。</p><p><strong>设计原则是指导思想</strong>，从思想上给我们指明程序设计的正确方向，是我们在开发设计过程中应该尽力遵守的准则。而<strong>设计模式是实现手段</strong>，因此设计模式也应该遵守这些原则，或者说，设计模式就是这些设计原则的一些具体体现。要达到的目标就是<strong>高内聚低耦合</strong>，高内聚是说模块内部要高度聚合，是模块内部的关系，低耦合是说模块与模块之间的耦合度要尽量低，是模块与模块间的关系。</p><p>注意，遵守设计原则是好，但是过犹不及，在实际项目中我们不要刻板遵守，需要根据实际情况灵活运用。</p><blockquote><p><strong>注意：</strong> 本文属于基础篇，如果你已经对本文相关知识点已经很了解了，那么可以跳过本文。如果你不够了解，或者了解的还不完整，那么可以通过本文来复习一下 ~</p></blockquote><h2 id="_1-单一职责原则-srp" tabindex="-1"><a class="header-anchor" href="#_1-单一职责原则-srp" aria-hidden="true">#</a> 1. 单一职责原则 SRP</h2><p>单一职责原则 （<code>Single Responsibility Principle, SRP</code>）是指对一个类（方法、对象，下文统称对象）来说，应该仅有一个引起它变化的原因。也就是说，<strong>一个对象只做一件事</strong>。</p><p>单一职责原则可以让我们对对象的维护变得简单，如果一个对象具有多个职责的话，那么如果一个职责的逻辑需要修改，那么势必会影响到其他职责的代码。如果一个对象具有多种职责，职责之间相互耦合，对一个职责的修改会影响到其他职责的实现，这就是属于模块内低内聚高耦合的情况。负责的职责越多，耦合越强，对模块的修改就越来越危险。</p><p><strong>优点：</strong></p><ul><li><p>降低单个类（方法、对象）的复杂度，提高可读性和可维护性，功能之间的界限更清晰；</p></li><li><p>类（方法、对象）之间根据功能被分为更小的粒度，有助于代码的复用；</p></li></ul><p><strong>缺点：</strong></p><ul><li>增加系统中类（方法、对象）的个数，实际上也增加了这些对象之间相互联系的难度，同时也引入了额外的复杂度。</li></ul><h2 id="_2-开放封闭原则-ocp" tabindex="-1"><a class="header-anchor" href="#_2-开放封闭原则-ocp" aria-hidden="true">#</a> 2. 开放封闭原则 OCP</h2><p>开放封闭原则 （<code>Open－Close Principle, OCP</code>）是指一个模块在扩展性方面应该是开放的，而在更改性方面应该是封闭的，也就是<strong>对扩展开放，对修改封闭</strong>。</p><p>当需要增加需求的时候，则尽量通过扩展新代码的方式，而不是修改已有代码。因为修改已有代码，则会给依赖原有代码的模块带来隐患，因此修改之后需要把所有依赖原有代码的模块都测试一遍，修改一遍测试一遍，带来的成本很大，如果是上线的大型项目，那么代价和风险可能更高。</p><p><strong>优点：</strong></p><ul><li>增加可维护性，避免因为修改给系统带来的不稳定性。</li></ul><h2 id="_3-最少知识原则-lkp" tabindex="-1"><a class="header-anchor" href="#_3-最少知识原则-lkp" aria-hidden="true">#</a> 3. 最少知识原则 LKP</h2><p>最少知识原则 （<code>Least Knowledge Principle, LKP</code>）又称为迪米特原则 （<code>Law of Demeter, LOD</code>），<strong>一个对象应该对其他对象有最少的了解</strong>。</p><p>通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p><p>通常为了减少对象之间的联系，是通过引入一个第三者来帮助进行通信，阻隔对象之间的直接通信，从而减少耦合。</p><p><strong>优点：</strong></p><ul><li>降低类（方法、对象）之间不必要的依赖，减少耦合。</li></ul><p><strong>缺点：</strong></p><ul><li>类（方法、对象）之间不直接通信也会经过一个第三者来通信，那么就要权衡引入第三者带来的复杂度是否值得。</li></ul>',26),s=[p];function i(l,a){return o(),r("div",null,s)}const d=e(n,[["render",i],["__file","index-06.html.vue"]]);export{d as default};
