import{_ as p,M as o,p as c,q as i,R as n,t as s,N as e,a1 as a}from"./framework-e8cb8151.js";const l="/assets/知识体系-d351c02a.png",u="/assets/TCP三次握手和四次挥手-af3b68d0.png",r="/assets/options-389c2c31.png",d={},k=a('<h1 id="_04-前端基础知识-必知必会" tabindex="-1"><a class="header-anchor" href="#_04-前端基础知识-必知必会" aria-hidden="true">#</a> 04-前端基础知识 ， 必知必会</h1><h2 id="_01-前端知识体系导图" tabindex="-1"><a class="header-anchor" href="#_01-前端知识体系导图" aria-hidden="true">#</a> 01: 前端知识体系导图</h2><h3 id="什么是知识体系" tabindex="-1"><a class="header-anchor" href="#什么是知识体系" aria-hidden="true">#</a> 什么是知识体系</h3><p>完善的知识范围，包含了前端工程师常用的所有知识点 合理的结构化，便于理解和记忆</p><h3 id="主要模块" tabindex="-1"><a class="header-anchor" href="#主要模块" aria-hidden="true">#</a> 主要模块</h3><ul><li>计算机基础，如算法、数据结构、设计模式等</li><li>前端基础知识，如 HTML JS 语法和 API 等</li><li>网络，如 HTTP 协议</li><li>开发流程，如打包构建、CI/CD</li><li>前端框架，常见的 Vue React 及其周边工具</li><li>运行和监控，如安全、性能优化</li></ul><h3 id="详细内容" tabindex="-1"><a class="header-anchor" href="#详细内容" aria-hidden="true">#</a> 详细内容</h3>',7),v={href:"https://github.com/wangfupeng1988/what-is-fe",target:"_blank",rel:"noopener noreferrer"},h=a('<p><img src="'+l+`" alt=""></p><h2 id="_02-开始-学习要点和注意事项" tabindex="-1"><a class="header-anchor" href="#_02-开始-学习要点和注意事项" aria-hidden="true">#</a> 02-开始-学习要点和注意事项</h2><h3 id="前端基础知识" tabindex="-1"><a class="header-anchor" href="#前端基础知识" aria-hidden="true">#</a> 前端基础知识</h3><p>HTML CSS JS HTTP 等基础知识是前端面试的第一步，基础知识不过关将直接被拒。本章将通过多个面试题，讲解前端常考的基础知识面试题，同时复习一些重要的知识点。</p><h3 id="为何要考察" tabindex="-1"><a class="header-anchor" href="#为何要考察" aria-hidden="true">#</a> 为何要考察</h3><p>扎实的前端基础知识，是作为前端工程师的根本。基础知识能保证最基本的使用，即招聘进来能干活，能产出。</p><h3 id="考察的重点" tabindex="-1"><a class="header-anchor" href="#考察的重点" aria-hidden="true">#</a> 考察的重点</h3><ul><li>HTML CSS JS 基础知识</li><li>HTTP Ajax 基础知识</li><li>Vue 等框架的基本应用</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p>不会从 0 基础讲起，基础不熟悉可以向讲师提问</p><h3 id="看几个面试题" tabindex="-1"><a class="header-anchor" href="#看几个面试题" aria-hidden="true">#</a> 看几个面试题</h3><ul><li>Ajax Fetch Axios 的区别</li><li>箭头函数的缺点，哪里不能用箭头函数？</li><li>Vue 组件通讯方式有几种？尽量说全面</li><li>等等</li></ul><h2 id="_03-ajax-fetch-axios-三者有什么区别" tabindex="-1"><a class="header-anchor" href="#_03-ajax-fetch-axios-三者有什么区别" aria-hidden="true">#</a> 03：Ajax-Fetch-Axios 三者有什么区别</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>ajax fetch axios 的区别</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>三者根本没有可比性，不要被题目搞混了。要说出他们的本质</p><p>三者都是用于网络请求，但是不同维度</p><h3 id="传统-ajax" tabindex="-1"><a class="header-anchor" href="#传统-ajax" aria-hidden="true">#</a> 传统 ajax</h3><p>AJAX （几个单词首字母，按规范应该大写） - Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）<br> 即使用 JS 进行异步请求，是 Web2.0 的技术基础，从 2005 年左右开始发起。<br> 所以，这里的 AJAX 就是一个称呼，一个缩写。</p><p>基于当时 JS 规范，异步请求主要使用 XMLHttpRequest 这个底层 API 。<br> 所以，有一道常考的面试题：<strong>请用 XMLHttpRequest 实现 ajax</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> successFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里的函数异步执行，可参考之前 JS 基础中的异步模块</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">successFn</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> fetch</h3><ul><li><p><code>fetch</code> 是一个原生 <code>API</code> ，它和 <code>XMLHttpRequest</code> 一个级别。</p></li><li><p><code>fetch</code> 和 <code>XMLHttpRequest</code> 的区别</p><ul><li><p>写法更加简洁</p></li><li><p>原生支持 <code>promise</code></p></li></ul></li></ul><p><strong>面试题：用 fetch 实现一个 ajax</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> axios</h3>`,27),m={href:"https://www.npmjs.com/package/axios",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Vue",-1),g=n("code",null,"jquery",-1),f=n("code",null,"jquery",-1),y=n("code",null,"ajax",-1),x=n("li",null,[n("p",null,[s("axios 内部可以用 "),n("code",null,"XMLHttpRequest"),s(" 或者 "),n("code",null,"fetch"),s(" 实现。")])],-1),w=a(`<h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><ul><li>ajax 是一种技术称呼，不是具体的 API 和库</li><li>fetch 是新的异步请求 API ，可代替 XMLHttpRequest</li><li>axios 是第三方库</li></ul><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><ul><li>注意 库 和 API 的区别</li><li>实际项目要用库，尽量不要自己造轮子（除非有其他目的）</li><li>但是阅读源码、造轮子是很好的个人的学习方式</li></ul><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><p>库 和 框架 有什么区别？</p><h2 id="_04-防抖和节流有什么区别-分别用于什么场景" tabindex="-1"><a class="header-anchor" href="#_04-防抖和节流有什么区别-分别用于什么场景" aria-hidden="true">#</a> 04：防抖和节流有什么区别，分别用于什么场景</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><ul><li><p>节流和防抖有何区别？</p></li><li><p>分别用于什么场景？</p></li></ul><h3 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖" aria-hidden="true">#</a> 防抖</h3><p>防抖，即防止抖动。抖动着就先不管它，等啥时候静止了，再做操作。</p><p>例如，一个搜索输入框，等输入停止之后，自动执行搜索。</p><p>代码参考</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>debounce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    搜索 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>

          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 透传 this 和参数</span>
            timer <span class="token operator">=</span> <span class="token number">0</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> input1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;input1&#39;</span><span class="token punctuation">)</span>
      input1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
        <span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span>
        <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发起搜索&#39;</span><span class="token punctuation">,</span> input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">300</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节流" tabindex="-1"><a class="header-anchor" href="#节流" aria-hidden="true">#</a> 节流</h3><ul><li>节流，即节省交互沟通。流，可理解为交流，不一定会产生网络流量。</li><li>别急，一个一个来，按照时间节奏来，插队者无效</li></ul><p>例如，drag 的回调，上传进度的回调，都可以设置一个固定的频率，没必要那么频繁。</p><p>代码参考</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>throttle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>throttle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">&quot;</span></span></span>
    <span class="token punctuation">&gt;</span></span>
      可拖拽
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>

          timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
            timer <span class="token operator">=</span> <span class="token number">0</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div1&#39;</span><span class="token punctuation">)</span>
      div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
        <span class="token string">&#39;drag&#39;</span><span class="token punctuation">,</span>
        <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;鼠标的位置&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>防抖和节流都用于处理频繁触发的操作，优化操作体验。</li><li>节流：限制执行频率，有节奏的执行</li><li>防抖：限制执行次数，多次密集的触发执行一次</li><li>节流关注“过程”，防抖关注“结果”</li></ul><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>抓住“触发频率”是否固定，即可抓住重点</li><li>实际项目推荐使用 lodash</li></ul><h2 id="_05-px-em-rem-vw-vh-有什么区别" tabindex="-1"><a class="header-anchor" href="#_05-px-em-rem-vw-vh-有什么区别" aria-hidden="true">#</a> 05: px-%-em-rem-vw-vh 有什么区别</h2><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p>px % em rem vw/vh 的区别</p><h3 id="px" tabindex="-1"><a class="header-anchor" href="#px" aria-hidden="true">#</a> px</h3><ul><li>像素，基本单位,绝对单位（其他的都是相对单位）</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> %</h3><ul><li>相对于父元素的尺寸。</li></ul><p>如根据 <code>position: absolute;</code> 居中显示时，需要设置 <code>left: 50%</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -50p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="em" tabindex="-1"><a class="header-anchor" href="#em" aria-hidden="true">#</a> em</h3><p>相对于当前元素的 <code>font-size</code>。首行缩进可以使用 <code>text-indent: 2em</code>。</p><p><strong>很多人错误以为是根据父类元素，实际上是使用它的元素继承了父类的属性才会产生的错觉</strong></p><h3 id="rem" tabindex="-1"><a class="header-anchor" href="#rem" aria-hidden="true">#</a> rem</h3><p>rem = root em</p><p>相对于根元素的 <code>font-size</code> 。可以根据媒体查询，设置根元素的 <code>font-size</code> ，实现移动端适配。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 374px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* iphone5 或者更小的尺寸，以 iphone5 的宽度（320px）比例设置 font-size */</span>
  <span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 86px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 413px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* iphone6/7/8 和 iphone x */</span>
  <span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* iphone6p 或者更大的尺寸，以 iphone6p 的宽度（414px）比例设置 font-size */</span>
  <span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 110px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vw-vh" tabindex="-1"><a class="header-anchor" href="#vw-vh" aria-hidden="true">#</a> vw/vh</h3><ul><li><code>vw</code> 屏幕宽度的 1%</li><li><code>vh</code> 屏幕高度的 1%</li><li><code>vmin</code> 两者最小值</li><li><code>vmax</code> 两者最大值</li></ul><h2 id="_06-什么时候不能使用箭头函数" tabindex="-1"><a class="header-anchor" href="#_06-什么时候不能使用箭头函数" aria-hidden="true">#</a> 06: 什么时候不能使用箭头函数</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><ul><li>箭头函数的缺点</li><li>什么时候不能使用箭头函数？</li></ul><h3 id="箭头函数的缺点" tabindex="-1"><a class="header-anchor" href="#箭头函数的缺点" aria-hidden="true">#</a> 箭头函数的缺点</h3><ul><li><p>没有 arguments</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 报错，arguments is not defined</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>无法通过 call apply bind 等改变 this</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>简写的函数会变得难以阅读</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b <span class="token operator">:</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="不适用箭头函数的场景" tabindex="-1"><a class="header-anchor" href="#不适用箭头函数的场景" aria-hidden="true">#</a> 不适用箭头函数的场景</h3><ul><li><p>对象方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;双越&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>扩展对象原型（包括构造函数的原型）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;双越&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 报错 Foo is not a constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>动态上下文中的回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn1&#39;</span><span class="token punctuation">)</span>
btn1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(this === window)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;clicked&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 生命周期和方法(本质上同第一个，是一个对象的方法)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;双越&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 报错 Cannot read properties of undefined (reading &#39;name&#39;)</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// getName() {</span>
        <span class="token comment">//     return this.name // 正常</span>
        <span class="token comment">// }</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 报错 Cannot read properties of undefined (reading &#39;name&#39;)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// mounted() {</span>
    <span class="token comment">//     console.log(&#39;msg&#39;, this.name) // 正常</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>【注意】class 中使用箭头函数则<strong>没问题</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getName&#39;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>所以，在 React 中可以使用箭头函数</p><blockquote><p>Vue 组件本质上一个 JS 对象</p><p>React 组件(非 hooks)它本质上是一个 ES6 Class</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;双越&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>printName<span class="token punctuation">}</span><span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">printName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h3><h4 id="箭头函数的缺点-1" tabindex="-1"><a class="header-anchor" href="#箭头函数的缺点-1" aria-hidden="true">#</a> 箭头函数的缺点</h4><ul><li>arguments 参数</li><li>无法改变 this</li></ul><h4 id="不适用的场景" tabindex="-1"><a class="header-anchor" href="#不适用的场景" aria-hidden="true">#</a> 不适用的场景</h4><ul><li>对象方法</li><li>对象原型</li><li>构造函数</li><li>动态上下文</li><li>Vue 生命周期和方法</li></ul><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>要熟练使用箭头函数，但是也要对函数 this arguments 敏感</li><li>传统 Vue 组件是一个对象，而 传统 React 组件是一个 class, 两者不同（如果不考虑 Composition API 和 Hooks）</li></ul><h2 id="_07-请描述-tcp-三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#_07-请描述-tcp-三次握手和四次挥手" aria-hidden="true">#</a> 07：请描述 TCP 三次握手和四次挥手</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>请描述 TCP 连接的 三次握手 和 四次挥手</p><h3 id="建立-tcp-连接" tabindex="-1"><a class="header-anchor" href="#建立-tcp-连接" aria-hidden="true">#</a> 建立 TCP 连接</h3><p>客户端和服务端通过 HTTP 协议发送请求，并获取内容。</p><p>在发送请求之前，需要先建立连接，确定目标机器处于可接受请求的状态。<br> 就例如，你要请快递员（第三方的）去张三家取一个东西，你必须先打电话问问他在不在家。这就是建立连接的过程。</p><p>HTTP 协议是一个应用层的协议，它只规定了 req 和 res 的数据格式，如状态码、header、body 等。<br> 而建立网络连接需要更加底层的 TCP 协议。</p><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h3><p>三次握手，即建立一次 TCP 连接时，客户端和服务端总共需要发送 3 个包。</p><p>先举一个例子。还是你要派人去张三家取一个东西，现在你要发短信（不是打电话）“建立连接”，至少需要 3 个步骤，缺一不可。</p><ul><li>你：在家吗？</li><li>张三：在家</li><li>你：好，这就过去（然后你指派人上门，张三准备迎接）</li></ul><p>过程</p><ul><li>客户端发包，服务端收到。服务端确认：客户端的发送能力是正常的。</li><li>服务端发包，客户端收到。客户端确认：服务端的接收能力是正常的。</li><li>客户端发包，服务端收到。服务端确认：客户端即将给我发送数据，我要准备接收。</li></ul><p>建立连接完成，然后就开始发送数据，通讯。</p><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a> 四次挥手</h3><p>握手，是建立连接。挥手，就是告别，就是关闭连接。</p><p>还是之前的例子。取东西，不一定一次就取完，可能要来回很多次。而且，也不一定全部由你主动发起，过程中张三也可能会主动派人给你发送。<br> 即，你在 chrome 中看到的是一次 http 请求，其实背后可能需要好几次网络传输，只不过浏览器给合并起来了。</p><p>好了，取东西完毕了，你要发短信“关闭连接”，告诉张三可以关门了，需要 4 个步骤。<br> 【注意】这里你需要等着确认张三关门，才算是完全关闭连接，不能你说一声就不管了。跟日常生活不一样。</p><ul><li>你：完事儿了</li><li>张三：好的 （此时可能还要继续给你发送，你也得继续接收。直到张三发送完）</li><li>张三：我发送完毕，准备关门了</li><li>你：好，关门吧 （然后你可以走了，张三可以关门了，连接结束）</li></ul><p>过程</p><ul><li>客户端发包，服务端接收。服务端确认：客户端已经请求结束</li><li>服务端发包，客户端接收。客户端确认：服务端已经收到，我等待它关闭</li><li>服务端发包：客户端接受。客户端确认：服务端已经发送完成，可以关闭</li><li>客户端发包，服务端接收。服务端确认：可以关闭了</li></ul><h3 id="图示" tabindex="-1"><a class="header-anchor" href="#图示" aria-hidden="true">#</a> 图示</h3><p><img src="`+u+`" alt=""></p><h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>握手是链接，挥手是告别</li><li>不必追求深入的细节</li></ul><h2 id="_07-js-中-for-in-和-for-of-有什么区别" tabindex="-1"><a class="header-anchor" href="#_07-js-中-for-in-和-for-of-有什么区别" aria-hidden="true">#</a> 07: JS 中 for-in 和 for-of 有什么区别</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p>for...in 和 for...of 的区别</p><h3 id="key-和-value" tabindex="-1"><a class="header-anchor" href="#key-和-value" aria-hidden="true">#</a> key 和 value</h3><ul><li><p>for...in 遍历得到 key</p></li><li><p>for...of 遍历得到 value</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> s <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> argument <span class="token keyword">of</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token comment">// for...of 可以获取 value ，而 for...in 获取 key</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> pList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// for...of 可以获取 value ，而 for...in 获取 key</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="是用于不同的数据类型" tabindex="-1"><a class="header-anchor" href="#是用于不同的数据类型" aria-hidden="true">#</a> 是用于不同的数据类型</h3><ul><li>遍历对象：for...in 可以，for...of 不可以</li><li>遍历 Map、Set: for...in 不可以， for...of 可以</li><li>遍历 Generator: for...in 不可以， for...of 可以</li></ul><h4 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象" aria-hidden="true">#</a> 遍历对象</h4><p>for...in 可以遍历对象，for...of 不可以</p><h4 id="遍历-map-set" tabindex="-1"><a class="header-anchor" href="#遍历-map-set" aria-hidden="true">#</a> 遍历 Map/Set</h4><p>for...of 可以遍历 Map/Set ，for...in 不可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> set1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> map1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="遍历-generator" tabindex="-1"><a class="header-anchor" href="#遍历-generator" aria-hidden="true">#</a> 遍历 generator</h4><p>for...of 可遍历 generator ，for...in 不可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token number">10</span>
  <span class="token keyword">yield</span> <span class="token number">20</span>
  <span class="token keyword">yield</span> <span class="token number">30</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> o <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可枚举-vs-可迭代" tabindex="-1"><a class="header-anchor" href="#可枚举-vs-可迭代" aria-hidden="true">#</a> 可枚举 VS 可迭代</h3><ul><li>for...in 用于<strong>可枚举</strong>数据，如 对象、数组、字符串</li><li>for...of 用于<strong>可迭代</strong>数据，如 数组、字符串、Map、Set</li></ul><h4 id="对象的可枚举属性" tabindex="-1"><a class="header-anchor" href="#对象的可枚举属性" aria-hidden="true">#</a> 对象的可枚举属性</h4><p>for...in 遍历一个对象的可枚举属性。</p><p>使用 <code>Object.getOwnPropertyDescriptors(obj)</code> 可以获取对象的所有属性描述，看 <code> enumerable: true</code> 来判断该属性是否可枚举。</p><p>对象，数组，字符传</p><h4 id="可迭代对象" tabindex="-1"><a class="header-anchor" href="#可迭代对象" aria-hidden="true">#</a> 可迭代对象</h4><p>for...of 遍历一个可迭代对象。<br> 其实就是迭代器模式，通过一个 <code>next</code> 方法返回下一个元素。</p><p>该对象要实现一个 <code>[Symbol.iterator]</code> 方法，其中返回一个 <code>next</code> 函数，用于返回下一个 value（不是 key）。<br> 可以执行 <code>arr[Symbol.iterator]()</code> 看一下。</p><p>JS 中内置迭代器的类型有 <code>String</code> <code>Array</code> <code>arguments</code> <code>NodeList</code> <code>Map</code> <code>Set</code> <code>generator</code> 等。</p><h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><ul><li>for...in 遍历一个对象的可枚举属性，如对象、数组、字符串。针对属性，所以获得 key</li><li>for...of 遍历一个可迭代对象，如数组、字符串、Map/Set 。针对一个迭代对象，所以获得 value</li></ul><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> 划重点</h3><p>“枚举” “迭代” 都是计算机语言的一些基础术语，目前搞不懂也没关系。<br> 但请一定记住 for...of 和 for...in 的不同表现。</p><h2 id="_08-连环问-for-await-of" tabindex="-1"><a class="header-anchor" href="#_08-连环问-for-await-of" aria-hidden="true">#</a> 08: 连环问：for await...of</h2><ul><li><p>用于遍历异步请求的可迭代对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 像定义一个创建 promise 的函数</span>
<span class="token keyword">function</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你明确知道有几个 promise 对象，那直接处理即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> p1
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>n
  <span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> p2
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你有一个对象，里面有 N 个 promise 对象，你可以这样处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

  <span class="token comment">// 第一，使用 Promise.all 执行</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 第二，使用 for await ... of 遍历执行</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 注意，如果用 for...of 只能遍历出各个 promise 对象，而不能触发 await 执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>【注意】如果你想顺序执行，只能延迟创建 promise 对象，而不能及早创建。即，你创建了 promise 对象，它就立刻开始执行逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
  <span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createTimeoutPromise</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;v&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_09-offsetheight-scrollheight-clientheight-有什么区别" tabindex="-1"><a class="header-anchor" href="#_09-offsetheight-scrollheight-clientheight-有什么区别" aria-hidden="true">#</a> 09: offsetHeight-scrollHeight-clientHeight 有什么区别</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p>offsetHeight scrollHeight clientHeight 区别</p><h3 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h3><ul><li>width height</li><li>padding</li><li>border</li><li>margin</li><li><strong>box-sizing</strong></li></ul><h3 id="offsetheight-offsetwidth" tabindex="-1"><a class="header-anchor" href="#offsetheight-offsetwidth" aria-hidden="true">#</a> offsetHeight offsetWidth</h3><p>包括：border + padding + content</p><h3 id="clientheight-clientwidth" tabindex="-1"><a class="header-anchor" href="#clientheight-clientwidth" aria-hidden="true">#</a> clientHeight clientWidth</h3><p>包括：padding + content</p><h3 id="scrollheight-scrollwidth" tabindex="-1"><a class="header-anchor" href="#scrollheight-scrollwidth" aria-hidden="true">#</a> scrollHeight scrollWidth</h3><p>包括：padding + 实际内容的尺寸</p><h3 id="scrolltop-scrollleft" tabindex="-1"><a class="header-anchor" href="#scrolltop-scrollleft" aria-hidden="true">#</a> scrollTop scrollLeft</h3><p>DOM 内部元素滚动的距离</p><h3 id="答案-4" tabindex="-1"><a class="header-anchor" href="#答案-4" aria-hidden="true">#</a> 答案</h3><ul><li>offsetHeight = border + padding + content</li><li>clientHeight = padding + content</li><li>scrollHeight = padding + 实际内容的高度</li></ul><h3 id="代码参考" tabindex="-1"><a class="header-anchor" href="#代码参考" aria-hidden="true">#</a> 代码参考</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>offsetHeight<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">*</span> <span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #f1f1f1<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#container</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 5px solid #ccc<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector">#content</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #f1f1f1<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>offsetHeight<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>offsetHeight scrollHeight clientHeight 区别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;offsetHeight&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;offsetWidth&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clientWidth&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clientHeight&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;scrollWidth&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;scrollHeight&#39;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span>

      <span class="token comment">// scrollTop scrollLeft 需滚动之后获取</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-htmlcollection-和-nodelist-有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-htmlcollection-和-nodelist-有什么区别" aria-hidden="true">#</a> 10：HTMLCollection 和 NodeList 有什么区别</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> 题目</h3><p>HTMLCollection 和 NodeList 的区别，Node 和 Element 的区别</p><h3 id="node-和-element" tabindex="-1"><a class="header-anchor" href="#node-和-element" aria-hidden="true">#</a> Node 和 Element</h3><ul><li><p>DOM 结构是一棵树，树的所有节点都是 <code>Node</code>, 包括：document，元素，文本，注释，fragment 等</p></li><li><p>Node 是 Element 的基类</p></li><li><p><code>Element</code> 继承于 Node，它是所有 html 元素的基类，如 <code>HTMLParagraphElement</code> <code>HTMLDivElement</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// document</span>
<span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DocumentFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 文本和注释</span>
<span class="token keyword">class</span> <span class="token class-name">CharacterData</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">CharacterData</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token keyword">extends</span> <span class="token class-name">CharacterData</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// elem</span>
<span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HTMLElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HTMLParagraphElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HTMLDivElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// ... 其他 elem ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="htmlcollection-和-nodelist" tabindex="-1"><a class="header-anchor" href="#htmlcollection-和-nodelist" aria-hidden="true">#</a> HTMLCollection 和 NodeList</h3><p>HTMLCollection 是 Element 集合，它由获取 Element 的 API 返回</p><ul><li><code>elem.children</code></li><li><code>document.getElementsByTagName(&#39;p&#39;)</code></li></ul><p>NodeList 是 Node 集合，它由获取 Node 的 API 返回</p><ul><li><code>document.querySelectorAll(&#39;p&#39;)</code></li><li><code>elem.childNodes</code></li></ul><h3 id="答案-5" tabindex="-1"><a class="header-anchor" href="#答案-5" aria-hidden="true">#</a> 答案</h3><ul><li><code>HTMLCollection</code> 是 <code>Element</code> 集合，<code>NodeList</code> 是 <code>Node</code> 集合</li><li><code>Node</code> 是所有 <code>DOM</code> 节点的基类，<code>Element</code> 是 <code>html</code> 元素的基类</li></ul><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><p>注意 Node 和 Element 在实际 API 中的区别，如 <code>children</code> 和 <code>childNodes</code> 获取的结果可能是不一样的（如果子节点有 Text 或 Comment）</p><h3 id="扩展-类数组" tabindex="-1"><a class="header-anchor" href="#扩展-类数组" aria-hidden="true">#</a> 扩展：类数组</h3><p>HTMLCollection 和 NodeList 都不是数组，而是“类数组”。转换为数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// HTMLCollection 和 NodeList 都不是数组，而是“类数组”</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-vue-中-computed-和-watch-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-vue-中-computed-和-watch-有什么区别" aria-hidden="true">#</a> 11: Vue 中 computed 和 watch 有什么区别</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>Vue computed 和 watch 区别</p><h3 id="两者设计用途不同" tabindex="-1"><a class="header-anchor" href="#两者设计用途不同" aria-hidden="true">#</a> 两者设计用途不同</h3><ul><li>computed 用于产出二次处理之后的数据，如对于一个列表进行 filter 处理</li><li>watch 用于监听数据变化（如 v-model 时，数据可能被动改变，需要监听才能拿到）</li></ul><h3 id="computed-有缓存" tabindex="-1"><a class="header-anchor" href="#computed-有缓存" aria-hidden="true">#</a> computed 有缓存</h3><ul><li>computed 有缓存，data 不变则缓存不失效</li><li>methods 无缓存，实时计算</li></ul><h3 id="答案-6" tabindex="-1"><a class="header-anchor" href="#答案-6" aria-hidden="true">#</a> 答案</h3><ul><li>computed 就已有数据产出新数据，有缓存</li><li>watch 监听已有数据</li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>watch and computed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 城市：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>city<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>个人信息：{{ userInfo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;双越&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watch name&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 有缓存</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 无缓存</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-vue-组件通讯有几种方式-尽量全面" tabindex="-1"><a class="header-anchor" href="#_12-vue-组件通讯有几种方式-尽量全面" aria-hidden="true">#</a> 12: Vue 组件通讯有几种方式，尽量全面</h2><h3 id="通讯方式" tabindex="-1"><a class="header-anchor" href="#通讯方式" aria-hidden="true">#</a> 通讯方式</h3><ul><li>props 和 $emit</li><li>自定义事件</li><li>$attr</li><li>$parent</li><li>$refs</li><li>vuex</li><li>provide/inject</li></ul><h3 id="不同场景" tabindex="-1"><a class="header-anchor" href="#不同场景" aria-hidden="true">#</a> 不同场景</h3><ul><li>父子组件通讯</li><li>上下级组件（跨多级）通讯</li><li>全局组件通讯</li></ul><h3 id="props-emit" tabindex="-1"><a class="header-anchor" href="#props-emit" aria-hidden="true">#</a> props / $emit</h3><p>适用于父子组件。</p><ul><li>父组件向子组件传递 props 和事件</li><li>子组件接收 props ，使用 <code>this.$emit</code> 调用事件</li></ul><h3 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h3><p>适用于兄弟组件，或者“距离”较远的组件。</p><p>常用 API</p><ul><li>绑定事件 <code>event.on(key, fn)</code> 或 <code>event.once(key, fn)</code></li><li>触发事件 <code>event.emit(key, data)</code></li><li>解绑事件 <code>event.off(key, fn)</code></li></ul><p>Vue 版本的区别</p><ul><li>Vue 2.x 可以使用 Vue 实例作为自定义事件</li><li>Vue 3.x 需要使用第三方的自定义事件，例如 https://www.npmjs.com/package/event-emitter</li></ul><p>【注意】组件销毁时记得 <code>off</code> 事件，否则可能会造成内存泄漏</p><h3 id="attrs" tabindex="-1"><a class="header-anchor" href="#attrs" aria-hidden="true">#</a> $attrs</h3><p><code>$attrs</code> 存储是父组件中传递过来的，且未在 <code>props</code> 和 <code>emits</code> 中定义的属性和事件。<br> 相当于 <code>props</code> 和 <code>emits</code> 的一个补充。</p><p>继续向下级传递，可以使用 <code>v-bind=&quot;$attrs&quot;</code>。这会在下级组件中渲染 DOM 属性，可以用 <code>inheritAttrs: false</code> 避免。</p><p>【注意】Vue3 中移除了 <code>$listeners</code> ，合并到了 <code>$attrs</code> 中。</p><h3 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> $parent</h3><p>通过 <code>this.$parent</code> 可以获取父组件，并可以继续获取属性、调用方法等。</p><p>【注意】Vue3 中移除了 <code>$children</code> ，建议使用 <code>$refs</code></p><h3 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> $refs</h3><p>通过 <code>this.$refs.xxx</code> 可以获取某个子组件，前提是模板中要设置 <code>ref=&quot;xxx&quot;</code>。</p><p>【注意】要在 <code>mounted</code> 中获取 <code>this.$refs</code> ，不能在 <code>created</code> 中获取。</p><h3 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> provide / inject</h3><p>父子组件通讯方式非常多。如果是多层级的上下级组件通讯，可以使用 provide 和 inject 。<br> 在上级组件定一个 provide ，下级组件即可通过 inject 接收。</p><ul><li>传递静态数据直接使用 <code>provide: { x: 10 }</code> 形式</li><li>传递组件数据需要使用 <code>provide() { return { x: this.xx } }</code> 形式，但做不到响应式</li><li>响应式需要借助 <code>computed</code> 来支持</li></ul><h3 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h3><p>Vuex 全局数据管理</p><h3 id="答案-7" tabindex="-1"><a class="header-anchor" href="#答案-7" aria-hidden="true">#</a> 答案</h3><ul><li>父子组件通讯 <ul><li><code>props</code> <code>emits</code> <code>this.$emit</code></li><li><code>$attrs</code> （也可以通过 <code>v-bind=&quot;$attrs&quot;</code> 向下级传递）</li><li><code>$parent</code> <code>$refs</code></li></ul></li><li>多级组件上下级 <ul><li><code>provide</code> <code>inject</code></li></ul></li><li>跨级、全局 <ul><li>自定义事件</li><li>Vuex</li></ul></li></ul><h2 id="_13-vuex-mutation-action-区别" tabindex="-1"><a class="header-anchor" href="#_13-vuex-mutation-action-区别" aria-hidden="true">#</a> 13: Vuex mutation action 区别</h2><h3 id="题目-9" tabindex="-1"><a class="header-anchor" href="#题目-9" aria-hidden="true">#</a> 题目</h3><p>Vuex mutation action 区别</p><h3 id="答案-8" tabindex="-1"><a class="header-anchor" href="#答案-8" aria-hidden="true">#</a> 答案</h3><ul><li>mutation <ul><li>建议原子操作，每次只修改一个数据，不要贪多</li><li>必须是同步代码，方便查看 devTools 中的状态变化</li></ul></li><li>action <ul><li>可包含多个 mutation</li><li>可以是异步操作</li></ul></li></ul><h2 id="_14-js-严格模式有什么特点" tabindex="-1"><a class="header-anchor" href="#_14-js-严格模式有什么特点" aria-hidden="true">#</a> 14: JS 严格模式有什么特点</h2><h3 id="js-严格模式和非严格模式" tabindex="-1"><a class="header-anchor" href="#js-严格模式和非严格模式" aria-hidden="true">#</a> JS 严格模式和非严格模式</h3><h3 id="题目-10" tabindex="-1"><a class="header-anchor" href="#题目-10" aria-hidden="true">#</a> 题目</h3><p>JS 严格模式和非严格模式的区别</p><h3 id="设计初衷" tabindex="-1"><a class="header-anchor" href="#设计初衷" aria-hidden="true">#</a> 设计初衷</h3><p>Javascript 设计之初，有很多不合理、不严谨、不安全之处，例如变量未定义即可使用 <code>n = 100</code>。严格模式用于规避这些问题。</p><p>而现在 ES 规范已经普及，从语法上已经规避了这些问题。</p><h3 id="开启严格模式" tabindex="-1"><a class="header-anchor" href="#开启严格模式" aria-hidden="true">#</a> 开启严格模式</h3><p>代码（或一个函数）一开始插入一行 <code>&#39;use strict&#39;</code> 即可开启严格模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span> <span class="token comment">// 全局开启</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span> <span class="token comment">// 某个函数开启</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，开发环境用 ES 或者 Typescript ，打包出的 js 代码使用严格模式</p><h3 id="严格模式的不同" tabindex="-1"><a class="header-anchor" href="#严格模式的不同" aria-hidden="true">#</a> 严格模式的不同</h3><p>严格模式的细则有很多，这里总结一些常用常见的</p><h4 id="全局变量必须声明" tabindex="-1"><a class="header-anchor" href="#全局变量必须声明" aria-hidden="true">#</a> 全局变量必须声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>
n <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// ReferenceError: n is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="禁止使用-with" tabindex="-1"><a class="header-anchor" href="#禁止使用-with" aria-hidden="true">#</a> 禁止使用 <code>with</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span>
<span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Uncaught SyntaxError: Strict mode code may not include a with statement</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建-eval-作用域" tabindex="-1"><a class="header-anchor" href="#创建-eval-作用域" aria-hidden="true">#</a> 创建 eval 作用域</h4><p>正常模式下，JS 只有两种变量作用域：全局作用域 + 函数作用域。严格模式下，JS 增加了 eval 作用域。</p><p><strong>chrome 隐私模式下执行这段代码？？？</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;var x = 20; console.log(x)&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="禁止-this-指向全局作用域" tabindex="-1"><a class="header-anchor" href="#禁止-this-指向全局作用域" aria-hidden="true">#</a> 禁止 this 指向全局作用域</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数参数不能重名" tabindex="-1"><a class="header-anchor" href="#函数参数不能重名" aria-hidden="true">#</a> 函数参数不能重名</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>

<span class="token comment">// Uncaught SyntaxError: Duplicate parameter name not allowed in this context</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-9" tabindex="-1"><a class="header-anchor" href="#答案-9" aria-hidden="true">#</a> 答案</h3><ul><li>全局变量必须声明</li><li>禁止使用 with</li><li>创建 eval 作用域</li><li>禁止 this 指向全局作用域</li><li>函数参数不能重名</li></ul><h2 id="_12-http-跨域时为何要发送-options-请求" tabindex="-1"><a class="header-anchor" href="#_12-http-跨域时为何要发送-options-请求" aria-hidden="true">#</a> 12:HTTP 跨域时为何要发送 options 请求</h2><h3 id="题目-11" tabindex="-1"><a class="header-anchor" href="#题目-11" aria-hidden="true">#</a> 题目</h3><p>跨域为何需要 options 请求？</p><h3 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h3><p>浏览器同源策略，默认限制跨域请求。跨域的解决方案</p><ul><li><p>jsonp</p></li><li><p>CORS</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CORS 配置允许跨域（服务端）</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:8011&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 或者 &#39;*&#39;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;X-Requested-With&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>
  <span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;PUT,POST,GET,DELETE,OPTIONS&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Credentials&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 允许跨域接收 cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="options-请求" tabindex="-1"><a class="header-anchor" href="#options-请求" aria-hidden="true">#</a> options 请求</h3><p>使用 CORS 跨域请求时，经常会看到一个“多余”的 options 请求，之后才发送了实际的请求。</p><p><img src="`+r+'" alt=""></p><p>该请求就是为了检查服务端的 headers 信息，是否符合客户端的预期。所以它没有 body 的返回。</p><blockquote><p>规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。—— MDN</p></blockquote><h3 id="答案-10" tabindex="-1"><a class="header-anchor" href="#答案-10" aria-hidden="true">#</a> 答案</h3><p>options 请求就是对 CORS 跨域请求之间的一次预检查，检查成功再发起正式请求，是浏览器自行处理的。<br> 了解即可，实际开发中不用过于关注。</p><h2 id="_13-重点及注意项目总结" tabindex="-1"><a class="header-anchor" href="#_13-重点及注意项目总结" aria-hidden="true">#</a> 13: 重点及注意项目总结</h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解前端基础知识相关的面试题，包括 HTML CSS JS HTTP Ajax 等知识点。这都是技术一面时的必考知识点。</p><h3 id="划重点-6" tabindex="-1"><a class="header-anchor" href="#划重点-6" aria-hidden="true">#</a> 划重点</h3><ul><li>HTML CSS JS 基础知识</li><li>HTTP Ajax 基础知识</li><li>Vue 等框架的基本应用</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><p>不会从 0 基础讲起，基础不熟悉可以向讲师提问</p><h2 id="_14-扩展补充-restful-api-常用-method" tabindex="-1"><a class="header-anchor" href="#_14-扩展补充-restful-api-常用-method" aria-hidden="true">#</a> 14: 扩展补充：Restful API 常用 method</h2><p>以一个博客项目为例，实现“增删改查”功能，使用 Restful API 的接口设计如下</p><h3 id="新增博客" tabindex="-1"><a class="header-anchor" href="#新增博客" aria-hidden="true">#</a> 新增博客</h3><ul><li>url <code>http://xxx.com/api/blog</code></li><li>method <code>POST</code> （request body 中有博客的内容）</li></ul><h3 id="删除博客" tabindex="-1"><a class="header-anchor" href="#删除博客" aria-hidden="true">#</a> 删除博客</h3><ul><li>url <code>http://xxx.com/api/blog/100</code> （<code>100</code> 为博客的 id）</li><li>method <code>DELETE</code></li></ul><h3 id="修改博客内容" tabindex="-1"><a class="header-anchor" href="#修改博客内容" aria-hidden="true">#</a> 修改博客内容</h3><ul><li>url <code>http://xxx.com/api/blog/100</code> （<code>100</code> 为博客的 id）</li><li>method <code>PATCH</code> （request body 中有博客的内容）</li></ul><p>另，跟 <code>PATCH</code> 很像的还有 <code>PUT</code> 方法，两者有差别</p><ul><li><code>PUT</code> 更新全部内容，即替换</li><li><code>PATCH</code> 更新部分内容 —— 更加常用</li></ul><h3 id="查询博客" tabindex="-1"><a class="header-anchor" href="#查询博客" aria-hidden="true">#</a> 查询博客</h3><p>查询单个博客</p><ul><li>url <code>http://xxx.com/api/blog/100</code> （<code>100</code> 为博客的 id）</li><li>method <code>GET</code></li></ul><p>查询博客列表</p><ul><li>url <code>http://xxx.com/api/blog</code></li><li>method <code>GET</code></li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><ul><li><code>GET</code> 查询</li><li><code>POST</code> 新增</li><li><code>PATCH</code> 更新 <ul><li><code>PATCH</code> 更新部分内容 —— 更加常用</li><li><code>PUT</code> 更新全部内容，即替换</li></ul></li><li><code>DELETE</code> 删除</li></ul>',263);function j(q,T){const t=o("ExternalLinkIcon");return c(),i("div",null,[k,n("p",null,[s("内容较多，讲师专门制作了一个详细的思维导图，可以访问"),n("a",v,[s("what-is-fe"),e(t)]),s(" 网站来查看。")]),h,n("ul",null,[n("li",null,[n("p",null,[s("axios 是一个"),n("a",m,[s("第三方库"),e(t)]),s("，随着 "),b,s(" 一起崛起。它和 "),g,s(" 一样（"),f,s(" 也有 "),y,s(" 功能）。")])]),x]),w])}const H=p(d,[["render",j],["__file","index-04.html.vue"]]);export{H as default};
