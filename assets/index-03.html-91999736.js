import{_ as e,M as p,p as o,q as i,R as n,t as s,N as l,a1 as a}from"./framework-e8cb8151.js";const c="/assets/2023-07-23-17-44-16-image-b1680298.png",u="/assets/2023-07-23-20-40-17-image-efbc26b3.png",r="/assets/2023-07-23-21-07-40-image-8634d925.png",d="/assets/2023-07-23-21-12-46-image-5289ef91.png",k="/assets/2023-07-23-21-17-44-image-c3fb6e28.png",m="/assets/2023-07-23-21-21-46-image-1f5c9e28.png",v="/assets/2023-07-23-21-24-52-image-497d0f1c.png",b="/assets/image-20230723213452317-cba04f77.png",g="/assets/image-20230723213651950-36fb81eb.png",h="/assets/image-20230723222055232-447662f7.png",f="/assets/image-20230723222322400-a418dc75.png",y="/assets/image-20230723222343120-0cad0468.png",w="/assets/image-20230723222740455-d36656db.png",x="/assets/image-20230723222900401-ba976bad.png",_="/assets/image-20230723225402983-26fb8746.png",z="/assets/image-20230723225539735-eb19c979.png",I={},j=a('<h1 id="_03-前端性能优化常见的四种方法" tabindex="-1"><a class="header-anchor" href="#_03-前端性能优化常见的四种方法" aria-hidden="true">#</a> 03-前端性能优化常见的四种方法</h1><h2 id="_01-加载优化" tabindex="-1"><a class="header-anchor" href="#_01-加载优化" aria-hidden="true">#</a> 01：加载优化</h2><ul><li><p>什么是首屏时间</p><ul><li>浏览器显示第一屏页面所消耗的时间</li></ul></li><li><p>为什么要优化首屏时间</p><ul><li>过长的等待时间，会让用户变得烦躁，更容易跳出或者关闭这个网站</li></ul></li><li><p>怎么样优化首屏时间？</p><ul><li>针对<strong>不是首屏的资源进行懒加载</strong></li></ul></li><li><p>为什么一般都进行懒加载？</p><ul><li><strong>资源文件较大</strong>，加载完<strong>既耗时又费力</strong>，用户也不一定会浏览到全部页面内容</li></ul></li></ul><h3 id="懒加载实践-getboundingclientrect" tabindex="-1"><a class="header-anchor" href="#懒加载实践-getboundingclientrect" aria-hidden="true">#</a> 懒加载实践 - getBoundingClientRect()</h3><p><img src="'+c+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取所有的需要懒加载的图片</span>
  <span class="token keyword">let</span> lazyImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img.img-lazy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 限制频繁调用</span>
  <span class="token keyword">let</span> active <span class="token operator">=</span> <span class="token boolean">false</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> lazyLoad<span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      active <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        lazyImages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">lazyImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>
            lazyImage<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">&amp;&amp;</span>
            lazyImage<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bottom <span class="token operator">&gt;=</span> <span class="token number">0</span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lazyImage<span class="token punctuation">.</span>src <span class="token operator">=</span> lazyImage<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src
            lazyImage<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;img-lazy&#39;</span><span class="token punctuation">)</span>
            lazyImages <span class="token operator">=</span> lazyImage<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">image</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> image <span class="token operator">!==</span> lazyImage<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 判断所有图片加载完毕，移除事件</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyImages<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> lazyLoad<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        active <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有没有更方便的方案呢？</p><h3 id="懒加载实现-intersection-observer" tabindex="-1"><a class="header-anchor" href="#懒加载实现-intersection-observer" aria-hidden="true">#</a> 懒加载实现 - Intersection Observer</h3><blockquote><p>intersection Observer 现在除了 IE 以及低版本的安卓浏览器，基本上兼容大部分浏览器</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取所有的需要懒加载的图片</span>
  <span class="token keyword">let</span> lazyImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img.img-lazy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token string">&#39;IntersectionObserver&#39;</span> <span class="token keyword">in</span> window <span class="token operator">&amp;&amp;</span>
    <span class="token string">&#39;IntersectionObserverEntry&#39;</span> <span class="token keyword">in</span> window <span class="token operator">&amp;&amp;</span>
    <span class="token string">&#39;IntersectionRatio&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">.</span><span class="token class-name">IntersectionObserverEntry</span><span class="token punctuation">.</span>prototype
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> lazyImageObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>
      <span class="token parameter">entries<span class="token punctuation">,</span>
      observer<span class="token punctuation">,</span></span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> lazyImage <span class="token operator">=</span> entry<span class="token punctuation">.</span>target
          lazyImage<span class="token punctuation">.</span>src <span class="token operator">=</span> lazyImage<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src
          lazyImage<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;img-lazy&#39;</span><span class="token punctuation">)</span>
          lazyImageObserver<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>lazyImage<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    lazyImages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lazyImage</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      lazyImageObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>lazyImage<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实践：首选 Intersection Observer + 兼容性处理（选用 getBoundingClientRect）</strong></p><h2 id="_02-构建优化" tabindex="-1"><a class="header-anchor" href="#_02-构建优化" aria-hidden="true">#</a> 02：构建优化</h2><ul><li>构建优化为什么可以提高性能？</li><li>构建优化主要设计到 2 点： <ul><li><strong>资源压缩</strong>--体积变小所传输的时间响应就会变少</li><li><strong>资源合并</strong>--将请求的多条资源合兵成少量的请求，从而较少 http 请求数量</li></ul></li></ul><h3 id="构建优化-资源压缩" tabindex="-1"><a class="header-anchor" href="#构建优化-资源压缩" aria-hidden="true">#</a> 构建优化 -- 资源压缩</h3><p>如果能够让打包之后的构建结果体积减小，所带来的收益是显而易见的</p><ul><li>代码压缩：使用更加<strong>简洁的</strong>代码表示 <strong>同一套逻辑</strong></li></ul><h3 id="压缩原理" tabindex="-1"><a class="header-anchor" href="#压缩原理" aria-hidden="true">#</a> 压缩原理</h3><ul><li><p>压缩工具是如何实现这两个功能的？</p><ul><li><p>将字符串形式的代码转换成 AST 语法树</p></li><li><p>遍历 AST 语法树对其内容按照上述的规则进行逻辑处理</p></li><li><p>生成简洁的 AST 树转换成 简洁的代码</p></li></ul></li></ul><h3 id="压缩-js-基于-webpack5" tabindex="-1"><a class="header-anchor" href="#压缩-js-基于-webpack5" aria-hidden="true">#</a> 压缩 JS - 基于 webpack5</h3><ul><li><p>javascript 压缩</p><ul><li><p>基于 ES6 推出了 tree-shaking =&gt; 根据 import、export 的模块导入导出语法，确定是否删除代码</p></li><li><p>配置 mode = production =&gt; 自动压缩</p></li><li><p>ES5 =&gt; UglifyJS -&gt; uglifyjs-webpack-plugin</p></li><li><p>ES6 =&gt; Terser -&gt; terser-webpack-plugin</p></li></ul></li><li><p>tips: 因为压缩又是打包最耗时的一个步骤，所以 terser-webpack-plugin 默认会开启的多线程压缩来加速我们的构建压缩速度</p></li></ul><h3 id="压缩-css" tabindex="-1"><a class="header-anchor" href="#压缩-css" aria-hidden="true">#</a> 压缩 CSS</h3><ul><li><p>压缩 css 之前需要导出到独立的 css 文件，使用插件  mini-css-extract-plugin</p></li><li><p>为什么不直接使用 style-loader 嵌入到 html 里面</p><ul><li>html、css 资源是无法并行加载的，从而降低了页面的性能</li><li>会导致资源缓存粒度的变大，html、css 任意内容的变化，都会导致缓存的失效</li></ul></li><li><p>先后使用的插件</p><ul><li>mini-css-extract-plugin 将 css 代码抽离为单独的 CSS 文件</li><li>命中 css-minimizer-webpack-plugin 默认的逻辑，进行压缩 CSS</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;css-minimizer-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// webpack 5 之后，约定使用 ... 字面量保持默认 minimizer 配置</span>
      <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="压缩-css-效果" tabindex="-1"><a class="header-anchor" href="#压缩-css-效果" aria-hidden="true">#</a> 压缩 CSS 效果</h3><p><img src="`+u+'" alt=""></p><h3 id="构建优化-资源合并" tabindex="-1"><a class="header-anchor" href="#构建优化-资源合并" aria-hidden="true">#</a> 构建优化--资源合并</h3><ul><li><p>是否把<strong>所有的 JS 资源都合并到一个 JS 文件</strong>中比较好？这样只需要发送一个请求</p><ul><li><p>会造成页面的初始代码过大，增加首屏加载时间</p></li><li><p>无法有效的利用浏览器的缓存，如果更改某块的逻辑，会造成整个文件的变动</p></li><li><p>经过 http 的升级, 只需要进行一次 tcp 链接，是可以做到多路请求的复用以及独立</p></li></ul></li></ul><h3 id="生产环境中-实践原则" tabindex="-1"><a class="header-anchor" href="#生产环境中-实践原则" aria-hidden="true">#</a> 生产环境中---实践原则</h3><ul><li><p>针对 node_modules 资源：</p><ul><li><p>对 <code>node_modules</code> 模块打包成单独的文件</p></li><li><p>配置 <code>maxSize</code> 设定阈值，防止 vendor 包体积过大</p></li></ul></li><li><p>针对业务代码</p><ul><li><p>设置 <code>common</code> 分组，通过 <code>miniÇhunks</code> 配置项将使用率较高的资源合并为 Comon 资源</p></li><li><p>对于可以懒加载的资源，可以通过异步方式引入</p></li></ul></li></ul><h3 id="可视化分析打包结果" tabindex="-1"><a class="header-anchor" href="#可视化分析打包结果" aria-hidden="true">#</a> 可视化分析打包结果</h3><ul><li><p>webpack analysis</p></li><li><p>statoscope</p></li><li><p>webpack visualizer</p></li><li><p>webpack bundle analyzer(<strong>推荐</strong>)</p></li><li><p>webpack dashboard</p></li></ul><h3 id="可视化结果" tabindex="-1"><a class="header-anchor" href="#可视化结果" aria-hidden="true">#</a> 可视化结果</h3><p><img src="'+r+'" alt=""></p><h2 id="_03-渲染优化" tabindex="-1"><a class="header-anchor" href="#_03-渲染优化" aria-hidden="true">#</a> 03： 渲染优化</h2><ul><li><p>渲染优化关注点</p><blockquote><p>浏览器获取到资源之后进行渲染部分的相关性能优化</p></blockquote><p><img src="'+d+'" alt=""></p></li></ul><h3 id="浏览器渲染进程-黑盒" tabindex="-1"><a class="header-anchor" href="#浏览器渲染进程-黑盒" aria-hidden="true">#</a> 浏览器渲染进程”黑盒“</h3><p><img src="'+k+'" alt=""></p><h3 id="重排" tabindex="-1"><a class="header-anchor" href="#重排" aria-hidden="true">#</a> 重排</h3><ul><li>因为 DOM 节点之间会相互关联，如果修改其中某一个 DOM 节点的几何属性，其他元素的几何属性以及位置同样会受到相关的影响，这样就会发生重排。</li></ul><p><img src="'+m+'" alt=""></p><h3 id="重绘" tabindex="-1"><a class="header-anchor" href="#重绘" aria-hidden="true">#</a> 重绘</h3><ul><li>当我们对 DOM 的修改导致了样式的变化，类似于 颜色、背景色、字体这些，这样的改变，浏览器就不需要重新计算元素的几何属性，也就少了重新布局这一步骤了。</li></ul><p><img src="'+v+`" alt=""></p><h3 id="渲染性能-减少重排的操作" tabindex="-1"><a class="header-anchor" href="#渲染性能-减少重排的操作" aria-hidden="true">#</a> 渲染性能 -- 减少重排的操作</h3><ul><li><p>很简单，相比较重绘，<strong>重排更加消耗性能</strong>，我们需要减少重排的操作</p><ul><li><p>DOM 元素几何属性的修改，例如：width、height、padding、margin、left、top 等</p></li><li><p>修改 DOM 树的结构，例如 增加、删除、移动 DOM 节点</p></li><li><p>获取特定的属性值，例如 offsetTop、scrollTop、clientWidth、clientHeight 等</p></li></ul></li></ul><h3 id="渲染性能-避免样式频繁修改" tabindex="-1"><a class="header-anchor" href="#渲染性能-避免样式频繁修改" aria-hidden="true">#</a> 渲染性能 -- 避免样式频繁修改</h3><ul><li><p>三次布局</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span>
box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;2px solid blue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一次布局</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.my-box</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span>
  box<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;my-box&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="验证重绘" tabindex="-1"><a class="header-anchor" href="#验证重绘" aria-hidden="true">#</a> 验证重绘</h3><p><img src="`+b+'" alt="image-20230723213452317"></p><p><img src="'+g+`" alt="image-20230723213651950"></p><h3 id="渲染性能-–-动画优化" tabindex="-1"><a class="header-anchor" href="#渲染性能-–-动画优化" aria-hidden="true">#</a> 渲染性能 – 动画优化</h3><ul><li>举个例子：让一个 div 匀速往右移动 400px</li></ul><h4 id="css-实现" tabindex="-1"><a class="header-anchor" href="#css-实现" aria-hidden="true">#</a> css 实现</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box:hover</span> <span class="token punctuation">{</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 4s linear 0s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 使用 animation */</span>
<span class="token selector">.myBox</span> <span class="token punctuation">{</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> go 4s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@keyframs</span> go</span> <span class="token punctuation">{</span>
  <span class="token selector">from</span> <span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">to</span> <span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>400px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定时器实现" tabindex="-1"><a class="header-anchor" href="#定时器实现" aria-hidden="true">#</a> 定时器实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> distance <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">const</span> animation <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  distance <span class="token operator">+=</span> <span class="token number">1</span>
  box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> distance <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token string">&#39;400px&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16.6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动画性能" tabindex="-1"><a class="header-anchor" href="#动画性能" aria-hidden="true">#</a> 动画性能</h4><ul><li>一般动画为什么会设置 16.6 ms <ul><li>屏幕的刷新频率为 60 Hz, 也就是 1s 内刷新的帧数，<strong>通过换算 1000ms/ 60 = 16.6ms</strong>, 也就是 16.6 ms 刷新一次（但是有些显示器的刷新频率并不是 60Hz,如果一样使用 16.6ms，就会造成一定的失帧现象）</li></ul></li><li>定时器做动画还会有哪些问题？？ <ul><li>可能会造成动画的卡帧</li></ul></li><li>引入 window 的 <code>requestAnimationFrame</code> 方案</li></ul><h3 id="节流-防抖" tabindex="-1"><a class="header-anchor" href="#节流-防抖" aria-hidden="true">#</a> 节流 &amp; 防抖</h3><ul><li>滚动 <code>scroll</code> 事件</li><li>缩放 <code>resize</code> 事件</li><li>键盘 <code>keyup</code> 事件</li><li>键盘 <code>keydown</code> 事件</li><li>鼠标 <code>mousemove</code> 事件</li><li>鼠标 <code>mouseover</code> 事件</li></ul><blockquote><p>以上事件如果频繁触发，都会造成页面的抖动/卡顿</p></blockquote><p>本质：<strong>两者并不会减少事件的触发，而是减少事件触发时回调函数的执行次数</strong></p><h4 id="节流" tabindex="-1"><a class="header-anchor" href="#节流" aria-hidden="true">#</a> 节流</h4><blockquote><p>顾名思义：就是将短时间的函数调用以一个固定的频率间隔执行</p></blockquote><p>例如</p><ul><li>资源懒加载 =&gt; 监听页面的滚动事件，滚动到一定位置，图片或者其他资源进行加载</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 节流</span>
<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖" aria-hidden="true">#</a> 防抖</h4><blockquote><p>抖动现象本质就是指短时间内高频词触发。因此，我们可以把短时间内的多个连续调用合并成一次，也就是只触发一次回调函数</p></blockquote><p>防抖场景之一：输入框模糊搜索，监听键盘的 keydown 事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 防抖</span>
<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments
    timeout <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timeout <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 采用了防抖</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>
  <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web-worker" tabindex="-1"><a class="header-anchor" href="#web-worker" aria-hidden="true">#</a> Web Worker</h3><ul><li>JS 单线程背景 <ul><li>js 是单线程执行的，所有的任务都放到同一个线程来执行</li></ul></li><li>为什么 js 是<strong>单线程</strong>呢 ？ <ul><li>js 的存在当初就是为了操作 DOM 相关，这就决定了 JS 只能是单线程。<strong>否则就会出现很多负责的问题</strong></li><li>假如是多线程，一个线程里删除了 DOM，一个线程里增加了 DOM，那该以哪个为准呢？就会比较复杂</li></ul></li><li>针对现在多核 CPU 的能力，H5 新增了多线程 Web Worker 标准 <ul><li>允许 JavaScript 脚本创建多个线程，但是<strong>子线程完全受主线程控制，且不得操作 DOM</strong></li><li>所以，这个新标准并没有改变 JavaScript 单线程的本质。 Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主 线程创建 Worker 线程，将一些任务分配给后者运行。</li></ul></li></ul><h4 id="主进程代码" tabindex="-1"><a class="header-anchor" href="#主进程代码" aria-hidden="true">#</a> 主进程代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token comment">// 创建子线程</span>
<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 向子线程发送消息</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 传给子线程的数据</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> workData <span class="token operator">=</span> event<span class="token punctuation">.</span>data
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="workder-进程代码" tabindex="-1"><a class="header-anchor" href="#workder-进程代码" aria-hidden="true">#</a> workder 进程代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// worker.js</span>
self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> mainData <span class="token operator">=</span> e<span class="token punctuation">.</span>data
  <span class="token keyword">let</span> postMainDate
  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>postMainData<span class="token punctuation">)</span>
  <span class="token comment">/*
		 子线程一旦创建成功机会始终执行，不会被主线程上的事件所打断，这意味着 workder 会比较耗费资源，所以不应当过度使用，一旦任务执行完毕就应该及时关闭。  
  */</span>

  self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h4><ul><li><strong>大量计算</strong>以及<strong>同时渲染 DOM 时候</strong>（例如：大文件上传之前需要计算 hash 值）</li></ul><h2 id="_04-缓存优化" tabindex="-1"><a class="header-anchor" href="#_04-缓存优化" aria-hidden="true">#</a> 04：缓存优化</h2><ul><li>http 缓存优化关注点 <ul><li>缓存优化主要是<strong>针对重复请求的处理</strong>，是对已经获取资源的重用，提升网站性能和用户体验</li></ul></li></ul><p><img src="`+h+'" alt="image-20230723222055232"></p><h3 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a> 浏览器缓存</h3><ul><li>浏览器缓存 — 强缓存 <ul><li>在再次请求的时候进行 缓存字段的检查，如果没有过期，直接从<strong>浏览器本地缓存</strong>中返回资源</li></ul></li><li>浏览器缓存 — 协商缓存 <ul><li>在浏览器使用本地的缓存之前，向服务器发送请求，判断一下<strong>本地的缓存是否过期</strong></li></ul></li></ul><p><img src="'+f+'" alt="image-20230723222322400"></p><p><img src="'+y+'" alt="image-20230723222343120"></p><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h3><ul><li>为什么 http1.1 改变了 http1.0 的过期时间方式了？ <ul><li>http1.0 对<strong>本地时间戳过分依赖</strong></li><li>http1.1 采用的时间段可以有效的避免<strong>客户端和服务端时间戳不同步</strong>的问题</li></ul></li><li>既然 Cache-control 能够作为 expries 的完全替代方案。为什么在实践中一般<strong>都带上这两个字段</strong>？ <ul><li>考虑项目的可用性问题 ——— 需要在项目的<strong>可用性方面的进行向下兼容</strong></li><li>如果 cache-control 与 expires 同时存在的话，cache-control 的优先级高于 expires</li></ul></li></ul><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><p><img src="'+w+'" alt="image-20230723222740455"></p><p><img src="'+x+'" alt="image-20230723222900401"></p>',90),S=n("code",null,"last-modified",-1),E=n("code",null,"http1.1",-1),M=n("code",null,"ETag",-1),q=a("<li>考虑以下情况： <ul><li>一些文件也许会周期性的更改,但是他的内容并不改变(仅仅改变的修改时间),这个时候,我们并不希望客户端认为这个文件被修改了,而重新 get</li><li>某些文件修改非常频繁,比如在秒以下的时间内进行修改(比方说 1s 内修改了 N 次), <code>If-Modified-Since</code> 能检查到的粒度时 s 级的,这种修改无法判断(或者说 UNIX 记录 MTIME 只能精确到秒)</li><li>某些服务器不能精确得到的文件的最后修改时间</li></ul></li><li><code>Last-Modified</code> 与 <code>ETag</code> 可以一起使用，<strong>服务器会优先验证 ETag</strong>， 一致的情况下才会比对 <code>Last-Modifed</code></li>",2),O={href:"https://blog.csdn.net/weixin_43912756/article/details/108481083",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,[s("为什么大厂"),n("strong",null,"不常用 eTag"),s(" 进行协商缓存呢？ "),n("ul",null,[n("li",null,"因为他是根据文件内容进行运算所生成的一个字符串，小文件计算倒还算好，如果是大文件计算还是很损耗性能的"),n("li",null,"对于大厂来说，请求量都会很大，因此我们使用负载均衡的方式来调度一个 http 请求。对于同一个用户的、同一个客户端、同一个页面可能会分配到不同的服务器，根据 ETag Header 是文件修改时间､文件大小和 inode 号生成的校验(checksum), 在多台服务器的负载均衡环境下会因部署内容的 inode 节点差异造成 ETag 的不同, 在多台 WEB 前端做负载均衡的情况下,会因为请求同一个数据但不同机器的 ETag 而影响了响应. 是缓存失效。"),n("li",null,"所以还是根据具体场景来选择诗和的缓存策略")])],-1),L=a('<h3 id="浏览器缓存优先级" tabindex="-1"><a class="header-anchor" href="#浏览器缓存优先级" aria-hidden="true">#</a> 浏览器缓存优先级</h3><blockquote><p>优先级 Cache-Control &gt; Expries &gt; Etag &gt; Last-Modified</p></blockquote><p><img src="'+_+'" alt="image-20230723225402983"></p><h3 id="如何实践" tabindex="-1"><a class="header-anchor" href="#如何实践" aria-hidden="true">#</a> 如何实践？</h3><p><img src="'+z+'" alt="image-20230723225539735"></p><h3 id="缓存方案" tabindex="-1"><a class="header-anchor" href="#缓存方案" aria-hidden="true">#</a> 缓存方案？</h3><ul><li><p>缓存设置方案</p><ul><li><p>html 文件资源</p><blockquote><p>因为内部包含很多其他的资源，我们一般可以设置为 协商缓存，cache-control：max-age = 0</p></blockquote></li><li><p>图片资源</p><blockquote><p>图片资源一般是通过更改来修改的，一般会设置为强缓存, 但缓存时间也不宜过长，一般设置时间为 1 天</p></blockquote></li><li><p>关于 CSS 以及 JS 文件</p><blockquote><p>通过设置强缓存，并且过期时间比较长，比如 30 天，但是需求的迭代导致我们需要在文件名的后面增加 hash 值，如果文件内容发生更改，文件 url 也会更改，下次就会重新请求新的文件。</p></blockquote></li></ul></li></ul>',7);function T(D,J){const t=p("ExternalLinkIcon");return o(),i("div",null,[j,n("ul",null,[n("li",null,[s("为什么已经有了 "),S,s(" 的协商缓存策略，"),E,s(" 还需要新增一个 "),M,s(" 方案？ "),n("ul",null,[q,n("li",null,[n("a",O,[s("为什么 Etag 比 last-modified 优先级更高？"),l(t)])])])]),C]),L])}const B=e(I,[["render",T],["__file","index-03.html.vue"]]);export{B as default};
