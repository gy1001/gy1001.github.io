import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const i={},u=e(`<h1 id="module-模块化" tabindex="-1"><a class="header-anchor" href="#module-模块化" aria-hidden="true">#</a> Module-模块化</h1><p>JavaScript 语言诞生至今，模块规范化之路曲曲折折。社区先后出现了各种解决方案，包括 <strong>AMD、CMD、CommonJS</strong> 等，而后 ECMA 组织在 JavaScript 语言标准层面，增加了模块功能（因为该功能是在 ES2015 版本引入的，所以在下文中将之称为 <strong>ES6 module</strong> ）。</p><p>今天我们就来聊聊，为什么会出现这些不同的模块规范，它们在所处的历史节点解决了哪些问题？</p><h2 id="何谓模块化" tabindex="-1"><a class="header-anchor" href="#何谓模块化" aria-hidden="true">#</a> 何谓模块化？</h2><p>或根据功能、或根据数据、或根据业务，将一个大程序拆分成互相依赖的小文件，再用简单的方式拼装起来。</p><h2 id="模块化之前的引用方式" tabindex="-1"><a class="header-anchor" href="#模块化之前的引用方式" aria-hidden="true">#</a> 模块化之前的引用方式</h2><h3 id="最开始的样子" tabindex="-1"><a class="header-anchor" href="#最开始的样子" aria-hidden="true">#</a> 最开始的样子</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样带来的问题</p><ol><li>代码复用率低</li><li>全局作用域污染：无法保证不与其他模块发生变量名冲突，而且模块成员之间没什么关系。</li><li>可维护性差</li></ol><h3 id="命名空间和-iief" tabindex="-1"><a class="header-anchor" href="#命名空间和-iief" aria-hidden="true">#</a> 命名空间和 IIEF</h3><p>为了解决以上问题，就出现了<strong>命名空间、IIEF</strong></p><h4 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> namespace <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
namespace<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
namespace<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样书写解决了以上问题，但是还有一些问题没有解决，那就是需要注意</p><h5 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h5><ul><li><p>文件依赖的顺序</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./jquery.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./utils.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// 如果 utils.js 依赖于 jquery.js， 那么引用顺序就必须是 jquery
在前面，否则就会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>外部可以随意修改内部成员</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如外部调用</span>
utils<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token number">100</span>
<span class="token comment">// 其他地方在调用 utils.add(1,2) 就会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="iief-立即执行函数" tabindex="-1"><a class="header-anchor" href="#iief-立即执行函数" aria-hidden="true">#</a> IIEF: 立即执行函数</h3><blockquote><p>可以通过立即函数可以达到隐藏细节的目的，这样在模块外部无法修改我们暴露的变量、函数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// IIEF</span>
<span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  module<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> module
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
utils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="再增强一点-引入依赖" tabindex="-1"><a class="header-anchor" href="#再增强一点-引入依赖" aria-hidden="true">#</a> 再增强一点：引入依赖</h3><blockquote><p>这就是模块模式，也是现代模块实现的基石</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Module <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _$body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_$body<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span>
Module<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么要模块化" tabindex="-1"><a class="header-anchor" href="#为什么要模块化" aria-hidden="true">#</a> 为什么要模块化</h2><ol><li>网页变为单页面应用</li><li>复杂度增加</li><li>解耦性越来越被需要</li><li>部署希望得到优化，提高性能</li></ol><h2 id="模块化希望带来的好处" tabindex="-1"><a class="header-anchor" href="#模块化希望带来的好处" aria-hidden="true">#</a> 模块化希望带来的好处</h2><ol><li>避免命名冲突，减少命名空间污染</li><li>更好的文件分离，按需加载</li><li>更高的复用性</li><li>更高的维护性</li></ol><h2 id="模块化以后带来的问题" tabindex="-1"><a class="header-anchor" href="#模块化以后带来的问题" aria-hidden="true">#</a> 模块化以后带来的问题</h2><p>页面由引用一个 js 文件变为引用多个 js 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scirpt</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>f.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scirpt</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意味着请求数量变多，同时可能存在依赖顺序的问题</p><h3 id="带来的缺点" tabindex="-1"><a class="header-anchor" href="#带来的缺点" aria-hidden="true">#</a> 带来的缺点</h3><ol><li>请求多</li><li>依赖模糊</li><li>难以维护</li></ol><h2 id="模块化规范" tabindex="-1"><a class="header-anchor" href="#模块化规范" aria-hidden="true">#</a> 模块化规范</h2><h3 id="commonjs-或者叫做-cjs-用在服务器端" tabindex="-1"><a class="header-anchor" href="#commonjs-或者叫做-cjs-用在服务器端" aria-hidden="true">#</a> CommonJs 或者叫做 CJS：用在服务器端</h3><blockquote><p>网页端没有模块化编程时候只是页面 JS 逻辑复杂，但还是可以工作下去，在服务端却一定要有模块，所以 JS 发展这么多年，第一个流行的模块化规范却是由服务端的 JS 应用带来的，CommonJS 规范是由 nodejs 发扬光大，这标志着 JS 模块化正式登上舞台</p></blockquote><ol><li>定义模块</li></ol><p>根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义的变量为 global 对象的属性</p><ol start="2"><li><p>模块输出</p><p>模块只有一个输出，<strong>module.exports</strong> 对象，我们需要把模块希望输出的内容放入该对象</p></li><li><p>暴露模块方式（暴露的模块本质都是是 exports 对象）</p><ol><li>exports.xxx = value</li><li>module.exports = xxxx</li></ol></li><li><p>加载模块：</p><p>加载模块使用 <strong>require</strong> 方法，该方法读取一个文件并执行，返回文件内部的 <strong>module.exports</strong> 对象</p></li><li><p>实现</p><ol><li><p>服务器端实现： Node.js</p></li><li><p>浏览器端实现：Browserify （Browserify 是一个 node.js 模块，主要用于改写现有的 CommonJS 模块，使得浏览器端也可以使用这些模块。）</p><p>注意：浏览器不识别 require 方法，需要提前编译打包处理</p></li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js文件</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span>

<span class="token comment">// main.js</span>
<span class="token keyword">var</span> nameModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span>
nameModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：<strong>加载模块是同步的</strong>，只有加载完后才能执行后面的操作；<strong>现加载现用</strong>，在服务器端编程，加载的模块一般存在本地硬盘里，加载起来比较快，不用考虑异步加载的问题，因为 CommonJS 规范比较适用。然后，并不适用于浏览器环境，同步意味着阻塞线程，浏览器资源的加载方式是异步的。</p><p>解决方式之一：开发一个服务端组件，对模块化代码最静态分析，将模块与它的依赖列表一起返回浏览器。这确实很好使，不过需要服务端加载额外的组件，需要调整底层架构，不太友好</p><p>另一个思路，用一套标准模板来封装定义，但是对于模块怎么定义和怎么加载，产生了分歧？</p><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h3><blockquote><p>AMD 是<code>&quot;Asynchronous Module Definition&quot;</code>的缩写，意思就是&quot;异步模块定义&quot;。</p></blockquote><p>它采用异步加载方式加载模块，模块的加载不影响它后面的语句的运行，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完毕之后，这个回调函数才会执行。</p><p>由于不是 JS 原生支持，使用 AMD 规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎的 RequireJS，实际上 AMD 是 requireJS 在推广过程中对模块定义的规范化的产生。</p><p>Requirejs 也是采用 require() 加载模块，但是不同于 CommonJS，它要求两个参数</p>`,48),r={href:"https://javascript.ruanyifeng.com/tool/requirejs.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.jianshu.com/p/e355aaa9ebce",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数 module 是一个数组，里面的成员就是要加载的模块，第二个参数是 callback 则是加载成功之后的回调函数。</p><p>Requirejs 它也定义了一个函数 define, 他是全局变量，用来定义模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明</p><ul><li><p>id: 指定义中模块的名字，可选，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级的”和绝对的（不允许相对名字）</p></li><li><p>dependencies: 是一个当前模块依赖的，已经被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，他应该默认为 [&quot;require&quot;, &quot;exports&quot;, &quot;module&quot; ]. 然而，如果工厂方法的长度属性小于 3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法</p><ul><li>define(name，[] , callback); 这个 name 可以省掉，默认是文件名称；当然也可以自定义，一旦我们定义了 name，根据源代码我们可以发现 define 函数内部其实就是把这个 name 以及依赖模块、回调函数作为一个对象存储在全局的数组当中，也就是 defQueue.push([name,deps,callback])；那么这个 name 就是这个组件注册的的 ID</li><li>require（[name , name2],callback）; 系统首先会在全文检索 path 中是否对应的路径，如果没有自然把他作为路径拼接在 baseUrl 上去异步加载这个 js 文件，加载时从源代码中可以看到 ,var data = getScriptData(evt)；返回的 data.id 其实就是 name，然后执行 contex.completeLoad(node.id)，其内部就很清楚了，把 define 中注册的 name 和这里得到的 name 进行比较如果相等就执行</li><li><strong>所以道理就是：require 和 define 的 name 必须保证一致！</strong></li></ul></li><li><p>factory: 工厂方法，模块初始化要执行的函数或者对象。如果为函数，他应该只执行一次，如果是对象，此对象应该为模块的输出值。</p><p>举个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">foo<span class="token punctuation">,</span> bar</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        foo<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bar<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>，
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><blockquote><p>CMD 即<code>Common Module Definition</code>通用模块定义</p></blockquote><p>CMD 规范是国内发展起来的，就像 AMD 有一个 requirejs, CMD 有个浏览器的实现 SeaJS. SeaJS 要解决的问题和 requirejs 一样，只不过在模块定义方式和模块加载(可以说运行、解析) 时机上有所不同。</p><p>在 CMD 中，一个模块就是一个文件，代码的书写格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义有依赖的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 模块代码</span>
  <span class="token comment">// 引入依赖模块(同步)</span>
  <span class="token keyword">var</span> module2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./module2&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 引入依赖模块(异步)</span>
  require<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">&quot;./module3&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 模块代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 暴露模块</span>
  <span class="token keyword">export</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>require 是可以把其他模块导入进来的一个参数</li><li>exports 是可以把模块内的一些属性和方法导出，</li><li>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</li></ul><h3 id="注意区别-amd-和-cmd" tabindex="-1"><a class="header-anchor" href="#注意区别-amd-和-cmd" aria-hidden="true">#</a> 注意区别 AMD 和 CMD：</h3><p><strong>AMD 是依赖关系前置，在定义模块的时候就要声明其依赖的模块</strong></p><p><strong>CMD 是按需加载依赖就近，只有在用到某个模块的时候再去 require</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CMD</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span>
  a<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 此处略去 100 行</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 依赖可以就近书写</span>
  b<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// AMD 默认推荐的是</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 依赖必须一开始就写好</span>
  a<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 此处略去 100 行</span>
  b<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tips: RequireJS 其实也是支持 CMD 这种写法的</p><h3 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h3><blockquote><p><code>UMD (Universal Module Definition)</code>，就是一种<code>javascript</code>通用模块定义规范，让你的模块能在<code>javascript</code>所有运行环境中发挥作用。</p></blockquote><p>UMD 先判断是否支持 Node.js 的模块（exports）是否存在，存在则使用 Node.js 模块模式, 在判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是commonjs模块规范，nodejs环境&#39;</span><span class="token punctuation">)</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是AMD模块规范，如require.js&#39;</span><span class="token punctuation">)</span>
    <span class="token function">define</span><span class="token punctuation">(</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;是CMD模块规范，如sea.js&#39;</span><span class="token punctuation">)</span>
    <span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;没有模块环境，直接挂载在全局对象上&#39;</span><span class="token punctuation">)</span>
    root<span class="token punctuation">.</span>umdModule <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;我是一个umd模块&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es6-modules" tabindex="-1"><a class="header-anchor" href="#es6-modules" aria-hidden="true">#</a> ES6 modules</h3><blockquote><p>也需要对依赖模块进行编译打包, 使用 <strong>Babel</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b.js&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment">// b.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">1</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  age <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// 打开 index.html 引用的是 a.js</span>
<span class="token comment">// 执行结果：</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commonjs-与-es6-的区别" tabindex="-1"><a class="header-anchor" href="#commonjs-与-es6-的区别" aria-hidden="true">#</a> CommonJS 与 ES6 的区别</h3><ol><li><p><strong>CommonJS 是运行时候加载，ES6 模块是编译时候输出接口</strong></p><p>原因：因为 CommonJS 加载的时候是一个对象 (即 module.exports 属性)，该对象只有在脚本运行完才会生成；而 ES6 模块不是对象，它的对外接口只是一个静态定义，在代码静态解析阶段就会生成。</p><p>ES6 模块的设计思想是尽量放入静态化，使得在编译时候就确定依赖关系</p><p>而 CommonJS 就只能在运行时候确定这些输入和输出的变量</p></li><li><p><strong>CommonJS 模块输出的是一个值的复制，ES6 模块输出的值是值的引用</strong></p></li><li><p>CommonJS 加载的是整个模块，即将所有的方法全部加载出来，ES6 可以单独加载其中某个方法</p></li><li><p>CommonJS 中的 this 指向当前模块，ES6 中的 this 指向 undefined</p></li><li><p>CommonJS 默认非严格模式，ES6 的模块自动采用严格模式</p></li></ol><p>举个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CommonJS 模块</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">let</span> _fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> stat <span class="token operator">=</span> _fs<span class="token punctuation">.</span>stat
<span class="token keyword">let</span> exists <span class="token operator">=</span> _fs<span class="token punctuation">.</span>exists
<span class="token keyword">let</span> readfile <span class="token operator">=</span> _fs<span class="token punctuation">.</span>readfile
<span class="token comment">// 上面代码的实质就是整体加载 fs 模块，生成一个对象 _fs，然后再从这个对象上面读取需要的三个方法，这种加载方式称为“运行时加载”，因为只有运行时候才能得到这个对象，导致完全无法在编译时候做到 &quot;静态优化&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES6模块</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token comment">// 上面代码的实质就是从 fs 模块加载三个方法，其他方法不加载。这种加载方式成为 &quot;编译时加载&quot;或者 &quot;静态加载&quot;，即ES6 可以在编译时候就完成模块加载，效率要比 CommonJS 模块的加载方式高。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,30),m={href:"https://www.1024sou.com/article/14132.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000023711059",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/dolphinX/p/4381855.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/26625636",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.ruanyifeng.com/blog/2012/11/require_js.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/e355aaa9ebce",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jianshu.com/p/d67bc79976e6",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/seajs/seajs/issues/269",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.jianshu.com/p/9f5a0351a532",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"推荐文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐文章","aria-hidden":"true"},"#"),s(" 推荐文章")],-1),x={href:"https://zhuanlan.zhihu.com/p/346405395",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/jackTesla/article/details/80796936",target:"_blank",rel:"noopener noreferrer"},S={href:"http://www.ruanyifeng.com/blog/2020/08/how-nodejs-use-es6-module.html",target:"_blank",rel:"noopener noreferrer"},M=n("h2",{id:"视频链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#视频链接","aria-hidden":"true"},"#"),s(" 视频链接")],-1),J={href:"https://www.bilibili.com/video/BV18s411E7Tj?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"};function C(D,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[s("RequireJS 和 AMD 规范"),t(a)])]),n("p",null,[n("a",d,[s("RequireJS 用法解析"),t(a)])]),k,n("p",null,[n("a",m,[s("深入了解 CommonJS, AMD, CMD, UMD, ES6 Module 的前世今生"),t(a)])]),n("p",null,[n("a",v,[s("【深度全面】前端 JavaScript 模块化规范进化论"),t(a)])]),n("p",null,[n("a",b,[s("前端模块化"),t(a)])]),n("p",null,[n("a",h,[s("理解 CommonJS、AMD、CMD 三种规范"),t(a)])]),n("p",null,[n("a",g,[s("阮一峰：Javascript 模块化编程（三）：require.js 的用法"),t(a)])]),n("p",null,[n("a",f,[s("RequireJS 用法解析"),t(a)])]),n("p",null,[n("a",j,[s("前端模块化（CommonJs,AMD 和 CMD）"),t(a)])]),n("p",null,[n("a",q,[s("从 CommonJS 到 Sea.js #269"),t(a)])]),n("p",null,[n("a",w,[s("可能是最详细的 UMD 模块入门指南"),t(a)])]),y,n("p",null,[n("a",x,[s("深入学习 CommonJS 和 ES6 模块化规范"),t(a)])]),n("p",null,[n("a",_,[s("js 当中 CommonJS 和 es6 的模块化引入方案以及比较"),t(a)])]),n("p",null,[n("a",S,[s("阮一峰：Node.js 如何处理 ES6 模块"),t(a)])]),M,n("p",null,[n("a",J,[s("尚硅谷 JS 模块化教程(js 模块化精讲含 commonjs、AMD、ES6、"),t(a)])])])}const I=p(i,[["render",C],["__file","module.html.vue"]]);export{I as default};
