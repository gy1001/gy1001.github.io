import{_ as e,M as o,p as c,q as l,R as n,t as s,N as t,a1 as p}from"./framework-e8cb8151.js";const i="/assets/image-20230811134224451-cbc524df.png",u="/assets/image-20230811134242673-fa17fdc3.png",r="/assets/image-20230811134301524-88bbb751.png",k={},d=n("h1",{id:"_17-桥接模式-组装变频洗衣机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_17-桥接模式-组装变频洗衣机","aria-hidden":"true"},"#"),s(" 17-"),n("strong",null,"桥接模式：组装变频洗衣机")],-1),v=n("p",null,[n("img",{src:"https://img2.mukewang.com/5d244c1500013e0406400359.jpg",alt:"img"})],-1),m=n("blockquote",null,[n("p",null,"什么是路？就是从没路的地方践踏出来的，从只有荆棘的地方开辟出来的。 ——  鲁迅")],-1),b=n("p",null,[n("strong",null,"桥接模式"),s("（Bridge Pattern）又称桥梁模式，将抽象部分与它的实现部分分离，使它们都可以独立地变化。使用组合关系代替继承关系，降低抽象和实现两个可变维度的耦合度。")],-1),y=n("p",null,"抽象部分和实现部分可能不太好理解，举个例子，香蕉、苹果、西瓜，它们共同的抽象部分就是水果，可以吃，实现部分就是不同的水果实体。再比如黑色手提包、红色钱包、蓝色公文包，它们共同的抽象部分是包和颜色，这部分的共性就可以被作为抽象提取出来。",-1),g=n("strong",null,"注意：",-1),h={href:"https://juejin.im/post/5b51e5d3f265da0f4861143c#heading-5",target:"_blank",rel:"noopener noreferrer"},f={href:"http://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},w={href:"http://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},_=p('<h2 id="_1-你曾见过的桥接模式" tabindex="-1"><a class="header-anchor" href="#_1-你曾见过的桥接模式" aria-hidden="true">#</a> 1. 你曾见过的桥接模式</h2><p>厂家在生产洗衣机、冰箱、空调等电器的时候，不同型号产品之间有一些部件，比如变频洗衣机：</p><ol><li>产品型号 A 有小功率电机、直立滚筒、小功率变频器；</li><li>产品型号 B 有中功率电机、横置滚筒、中功率变频器；</li><li>产品型号 C 有大功率电机、横置滚筒、大功率变频器；</li></ol><p>洗衣机产品由这三个部分组成，那么可以提取电机、滚筒、变频器部件作为抽象维度，在新建洗衣机实例的时候，把抽象出来的部件桥接起来组成一个完整的洗衣机实例。在变频洗衣机系列产品中，产品的部件可以沿着各自维度独立地变化。</p><p><img src="'+i+`" alt="image-20230811134224451"></p><p>再比如皮包，包的种类比如钱包、书包、公文包是一个维度，包的尺寸是一个维度，包的颜色又是一个维度，这些维度可以自由变化。这种情况在系统设计中，如果给每个种类对应的每个尺寸和颜色都设置一个类，那么系统中的类就会很多，如果根据实际需要对种类、尺寸、颜色这些维度进行组合，那么将大大减少系统中类的个数。</p><p>在类似场景中，这些例子有以下特点：</p><ol><li>将抽象和实现分离，互相独立互不影响；</li><li>产品有多个维度（部件），每个维度都可以独立变化（实例化过程），洗衣机这个例子的维度就是电机、滚筒、变频器，洗衣机产品在这几个维度可以独立地进行变化，从而组装成不同的洗衣机产品；</li></ol><h2 id="_2-实例的代码实现" tabindex="-1"><a class="header-anchor" href="#_2-实例的代码实现" aria-hidden="true">#</a> 2. 实例的代码实现</h2><p>我们可以使用 JavaScript 来将之前的变频洗衣机例子实现一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 组装洗衣机 */</span>
<span class="token keyword">function</span> <span class="token function">Washer</span><span class="token punctuation">(</span><span class="token parameter">motorType<span class="token punctuation">,</span> rollerType<span class="token punctuation">,</span> transducerType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>motor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Motor</span><span class="token punctuation">(</span>motorType<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Roller</span><span class="token punctuation">(</span>rollerType<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>transducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transducer</span><span class="token punctuation">(</span>transducerType<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">Washer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">work</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>motor<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>roller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>transducer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 电机 */</span>
<span class="token keyword">function</span> <span class="token function">Motor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>motorType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;电机&#39;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Motor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>motorType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 滚筒 */</span>
<span class="token keyword">function</span> <span class="token function">Roller</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rollerType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;滚筒&#39;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Roller</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollerType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 变频器 */</span>
<span class="token keyword">function</span> <span class="token function">Transducer</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>transducerType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;变频器&#39;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Transducer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transducerType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新建洗衣机</span>
<span class="token keyword">var</span> washerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Washer</span><span class="token punctuation">(</span><span class="token string">&#39;小功率&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;直立&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小功率&#39;</span><span class="token punctuation">)</span>
washerA<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：小功率电机开始工作</span>
<span class="token comment">//      直立滚筒开始工作</span>
<span class="token comment">//      小功率变频器开始工作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于产品部件可以独立变化，所以创建新的洗衣机产品就非常容易：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> washerD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Washer</span><span class="token punctuation">(</span><span class="token string">&#39;小功率&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;直立&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;中功率&#39;</span><span class="token punctuation">)</span>
washerD<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：小功率电机开始工作</span>
<span class="token comment">//      直立滚筒开始工作</span>
<span class="token comment">//      中功率变频器开始工作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到由于洗衣机的结构被分别抽象为几个部件的组合，部件的实例化是在部件类各自的构造函数中完成，因此部件之间的实例化不会相互影响，新产品的创建也变得容易，这就是桥接模式的好处。</p><p>下面我们用 ES6 的 Class 语法实现一下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 组装洗衣机 */</span>
<span class="token keyword">class</span> <span class="token class-name">Washer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">motorType<span class="token punctuation">,</span> rollerType<span class="token punctuation">,</span> transducerType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>motor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Motor</span><span class="token punctuation">(</span>motorType<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>roller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Roller</span><span class="token punctuation">(</span>rollerType<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transducer</span><span class="token punctuation">(</span>transducerType<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* 开始使用 */</span>
  <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>motor<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>roller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transducer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 电机 */</span>
<span class="token keyword">class</span> <span class="token class-name">Motor</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>motorType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;电机&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>motorType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 滚筒 */</span>
<span class="token keyword">class</span> <span class="token class-name">Roller</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rollerType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;滚筒&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rollerType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 变频器 */</span>
<span class="token keyword">class</span> <span class="token class-name">Transducer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transducerType <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">&#39;变频器&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transducerType <span class="token operator">+</span> <span class="token string">&#39;开始工作&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> washerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Washer</span><span class="token punctuation">(</span><span class="token string">&#39;小功率&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;直立&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小功率&#39;</span><span class="token punctuation">)</span>
washerA<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：小功率电机开始工作</span>
<span class="token comment">//      直立滚筒开始工作</span>
<span class="token comment">//      小功率变频器开始工作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再精致一点，可以让电机、滚筒、变频器等部件实例继承自各自的抽象类，将面向抽象进行到底，但是桥接模式在 JavaScript 中应用不多，适当了解即可，不用太死扣。</p><p>有时候为了更复用部件，可以将部件的实例化拿出来，对于洗衣机来说一个实体部件当然不能用两次，这里使用皮包的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 皮包 */</span>
<span class="token keyword">class</span> <span class="token class-name">Bag</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color
  <span class="token punctuation">}</span>

  <span class="token comment">/* 展示 */</span>
  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 皮包类型 */</span>
<span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>typeType <span class="token operator">=</span> type
  <span class="token punctuation">}</span>

  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>typeType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 皮包颜色 */</span>
<span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>colorType <span class="token operator">=</span> type
  <span class="token punctuation">}</span>

  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colorType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 抽象实例化 */</span>
<span class="token keyword">const</span> redColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token string">&#39;红色&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> walletType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token string">&#39;钱包&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> briefcaseType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token string">&#39;公文包&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> bagA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">(</span>walletType<span class="token punctuation">,</span> redColor<span class="token punctuation">)</span>
bagA<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：红色钱包</span>

<span class="token keyword">const</span> bagB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bag</span><span class="token punctuation">(</span>briefcaseType<span class="token punctuation">,</span> redColor<span class="token punctuation">)</span>
bagB<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 输出：红色公文包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-桥接模式的原理" tabindex="-1"><a class="header-anchor" href="#_3-桥接模式的原理" aria-hidden="true">#</a> 3. 桥接模式的原理</h2><p>我们可以提炼一下桥接模式，洗衣机是产品（Product），电机、滚筒、变频器属于抽象出来的部件种类（Components），也属于独立的维度，而具体的部件实体小功率电机、直立滚筒、大功率变频器等属于部件实例（Instances），这些实例可以沿着各自维度变化，共同组成对应产品。主要有以下几个概念：</p><ol><li><strong>Product：</strong> 产品，由多个独立部件组成的产品；</li><li><strong>Component：</strong> 部件，组成产品的部件类；</li><li><strong>Instance：</strong> 部件类的实例；</li></ol><p>概略图如下：</p><p><img src="`+u+`" alt="image-20230811134242673"></p><h2 id="_4-实战中的桥接模式" tabindex="-1"><a class="header-anchor" href="#_4-实战中的桥接模式" aria-hidden="true">#</a> 4. 实战中的桥接模式</h2><p>在某一个开发场景，一个按钮的前景色本为黑色背景色为浅灰色，当光标 <code>mouseover</code> 的时候改变前景色为蓝色、背景色为绿色、尺寸变为 <code>1.5</code> 倍，当光标 <code>mouseleave</code> 的时候还原前景色、背景色、尺寸，在鼠标按下的时候前景色变为红色、背景色变为紫色、尺寸变为 <code>0.5</code> 倍，抬起后恢复原状。怎么样，这个需求是不是有点麻烦，别管为什么有这么奇葩的需求（产品：这个需求很简单，怎么实现我不管），现在需求已经怼到脸上了，我们要如何去实现呢？</p><p>我们自然可以这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseover&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;scale(1.5)&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseleave&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lightgray&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;scale(1)&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;purple&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;scale(.5)&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lightgray&#39;</span><span class="token punctuation">)</span>
  btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;scale(1)&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),T={href:"https://codepen.io/SHERlocked93/pen/gVmBKW",target:"_blank",rel:"noopener noreferrer"},x=p(`<p>的确可以达到目标需求，但是我们可以使用桥接模式来改造一下，我们可以把 DOM 对象的前景色、背景色作为其外观部件，尺寸属性是另一个尺寸部件，这样的话对各自部件的操作可以作为抽象被提取出来，使得对各自部件可以独立且方便地操作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>

<span class="token comment">/* 设置前景色和背景色 */</span>
<span class="token keyword">function</span> <span class="token function">setColor</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> bgc <span class="token operator">=</span> <span class="token string">&#39;lightgray&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span>
  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">,</span> bgc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 设置尺寸 */</span>
<span class="token keyword">function</span> <span class="token function">setSize</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseover&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setColor</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setSize</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&#39;1.5&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseleave&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setColor</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
  <span class="token function">setSize</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setColor</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;purple&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setSize</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">&#39;.5&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setColor</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
  <span class="token function">setSize</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={href:"https://codepen.io/SHERlocked93/pen/GVWweY",target:"_blank",rel:"noopener noreferrer"},C=p('<p>是不是看起来清晰多了，这里的 <code>setColor</code>、<code>setSize</code> 就是桥接函数，是将 DOM （产品）及其属性（部件）连接在一起的桥梁，用户只要给桥接函数传递参数即可，十分便捷。其他 DOM 要有类似的对外观部件和尺寸部件的操作，也可以方便地进行复用。</p><p>效果如下：</p><p><img src="'+r+'" alt="image-20230811134301524"></p><h2 id="_5-桥接模式的优缺点" tabindex="-1"><a class="header-anchor" href="#_5-桥接模式的优缺点" aria-hidden="true">#</a> 5. 桥接模式的优缺点</h2><p>桥接模式的优点：</p><ol><li>分离了抽象和实现部分，将实现层（DOM 元素事件触发并执行具体修改逻辑）和抽象层（ 元素外观、尺寸部分的修改函数）解耦，<strong>有利于分层</strong>；</li><li>提高了<strong>可扩展性</strong>，多个维度的部件自由组合，避免了类继承带来的强耦合关系，也减少了部件类的数量；</li><li>使用者<strong>不用关心细节的实现</strong>，可以方便快捷地进行使用；</li></ol><p>桥接模式的缺点：</p><ol><li>桥接模式要求两个部件没有耦合关系，否则无法独立地变化，因此要求正确的对系统变化的维度进行识别，使用范围存在局限性；</li><li>桥接模式的引入增加了系统复杂度；</li></ol><h2 id="_6-桥接模式的适用场景" tabindex="-1"><a class="header-anchor" href="#_6-桥接模式的适用场景" aria-hidden="true">#</a> 6. 桥接模式的适用场景</h2><ol><li>如果产品的部件有独立的变化维度，可以考虑桥接模式；</li><li>不希望使用继承，或因为多层次继承导致系统类的个数急剧增加的系统；</li><li>产品部件的粒度越细，部件复用的必要性越大，可以考虑桥接模式；</li></ol><h2 id="_7-其他相关模式" tabindex="-1"><a class="header-anchor" href="#_7-其他相关模式" aria-hidden="true">#</a> 7. 其他相关模式</h2><h3 id="_7-1-桥接模式和策略模式" tabindex="-1"><a class="header-anchor" href="#_7-1-桥接模式和策略模式" aria-hidden="true">#</a> 7.1 桥接模式和策略模式</h3><ol><li><strong>桥接模式：</strong> 复用部件类，不同部件的实例相互之间无法替换，但是相同部件的实例一般可以替换；</li><li><strong>策略模式：</strong> 复用策略类，不同策略之间地位平等，可以相互替换；</li></ol><h3 id="_7-2-桥接模式与模板方法模式" tabindex="-1"><a class="header-anchor" href="#_7-2-桥接模式与模板方法模式" aria-hidden="true">#</a> 7.2 桥接模式与模板方法模式</h3><ol><li><strong>桥接模式：</strong> 将组成产品的部件实例的创建，延迟到实例的具体创建过程中；</li><li><strong>模版方法模式：</strong> 将创建产品的某一步骤，延迟到子类中实现；</li></ol><h3 id="_7-3-桥接模式与抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_7-3-桥接模式与抽象工厂模式" aria-hidden="true">#</a> 7.3 桥接模式与抽象工厂模式</h3><p>这两个模式可以组合使用，比如部件类实例的创建可以结合抽象工厂模式，因为部件类实例也属于一个产品类簇，明显属于抽象工厂模式的适用范围，如果创建的部件类不多，或者比较简单，也可以使用简单工厂模式。</p>',17);function P(E,B){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,v,m,b,y,n("blockquote",null,[n("p",null,[g,s(" 本文可能用到一些编程技巧比如 "),n("a",h,[s("短路运算符"),t(a)]),s("，还有一些 ES6 的语法 "),n("a",f,[s("let/const"),t(a)]),s(" 、"),n("a",w,[s("Class"),t(a)]),s(" 等，如果还没接触过可以点击链接稍加学习 ~")])]),_,n("p",null,[s("代码和预览参见： "),n("a",T,[s("Codepen - 桥接模式反模式"),t(a)])]),x,n("p",null,[s("代码和预览参见： "),n("a",j,[s("Codepen - 桥接模式示例"),t(a)])]),C])}const L=e(k,[["render",P],["__file","index-17.html.vue"]]);export{L as default};
