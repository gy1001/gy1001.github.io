import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const o="/assets/5f16cccf0001755206400426-c1e679ab.jpg",i="/assets/5f16cd400001b81a26541052-0f2abcf6.png",c="/assets/5f16cd540001183026261056-fb1a65b3.png",d="/assets/5f16cd5e0001ee9b26201000-65505878.png",t="/assets/5f16cd680001ade026121014-d1f97e93.png",p="/assets/5f16cd710001d08b26921014-7c0e1b50.png",l={},r=e('<h1 id="_10-站在巨人的肩膀上热门-docker-镜像介绍-三" tabindex="-1"><a class="header-anchor" href="#_10-站在巨人的肩膀上热门-docker-镜像介绍-三" aria-hidden="true">#</a> 10-站在巨人的肩膀上热门 Docker 镜像介绍（三）</h1><p><img src="'+o+'" alt="img"></p><blockquote><p>要成就一件大事业，必须从小事做起。——列宁</p></blockquote><p>作为镜像介绍篇的最后一篇，这篇文章继续介绍 Docker 镜像，但是针对的使用使用场景和前面两节有一点微小的差别。这一节对应使用场景主要有两个：</p><ul><li><strong>应用相关的语言环境</strong>：比如我的应用是一个 Python Web 应用，那么我不希望从操作系统的基础镜像或者裁剪的基础镜像自己中安装 Python 环境。这个时候我希望有一个 Python 各个版本的 Docker 镜像可以作为基础镜像供我们使用。</li><li><strong>学习新语言使用</strong>：比如 Golang 发布了新的版本，但是我本地的环境由于开发需要不能够安装最新的版本，那么这个时候我们就可以下载一个对应 Golang 新版本的 Docker 镜像来使用。</li></ul><p>这篇文章主要介绍几大主流语言对应的镜像，包括 Java、Python、Golang、PHP、Node.js，由于 C++ 一般都是编译出来二进制再进行部署，所以这里就不介绍了。限于篇幅，本文主要介绍前面三种语言的基础镜像，PHP 和 Node.js ，读者可以参考我给出来的实验步骤进行学习。</p><h2 id="_1-java" tabindex="-1"><a class="header-anchor" href="#_1-java" aria-hidden="true">#</a> 1. Java</h2><p>Java 应用运行起来的话需要 JDK 环境，Docker Hub 中目前官方的只有 OpenJDK 的镜像，Oracle JDK 的话有一些个人开发者制作的镜像，但是 STAR 数都不多（关于 OpenJDK 和 JDK 的差异，我们这篇文章就不赘述了）。我们可以通过 docker search 来搜索一下 jdk 镜像。</p><p><img src="'+i+'" alt="图片描述"></p><p>我们再看一下 openjdk 的镜像，如下。我们可以看到第一个 openjdk 是带有官方标志的。</p><p><img src="'+c+`" alt="图片描述"></p><p>我们可以通过 https://hub.docker.com/_/openjdk 查看到镜像中心的 openjdk 的镜像版本，读者朋友可以自行查看。我们下面下载 openjdk 的镜像，下载版本为 jdk 8。然后通过 docker images 命令进行查看，我们可以看到 openjdk 的镜像大小为 510M。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull openjdk:8</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep openjdk</span>
openjdk             <span class="token number">8</span>                   e890fe39c302        <span class="token number">2</span> days ago          510MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 docker run 启动 openjdk 容器。其中的参数 <code>-ti</code> 表示以交互模式启动，也就是打开 Linux 的 tty 登录；/bin/bash 表示运行镜像中的命令 /bin/bash。启动之后我们通过 <code>java -version</code> 查看到镜像中包含的 java 版本是 1.8.0_242。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti openjdk:8 /bin/bash</span>
root@1589b87cd790:/<span class="token comment"># java -version</span>
openjdk version <span class="token string">&quot;1.8.0_242&quot;</span>
OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_242-b08<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.242</span>-b08, mixed mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们说一下如何将 openjdk 的镜像作为一个基础镜像来构建我们自己的应用镜像。</p><p>最简单的方式是我们在 Dockerfile 中将 openjdk 的镜像引入，然后将 Java 应用的 with-dependency 打出来的包拷贝进去就可以了，下面是一个简单的示例。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> openjdk:7</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /usr/src/myapp</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/myapp</span>
<span class="token instruction"><span class="token keyword">RUN</span> javac Main.java</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;Main&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-python" tabindex="-1"><a class="header-anchor" href="#_2-python" aria-hidden="true">#</a> 2. Python</h2><p>相似的，官方的 Docker Hub 也提供了 Python 的官方镜像，我们还是通过 docker search 来搜索。</p><p><img src="`+d+`" alt="图片描述"></p><p>其中第一个就是官方的 Python 镜像。读者朋友可以通过 https://hub.docker.com/_/python 查看 python 镜像包含的信息，支持的版本等。这里我们下载版本为 python:3 的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull python:3</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep python</span>
python              <span class="token number">3</span>                   efdecc2e377a        <span class="token number">3</span> days ago          933MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 docker run 运行 Python 镜像，参数和上面运行 openjdk 镜像的参数类似，然后通过 Python --version 可以看到 Python 版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti python:3 /bin/bash</span>
root@170d6a115afb:/<span class="token comment"># python --version</span>
Python <span class="token number">3.8</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Python 镜像要比 openjdk 镜像稍微麻烦一点，因为 <strong>Python 需要的很多依赖的第三方包</strong>，这个在 Python 的 base 镜像里面是没有的，<strong>需要我们自己将这些依赖打包到镜像里面</strong>，打包的过程我们写到 dockerfile 文件里面，下面是一个简单的示例：</p><p>其中 requirements.txt 包含的是我们的应用依赖的 python 第三方包，以行分割；第四行的 <code>RUN pip install</code> 即为安装依赖。然后最后一行 <code>CMD</code> 是启动命令，表示我们启动进行的时候运行命令在工作目录 <code>/usr/src/app</code> 下运行命令 <code>python ./your-daemon-or-script.py</code> 。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> python:3</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/app</span>

<span class="token instruction"><span class="token keyword">COPY</span> requirements.txt ./</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install --no-cache-dir -r requirements.txt</span>

<span class="token instruction"><span class="token keyword">COPY</span> . .</span>

<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;python&quot;</span>, <span class="token string">&quot;./your-daemon-or-script.py&quot;</span> ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-golang" tabindex="-1"><a class="header-anchor" href="#_3-golang" aria-hidden="true">#</a> 3. Golang</h2><p>Golang 也就是 Go 语言，截止我这篇文章编写的时候 1.14 将要发布。同样的我们通过 docker search 查询 golang 的镜像。</p><p><img src="`+t+`" alt="图片描述"></p><p>我们这里下载 1.13 版本的 golang 镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker pull golang:1.13</span>
<span class="token number">1.13</span>: Pulling from library/golang
dc65f448a2e2: Already exists
346ffb2b67d7: Already exists
dea4ecac934f: Already exists
8ac92ddf84b3: Already exists
7ca605383307: Pull complete
bd20b51e1705: Pull complete
<span class="token number">844755650966</span>: Pull complete
Digest: sha256:de83180c8374e56166542909101c91f7f653edc525f017b2d58f55b33cd28883
Status: Downloaded newer image <span class="token keyword">for</span> golang:1.13
<span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker images | grep golang</span>
golang              <span class="token number">1.13</span>                6586e3d10e96        <span class="token number">7</span> days ago          803MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行，参数同上。然后通过 go version 我们可以看到镜像中包含的 golang 版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@docker ~<span class="token punctuation">]</span><span class="token comment"># docker run -ti golang:1.13 /bin/bash</span>
root@1a9aaaec9e77:/go<span class="token comment"># go version</span>
go version go1.13.7 linux/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实并不是很建议将 golang 镜像作为基础镜像使用。我们知道 golang 的部署一般都是部署二进制文件，并不依赖 golang 运行环境。如果是学习使用的话，倒是可以使用。下面是使用 golang 作为 base 镜像的一个简单的 dockerfile 的例子。其中第四行为依赖安装，第五行位编译安装。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.13</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/app</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>

<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v ./...</span>
<span class="token instruction"><span class="token keyword">RUN</span> go install -v ./...</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;app&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-php" tabindex="-1"><a class="header-anchor" href="#_4-php" aria-hidden="true">#</a> 4. PHP</h2><p>Docker Hub 中也提供了 PHP 的镜像，我们也可以通过 docker search 搜索到。</p><p><img src="`+p+'" alt="图片描述"></p><p>然后镜像安装和运行和上面也是类似的，限于篇幅这里就不再介绍了。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>本文从编程语言运行环境的用户场景着手像大家重点介绍了 Java、Python、Golang 的基础镜像，希望读者朋友后面遇到这种类似的运行环境的问题，也可以用相同的思路来解决。</p>',43),u=[r];function k(v,m){return s(),a("div",null,u)}const g=n(l,[["render",k],["__file","index-10.html.vue"]]);export{g as default};
