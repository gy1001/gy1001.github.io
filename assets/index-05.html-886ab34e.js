import{_ as p,M as o,p as c,q as i,R as n,t as s,N as t,a1 as e}from"./framework-e8cb8151.js";const l="/assets/event-loop-a6c29b64.png",u="/assets/event-loop-nodejs-deda551f.png",r="/assets/svelte-db99486c.png",d="/assets/js-bridge-c204c684.png",k="/assets/vue-生命周期-03ca66bc.png",v="/assets/tree-diff-01d5e79b.png",m="/assets/tree-diff-1-d012a8a6.png",h="/assets/react-diff-f77eb7f9.png",b="/assets/vue2-diff-b583e6d7.png",g="/assets/vue3-diff-66ff5dff.png",f="/assets/key-309bff27.png",y={},x=e('<h1 id="_05-知识深度-原理和源码" tabindex="-1"><a class="header-anchor" href="#_05-知识深度-原理和源码" aria-hidden="true">#</a> 05-知识深度 - 原理和源码</h1><h2 id="_01-章节介绍" tabindex="-1"><a class="header-anchor" href="#_01-章节介绍" aria-hidden="true">#</a> 01:章节介绍</h2><h3 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h3><p>大厂面试会通过各种难题来试探你的技术深度，评估你的技术发展潜力，这是入职后确定级别、薪资的重要参考。所以，技术深度将决定你的“钱途”。本章将通过多个面试题，讲解前端面试常考的底层原理问题，涉及 JS Vue React Nodejs 等。</p><h3 id="为何要考察" tabindex="-1"><a class="header-anchor" href="#为何要考察" aria-hidden="true">#</a> 为何要考察</h3><p>深挖你的技术“天花板”，看未来潜力和可培养性 —— 特别是对于刚毕业不就的新人。</p><p>如果面试通过了，大公司要定级（P6 还是 P7），<strong>其中技术深度就是很重要的参考标准</strong>。一个没有技术深度的人，不可能给高级别职称。</p><p>而且，那么多候选人，择优录取，肯定希望能招募到技术深度好的工程师。</p><h3 id="考察重点" tabindex="-1"><a class="header-anchor" href="#考察重点" aria-hidden="true">#</a> 考察重点</h3><p>其实就是我们日常使用的技术，的一些深入。没有什么特别出格的。</p><ul><li>非应用层面，深入到原理层面</li><li>JS 相关原理</li><li>Vue React 相关原理</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>技术深度，就有那么 1-2 个方面即可。深了，就不可能全面</li><li>技术深度的题目不过关，也不一定就面试不通过</li></ul><h3 id="看几个面试题" tabindex="-1"><a class="header-anchor" href="#看几个面试题" aria-hidden="true">#</a> 看几个面试题</h3><ul><li>如何检测 jS 内存泄露？JS 内存泄露场景有哪些？</li><li>Vue 每个生命周期都做了什么？</li><li>Vue2 Vue3 React 三者的 diff 算法有什么区别？</li><li>等等</li></ul><h2 id="_02-本章学前必看-知识深度很重要" tabindex="-1"><a class="header-anchor" href="#_02-本章学前必看-知识深度很重要" aria-hidden="true">#</a> 02: 本章学前必看： 知识深度很重要</h2><h3 id="知识深度很重要" tabindex="-1"><a class="header-anchor" href="#知识深度很重要" aria-hidden="true">#</a> 知识深度很重要</h3><p>虽然我们日常干的都是“拧螺丝”“搬砖”的 CURD 工作，也体现不出什么难度，但自身的知识深度真的很重要。 工作是公司的、老板的，而能力是自己的，要区分开来。</p><h3 id="面试评级" tabindex="-1"><a class="header-anchor" href="#面试评级" aria-hidden="true">#</a> 面试评级</h3><p>面试通过了，到底给你评定 P6 还是 P7 ？依据什么标准呢？</p><p>第一个因素不是你的技术，而是团队的预算，例如他们还有没有 P7 的名额。如果有，那可以考虑；如果没有，你能力再好也大不了 P7 。说这个因素是告诉你：如果你的平级不高，不一定是个人的因素。</p><p>第二个因素就是你的综合技术能力，而其中技术深度就是最关键的一个。如果你只是浮于表面，从未深入到原理或者源码层面，那就很难有说服力。</p><p>大厂不同级别的工资是不一样的，所以技术深度直接决定了你的“钱途”。</p><h3 id="难题攻坚" tabindex="-1"><a class="header-anchor" href="#难题攻坚" aria-hidden="true">#</a> 难题攻坚</h3><p>在实际工作中，项目遇到了难题，老板可能会直接指派给你，也可能开会时叫人主动认领（此时你要量力而行，不要随意“抢答”）。无论何种方式，你接到了这样一个难题，是否能解决将决定你在领导心目中的形象。</p><p>我记得多年之前，我刚入职一家公司不久，就毛遂自荐搞定了一个系统卡顿的问题，很快就得到了领导的信任。信任，能带来很多好处</p><ul><li>绩效相对较高，年终奖多</li><li>偶尔划水摸鱼、迟到早退也无碍，只要不耽误工作。有了信任，这些都是瑕不掩瑜</li><li>评价其他人时，你的话语权更重</li></ul><p>最后，要解决难题，最需要的就是技术深度。否则你都看不清楚问题的本质，何谈解决？</p><h3 id="同事之间的影响力" tabindex="-1"><a class="header-anchor" href="#同事之间的影响力" aria-hidden="true">#</a> 同事之间的影响力</h3><p>同事之间除了聊工作，还有很多私下随性沟通的机会，特别是午饭、午休时间。聊技术，永远是技术人员的话题。</p><p>再聊天过程中，大家都会发表个人的评论和观点。如果你有技术深度，看问题更加透彻，解释问题更加清晰，在同事眼中你自然就是一个“厉害的人”。</p><p>得到同事的认可和尊重，会增加工作的幸福感。人都有本能的社交需求。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>所谓技术深度，深了就不可能广。</li><li>所以，找准某一个方面深入进去即可，不可贪多。</li><li>而且，要找一个主流的技术栈，如 Vue React 相关的，要考虑技术的实际价值。</li></ul><h2 id="_03-js-内存泄露如何检测-场景有哪些" tabindex="-1"><a class="header-anchor" href="#_03-js-内存泄露如何检测-场景有哪些" aria-hidden="true">#</a> 03: JS 内存泄露如何检测，场景有哪些？</h2>',35),w={href:"https://juejin.cn/post/7034132255551258655",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="垃圾回收-gc" tabindex="-1"><a class="header-anchor" href="#垃圾回收-gc" aria-hidden="true">#</a> 垃圾回收 GC</h3><ul><li>什么是垃圾回收？</li><li>引用计数（之前）</li></ul><p>正常情况下，一个函数执行完，其中的变量都会是会 JS 垃圾回收。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但某些情况下，变量是销毁不了的，因为可能会被再次使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>obj <span class="token operator">=</span> obj <span class="token comment">// 引用到了全局变量，obj 销毁不了</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genDataFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 闭包，data 销毁不了</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> set <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">genDataFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量销毁不了，一定就是内存泄漏吗？—— 不一定</p><h3 id="垃圾回收算法-引用计数" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法-引用计数" aria-hidden="true">#</a> 垃圾回收算法 - 引用计数</h3><p>早起的垃圾回收算法，以“数据是否被引用”来判断要不要回收。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对象被 a 引用</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a1 <span class="token operator">=</span> a <span class="token comment">// 又被 a1 引用</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 不再被 a 引用，但仍然被 a1 引用</span>
<span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 不再被 a1 引用</span>

<span class="token comment">// 对象最终没有任何引用，会被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这个算法有一个缺陷 —— 循环引用。例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> obj2
  obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> obj1 <span class="token comment">// 循环引用，无法回收 obj1 和 obj2</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此前有一个很著名的例子。IE6、7 使用引用计数算法进行垃圾回收，常常因为循环引用导致 DOM 对象无法进行垃圾回收。<br> 下面的例子，即便界面上删除了 div1 ，但在 JS 内存中它仍然存在，包括它的所有属性。但现代浏览器已经解决了这个问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div1
window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div1&#39;</span><span class="token punctuation">)</span>
  div1<span class="token punctuation">.</span>aaa <span class="token operator">=</span> div1
  div1<span class="token punctuation">.</span>someBigData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token comment">// 一个体积很大的数据。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这个例子就是内存泄漏。即，<strong>不希望它存在的，它却仍然存在</strong>，这是不符合预期的。关键在于“泄漏”。</p><h3 id="垃圾回收算法-标记清除" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法-标记清除" aria-hidden="true">#</a> 垃圾回收算法 - 标记清除</h3><p>基于上面的问题，现代浏览器使用“标记-清除”算法。根据“是否是否可获得”来判断是否回收。</p><p>定期从根（即全局变量）开始向下查找，能找到的即保留，找不到的即回收。循环引用不再是问题。</p><h2 id="_04-连环问-js-闭包是内存泄漏吗" tabindex="-1"><a class="header-anchor" href="#_04-连环问-js-闭包是内存泄漏吗" aria-hidden="true">#</a> 04: 连环问-JS 闭包是内存泄漏吗</h2><p>上述代码 <code>genDataFns()</code> 就是一个很典型的闭包，闭包的变量是无法被垃圾回收的。</p><p>但闭包不是内存泄漏，因为它是符合开发者预期的，即本身就这么设计的。而内存泄漏是非预期的。</p><p>【注意】这一说法没有定论，有些面试官可能会说“不可被垃圾回收就是内存泄漏”，不可较真。</p><h2 id="_05-如何检测-js-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_05-如何检测-js-内存泄漏" aria-hidden="true">#</a> 05:如何检测 JS 内存泄漏</h2><blockquote><p>检测内存变化，一致上升即可初步判断为内存泄露</p></blockquote><h3 id="检测内存变化" tabindex="-1"><a class="header-anchor" href="#检测内存变化" aria-hidden="true">#</a> 检测内存变化</h3><p>可使用 Chrome devTools Performance 来检测内存变化</p><ul><li>刷新页面，点击“GC”按钮</li><li>点击“Record”按钮开始记录，然后操作页面</li><li>操作结束，点击“GC”按钮，点击“结束”按钮，看分析结果</li></ul><p>代码参考 <code>memory-change.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>memory change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
      memory change
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟一个比较大的数据</span>
        <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 简单的拷贝</span>
        <span class="token punctuation">}</span>

        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          n<span class="token operator">++</span>

          <span class="token comment">// 执行 50 次</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存泄漏的场景" tabindex="-1"><a class="header-anchor" href="#内存泄漏的场景" aria-hidden="true">#</a> 内存泄漏的场景</h3><blockquote><p>拿 Vue 来举例说明。</p></blockquote><ul><li><p>组件中有全局变量、函数的引用。组件销毁时要记得清空。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">printNums</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// beforeUnmount() {</span>
  <span class="token comment">//     window.printNums = null</span>
  <span class="token comment">// },</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>组件有全局定时器。组件销毁时要记得清除。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// intervalId: 0,</span>
      <span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// methods: {</span>
  <span class="token comment">//     printNums() {</span>
  <span class="token comment">//         console.log(this.nums)</span>
  <span class="token comment">//     }</span>
  <span class="token comment">// },</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>

    <span class="token comment">// this.intervalId = setInterval(this.printNums, 200)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// clearInterval(this.intervalId)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>组件中有全局事件的引用。组件销毁时记得解绑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// methods: {</span>
  <span class="token comment">//     printNums() {</span>
  <span class="token comment">//         console.log(this.nums)</span>
  <span class="token comment">//     }</span>
  <span class="token comment">// },</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// window.addEventListener(&#39;reisze&#39;, this.printNums)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// window.removeEventListener(&#39;reisze&#39;, this.printNums)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>组件中使用了自定义事件，销毁时要记得解绑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// methods: {</span>
  <span class="token comment">//     printNums() {</span>
  <span class="token comment">//         console.log(this.nums)</span>
  <span class="token comment">//     }</span>
  <span class="token comment">// },</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// event.on(&#39;event-key&#39;, this.printNums)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// event.off(&#39;event-key&#39;, this.printNums)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><p>前端之前不太关注内存泄漏，因为不会像服务单一样 7*24 运行。</p><p>而随着现在富客户端系统不断普及，内存泄漏也在慢慢的被重视。</p><h3 id="扩展-weakmap-weakset" tabindex="-1"><a class="header-anchor" href="#扩展-weakmap-weakset" aria-hidden="true">#</a> 扩展:WeakMap WeakSet</h3><p>WeakMap WeakSet 弱引用，不会影响垃圾回收。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数执行完，obj 会被销毁，因为外面的 WeakMap 是“弱引用”，不算在内</span>
<span class="token keyword">const</span> wMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 注意，WeakMap 专门做弱引用的，因此 WeakMap 只接受对象作为键名（\`null\`除外），不接受其他类型的值作为键名。其他的无意义</span>
  wMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 代码执行完毕之后，obj 会被销毁，wMap 中也不再存在。但我们无法第一时间看到效果。因为：</span>
<span class="token comment">// 内存的垃圾回收机制，不是实时的，而且是 JS 代码控制不了的，因此这里不一定能直接看到效果。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数执行完，obj 会被销毁，因为外面的 WeakSet 是“弱引用”，不算在内</span>
<span class="token keyword">const</span> wSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  wSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 注意，WeakSet 就是为了做弱引用的，因此不能 add 值类型！！！无意义</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-浏览器和-nodejs-事件循环-event-loop-有什么区别" tabindex="-1"><a class="header-anchor" href="#_06-浏览器和-nodejs-事件循环-event-loop-有什么区别" aria-hidden="true">#</a> 06: 浏览器和 nodejs 事件循环（Event Loop）有什么区别</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>浏览器和 nodejs 事件循环的区别</p><h3 id="单线程和异步" tabindex="-1"><a class="header-anchor" href="#单线程和异步" aria-hidden="true">#</a> 单线程和异步</h3><ul><li>JS 是单线程的，浏览器中 JS 和 DOM 渲染线程互斥。</li><li>单线程，代码就必须“串行”执行，无法并行，同一时间只能干一件事。</li></ul><p>在 Java 等多线程语言中，发起请求、设置定时任务可以通过新开一个线程来处理，这就是并行。<br> 而 JS 是单线程，这种场景就只能使用“异步”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h3><p>浏览器端异步的 API 有很多</p><ul><li>宏任务：setTimeout setInterval 网络请求</li><li>微任务：promise async/await、mutationObserver</li><li>微任务在下一轮 DOM 渲染之前执行，宏任务在之后执行</li></ul><p>两者表面的区别：</p><ul><li><p>第一，微任务比宏任务更快执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise.then&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二，微任务在 DOM 渲染前执行，而宏任务在 DOM 显示后（即真正显示到页面上，肉眼可见）执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;new paragraph&#39;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length----&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout----&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;阻塞&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise.then----&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;阻塞&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环" aria-hidden="true">#</a> 浏览器的事件循环</h3><p>主要的流程</p><ul><li>执行 JS 同步代码（执行异步 API 时，异步先放在一个队列中，先不执行）</li><li>DOM 渲染</li><li>执行队列中的异步函数（执行异步 API 时，异步先放在一个队列中，先不执行）—— 异步中可能还嵌套异步</li><li>DOM 渲染</li><li>执行队列中的异步函数（执行异步 API 时，异步先放在一个队列中，先不执行）</li><li>DOM 渲染</li><li>...</li></ul><p><img src="`+l+'" alt=""></p><p>考虑宏任务和微任务</p><ul><li>执行 JS 同步代码（异步函数，分别放在 macroTaskQueue 和 microTaskQueue ）</li><li>DOM 结构渲染（此时还没有在页面显示，但可以获取 DOM 内容了）</li><li>执行 microTaskQueue 函数（异步中还可能嵌套异步...）</li><li>显示 DOM 到页面</li><li>执行 macroTaskQueue 函数（异步中还可能嵌套异步...）</li><li>...</li></ul><h3 id="nodejs-事件循环" tabindex="-1"><a class="header-anchor" href="#nodejs-事件循环" aria-hidden="true">#</a> nodejs 事件循环</h3><ul><li>Nodejs 同样使用 ES 语法，也是单线程，也需要异步</li><li>异步任务也分：宏任务 + 微任务</li><li>但是，它的宏任务和微任务，分不同类型，有不同优先级</li></ul><p>浏览器的各种宏任务，都是按照代码的顺序执行的，没有其他优先级。</p><h4 id="nodejs-宏任务类型和优先级" tabindex="-1"><a class="header-anchor" href="#nodejs-宏任务类型和优先级" aria-hidden="true">#</a> Nodejs 宏任务类型和优先级</h4><p>nodejs 的宏任务是分了如下类型，nodejs 事件循环中宏任务需要按照这个顺序来执行。</p><ul><li>timers(计时器) - 执行 <code>setTimeout</code> 以及 <code>setInterval</code> 的回调</li><li>I/O callbacks - 处理网络、流、TCP 的错误回调</li><li>idle, prepare --- 闲置阶段 - node 内部使用</li><li>poll(轮循) - 执行 poll 中的 I/O 队列，检查定时器是否到时间</li><li>check(检查) - 存放 <code>setImmediate</code> 回调</li><li>close callbacks - 关闭回调，例如 <code>socket.on(&#39;close&#39;)</code></li></ul><h4 id="nodejs-微任务类型和优先级" tabindex="-1"><a class="header-anchor" href="#nodejs-微任务类型和优先级" aria-hidden="true">#</a> nodejs 微任务类型和优先级</h4><ul><li>包括：promise、 async/await、 process.nextTick</li><li>注意：process.nextTick 优先级最高</li></ul><h4 id="nodejs-事件循环的过程" tabindex="-1"><a class="header-anchor" href="#nodejs-事件循环的过程" aria-hidden="true">#</a> nodejs 事件循环的过程</h4><ul><li>执行同步代码</li><li>执行 <code>process.nextTick</code> 和微任务（前者优先级更高）</li><li>按照顺序执行 6 个类型的宏任务</li><li>...</li></ul><p><img src="'+u+`" alt=""></p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><ul><li>浏览器 和 nodejs 的 event loop 流程基本相同</li><li>nodejs 宏任务和微任务分类型，有优先级</li></ul><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h3><ul><li>推荐使用 setImmediate 代替 process.nextTick</li><li>本文基于 nodejs 最新版。nodejs 旧版会有所不同，特别注意</li></ul><h2 id="_07-虚拟-dom-vdom-真的很快吗" tabindex="-1"><a class="header-anchor" href="#_07-虚拟-dom-vdom-真的很快吗" aria-hidden="true">#</a> 07: 虚拟 DOM（vdom）真的很快吗</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>vdom 真的很快吗？</p><h3 id="vue-react-等框架的存在价值" tabindex="-1"><a class="header-anchor" href="#vue-react-等框架的存在价值" aria-hidden="true">#</a> Vue React 等框架的存在价值</h3><p>Vue React 等框架给前端开发带来了革命性的变化。相比于此前的 jQuery 时代，它们的价值在于</p><ul><li>组件化 —— 这不是核心原因。WebComponent 已提出多年，当仍未发展壮大</li><li>数据视图分离，数据驱动视图 —— 这才是核心！！！</li><li>让我们之关系业务数据，而不用关系 DOM 变化</li></ul><p>数据视图分离，开发时只需要关注业务数据（React 的 state，Vue 的 data）即可，不用在实时的修改 DOM —— 这一点和 jQuery 有了本质区别。</p><p>特别是对于大型的前端项目，将极大的降低开发复杂度，提高稳定性。</p><p>数据驱动视图，内部将如何实现呢？—— 借助于 vdom</p><h3 id="vdom" tabindex="-1"><a class="header-anchor" href="#vdom" aria-hidden="true">#</a> vdom</h3><ul><li><p>Virtual DOM，虚拟 DOM ，即用 JS 对象模拟 DOM 数据。是 React 最先提出来的概念。</p></li><li><p>React 的 JSX ，Vue 的 template 其实都是语法糖，它们本质上都是一个函数，成为 <code>render 函数</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// JSX: &lt;p id=&quot;p1&quot;&gt;hello world&lt;/p&gt;</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;p1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行 render 函数返回的就是一个 vdom 对象，一般叫做 vnode（虚拟节点），对应 DOM Node</p></li><li><p>每次数据更新（如 React setState）render 函数都会生成 newVnode ，然后前后对比 <code>diff(vnode, newVnode)</code>，计算出需要修改的 DOM 节点，再做修改。</p></li></ul><h3 id="对比-dom-操作" tabindex="-1"><a class="header-anchor" href="#对比-dom-操作" aria-hidden="true">#</a> 对比 DOM 操作</h3><p>下面两者，哪个更快？—— 很明显，前者更快。</p><ul><li>jquery 时代：直接修改 DOM</li><li>框架时代：生成 vdom ，进行 diff 运算 --&gt; 修改 DOM</li></ul><p>但凡事都要有一个业务背景。如果页面功能越来越复杂，直接操作 DOM 代码将会难以阅读和维护，大家更希望要“数据视图分离，数据驱动视图”。</p><p>在这个前提下，哪个更快？ —— 当然是后者。因为业务复杂、代码混乱，将会导致很多无谓的 DOM 操作 —— <strong>DOM 操作是昂贵的</strong></p><ul><li>直接修改 DOM</li><li>生成 vdom ，进行 diff 运算 --&gt; 修改 DOM</li></ul><p>而相比于昂贵的 DOM 操作，JS 运算非常快。所以 JS 多做事情（vdom diff）是更优的选择。</p><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>VDOM 并不快，JS 直接操作 DOM 才是最快的</li><li>但 “数据驱动视图” 要有更合适的技术方案，不能全部 DOM 重建</li><li>VDOM 就是目前最合适的技术方案（并不是因为它快，而是合适）</li></ul><p>所以，<strong>vdom 并不比 DOM 操作更快</strong>（反而更慢，它做了 JS 运算），它只是在某个特定的场景下，无法做到精准 DOM 修改时，一个更优的选择。</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3>`,95),q={href:"https://www.sveltejs.cn/",target:"_blank",rel:"noopener noreferrer"},_=e('<p><img src="'+r+`" alt=""></p><h2 id="_08-遍历一个数组用-for-和-foreach-哪个更快" tabindex="-1"><a class="header-anchor" href="#_08-遍历一个数组用-for-和-foreach-哪个更快" aria-hidden="true">#</a> 08: 遍历一个数组用 for 和 forEach 哪个更快</h2><h3 id="for-vs-foreach" tabindex="-1"><a class="header-anchor" href="#for-vs-foreach" aria-hidden="true">#</a> for vs forEach</h3><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p>for 和 forEach 哪个更快？为什么</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><blockquote><p>测试结果：for 更快</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=q, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>for vs forEach<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>for vs forEach<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length

      console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n1<span class="token operator">++</span>
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 3.7ms</span>

      console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;forEach&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">0</span>
      arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n2<span class="token operator">++</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;forEach&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 15.1ms</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建函数需要开销" tabindex="-1"><a class="header-anchor" href="#创建函数需要开销" aria-hidden="true">#</a> 创建函数需要开销</h3><p>for 直接在当前函数中执行，forEach 每次都要新创建一个函数。 函数有单独的作用域和上下文（可回顾“堆栈模型”），所以耗时更久。</p><h3 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h3><ul><li>for 更快，</li><li>因为 forEach 每次创建函数来调用，而 for 不会</li><li>函数需要独立的作用域，会有额外的开销</li></ul><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>越“低级”的代码，性能往往越好</li><li>日常开发别只考虑性能(前提是时间复杂度差不多)，forEach 可读性更好</li></ul><h3 id="扩展-1" tabindex="-1"><a class="header-anchor" href="#扩展-1" aria-hidden="true">#</a> 扩展</h3><p>开发中不仅要考虑性能，还要考虑代码的可读性，forEach 可读性更好。</p><h2 id="_09-nodejs-如何开启多进程-进程如何通讯" tabindex="-1"><a class="header-anchor" href="#_09-nodejs-如何开启多进程-进程如何通讯" aria-hidden="true">#</a> 09: nodejs 如何开启多进程，进程如何通讯</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>nodejs 如何开启一个进程，进程之间如何通讯</p><h3 id="进程-process-和线程-thread" tabindex="-1"><a class="header-anchor" href="#进程-process-和线程-thread" aria-hidden="true">#</a> 进程 process 和线程 thread</h3><ul><li><p>进程，是操作系统进行资源调度和分配的基本单位，每个进程都拥有自己独立的内存区域（参考“堆栈模型”）。</p><p>一个进程无法直接访问另一个进程的内存数据，除非通过合法的进程通讯。</p><p>执行一个 nodejs 文件，即开启了一个进程，可以通过 <code>process.pid</code> 查看进程 id 。</p></li><li><p>线程，是操作系统进行运算调度的最小单位，线程是附属于进程的。一个进程可以包含多个线程（至少一个），多线程之间可共用进程的内存数据。<br></p><p>如操作系统是一个工厂，进程就是一个车间，线程就是一个一个的工人。</p></li><li><p>JS 是单线程的，即执行 JS 时启动一个进程（如 JS 引擎，nodejs 等），然后其中再开启一个线程来执行。<br> 虽然单线程，JS 是基于事件驱动的，它不会阻塞执行，适合高并发的场景。</p></li></ul><h3 id="为何需要多进程" tabindex="-1"><a class="header-anchor" href="#为何需要多进程" aria-hidden="true">#</a> 为何需要多进程</h3><ul><li><p>现代服务器都是多核 CPU ，适合同时处理多进程。即，一个进程无法充分利用 CPU 性能，进程数要等于 CPU 核数。</p></li><li><p>服务器一般内存比较大，但操作系统对于一个进程的内存分配是有上限的（2G），所以多进程才能充分利用服务器内存。</p></li><li><p>总之，“压榨”机器资源，更快，更节省</p></li></ul><h3 id="nodejs-开启多进程" tabindex="-1"><a class="header-anchor" href="#nodejs-开启多进程" aria-hidden="true">#</a> nodejs 开启多进程</h3><ul><li><p><code>child_process.fork</code> 可开启子进程执行单独的计算（源码参考 process-fork.js）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// process-fork.js</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fork <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fork

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/get-sum&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;主进程 id&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>

    <span class="token comment">// 开启子进程</span>
    <span class="token keyword">const</span> computeProcess <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">&#39;./compute.js&#39;</span><span class="token punctuation">)</span>
    computeProcess<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;开始计算&#39;</span><span class="token punctuation">)</span>

    computeProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;主进程接受到的信息：&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;sum is &#39;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    computeProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;子进程因报错而退出&#39;</span><span class="token punctuation">)</span>
      computeProcess<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;localhost: 3000&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// compute.js</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> i
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子进程 id&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子进程接受到的信息: &#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

  <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 发送消息给主进程</span>
  process<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p><code>fork(&#39;xxx.js&#39;)</code> 开启一个子进程</p></li><li><p>使用 <code>send</code> 发送信息，使用 <code>on</code> 接收信息</p></li><li><p><code>cluster.fork</code> 可针对当前代码，开启多个进程来执行（源码参考 cluster.js）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cluster.js</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cpuCoreLength <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>cluster<span class="token punctuation">.</span>isMaster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpuCoreLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启子进程</span>
  <span class="token punctuation">}</span>

  cluster<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">worker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子进程退出&#39;</span><span class="token punctuation">)</span>
    cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进程守护</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 多个子进程会共享一个 TCP 连接，提供一份网络服务</span>
  <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><ul><li>可使用 <code>child_process.fork</code> 和 <code>cluster.fork</code> 开启子进程</li><li>使用 <code>send</code> <code>on</code> 传递消息</li></ul><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>进程 VS 线程</li><li>JS 是单线程的</li></ul><h3 id="扩展-使用-pm2" tabindex="-1"><a class="header-anchor" href="#扩展-使用-pm2" aria-hidden="true">#</a> 扩展：使用 PM2</h3>`,31),M={href:"https://www.npmjs.com/package/pm2",target:"_blank",rel:"noopener noreferrer"},S=e('<ul><li>全局安装 pm2 <code>yarn global add pm2</code></li><li>增加 pm2 配置文件</li><li>修改 package.json scripts</li></ul><h2 id="_10-请描述-js-bridge-的实现原理" tabindex="-1"><a class="header-anchor" href="#_10-请描述-js-bridge-的实现原理" aria-hidden="true">#</a> 10: 请描述 js-bridge 的实现原理</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>请描述 js-bridge 原理</p><h3 id="什么是-js-bridge" tabindex="-1"><a class="header-anchor" href="#什么是-js-bridge" aria-hidden="true">#</a> 什么是 JS Bridge</h3><ul><li>JS 无法直接调用 native API</li><li>需要一些特殊的 “格式” 来调用</li><li>这些 “格式” 就通称为 JS Bridge, 例如微信 JSSDK</li></ul><h3 id="微信-jssdk" tabindex="-1"><a class="header-anchor" href="#微信-jssdk" aria-hidden="true">#</a> 微信 jssdk</h3>',7),D={href:"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html",target:"_blank",rel:"noopener noreferrer"},E=e('<p>JS 无法直接调用 app 的 API ，需要通过一种方式 —— 通称 js-bridge ，它也是一些 JS 代码。<br> 当然，前提是 app 得开发支持，控制权在 app 端。就像跨域，server 不开放支持，客户端再折腾也没用。</p><p><img src="'+d+`" alt=""></p><h3 id="js-bridge-的常见实现方式" tabindex="-1"><a class="header-anchor" href="#js-bridge-的常见实现方式" aria-hidden="true">#</a> JS Bridge 的常见实现方式</h3><ul><li>注册全局 API</li><li>URL Schema</li></ul><h4 id="方式-1-注入-api" tabindex="-1"><a class="header-anchor" href="#方式-1-注入-api" aria-hidden="true">#</a> 方式 1 - 注入 API</h4><p>客户端为 webview 做定制开发，在 window 增加一些 API ，共前端调用。</p><p>例如增加一个 <code>window.getVersion</code> API ，前端 JS 即可调用它来获取 app 版本号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> v <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但这种方式一般都是<strong>同步</strong>的。<br> 因为你即便你传入了一个 callback 函数，app 也无法执行。app 只能执行一段全局的 JS 代码（像 <code>eval</code>）</p><h4 id="方式-2-劫持-url-scheme" tabindex="-1"><a class="header-anchor" href="#方式-2-劫持-url-scheme" aria-hidden="true">#</a> 方式 2 - 劫持 url scheme</h4><p>一个 iframe 请求 url ，返回的是一个网页。天然支持异步。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> iframe1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;iframe1&#39;</span><span class="token punctuation">)</span>
iframe1<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe1<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
iframe1<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8881/size-unit.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 url 使用的是标准的 http 协议，如果要改成 <code>&#39;my-app-name://api/getVersion&#39;</code> 呢？—— 默认会报错，<code>&#39;my-app-name&#39;</code> 是一个未识别的协议名称。<br> 既然未识别的协议，那就可以为我所用：app 监听所有的网络请求，遇到 <code>my-app-name:</code> 协议，就分析 path ，并返回响应的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> iframe1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;iframe1&#39;</span><span class="token punctuation">)</span>
iframe1<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe1<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
  <span class="token comment">// &#39;{ version: &#39;1.0.1&#39; }&#39;</span>
<span class="token punctuation">}</span>
iframe1<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;my-app-name://api/getVersion&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种自定义协议的方式，就叫做“url scheme”。微信的 scheme 以 <code>&#39;weixin://&#39;</code> 开头，可搜索“微信 scheme”。</p><p>chrome 也有自己的 scheme</p><ul><li><code>chrome://version</code> 查看版本信息</li><li><code>chrome://dino</code> 恐龙小游戏 其他可参考 https://mp.weixin.qq.com/s/T1Qkt8DTZvpsm8CKtEpNxA</li></ul><h3 id="封装-sdk" tabindex="-1"><a class="header-anchor" href="#封装-sdk" aria-hidden="true">#</a> 封装 sdk</h3><p>scheme 的调用方式非常复杂，不能每个 API 都写重复的代码，所以一般要封装 sdk ，就像微信提供的 jssdk 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sdk <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span>
    iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>

    iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> content <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML
        <span class="token function">success</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
        iframe<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    iframe<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        iframe<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">my-app-name://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?data=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;api/fn1&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;api/fn2&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
sdk<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;err&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="答案-4" tabindex="-1"><a class="header-anchor" href="#答案-4" aria-hidden="true">#</a> 答案</h3><p>常用方法：劫持 url scheme</p><h3 id="扩展-2" tabindex="-1"><a class="header-anchor" href="#扩展-2" aria-hidden="true">#</a> 扩展</h3><p>url 长度不够怎么办？—— 可以扩展 ajax post 方式。</p><h2 id="_11-requestidlecallback-和-requestanimationframe-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-requestidlecallback-和-requestanimationframe-有什么区别" aria-hidden="true">#</a> 11: requestIdleCallback 和 requestAnimationFrame 有什么区别</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p>是否了解过 requestIdleCallback ？</p><h3 id="由-react-fiber-引起的关注" tabindex="-1"><a class="header-anchor" href="#由-react-fiber-引起的关注" aria-hidden="true">#</a> 由 React Fiber 引起的关注</h3><ul><li>组件树转换为链表，可分段渲染</li><li>渲染可以暂停，去执行其他高优任务，空闲时在继续渲染</li><li>如何判断空闲？？？ ---核心 API requestIdleCallback</li></ul><p>React 16 内部使用 Fiber ，即组件渲染过程可以暂停，先去执行高优任务，CPU 闲置时再继续渲染。<br> 其中用到的核心 API 就是 requestIdleCallback 。</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><h4 id="requestanimationframe-每次渲染都执行-高优" tabindex="-1"><a class="header-anchor" href="#requestanimationframe-每次渲染都执行-高优" aria-hidden="true">#</a> requestAnimationFrame 每次渲染都执行，高优</h4><p>页面的渲染是一帧一帧进行的，至少每秒 60 次（即 16.6ms 一次）才能肉眼感觉流畅。所以，网页动画也要这个帧率才能流畅。</p><p>用 JS 来控制时间是不靠谱的，因为 JS 执行本身还需要时间，而且 JS 和 DOM 渲染线程互斥。所以 ms 级别的时间会出现误差。<br><code>requestAnimationFrame</code> 就解决了这个问题，浏览器每次渲染都会执行，不用自己计算时间。</p><p>代码参考 requestAnimationFrame.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// requestAnimationFrame.html
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>requestAnimationFrame<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">#box</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #333<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>requestAnimationFrame<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>

      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> curWidth <span class="token operator">=</span> <span class="token number">100</span>
        <span class="token keyword">const</span> maxWidth <span class="token operator">=</span> <span class="token number">400</span>

        <span class="token keyword">function</span> <span class="token function">addWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          curWidth <span class="token operator">=</span> curWidth <span class="token operator">+</span> <span class="token number">3</span>
          box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>curWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>curWidth <span class="token operator">&lt;</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>addWidth<span class="token punctuation">)</span> <span class="token comment">// 时间不用自己控制</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">addWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="requestidlecallback-空闲时才执行-低优" tabindex="-1"><a class="header-anchor" href="#requestidlecallback-空闲时才执行-低优" aria-hidden="true">#</a> requestIdleCallback 空闲时才执行，低优</h4><ul><li><p>requestIdleCallback 会在网页渲染完成后，CPU 空闲时执行，不一定每一帧都执行。</p></li><li><p>requestIdleCallback 不适合执行 DOM 操作，因为修改了 DOM 之后下一帧不一定会触发修改。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>requestIdleCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>requestIdleCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;requestIdleCallback&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;requestAnimationFrame&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 打印结果如下
start
end
timeout
requestAnimationFrame
requestIdleCallback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="都是宏任务" tabindex="-1"><a class="header-anchor" href="#都是宏任务" aria-hidden="true">#</a> 都是宏任务</h3><p>requestAnimationFrame 和 requestIdleCallback 都是宏任务，要等待 DOM 渲染完才执行</p><p>它们比 setTimeout 更晚触发。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>requestAnimationFrame 可用于网页动画。</p><p>requestIdleCallback 可用于一些低优先级的场景，以代替 setTimeout 。例如发送统计数据。<br> 但请注意 requestIdleCallback 的浏览器兼容性</p><h3 id="答案-5" tabindex="-1"><a class="header-anchor" href="#答案-5" aria-hidden="true">#</a> 答案</h3><p>requestIdleCallback 可在网页渲染完成后，CPU 空闲时执行，用于低优先级的任务处理。</p><h2 id="_12-vue-每个生命周期都做了什么" tabindex="-1"><a class="header-anchor" href="#_12-vue-每个生命周期都做了什么" aria-hidden="true">#</a> 12: Vue 每个生命周期都做了什么</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p>Vue 每个生命周期都做了什么</p><h3 id="vue-生命周期" tabindex="-1"><a class="header-anchor" href="#vue-生命周期" aria-hidden="true">#</a> Vue 生命周期</h3><p><img src="`+k+`" alt=""></p><h3 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate" aria-hidden="true">#</a> beforeCreate</h3><ul><li>初始化一个空的 Vue 实例，</li><li><code>data</code> <code>methods</code> 等尚未被初始化，无法调用。</li></ul><h3 id="created" tabindex="-1"><a class="header-anchor" href="#created" aria-hidden="true">#</a> created</h3><ul><li>Vue 实例初始化完成，完成响应式绑定</li><li><code>data</code> <code>methods</code> 都已初始化完成，可调用。</li><li>但尚未开始渲染模板。</li></ul><h3 id="beforemount" tabindex="-1"><a class="header-anchor" href="#beforemount" aria-hidden="true">#</a> beforeMount</h3><ul><li>编译模板，调用 <code>render</code> 函数生成 vdom</li><li>但还没有开始渲染 DOM</li></ul><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h3><ul><li>渲染 DOM 完成，页面更新</li><li>组件创建完成，开始进入运行阶段。</li></ul><h3 id="beforeupdate" tabindex="-1"><a class="header-anchor" href="#beforeupdate" aria-hidden="true">#</a> beforeUpdate</h3><ul><li>data 发生变化之后</li><li>准备更新 DOM (尚未更新 DOM)</li></ul><h3 id="updated" tabindex="-1"><a class="header-anchor" href="#updated" aria-hidden="true">#</a> updated</h3><ul><li><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</p></li><li><p>注意，尽量不要在 <code>updated</code> 中继续修改数据，否则可能会触发死循环。</p></li></ul><h3 id="onactivated" tabindex="-1"><a class="header-anchor" href="#onactivated" aria-hidden="true">#</a> onActivated</h3><ul><li>被 <code>keep-alive</code> 缓存的组件激活时调用。</li></ul><h3 id="ondeactivated" tabindex="-1"><a class="header-anchor" href="#ondeactivated" aria-hidden="true">#</a> onDeactivated</h3><ul><li>被 <code>keep-alive</code> 缓存的组件停用时调用。</li></ul><h3 id="beforeunmount" tabindex="-1"><a class="header-anchor" href="#beforeunmount" aria-hidden="true">#</a> beforeUnmount</h3><ul><li><p>组件进入销毁阶段（尚未销毁，可正常使用）。</p></li><li><p>移除、解绑一些全局事件、自定义事件，可以在此时操作。</p></li></ul><h3 id="unmounted" tabindex="-1"><a class="header-anchor" href="#unmounted" aria-hidden="true">#</a> unmounted</h3><ul><li>组件被销毁了，所有的子组件也被销毁了。</li><li>调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除</li></ul><h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>Vue 生命周期必须掌握</li></ul><h2 id="_13-连环问-vue-什么时候操作-dom-比较合适" tabindex="-1"><a class="header-anchor" href="#_13-连环问-vue-什么时候操作-dom-比较合适" aria-hidden="true">#</a> 13: 连环问：vue 什么时候操作 DOM 比较合适</h2><ul><li>注意 <code>mounted</code> 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 <code>mounted</code> 内部使用 <code>vm.$nextTick</code>：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 仅在整个视图都被渲染之后才会运行的代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-连环问-ajax-放在哪个生命周期合适" tabindex="-1"><a class="header-anchor" href="#_14-连环问-ajax-放在哪个生命周期合适" aria-hidden="true">#</a> 14: 连环问：ajax 放在哪个生命周期合适？</h2><p>一般有两个选择：<code>created</code> 和 <code>mounted</code> ，建议选择后者 <code>mounted</code> 。</p><p>执行速度</p><ul><li>从理论上来说，放在 <code>created</code> 确实会快一些</li><li>但 ajax 是网络请求，其时间是主要的影响因素。从 <code>created</code> 到 <code>mounted</code> 是 JS 执行，速度非常快。</li><li>所以，两者在执行速度上不会有肉眼可见的差距</li></ul><p>代码的阅读和理解</p><ul><li>放在 <code>created</code> 却会带来一些沟通和理解成本，从代码的执行上来看，它会一边执行组件渲染，一边触发网络请求，并行</li><li>放在 <code>mounted</code> 就是等待 DOM 渲染完成再执行网络请求，串行，好理解</li></ul><p>所以，综合来看，更建议选择 <code>mounted</code> 。</p><h2 id="_15-连环问-vue3-中-composition-api-生命周期有何不同" tabindex="-1"><a class="header-anchor" href="#_15-连环问-vue3-中-composition-api-生命周期有何不同" aria-hidden="true">#</a> 15: 连环问： Vue3 中 Composition API 生命周期有何不同</h2>`,84),O=n("li",null,[n("code",null,"setup"),s(" 代替了 "),n("code",null,"beforeCreate"),s(" 和 "),n("code",null,"created")],-1),I=n("code",null,"mounted",-1),C=n("code",null,"onMounted",-1),A={href:"https://v3.cn.vuejs.org/api/composition-api.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},V=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onUpdated<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-vue2-和-vue3-和-react-三者的-diff-算法有什么区别" tabindex="-1"><a class="header-anchor" href="#_16-vue2-和-vue3-和-react-三者的-diff-算法有什么区别" aria-hidden="true">#</a> 16: Vue2 和 Vue3 和 React 三者的 diff 算法有什么区别</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> 题目</h3><p>Vue React diff 算法有什么区别</p><h3 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> diff 算法</h3><p>diff 算法是一个非常普遍常用的方法，例如提交 github pr 或者（gitlab mr）时，会对比当前提交代码的改动，这就是 diff 。</p><p>Vue React diff 不是对比文字，而是 vdom 树，即 tree diff 。<br> 传统的 tree diff 算法复杂度是 <code>O(n^3)</code> ，算法不可用。</p><p><img src="`+v+'" alt=""></p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>Vue React 都是用于网页开发，基于 DOM 结构，对 diff 算法都进行了优化（或者简化）</p><ul><li>只在同一层级比较，不夸层级 （DOM 结构的变化，很少有跨层级移动）</li><li><code>tag</code> 不同则直接删掉重建，不去对比内部细节（DOM 结构变化，很少有只改外层，不改内层）</li><li>同一个节点下的子节点，通过 <code>key</code> 区分</li></ul><p>最终把时间复杂度降低到 <code>O(n)</code> ，生产环境下可用。这一点 Vue React 都是相同的。</p><p><img src="'+m+'" alt=""></p><h3 id="学习技巧" tabindex="-1"><a class="header-anchor" href="#学习技巧" aria-hidden="true">#</a> 学习技巧</h3><ul><li>diff 算法非常复杂，不要深究细节</li><li>既然是三者的比较，说出他们最大的不同即可</li></ul><h3 id="react-diff-特点-仅向右移动" tabindex="-1"><a class="header-anchor" href="#react-diff-特点-仅向右移动" aria-hidden="true">#</a> React diff 特点 - 仅向右移动</h3><p>比较子节点时，仅向右移动，不向左移动。</p><p><img src="'+h+'" alt=""></p><h3 id="vue2-diff-特点-双端比较" tabindex="-1"><a class="header-anchor" href="#vue2-diff-特点-双端比较" aria-hidden="true">#</a> Vue2 diff 特点 - 双端比较</h3><p><img src="'+b+'" alt=""></p><p>定义四个指针，分别比较</p><ul><li>oldStartNode 和 newStartNode</li><li>oldStartNode 和 newEndNode</li><li>oldEndNode 和 newStartNode</li><li>oldEndNode 和 newEndNode</li></ul><p>然后指针继续向中间移动，知道指针汇合。</p><h3 id="vue3-diff-特点-最长递增子序列" tabindex="-1"><a class="header-anchor" href="#vue3-diff-特点-最长递增子序列" aria-hidden="true">#</a> Vue3 diff 特点 - 最长递增子序列</h3><p>例如数组 <code>[3，5，7，1，2，8]</code> 的最长递增子序列就是 <code>[3，5，7，8 ]</code> 。这是一个专门的算法。</p><p><img src="'+g+'" alt=""></p><p>算法步骤</p><ul><li>通过“前-前”比较找到开始的不变节点 <code>[A, B]</code></li><li>通过“后-后”比较找到末尾的不变节点 <code>[G]</code></li><li>剩余的有变化的节点 <code>[F, C, D, E, H]</code><ul><li>通过 <code>newIndexToOldIndexMap</code> 拿到 oldChildren 中对应的 index <code>[5, 2, 3, 4, -1]</code> （<code>-1</code> 表示之前没有，要新增）</li><li>计算<strong>最长递增子序列</strong>得到 <code>[2, 3, 4]</code> ，对应的就是 <code>[C, D, E]</code> ，即这些节点可以不变</li><li>剩余的节点，根据 index 进行新增、删除</li></ul></li></ul><p>该方法旨在尽量减少 DOM 的移动，达到最少的 DOM 操作。</p><h3 id="答案-6" tabindex="-1"><a class="header-anchor" href="#答案-6" aria-hidden="true">#</a> 答案</h3><ul><li>React diff 特点 - 仅向右移动</li><li>Vue2 diff 特点 - 双端比较</li><li>Vue3 diff 特点 - 最长递增子序列</li></ul><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> 划重点</h3><ul><li>以最小的成本了解原理，知道区别，应对面试。</li><li>不要纠结于细节和源码，这会耗费你大量的时间成本 —— 除非你目的就是学习源码，这也不是本课程的重点。</li></ul><h3 id="连环问-diff-算法中-key-为何如此重要" tabindex="-1"><a class="header-anchor" href="#连环问-diff-算法中-key-为何如此重要" aria-hidden="true">#</a> 连环问：diff 算法中 key 为何如此重要</h3><ul><li>VDom diff 算法会根据 key 判断元素是否要删除？</li><li>匹配了 key，则只移动元素 - 性能较好</li><li>未匹配 key, 则删除重建 - 性能较差</li></ul><p>无论在 Vue 还是 React 中，<code>key</code> 的作用都非常大。以 React 为例，是否使用 <code>key</code> 对内部 DOM 变化影响非常大。</p><p><img src="'+f+`" alt=""></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(index, num) in nums<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> todoItems <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_17-vue-router-的-memoryhistory-是什么" tabindex="-1"><a class="header-anchor" href="#_17-vue-router-的-memoryhistory-是什么" aria-hidden="true">#</a> 17: Vue-router 的 MemoryHistory 是什么</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>Vue-router 模式 <code>&#39;hash&#39; | &#39;history&#39; | &#39;abstract&#39;</code> 的区别</p><h3 id="v4-的升级" tabindex="-1"><a class="header-anchor" href="#v4-的升级" aria-hidden="true">#</a> v4 的升级</h3><p>Vue-router v4 升级之后，<code>mode: &#39;xxx&#39;</code> 替换为 API 的形式，但功能是一样的</p><ul><li><code>mode: &#39;hash&#39;</code> 替换为 <code>createWebHashHistory()</code></li><li><code>mode: &#39;history&#39;</code> 替换为 <code>createWebHistory()</code></li><li><code>mode: &#39;abstract&#39;</code> 替换为 <code>createMemoryHistory()</code></li></ul><p>PS：个人感觉，叫 <code>memory</code> 比叫 <code>abstract</code> 更易理解，前者顾名思义，后者就过于抽象。</p><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// http://127.0.0.1:8881/hash.html?a=100&amp;b=20#/aaa/bbb</span>
location<span class="token punctuation">.</span>protocol <span class="token comment">// &#39;http:&#39;</span>
location<span class="token punctuation">.</span>hostname <span class="token comment">// &#39;127.0.0.1&#39;</span>
location<span class="token punctuation">.</span>host <span class="token comment">// &#39;127.0.0.1:8881&#39;</span>
location<span class="token punctuation">.</span>port <span class="token comment">// &#39;8881&#39;</span>
location<span class="token punctuation">.</span>pathname <span class="token comment">// &#39;/hash.html&#39;</span>
location<span class="token punctuation">.</span>search <span class="token comment">// &#39;?a=100&amp;b=20&#39;</span>
location<span class="token punctuation">.</span>hash <span class="token comment">// &#39;#/aaa/bbb&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hash 的特点</p><ul><li>会触发页面跳转，可使用浏览器的“后退” “前进”</li><li>但不会刷新页面，支持 SPA 必须的特性</li><li>hash 不会被提交到 server 端（因此刷新页面也会命中当前页面，让前端根据 hash 处理路由）</li></ul><p>url 中的 hash ，是不会发送给 server 端的。前端 <code>onhashchange</code> 拿到自行处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 页面初次加载，获取 hash</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hash&#39;</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// hash 变化，包括：</span>
<span class="token comment">// a. JS 修改 url</span>
<span class="token comment">// b. 手动修改 url 的 hash</span>
<span class="token comment">// c. 浏览器前进、后退</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;old url&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>oldURL<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;new url&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>newURL<span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hash&#39;</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="h5-history-api" tabindex="-1"><a class="header-anchor" href="#h5-history-api" aria-hidden="true">#</a> H5 history API</h3><p>常用的两个 API</p><ul><li><code>history.pushState</code></li><li><code>window.onpopstate</code></li></ul>`,55),P=n("strong",null,"服务端要做处理",-1),J={href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},T=e('<p>按照 url 规范，不同的 url 对应不同的资源，例如：</p><ul><li><code>https://github.com/</code> server 返回首页</li><li><code>https://github.com/username/</code> server 返回用户页</li><li><code>https://github.com/username/project1/</code> server 返回项目页</li></ul><p>但是用了 SPA 的前端路由，就改变了这一规则，假如 github 用了的话：</p><ul><li><code>https://github.com/</code> server 返回首页</li><li><code>https://github.com/username/</code> server 返回首页，前端路由跳转到用户页</li><li><code>https://github.com/username/project1/</code> server 返回首页，前端路由跳转到项目页</li></ul><p>所以，从开发者的实现角度来看，前端路由是一个违反规则的形式。 但是从不关心后端，只关心前端页面的用户，或者浏览器来看，更喜欢 <code>pushState</code> 这种方式。</p><p>代码参考 history-api.html</p><h3 id="三种模式的区别" tabindex="-1"><a class="header-anchor" href="#三种模式的区别" aria-hidden="true">#</a> 三种模式的区别</h3><ul><li>hash - 使用 url hash 变化记录路由地址</li><li>history - 使用 H5 history API 来改 url 记录路由地址</li><li>abstract - 不修改 url ，路由地址在内存中，<strong>但页面刷新会重新回到首页</strong>。</li></ul><h3 id="连环问-react-router-有几种模式" tabindex="-1"><a class="header-anchor" href="#连环问-react-router-有几种模式" aria-hidden="true">#</a> 连环问：react-router 有几种模式？</h3><p>react-router 有三种模式，设计上和 vue-router 一样</p>',10),N={href:"https://reactrouter.com/web/api/BrowserRouter",target:"_blank",rel:"noopener noreferrer"},R={href:"https://reactrouter.com/web/api/HashRouter",target:"_blank",rel:"noopener noreferrer"},W={href:"https://reactrouter.com/web/api/MemoryRouter",target:"_blank",rel:"noopener noreferrer"},F=e('<h2 id="_18-总结" tabindex="-1"><a class="header-anchor" href="#_18-总结" aria-hidden="true">#</a> 18: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解前端技术深度相关面试题。包括 JS 内存相关，Vue 和 React 相关原理。 大厂的技术评级时，技术深度是重要的参考标准，这很重要。</p><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><ul><li>JS 相关原理</li><li>Vue 相关原理</li><li>React 相关原理</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><p>深了就不能广，别要求太多。有 1-2 方面突出的就可以。</p>',7);function U(B,L){const a=o("ExternalLinkIcon");return c(),i("div",null,[x,n("p",null,[n("a",w,[s("js 面试之闭包和内存泄漏"),t(a)])]),j,n("p",null,[n("a",q,[s("Svelte"),t(a)]),s(" 不使用 vdom ，它将组件修改，编译为精准的 DOM 操作。和 React 设计思路完全不一样。")]),_,n("p",null,[s("nodejs 服务开启多进程、进程守护，可使用 "),n("a",M,[s("pm2"),t(a)]),s(" ，不需要自己写。代码参考 koa2-code")]),S,n("p",null,[s("微信中的 h5 通过 "),n("a",D,[s("jssdk"),t(a)]),s(" 提供的 API 可以调用微信 app 的某些功能。")]),E,n("ul",null,[O,n("li",null,[s("生命周期换成了函数的形式，如 "),I,s(" -> "),C,s(" 参考 "),n("a",A,[s("官方地址"),t(a)])])]),V,n("p",null,[s("页面刷新时，"),P,s("，可参考"),n("a",J,[s("文档"),t(a)]),s("。。即无论什么 url 访问 server ，都要返回该页面。")]),T,n("ul",null,[n("li",null,[n("a",N,[s("browser history"),t(a)])]),n("li",null,[n("a",R,[s("hash history"),t(a)])]),n("li",null,[n("a",W,[s("memory history"),t(a)])])]),F])}const z=p(y,[["render",U],["__file","index-05.html.vue"]]);export{z as default};
