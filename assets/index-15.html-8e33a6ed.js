import{_ as e,M as o,p as c,q as i,R as n,t as a,N as t,a1 as p}from"./framework-e8cb8151.js";const l={},u=p(`<h1 id="_15-工程化脚手架-进阶实战——工程化脚手架启动流程实战" tabindex="-1"><a class="header-anchor" href="#_15-工程化脚手架-进阶实战——工程化脚手架启动流程实战" aria-hidden="true">#</a> 15-工程化脚手架：进阶实战——工程化脚手架启动流程实战</h1><h2 id="_01-node-文件监听-chokidar-库详解" tabindex="-1"><a class="header-anchor" href="#_01-node-文件监听-chokidar-库详解" aria-hidden="true">#</a> 01: Node 文件监听 chokidar 库详解</h2><ol><li><p>安装依赖库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> chokidar <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>lib/start/startServer.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chokidar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chokidar&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 启动 webpack 服务</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 启动配置监听服务</span>
  <span class="token comment">// 使用三方库：chokidar</span>
  <span class="token comment">// 这里先通过监听 start 文件夹来查看回调数据</span>
  chokidar
    <span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 1. 通过子进程启动一个 webpack-dev-server 服务</span>
  <span class="token comment">// 1.1 子进程启动可以避免主进程收到影响</span>
  <span class="token comment">// 1.2 子进程启动可以方便重启，解决修改配置后无法重启的问题</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 2. 监听配置修改</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>lib/build/buildServer.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;build server&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>新建<code>lib/start/config.js</code>，内容如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{ a: &#39;1&#39; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行如下命令，及相应效果如下(可以看到此时监听了三个项目：<code>start文件夹、config.js、startServer.js</code>)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  imooc-build start
start server
addDir /Users/gaoyuan/Desktop/imooc-build/lib/start
<span class="token function">add</span> /Users/gaoyuan/Desktop/imooc-build/lib/start/config.js
<span class="token function">add</span> /Users/gaoyuan/Desktop/imooc-build/lib/start/startServer.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果修改了其中的文件，比如<code>config.js</code>，修改如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>change /Users/gaoyuan/Desktop/imooc-build/lib/start/config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_02-chokidar-实现原理和源码分析" tabindex="-1"><a class="header-anchor" href="#_02-chokidar-实现原理和源码分析" aria-hidden="true">#</a> 02: chokidar 实现原理和源码分析</h2><ol><li><p>打开<code>node_modules/chokidar/package.json</code>文件，可以看到如下内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  ...
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开这个文件可以看到</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">watch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paths<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FSWatcher</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment">// 实例化这个 FSWatcher 类</span>
  watcher<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span>
  <span class="token keyword">return</span> watcher
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>watch <span class="token operator">=</span> watch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这个类继承于<code>EventEmitter</code>事件派发器</p></li></ol><h2 id="_03-通过-chokidar-实现-config-配置文件监听" tabindex="-1"><a class="header-anchor" href="#_03-通过-chokidar-实现-config-配置文件监听" aria-hidden="true">#</a> 03：通过 chokidar 实现 config 配置文件监听</h2><ol><li><p>修改<code>startServer.js</code>,监听<code>config.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./config.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar
    <span class="token comment">// .watch(path.resolve(__dirname, &#39;../start&#39;))</span>
    <span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;erro&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;file watch error!&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_04-划重点-node-启动子进程方法之-execfile-exec" tabindex="-1"><a class="header-anchor" href="#_04-划重点-node-启动子进程方法之-execfile-exec" aria-hidden="true">#</a> 04: 划重点：Node 启动子进程方法之 execFile + exec</h2><h3 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h3><ul><li><p>进程是程序的一个最小单位，</p></li><li><p>在终端中可以通过<code>ps -ef</code>来查看所有的进程</p></li><li><p>进程都有 <code>PID、PPID</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span>
  <span class="token environment constant">UID</span>   PID  <span class="token environment constant">PPID</span>   C STIME   TTY           TIME CMD
    <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">0</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">7</span>:36.74 /sbin/launchd
    <span class="token number">0</span>    <span class="token number">97</span>     <span class="token number">1</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">0</span>:17.92 /usr/sbin/syslogd
    <span class="token number">0</span>    <span class="token number">98</span>     <span class="token number">1</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">2</span>:03.46 /usr/libexec/UserEventAgent <span class="token punctuation">(</span>System<span class="token punctuation">)</span>
    <span class="token number">0</span>   <span class="token number">101</span>     <span class="token number">1</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">0</span>:19.90 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld
    <span class="token number">0</span>   <span class="token number">102</span>     <span class="token number">1</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">0</span>:01.72 /usr/libexec/kextd
    <span class="token number">0</span>   <span class="token number">103</span>     <span class="token number">1</span>   <span class="token number">0</span> 四06下午 ??         <span class="token number">3</span>:37.02 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="启动子进程的方式" tabindex="-1"><a class="header-anchor" href="#启动子进程的方式" aria-hidden="true">#</a> 启动子进程的方式</h4>`,11),r={href:"https://www.runoob.com/nodejs/nodejs-process.html#",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6882290865763680264",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>Node 提供了 child_process 模块来创建子进程，方法有：</p><ul><li><strong>exec</strong> - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。</li><li><strong>execFile</strong>: 启动一个子进程来执行可执行文件；</li><li><strong>spawn</strong> - child_process.spawn 使用指定的命令行参数创建新进程。</li><li><strong>fork</strong> - child_process.fork 是 spawn() 的特殊形式，用于在子进程中运行的模块，如 fork(&#39;./son.js&#39;) 相当于 spawn(&#39;node&#39;, [&#39;./son.js&#39;]) 。与 spawn 方法不同的是，fork 会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</li></ul><p>新建文件<code>start/devService.js</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------- dev service start ----------&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>ppid<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------- dev service end ----------&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec-方式创建子进程" tabindex="-1"><a class="header-anchor" href="#exec-方式创建子进程" aria-hidden="true">#</a> exec 方式创建子进程</h3><ol><li><p>修改<code>startServer.js</code>方法，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token keyword">const</span> cp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 启动子进程的方式</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第一中使用 exec</span>
  cp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>
    <span class="token string">&#39;node &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;err&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dev callback&#39;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端命令及效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  imooc-build start
start server
pid <span class="token number">93502</span>
dev callback
-------- dev <span class="token function">service</span> start ----------
<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>
<span class="token punctuation">]</span>
<span class="token number">93503</span>
<span class="token number">93502</span>
-------- dev <span class="token function">service</span> end ----------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="execfile-方式创建子进程" tabindex="-1"><a class="header-anchor" href="#execfile-方式创建子进程" aria-hidden="true">#</a> execFile 方式创建子进程</h3><ol><li><p>修改<code>startServer.js</code>方法，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第二种：使用 execFile 方式</span>
  cp<span class="token punctuation">.</span><span class="token function">execFile</span><span class="token punctuation">(</span>
    <span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端命令及效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
start server
pid <span class="token number">97678</span>
-------- dev <span class="token function">service</span> start ----------
<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>
<span class="token punctuation">]</span>
<span class="token number">97680</span>
<span class="token number">97678</span>
-------- dev <span class="token function">service</span> end ----------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_05-划重点-node-启动子进程方法之-spawn-fork" tabindex="-1"><a class="header-anchor" href="#_05-划重点-node-启动子进程方法之-spawn-fork" aria-hidden="true">#</a> 05: 划重点：Node 启动子进程方法之 spawn+fork</h2><h3 id="spawn" tabindex="-1"><a class="header-anchor" href="#spawn" aria-hidden="true">#</a> spawn</h3><ol><li><p>修改<code>startServer.js</code>方法，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第三种：使用 spwan</span>
  <span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 输出相关的数据</span>
  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data from child: &#39;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 错误的输出</span>
  child<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error from child: &#39;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 子进程结束时输出</span>
  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child exists with code: &#39;</span> <span class="token operator">+</span> code<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端命令及效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$  imooc-build start
start server
pid <span class="token number">98855</span>
data from child: -------- dev <span class="token function">service</span> start ----------

data from child: <span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>
<span class="token punctuation">]</span>
<span class="token number">98856</span>
<span class="token number">98855</span>
data from child: -------- dev <span class="token function">service</span> end ----------
child exists with code: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> fork</h3><blockquote><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程, <strong>可以帮会我们进行进程间的通信</strong></p></blockquote><ol><li><p>修改<code>startServer.js</code>方法，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第四种：fork</span>
  <span class="token keyword">const</span> srciprtPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端命令及效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
start server
pid <span class="token number">99720</span>
-------- dev <span class="token function">service</span> start ----------
<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>
<span class="token punctuation">]</span>
<span class="token number">99721</span>
<span class="token number">99720</span>
-------- dev <span class="token function">service</span> end ----------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那么如何进行通信呢？</p></li><li><p>我们继续修改<code>startServer.js</code>方法，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第四种：fork</span>
  <span class="token keyword">const</span> srciprtPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收来自子进程中的消息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------message from child process: start---&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------message from child process: end---&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello child process&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devServive.js</code>文件，增加接收和发送消息事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------- dev service start ----------&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>ppid<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------- dev service end ----------&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 增加以下功能</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;==========massage from main process: start=============&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;==========massage from main process: end================&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
process<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;message from child process&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>终端运行命令，及相应结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
start server
pid <span class="token number">324</span>
-------- dev <span class="token function">service</span> start ----------
<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>
<span class="token punctuation">]</span>
<span class="token number">325</span>
<span class="token number">324</span>
-------- dev <span class="token function">service</span> end ----------
-------message from child process: start---
message from child process
-------message from child process: end---
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>massage from main process: <span class="token assign-left variable">start</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
hello child process
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>massage from main process: <span class="token assign-left variable">end</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据上述打印过程，我们可以看到执行流程如下</p><ul><li>先执行脚本<code>devService.js</code>,其中的<code>console.log</code>率先执行</li><li>然后<code>devService.js</code>中，执行监听函数，并发送消息</li><li><code>startServer.js</code>中，监听到<code>message</code>事件并触发执行，然后打印出来</li><li>接着<code>startServer.js</code>中，发送消息，</li><li>子进程中监听函数执行，打印</li><li>并且在终端中仍然可以看到，这个进程处于一个运行监听状态</li></ul></li></ol><h2 id="_06-子进程运行脚本获取默认端口号" tabindex="-1"><a class="header-anchor" href="#_06-子进程运行脚本获取默认端口号" aria-hidden="true">#</a> 06：子进程运行脚本获取默认端口号</h2><h3 id="如何进行传递信息" tabindex="-1"><a class="header-anchor" href="#如何进行传递信息" aria-hidden="true">#</a> 如何进行传递信息</h3><ol><li><p>修改<code>startServer.js</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 增加第二个参数</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a=1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>,增加代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>终端运行命令及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start

<span class="token punctuation">[</span>
  <span class="token string">&#39;/usr/local/bin/node&#39;</span>,
  <span class="token string">&#39;/Users/gaoyuan/Desktop/imooc-build/lib/start/devService.js&#39;</span>,
  <span class="token string">&#39;a=1&#39;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里就可以拿到传递的参数</p></li></ol><h3 id="实现自定义端口号" tabindex="-1"><a class="header-anchor" href="#实现自定义端口号" aria-hidden="true">#</a> 实现自定义端口号</h3><ol><li><p>修改<code>startServer.js</code>,内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;--port 8080&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>,增加代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> params <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">DEFAUL_PORT</span> <span class="token operator">=</span> <span class="token number">8000</span>
<span class="token keyword">const</span> paramObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
params<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> paramsArr <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
  paramObj<span class="token punctuation">[</span>paramsArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> paramsArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> defaultPort <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token constant">DEFAUL_PORT</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>终端运行命令，及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>imooc-build start

<span class="token punctuation">{</span> port: <span class="token string">&#39;8080&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_07-node-实现端口号是否被占用功能校验" tabindex="-1"><a class="header-anchor" href="#_07-node-实现端口号是否被占用功能校验" aria-hidden="true">#</a> 07: Node 实现端口号是否被占用功能校验</h2><blockquote><p>这里用到一个 npm 库：detect-port</p></blockquote><ol><li><p>安装这个库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> detect-port <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>,代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> detectPort <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;detect-port&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token constant">DEFAUL_PORT</span> <span class="token operator">=</span> <span class="token number">8000</span>
  <span class="token keyword">const</span> paramObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  params<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> paramsArr <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
    paramObj<span class="token punctuation">[</span>paramsArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;--&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> paramsArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> defaultPort <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paramObj<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token constant">DEFAUL_PORT</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newPort <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detectPort</span><span class="token punctuation">(</span>defaultPort<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPort <span class="token operator">===</span> defaultPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;可以使用&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;被占用，建议使用新端口号&#39;</span> <span class="token operator">+</span> newPort<span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>终端运行命令，及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
端口号8080被占用，建议使用新端口号8081
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_08-detect-port-库源码分析" tabindex="-1"><a class="header-anchor" href="#_08-detect-port-库源码分析" aria-hidden="true">#</a> 08: detect-port 库源码分析</h2><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>`,24),v={href:"https://zhuanlan.zhihu.com/p/434454631#detect-port",target:"_blank",rel:"noopener noreferrer"},m=p(`<ul><li><p>源码核心是使用<code>nodeJs</code> 中 <code>net</code> 模块，来判断端口号是否可用, 同时设置最大端口号，是设置值 + 10，如果大于 65535，则是 65535，如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> maxPort <span class="token operator">=</span> port <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>maxPort <span class="token operator">&gt;</span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
maxPort <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如何判断端口被占用呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  port <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port
  server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;get free %s:%s&#39;</span><span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同时这里会有多次判断，全部成功时才会认为这个端口可用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 1. check null</span>
<span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> realPort</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
  <span class="token comment">// 2. check 0.0.0.0</span>
  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 3. check localhost</span>
    <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    	<span class="token operator">...</span>
      <span class="token comment">// 4. check current ip</span>
      <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> address<span class="token punctuation">.</span><span class="token function">ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> realPort</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      	<span class="token operator">...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其中一个一旦失败就会调用<code>handleError</code>方法，他会把端口号<code>port</code>加 1，然后再次执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  port<span class="token operator">++</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">&gt;=</span> maxPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">debug</span><span class="token punctuation">(</span>
      <span class="token string">&#39;port: %s &gt;= maxPort: %s, give up and use random port&#39;</span><span class="token punctuation">,</span>
      port<span class="token punctuation">,</span>
      maxPort<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    port <span class="token operator">=</span> <span class="token number">0</span>
    maxPort <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token function">tryListen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> maxPort<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_09-node-内置库-net-详解" tabindex="-1"><a class="header-anchor" href="#_09-node-内置库-net-详解" aria-hidden="true">#</a> 09：Node 内置库 net 详解</h2>`,2),b={href:"https://www.runoob.com/nodejs/nodejs-net-module.html",target:"_blank",rel:"noopener noreferrer"},g=p(`<h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3><ol><li><p>在<code>devService.js</code>中增加如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> tcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
<span class="token punctuation">{</span> address: <span class="token string">&#39;::&#39;</span>, family: <span class="token string">&#39;IPv6&#39;</span>, port: <span class="token number">8080</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>代码, 把<code>null</code>改为<code>0.0.0.0</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token string">&#39;0,0,0,0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端及结果如下（这里我是本地已经被占用了，所以会有如下报错）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
Error: listen EADDRINUSE: address already <span class="token keyword">in</span> use <span class="token number">0.0</span>.0.0:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>代码, 把<code>8080</code>改为<code>8081</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
<span class="token punctuation">{</span> address: <span class="token string">&#39;0.0.0.0&#39;</span>, family: <span class="token string">&#39;IPv4&#39;</span>, port: <span class="token number">8081</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>继续修改<code>devService.js</code>代码, 把<code>0.0.0.0</code>改为<code>192.3.4.6</code>（一个不存在的<code>IP</code>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;192.3.4.6&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行终端及结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
Error: listen EADDRNOTAVAIL: address not available <span class="token number">192.3</span>.4.6:8081
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="深入使用" tabindex="-1"><a class="header-anchor" href="#深入使用" aria-hidden="true">#</a> 深入使用</h3>`,3),h=n("p",null,"我们写一个双向链接通信的功能",-1),f={href:"https://www.runoob.com/nodejs/nodejs-net-module.html",target:"_blank",rel:"noopener noreferrer"},w=p(`<h4 id="初步链接" tabindex="-1"><a class="header-anchor" href="#初步链接" aria-hidden="true">#</a> 初步链接</h4><ol><li><p>修改<code>devService.js</code>代码中的<code>192.3.4.6</code>改为<code>localhost</code>，并监听<code>connection</code>事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> tcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;socket链接&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后我们建立客户端，新建<code>test/client.js</code>文件，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;connect successful&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们需要执行两个服务，一个服务端，一个客户端，且前者先执行</p></li><li><p>用终端打开传程序执行<code>imooc-build start</code>来执行服务端(这个终端我们成为 Server 终端)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
<span class="token punctuation">{</span> address: <span class="token string">&#39;127.0.0.1&#39;</span>, family: <span class="token string">&#39;IPv4&#39;</span>, port: <span class="token number">8081</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再打开一个终端，执行<code>node test/client.js</code>（这个终端我们称为 Client 终端）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> client.js
connect successful
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第五步执行完成后，我们就可以在 <code>Server终端</code>中看到如下结果, 链接成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>socket链接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="服务端向客户端通信" tabindex="-1"><a class="header-anchor" href="#服务端向客户端通信" aria-hidden="true">#</a> 服务端向客户端通信</h4><ol><li><p>修改<code>devServer.js</code>中的代码，在<code>connection</code>中写入代码，实现由服务端向客户端发送消息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;socket链接&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;服务端向客户端写入数据&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着客户端这边需要进行一个接收，修改<code>client.js</code>，增加<code>.on(&quot;data&quot;)</code>的监听</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:start--------&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里的data 是一个Buffer</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:end--------&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;client end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着先重启<code>Server终端</code>，再重启<code>Client 终端</code></p></li><li><p>我们在<code>Client终端</code>进行观察，<code>Server终端</code>启动大约 2s 后日志打印结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-------客户端接收到了服务端的数据:start--------
服务端向客户端写入数据
-------客户端接收到了服务端的数据:end--------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="客户端向服务端通信" tabindex="-1"><a class="header-anchor" href="#客户端向服务端通信" aria-hidden="true">#</a> 客户端向服务端通信</h4><ol><li><p>我们修改<code>client.js</code>。在客户端内，接收到消息后 1s,向服务端发送消息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:start--------&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里的data 是一个Buffer</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:end--------&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端要给服务端发送消息了&#39;</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello i am clinet&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同样服务端也要进行接受，我们在<code>devServer.js</code>内部的<code>tcpServer.on(&quot;connection&quot;)</code>回调函数内进行监听，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;socket链接&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;服务端向客户端写入数据&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token comment">// ---------------这里我们进行监听通信------------------------</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------服务端接收到了客户端的数据:start--------&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> commandString <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commandString<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>commandString <span class="token operator">===</span> <span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------服务端接收到了客户端的数据:end----------&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着先重启<code>Server终端</code>，再重启<code>Client 终端</code></p></li><li><p>我们在<code>Server终端</code>进行观察，<code>Client终端</code>启动大约 3s 后日志打印结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-------服务端接收到了客户端的数据:start--------
hello i am clinet
-------服务端接收到了客户端的数据:end----------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这里我们还做了一个特殊处理，当发现客户端发送过来的是<code>END</code>时候，就关闭客户端</p></li></ol><h4 id="监听指令" tabindex="-1"><a class="header-anchor" href="#监听指令" aria-hidden="true">#</a> 监听指令</h4><blockquote><p>当发现客户端发送过来的是<code>END</code>时候，就关闭客户端</p></blockquote><ol><li><p>服务端核心代码就是上一小节中的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>commandString <span class="token operator">===</span> <span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着我们在<code>client.js</code>中增加关闭字符串代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接着先重启<code>Server终端</code>，再重启<code>Client 终端</code></p></li><li><p>观察<code>Client终端</code>，最终这里会收到<code>end</code>事件的回调，打印效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>client end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><h4 id="test-client-js" tabindex="-1"><a class="header-anchor" href="#test-client-js" aria-hidden="true">#</a> test/client.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;connect successful&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:start--------&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里的data 是一个Buffer</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------客户端接收到了服务端的数据:end--------&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端要给服务端发送消息了&#39;</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;hello i am clinet&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;client end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="start-devservice-js" tabindex="-1"><a class="header-anchor" href="#start-devservice-js" aria-hidden="true">#</a> start/devService.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> tcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  tcpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tcpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  tcpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;socket链接&#39;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;服务端向客户端写入数据&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------服务端接收到了客户端的数据:start--------&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> commandString <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commandString<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>commandString <span class="token operator">===</span> <span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------服务端接收到了客户端的数据:end----------&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-命令行交互实现方案-inquirer-详解" tabindex="-1"><a class="header-anchor" href="#_10-命令行交互实现方案-inquirer-详解" aria-hidden="true">#</a> 10：命令行交互实现方案 inquirer 详解</h2>`,15),j={href:"https://www.npmjs.com/package/inquirer",target:"_blank",rel:"noopener noreferrer"},y=p(`<ol><li><p>安装<code>inquirer</code>:注意：官方文档中从 v9 以后是 ESmodule 形式了，所以需要安装如下版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> inquirer@^8.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>我们接着<code>devService.js</code>中的<code>else</code>中继续写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newPort <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detectPort</span><span class="token punctuation">(</span>defaultPort<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newPort <span class="token operator">===</span> defaultPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;可以使用&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;被占用，建议使用新端口号&#39;</span> <span class="token operator">+</span> newPort<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment">// 命令行交互</span>
    <span class="token keyword">const</span> questions <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 这里除了 list 还有 rawlist,是带有序号的列表，还有 expand、checkbox、confirm等等</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;请选择&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">choices</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认值可以设置</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端，可以看到效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>imooc-build start
? 请选择 <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>
❯ a
  b
  c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用箭头上下选择后，结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> answer: <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span> // 或者 b、c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>这里我们使用<code>confirm</code>这个交互，最终代码改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newPort <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detectPort</span><span class="token punctuation">(</span>defaultPort<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newPort <span class="token operator">===</span> defaultPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;可以使用&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;端口号&#39;</span> <span class="token operator">+</span> defaultPort <span class="token operator">+</span> <span class="token string">&#39;被占用，建议使用新端口号&#39;</span> <span class="token operator">+</span> newPort<span class="token punctuation">)</span>
     <span class="token comment">// 命令行交互</span>
    <span class="token keyword">const</span> questions <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>defaultPort<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">已被占用，是否启用新端口号</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newPort<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
  <span class="token comment">// 否则就进行下一步操作</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端命令，相应效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
? <span class="token number">8080</span>已被占用，是否启用新端口号8081? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_11-实现配置文件修改后服务自动重启" tabindex="-1"><a class="header-anchor" href="#_11-实现配置文件修改后服务自动重启" aria-hidden="true">#</a> 11：实现配置文件修改后服务自动重启</h2><h3 id="先实现子进程退出时-主进程也退出" tabindex="-1"><a class="header-anchor" href="#先实现子进程退出时-主进程也退出" aria-hidden="true">#</a> 先实现子进程退出时，主进程也退出</h3><ol><li><p>新建<code>lib/service/Service.js</code>，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动服务&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>devService.js</code>中的代码，内容如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Service <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../service/Service&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 否则就进行下一步操作</span>
<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> newPort<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
service<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改<code>lib/start/startServer.js</code>文件，内容如下: 保证当子进程退出时，主进程也退出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chokidar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chokidar&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 2. 监听配置修改</span>
  <span class="token comment">// runWatcher()</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 启动 webpack 服务</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
  <span class="token comment">// 第四种：fork</span>
  <span class="token keyword">const</span> srciprtPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./devService.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;--port 8080&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 子进程退出时，主进程也进行关闭，比如：端口号被占用时选择了拒绝使用新端口号</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行终端,效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
start server
pid <span class="token number">5344</span>
端口号8080被占用，建议使用新端口号8081
? <span class="token number">8080</span>已被占用，是否启用新端口号8081? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时如果选择<code>N</code>,那么程序将直接退出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>? <span class="token number">8080</span>已被占用，是否启用新端口号8081? No
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="再实现-文件修改时重启服务" tabindex="-1"><a class="header-anchor" href="#再实现-文件修改时重启服务" aria-hidden="true">#</a> 再实现，文件修改时重启服务</h3><ol><li><p>修改<code>devServer.js</code>,代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> child

<span class="token keyword">function</span> <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token comment">// 这里需要把 child 设置为全局变量</span>
  child <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>srciprtPath<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;--port 8080&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
  
<span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">)</span>
  child<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
  
<span class="token keyword">function</span> <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 监听配置文件</span>
  <span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./config.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar
    <span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;erro&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;file watch error!&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
  
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start server&#39;</span><span class="token punctuation">)</span>
  <span class="token function">runServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 解开注释</span>
  <span class="token function">runWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时运行终端</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ imooc-build start
start server
? <span class="token number">8080</span>已被占用，是否启用新端口号8081? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> 

// 如果选择Y，就是如下结果
? <span class="token number">8080</span>已被占用，是否启用新端口号8081? Yes
启动服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后更改<code>start/config.js</code>文件，修改为,点击保存，会触发<code>onChange</code>时间，关闭子进程，然后重新启动一个子进程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>? <span class="token number">8080</span>已被占用，是否启用新端口号8081? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span>
// 重新输入 Y，重新运行服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意：这里启动服务后，每次修改文件，重新启动服务时，都会询问我们是否启动新端口号，显然这里是不太理想的，这里有个小细节：如果我们在这个过程中使用<code>p<wbr>rocess.env.xxx</code>来存储一个变量值，第一次端口号确认更新后变为<code>true</code>,后续再根据这个变量值来处理，是不能达到预期的，<strong>因为服务已经重启了,变量值并没有保持</strong></p></li></ol>`,6);function x(S,_){const s=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[a("Node.js 多进程:https://www.runoob.com/nodejs/nodejs-process.html#"),t(s)])]),n("p",null,[n("a",d,[a("玩转 node 子进程 — child_process:https://juejin.cn/post/6882290865763680264"),t(s)])]),k,n("p",null,[n("a",v,[a("detect-port 源码心得:https://zhuanlan.zhihu.com/p/434454631#detect-port"),t(s)])]),m,n("blockquote",null,[n("p",null,[n("a",b,[a("Node.js Net 模块:https://www.runoob.com/nodejs/nodejs-net-module.html"),t(s)])])]),g,n("blockquote",null,[h,n("p",null,[n("a",f,[a("参考：net.Socket: https://www.runoob.com/nodejs/nodejs-net-module.html"),t(s)])])]),w,n("blockquote",null,[n("p",null,[n("a",j,[a("npm 库之 inquire:https://www.npmjs.com/package/inquirer"),t(s)])])]),y])}const q=e(l,[["render",x],["__file","index-15.html.vue"]]);export{q as default};
