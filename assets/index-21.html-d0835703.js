import{_ as t,M as o,p as c,q as i,R as n,t as s,N as e,a1 as p}from"./framework-e8cb8151.js";const l="/assets/image-20230910221851936-fdfb4da0.png",u="/assets/image-20230910221950908-95c1ffdc.png",r={},d=p('<h1 id="_21-使用-webpack-的-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_21-使用-webpack-的-tree-shaking" aria-hidden="true">#</a> 21-使用 Webpack 的 Tree-Shaking</h1><p><img src="https://img1.mukewang.com/5cd9641e0001c6c306390359.jpg" alt="img"></p><blockquote><p>你若要喜爱你自己的价值，你就得给世界创造价值。 ——歌德</p></blockquote><p>Tree-Shaking 是一个前端术语，本意为摇树的意思，在前端术语中通常用于描述移除 JavaScript 上下文中没用的代码，这样可以有效地缩减打包体积。</p><p>关于 Tree-Shaking，Webpack 官方文档有一段很形象的描述：</p><blockquote><p>你可以将应用程序想象成一棵树。绿色表示实际用到的源码和 library，是树上活的树叶。</p><p>灰色表示无用的代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p><p><img src="'+l+'" alt="image-20230910221851936"></p></blockquote>',6),k={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},v=p('<p>在 Webpack 2 中吸取了 Tree-Shaking 功能，并且在 Webpack 中得到实现。</p><h2 id="tree-shaking-实现原理" tabindex="-1"><a class="header-anchor" href="#tree-shaking-实现原理" aria-hidden="true">#</a> Tree-Shaking 实现原理</h2><p>Tree-Shaking 的本质是消除无用的 JavaScript 代码。</p><p>无用代码消除（Dead Code Elimination）广泛存在于传统的编程语言编译器中，编译器可以判断出某些代码根本不影响输出，然后消除这些代码，这个称之为 DCE（Dead Code Elimination）。</p><p>Tree-Shaking 是 DCE 的一种新的实现，Javascript 同传统的编程语言不同的是，JavaScript 绝大多数情况是在浏览器中执行，需要通过网络进行加载，然后解析 JavaScript 文件再执行。</p><p>2018 年年中，据 HTTP Archive 统计：移动端 JavaScript 文件的平均传输大小将近 350KB。</p><p>你要知道，这仅仅是传输的大小。在网络传输的时候，JavaScript 往往是经过压缩的。也就是说，在浏览器解压缩之前，实际的大小会远远大于这个值。而这一点相当重要。</p><p>如果考虑到浏览器处理数据的资源消耗，其中压缩是不得不考虑的。</p><p>一个 300KB 的文件解压缩会达到 900KB，并且在分析和编译的时候，体积依然是 900KB。</p><p><img src="'+u+`" alt="image-20230910221950908"></p><p>由于网络的带宽限制，加载的 JavaScript 文件体积越小，整体解析执行时间更短，所以去除无用代码以减少文件体积，对 JavaScript 来说更有意义</p><p>Tree-Shaking 和传统的 DCE 的方法又不太一样，传统的 DCE 消灭不可能执行的代码：</p><ul><li>程序中没有执行的代码，如不可能进入的分支，<code>return</code> 之后的语句等</li><li>导致 dead variable 的代码，写入变量之后不再读取的代码</li></ul><p>和 DCE 不同的是，Tree-Shaking 则更关注于消除没有用到的代码</p><p>通过之前的章节介绍过，Webpack 是基于 ES6 Modules 静态语法解析的构建工具，Tree-Shaking 之所以能够在 Webpack 实现，也是得益于 <strong>ES6 Modules 静态解析的特性</strong></p><p>ES6 的模块声明保证了依赖关系是提前确定的，使得静态分析成为可能，这样在 Webpack 中代码不需要执行就可以知道是否被使用，自然就知道哪些是无用的代码了。</p><p>ES6 Modules 特点</p><ul><li>ES6 中<code>import</code>和<code>export</code>是显性声明的</li><li>import 的模块名只能是字符串常量</li><li>ES6 模块的依赖关系是可以根据<code>import</code>引用关系推导出来的</li><li>ES6 模块的依赖关系与运行时状态无关</li></ul><p>上面这些 ES6 Modules 的特点是 Tree-Shaking 的基础</p><p>所谓静态分析就是不执行代码，从字面量上对代码进行分析，ES6 之前的模块化，比如我们可以动态 require 一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化</p><p>这是 ES6 Modules 在设计时的一个重要考量，也是为什么没有直接采用 CommonJS，正是基于这个基础上，才使得 Tree-Shaking 成为可能，这也是为什么 rollup.js 和 Webpack 2 都要用 ES6 Module 语法才能实现 Tree-Shaking</p><h2 id="webpack-tree-shaking-代码实战" tabindex="-1"><a class="header-anchor" href="#webpack-tree-shaking-代码实战" aria-hidden="true">#</a> Webpack Tree-Shaking 代码实战</h2><p>在 Webpack 中，Tree-Shaking 是需要配合<code>mode=production</code>来使用的，这是因为 Webpack 的 Tree-Shaking 实际分了两步来实现：</p><ol><li>Webpack 自己来分析 ES6 Modules 的引入和使用情况，去除不使用的<code>import</code>引入</li><li>借助工具（如 <code>uglifyjs-webpack-plugin</code>和<code>terser-webpack-plugin</code>）进行删除，这些工具只在<code>mode=production</code>中会被使用</li></ol><p>我们通过实例来看下这两个步骤，首先我们准备了两个文件：<code>utils.js</code>和<code>index.js</code>文件，其中<code>utils.js</code>中定义了两个方法<code>isNull</code>和<code>isNumber</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isNull&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">===</span> obj
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isNumber&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在<code>index.js</code>中<code>import</code>了<code>utils</code>的两个函数方法，但是实际却只用了<code>isNull</code>的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isNull<span class="token punctuation">,</span> isNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>

<span class="token function">isNull</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们使用<code>webpack --mode=development</code>打包看下结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
<span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意！注意！注意！</span>
    <span class="token comment">// 注意这里打包后_utils__WEBPACK_IMPORTED_MODULE_0__</span>
    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _utils__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>
        <span class="token comment">/*! ./utils */</span> <span class="token string">&#39;./src/utils.js&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">Object</span><span class="token punctuation">(</span>_utils__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">[</span><span class="token string">&#39;isNull&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;./src/utils.js&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* harmony export (binding) */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token string">&#39;isNull&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> isNull<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* harmony export (binding) */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token string">&#39;isNumber&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> isNumber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isNull&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">===</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isNumber&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现<code>index.js</code>的打包结果中，只保留了<code>isNull</code>的使用，而虽然我们同时<code>import</code>了<code>isNumber</code>和<code>isNull</code>，但最终<code>isNumber</code>并没有出现在<code>index.js</code>的打包结果内：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意！注意！注意！</span>
    <span class="token comment">// 注意这里打包后_utils__WEBPACK_IMPORTED_MODULE_0__</span>
    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _utils__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>
        <span class="token comment">/*! ./utils */</span> <span class="token string">&#39;./src/utils.js&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">Object</span><span class="token punctuation">(</span>_utils__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">[</span><span class="token string">&#39;isNull&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是<code>utils.js</code>打包后的内容没有变化，保留了<code>isNumber</code>的方法。</p><p>这说明，Webpack 的 Tree-Shaking 第一步只不过是去掉了无用的引用，但是并没有删除无用的代码，删除无用的代码是<code>mode=production</code>时候使用压缩工具实现的。</p><p>那么我们在使用<code>webpack --mode=production</code>来看下结果，格式化后，我们看到<code>isNumber</code>部分的关键字没有了（因为有<code>console.log(&#39;isNumber&#39;)</code>，可以搜索<code>isNumber</code>字符串关键字）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//... 忽略内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span>
    r<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isNull&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，我们已经理解 Tree-Shaking 的原理和使用方法了。</p><h2 id="tree-shaking-并不是银弹" tabindex="-1"><a class="header-anchor" href="#tree-shaking-并不是银弹" aria-hidden="true">#</a> Tree-Shaking 并不是银弹</h2><p>通过上面的实验，可能大家认为 Tree-Shaking 已经很了不起了，可以帮助我们缩减代码，但是很多情况下 Tree-Shaking 并不是银弹！</p><p>首先基于 Tree-Shaking 的原理，所以我们的代码必须遵循 ES6 的模块规范，即使用 <code>import</code> 和 <code>export</code>语法，如果是 CommonJS 规范（使用<code>require</code>）则无法使用 Tree-Shaking 功能。</p><p>除了这点之外，在使用 Tree-Shaking 还有什么注意点或者 Tree-Shaking 处理不到的地方呢？</p><h3 id="tree-shaking-处理-class" tabindex="-1"><a class="header-anchor" href="#tree-shaking-处理-class" aria-hidden="true">#</a> Tree-Shaking 处理 Class</h3><p>下面我们再来看下 Tree-Shaking 对类的处理，首先创建一个<code>class.js</code>，内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// class.js</span>
<span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在<code>class-entry.js</code>中引入这个<code>Class</code>，并且只是用<code>foo</code>的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// class-entry.js</span>
<span class="token keyword">import</span> Utils <span class="token keyword">from</span> <span class="token string">&#39;./class&#39;</span>
<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望 Tree-Shaking 能够帮我们把不使用的<code>bar</code>方法干掉，但是实际 Tree-Shaking 做不了这样的事情：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token punctuation">{</span>
        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这表明 webpack Tree-Shaking 只处理顶层内容，例如类和对象内部都不会再被分别处理，这主要也是由于 JavaScript 的动态语言特性所致，例如下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Utils <span class="token keyword">from</span> <span class="token string">&#39;./class&#39;</span>
<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript 的编译器并不能识别一个方法名字究竟是以直接调用的形式出现（<code>u.foo()</code>）还是以字符串的形式（<code>u[&#39;foo&#39;]()</code>）或者其他更加离奇的方式。</p><p>因此误删方法只会导致运行出错，反而得不偿失。</p><h3 id="副作用-side-effect-代码" tabindex="-1"><a class="header-anchor" href="#副作用-side-effect-代码" aria-hidden="true">#</a> 副作用（Side Effect）代码</h3><p>知道函数式编程的朋友都会知道<strong>副作用</strong>（Side Effect）这个词，副作用会在我们项目中频繁的出现。</p><p>我们称模块（函数）具有副作用，就是说这个模块是不纯的，这里可以引入<strong>纯函数</strong>的概念：</p><blockquote><p>对于相同的输入就有相同的输出，不依赖外部环境，也不改变外部环境。</p></blockquote><p>符合上面描述的函数就可以称为<strong>纯函数</strong>，不符合就是不纯的，不纯就具有副作用的，是可能对外界造成影响的。我们通过代码示例来理解下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数内调用外部方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 直接使用全局对象</span>
<span class="token keyword">function</span> <span class="token function">goto</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  location<span class="token punctuation">.</span>href <span class="token operator">=</span> url
<span class="token punctuation">}</span>
<span class="token comment">// 直接修改原型</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面几种方式的代码都是有副作用的代码，这样的代码在 Webpack 中因为并不知道代码内部究竟做了什么事情，所以不会被 Tree-Shaking 删除。</p><p>那么怎么解决副作用呢？有两种方式：</p><ol><li>代码中消除副作用</li><li>配置<code>sideEffects</code>告诉 webpack 模块是安全的，不会带有副作用，可以放心优化</li></ol><h4 id="代码中消除副作用" tabindex="-1"><a class="header-anchor" href="#代码中消除副作用" aria-hidden="true">#</a> 代码中消除副作用</h4><p>例如我们按照纯函数的定义，可以将需要用到的方法通过参数的方式传入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数内调用外部方法</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">isNumber<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 直接使用全局对象</span>
<span class="token keyword">function</span> <span class="token function">goto</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  location<span class="token punctuation">.</span>href <span class="token operator">=</span> url
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置sideeffects" tabindex="-1"><a class="header-anchor" href="#配置sideeffects" aria-hidden="true">#</a> 配置<code>sideEffects</code></h4><p>Webpack 的项目中，可以在<code>package.json</code>中使用<code>sideEffects</code>来告诉 webpack 哪些文件中的代码具有副作用，从而对没有副作用的文件代码可以放心的使用 Tree-Shaking 进行优化。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tree-shaking-side-effect&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/utils.js&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果自己的项目是个类库或者工具库，需要发布给其他项目使用，并且项目是使用 ES6 Modules 编写的，没有副作用，那么可以在该项目<code>package.json</code>设置<code>sideEffects:false</code>来告诉使用该项目的 webpack 可以放心的对该项目进行 Tree-Shaking，而不必考虑副作用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Tree-Shaking 对前端项目来说可谓意义重大，是一个极致优化的理想世界，是前端进化的又一个终极理想。</p><p>但是理想是美好的，现实是骨感的，真正发挥 Tree-Shaking 的强大作用，还需要我们在日常的代码中保持良好的开发习惯：</p><ol><li>要使用 Tree-Shaking 必然要保证引用的模块都是 ES6 规范的，很多工具库或者类库都提供了 ES6 语法的库，例如 lodash 的 ES6 版本是<code>lodash-es</code>；</li><li>按需引入模块，避免「一把梭」，例如我们要使用 lodash 的<code>isNumber</code>，可以使用<code>import isNumber from &#39;lodash-es/isNumber&#39;;</code>，而不是<code>import {isNumber} from &#39;lodash-es&#39;</code>；</li><li>减少代码中的副作用代码。</li></ol>`,72),m={href:"https://www.npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer"},b=n("blockquote",null,[n("p",null,"本小节 Webpack 相关面试题："),n("ol",null,[n("li",null,"什么是 Tree-Shaking？"),n("li",null,"怎么在 Webpack 中做 Tree-Shaking？"),n("li",null,"Webpack 中 Tree-Shaking 应该注意什么？")])],-1);function g(_,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[s("Tree-Shaking 最早是由 Rich Harris 在打包工具 "),n("a",k,[s("rollup.js"),e(a)]),s("提出并且实现的，其实在更早，Google Closure Compiler 也做过类似的事情。")]),v,n("blockquote",null,[n("p",null,[s("Tips：另外一些组件库，例如 AntDesign 和 ElementUI 这些组件库，本身自己开发了 "),n("a",m,[s("Babel 的插件"),e(a)]),s("，通过插件的方式来按需引入模块，避免一股脑的引入全部组件。")])]),b])}const w=t(r,[["render",g],["__file","index-21.html.vue"]]);export{w as default};
