import{_ as n,p as s,q as a,a1 as e}from"./framework-e8cb8151.js";const t={},p=e(`<h1 id="_06-ts-高频使用技能-类型断言、类型守卫、自定义守卫-多态-类型守卫组合应用" tabindex="-1"><a class="header-anchor" href="#_06-ts-高频使用技能-类型断言、类型守卫、自定义守卫-多态-类型守卫组合应用" aria-hidden="true">#</a> 06-TS 高频使用技能: 类型断言、类型守卫、自定义守卫+ 多态+类型守卫组合应用</h1><h2 id="_01-本章概述" tabindex="-1"><a class="header-anchor" href="#_01-本章概述" aria-hidden="true">#</a> 01：本章概述</h2><ul><li>类型守卫</li><li>类型转换</li><li>类型守卫相关：typeof 局现性和替代方案</li><li>类型守卫+应用</li><li>自定义守卫</li><li>自定义守卫晋级</li></ul><h2 id="_02-【ts类型断言、转换应用】-类型断言的9种使用场景-1" tabindex="-1"><a class="header-anchor" href="#_02-【ts类型断言、转换应用】-类型断言的9种使用场景-1" aria-hidden="true">#</a> 02:【TS类型断言、转换应用】 类型断言的9种使用场景 1</h2><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义：</h4><p>把两种能有重叠关系的数据类型进行相互转换的一种 ts 语法，把其中一种数据类型转换成另外一种数据类型。类型断言和类型转换产生的效果一样，但是语法格式不同</p><h4 id="ts类型断言语法格式" tabindex="-1"><a class="header-anchor" href="#ts类型断言语法格式" aria-hidden="true">#</a> TS类型断言语法格式</h4><p>A 数据类型的变量 as B 数据类型。A数据类型和 B 数据类型必须具有重叠关系</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token constant">B</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> b <span class="token keyword">as</span> <span class="token constant">C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**理解：**是绕过 TS 编译检查，类型断言就是对编译器说：我就是这个类型了，无序检查</p><h4 id="重要细节-理解重叠关系" tabindex="-1"><a class="header-anchor" href="#重要细节-理解重叠关系" aria-hidden="true">#</a> 重要细节：理解重叠关系</h4><ol><li>如果 A、B是类并且具有继承关系</li></ol><h3 id="类型断言使用场景" tabindex="-1"><a class="header-anchor" href="#类型断言使用场景" aria-hidden="true">#</a> 类型断言使用场景</h3><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><blockquote><p>编译器强制一个类型转换为另外一个类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用&lt;&gt;运算符进行类型转换</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> typeA
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&lt;</span>typeB<span class="token operator">&gt;</span>a

<span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=text]&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-类型守卫相关-js-typeof-局限性和替代方案【常见面试题】" tabindex="-1"><a class="header-anchor" href="#_03-类型守卫相关-js-typeof-局限性和替代方案【常见面试题】" aria-hidden="true">#</a> 03: 类型守卫相关 JS ：typeof 局限性和替代方案【常见面试题】</h2><h3 id="typeof-作用" tabindex="-1"><a class="header-anchor" href="#typeof-作用" aria-hidden="true">#</a> typeof 作用</h3><blockquote><p>typeof 用来检测一个变量或者一个对象的数据类型</p></blockquote><h3 id="typeof-检测范围" tabindex="-1"><a class="header-anchor" href="#typeof-检测范围" aria-hidden="true">#</a> typeof 检测范围</h3><blockquote><p>typeof 检测变量的类型范围包括：string | number | bigint | boolean | symbol | undefined | object | function 等数据类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span> <span class="token comment">// object</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> set<span class="token punctuation">)</span> <span class="token comment">// object</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> map<span class="token punctuation">)</span> <span class="token comment">// object</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Set]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Map]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-深入类型守卫和企业项目中的真实应用场景" tabindex="-1"><a class="header-anchor" href="#_04-深入类型守卫和企业项目中的真实应用场景" aria-hidden="true">#</a> 04：深入类型守卫和企业项目中的真实应用场景</h2><h3 id="为什么要使用类型守卫" tabindex="-1"><a class="header-anchor" href="#为什么要使用类型守卫" aria-hidden="true">#</a> 为什么要使用类型守卫</h3><p>**类型守卫定义: **在语句的块级作用域【if 语句或者条目运算表达式内】缩小变量的一种类型推断的行为</p><p><strong>类型守卫产生时机：<strong>条件语句中遇到下列条件关键字时，会在语句的块级作用域内缩小变量的类型，这种类型推断的行为成为</strong>类型守卫（Type Guard）</strong>.类型守卫可以帮助我们在块级作用域中获得更为需要的精确变量类型</p><ul><li>实例判断：<code>instanceof</code></li><li>属性或者实例方法判断：<code>in</code></li><li>类型判断：<code>typeof</code></li><li>字面量相等判断：<code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code></li></ul><h2 id="_05-ts-自定义守卫和-2-个真实应用场景" tabindex="-1"><a class="header-anchor" href="#_05-ts-自定义守卫和-2-个真实应用场景" aria-hidden="true">#</a> 05：TS 自定义守卫和 2 个真实应用场景</h2><h3 id="自定义类型守卫格式" tabindex="-1"><a class="header-anchor" href="#自定义类型守卫格式" aria-hidden="true">#</a> 自定义类型守卫格式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参：参数类型<span class="token punctuation">[</span>参数类型大多为<span class="token builtin">any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span>形参 <span class="token keyword">is</span> <span class="token constant">A</span>类型<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span> or <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isNum</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> num <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> num <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-自定义守卫晋级-vue3-源码中的自定义守卫" tabindex="-1"><a class="header-anchor" href="#_06-自定义守卫晋级-vue3-源码中的自定义守卫" aria-hidden="true">#</a> 06：自定义守卫晋级：Vue3 源码中的自定义守卫</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">isRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>r<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> r <span class="token keyword">is</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> isRef<span class="token operator">&lt;</span>r<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token operator">:</span>r <span class="token keyword">is</span> Ref<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>r <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>__v_isRef <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-面试题-自定义守卫如何判断-promise-类型" tabindex="-1"><a class="header-anchor" href="#_07-面试题-自定义守卫如何判断-promise-类型" aria-hidden="true">#</a> 07：面试题：自定义守卫如何判断 promise 类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Promise</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","index-06.html.vue"]]);export{u as default};
