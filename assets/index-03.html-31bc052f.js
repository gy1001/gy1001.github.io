import{_ as n,p as s,q as a,a1 as t}from"./framework-e8cb8151.js";const p={},e=t(`<h1 id="_03-深入-ts-核心语法-各种实战应用-下" tabindex="-1"><a class="header-anchor" href="#_03-深入-ts-核心语法-各种实战应用-下" aria-hidden="true">#</a> 03-深入 TS 核心语法+各种实战应用（下）</h1><h2 id="_01-ts-函数类型和相关解构" tabindex="-1"><a class="header-anchor" href="#_01-ts-函数类型和相关解构" aria-hidden="true">#</a> 01：TS 函数类型和相关解构</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TypeStuobj</span> <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span>stuObj<span class="token operator">:</span> TypeStuobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> stuObj<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> stuObj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> stuObj<span class="token operator">:</span> TypeStuobj <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> phone<span class="token operator">:</span> <span class="token string">&#39;11122&#39;</span> <span class="token punctuation">}</span>
<span class="token function">info</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">)</span>

<span class="token comment">// 函数解构</span>
<span class="token keyword">function</span> <span class="token function">subInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token operator">:</span> TypeStuobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name:&#39;</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token string">&#39;age: &#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">subInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> phone<span class="token operator">:</span> <span class="token string">&#39;33333&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-ts-函数类型复杂实战-手写-promise-开头两段源码" tabindex="-1"><a class="header-anchor" href="#_02-ts-函数类型复杂实战-手写-promise-开头两段源码" aria-hidden="true">#</a> 02: TS 函数类型复杂实战：手写 Promise 开头两段源码</h2><h2 id="_03-interface-和-type-的区别" tabindex="-1"><a class="header-anchor" href="#_03-interface-和-type-的区别" aria-hidden="true">#</a> 03：interface 和 type 的区别</h2><p>interface 和 type 类似，都用来定义类型，但是 type 和 interface 区别如下</p><h3 id="_1-定义类型范围不同" tabindex="-1"><a class="header-anchor" href="#_1-定义类型范围不同" aria-hidden="true">#</a> 1. 定义类型范围不同</h3><ul><li>interface 只能定义对象类型或者接口当做名字的函数类型</li><li>type 可以定义任何类型，包括基础类型、联合类型、交叉类型、元组</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type 定义基础类型</span>
<span class="token keyword">type</span> <span class="token class-name">num</span> <span class="token operator">=</span> <span class="token builtin">number</span>

<span class="token comment">// type 定义联合类型-1</span>
<span class="token keyword">type</span> <span class="token class-name">baseType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span>
<span class="token comment">// typ 定义联合类型-2</span>
<span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  branNo<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Plane</span> <span class="token punctuation">{</span>
  No<span class="token operator">:</span> <span class="token builtin">string</span>
  brandNo<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">baseTyp2</span> <span class="token operator">=</span> Car <span class="token operator">|</span> Plane

<span class="token comment">// 元组</span>
<span class="token keyword">type</span> <span class="token class-name">TypeChild</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Car<span class="token punctuation">,</span> Plane<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-接口可以-extends-一个或者多个接口或者类来实现一个接口-也可以继承-type" tabindex="-1"><a class="header-anchor" href="#_2-接口可以-extends-一个或者多个接口或者类来实现一个接口-也可以继承-type" aria-hidden="true">#</a> 2. 接口可以 extends 一个或者多个接口或者类来实现一个接口，也可以继承 type</h3><blockquote><p>但是 type 类型没有继承功能，但一般接口继承 类和 type 的应用场景很少见，记住这样的语法即可</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vue 中的源码</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeTypes
  loc<span class="token operator">:</span> SourceLocation
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TextNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span>
  cotnent<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// interface 可以继承多个类型</span>
<span class="token keyword">interface</span> <span class="token class-name">TextNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token punctuation">,</span> Element <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-用-type-交叉类型-可以让类型中的成员合并成一个新的-type-类型-但接口不能交叉合兵" tabindex="-1"><a class="header-anchor" href="#_3-用-type-交叉类型-可以让类型中的成员合并成一个新的-type-类型-但接口不能交叉合兵" aria-hidden="true">#</a> 3. 用 type 交叉类型 &amp; 可以让类型中的成员合并成一个新的 type 类型，但接口不能交叉合兵</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Group</span> <span class="token operator">=</span> <span class="token punctuation">{</span> groupName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> memberNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">GroupInfo</span> <span class="token operator">=</span> <span class="token punctuation">{</span> info<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> happen<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">GrounMember</span> <span class="token operator">=</span> Group <span class="token operator">&amp;</span> GroupInfo <span class="token comment">// type 交叉类型合兵</span>
<span class="token keyword">let</span> data<span class="token operator">:</span> GrounMember <span class="token operator">=</span> <span class="token punctuation">{</span>
  groupName<span class="token operator">:</span> <span class="token string">&#39;0001&#39;</span><span class="token punctuation">,</span>
  memberNum<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
  info<span class="token operator">:</span> <span class="token string">&#39;信息&#39;</span><span class="token punctuation">,</span>
  happen<span class="token operator">:</span> <span class="token string">&#39;有惊无险&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-接口可以声明合并" tabindex="-1"><a class="header-anchor" href="#_4-接口可以声明合并" aria-hidden="true">#</a> 4：接口可以声明合并</h3><blockquote><p>定义两个相同名称的接口会合并声明，定义两个同名的 type 会出现编译错误</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span>
  stack<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接口合并</span>
<span class="token keyword">let</span> error<span class="token operator">:</span> Error <span class="token operator">=</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token string">&#39;空指针&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;NullPointException&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-元组-tuple" tabindex="-1"><a class="header-anchor" href="#_04-元组-tuple" aria-hidden="true">#</a> 04: 元组 tuple</h2><h3 id="什么是元组" tabindex="-1"><a class="header-anchor" href="#什么是元组" aria-hidden="true">#</a> 什么是元组</h3><p>满足以下三点的数组就是元组</p><ol><li>在定义时每个元素的类型都确定</li><li>元素值的数据类型必须是当前元素定义的类型</li><li>元素值的个数必须和定义时个数相同</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> salary<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span>
  <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;沙僧&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-ts-数组和数组元素怎么样同时为只读" tabindex="-1"><a class="header-anchor" href="#_05-ts-数组和数组元素怎么样同时为只读" aria-hidden="true">#</a> 05：TS 数组和数组元素怎么样同时为只读</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
account<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// Cannot assign to &#39;1&#39; because it is a read-only property.ts(2540)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-可变元组和它的应用场景" tabindex="-1"><a class="header-anchor" href="#_06-可变元组和它的应用场景" aria-hidden="true">#</a> 06: 可变元组和它的应用场景</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 可变元组</span>
<span class="token keyword">let</span> customer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沙僧&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// 可变元组解构</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">...</span>d<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;沙僧&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token comment">// 也可以通过索引取值</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>customer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-可变元组-tag-和-tag-的意义" tabindex="-1"><a class="header-anchor" href="#_07-可变元组-tag-和-tag-的意义" aria-hidden="true">#</a> 07: 可变元组 tag 和 tag 的意义</h2><blockquote><p>如下代码，这样每一个元素的标签和变量名类似，这样就可以快速的看到变量类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>custome<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  custome_<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  age_<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>rest<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;华腾世纪&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;其他&#39;</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08-类-静态属性-何时用静态属性" tabindex="-1"><a class="header-anchor" href="#_08-类-静态属性-何时用静态属性" aria-hidden="true">#</a> 08：类，静态属性，何时用静态属性</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><blockquote><p>类就是拥有相同属性和方法的一系列对象的集合</p></blockquote><h3 id="展开特征" tabindex="-1"><a class="header-anchor" href="#展开特征" aria-hidden="true">#</a> 展开特征</h3><blockquote><p>类是一个模具，是从该类包含的所有具体对象中抽象出来的一个概念，类定义了它所包含的全体对象的静态特征和动态特征</p></blockquote><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><p><strong>people 类</strong></p><ul><li>静态特征[属性]: name, age, address, phone</li><li>动态特征[方法]: doEat, doStep</li></ul><p><strong>desk 类</strong></p><ul><li>静态特征[属性]：height, width, color, price, brandno, material</li><li>动态特征[方法]：load</li></ul><p><strong>order 订单类</strong></p><ul><li>静态特征[属性]：orderid, ordertime, custname</li><li>动态特征[方法]：createOrder, modifyOrder, delOrder, changeBack</li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> _address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
  <span class="token punctuation">}</span>
  <span class="token function">doEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过 ts playground 转换后的代码如下：输出配置改为 es5</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> People <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _age<span class="token punctuation">,</span> _address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
  <span class="token punctuation">}</span>
  People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doStep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> People
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态成员-静态属性-静态方法" tabindex="-1"><a class="header-anchor" href="#静态成员-静态属性-静态方法" aria-hidden="true">#</a> 静态成员：静态属性+静态方法</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 静态属性</span>
  <span class="token keyword">static</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> _address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
    People<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token function">doEat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">doStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过 ts playground 转换后的代码如下：输出配置改为 es5</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> People <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _age<span class="token punctuation">,</span> _address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
    People<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doStep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 静态属性</span>
  People<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">return</span> People
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09-企业项目何时用静态成员" tabindex="-1"><a class="header-anchor" href="#_09-企业项目何时用静态成员" aria-hidden="true">#</a> 09：企业项目何时用静态成员？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类似这种工具类，使用一个就够了，不用多个实例</span>
<span class="token comment">// 实现方式：1. 静态方法 2：单例模式</span>
<span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//</span>
  <span class="token keyword">static</span> <span class="token function">diffDateByDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的天数计算</span>
  <span class="token keyword">static</span> <span class="token function">diffDateByHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的小时计算</span>
  <span class="token keyword">static</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span>restTime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 天 时 分 秒</span>
<span class="token punctuation">}</span>

DateUtil<span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> DateUtil
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-ts-常见面试题——ts-单件-例-模式的两种实现和静态成员执行的时机" tabindex="-1"><a class="header-anchor" href="#_10-ts-常见面试题——ts-单件-例-模式的两种实现和静态成员执行的时机" aria-hidden="true">#</a> 10：TS 常见面试题——TS 单件（例）模式的两种实现和静态成员执行的时机</h2><h3 id="单例模式实现" tabindex="-1"><a class="header-anchor" href="#单例模式实现" aria-hidden="true">#</a> 单例模式实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 单例模式</span>
<span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>
  <span class="token comment">// constructor 变为静态属性</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;constructor&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;formate&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">diffDateByDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的天数计算</span>
  <span class="token function">diffDateByHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的小时计算</span>
  <span class="token function">timeConversion</span><span class="token punctuation">(</span>restTime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 天 时 分 秒</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> dateUtil1 <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span>instance
<span class="token keyword">let</span> dateUtil2 <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span>instance

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dateUtil1 <span class="token operator">===</span> dateUtil2<span class="token punctuation">)</span> <span class="token comment">// true</span>
dateUtil1<span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// formate</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> DataUtil<span class="token punctuation">.</span>instance <span class="token comment">// 可以直接导出实例化的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态成员的执行时机" tabindex="-1"><a class="header-anchor" href="#静态成员的执行时机" aria-hidden="true">#</a> 静态成员的执行时机</h3><p>执行<code>ts-node xxx.ts</code>，<code>xxx.ts</code>为上述代码内容，打印内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>constructor // 先执行 constructor
<span class="token boolean">true</span> // 再执行外部方法
formate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-常见面试题——单件-例-模式的第二种实现" tabindex="-1"><a class="header-anchor" href="#_11-常见面试题——单件-例-模式的第二种实现" aria-hidden="true">#</a> 11：常见面试题——单件（例）模式的第二种实现</h2><blockquote><p>上一节代码有一个问题：我们在未使用静态方法的时候，就已经执行 constructor 创建了静态属性，有些浪费空间。如何修改为：在需要获取实例时候，才进行创建呢？</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">DateUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;constructor&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> instance<span class="token operator">:</span> DateUtil
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
  <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;formate&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">diffDateByDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的天数计算</span>
  <span class="token function">diffDateByHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 两个日期之间的小时计算</span>
  <span class="token function">timeConversion</span><span class="token punctuation">(</span>restTime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 天 时 分 秒</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> dateUtil1 <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> dateUtil2 <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dateUtil1 <span class="token operator">===</span> dateUtil2<span class="token punctuation">)</span> <span class="token comment">// true</span>
dateUtil1<span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// formate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-ts-类-getter-setter-使用和意义" tabindex="-1"><a class="header-anchor" href="#_12-ts-类-getter-setter-使用和意义" aria-hidden="true">#</a> 12: TS 类 getter setter 使用和意义</h2><ul><li>可以加控制语句，对属性进行说明</li><li>可以添加自定义校验逻辑进行拦截</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  _name<span class="token operator">:</span> <span class="token builtin">string</span>
  _age<span class="token operator">:</span> <span class="token builtin">number</span>
  _address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">static</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> _address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>_address <span class="token operator">=</span> _address
    People<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age
  <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以添加自定义校验逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> val
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;年来那个不在合适范围内&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-实战晋级-ts-静态成员、方法拦截器在大中项目中的实战-作业" tabindex="-1"><a class="header-anchor" href="#_13-实战晋级-ts-静态成员、方法拦截器在大中项目中的实战-作业" aria-hidden="true">#</a> 13：实战晋级：TS 静态成员、方法拦截器在大中项目中的实战+作业</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 静态属性</span>
  <span class="token keyword">static</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> _age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> _address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> _name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> _age
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> _address
    People<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token function">doEat</span><span class="token punctuation">(</span>who<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> where<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">who: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,where: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>where<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">doStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dateProp <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;doEat&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> tragetMethod <span class="token operator">=</span> dateProp<span class="token operator">?.</span>value
dateProp<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;前置拦截&#39;</span><span class="token punctuation">)</span>
  <span class="token function">tragetMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;后置拦截&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// dateProp?.value(&#39;传参数&#39;)</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;doEat&#39;</span><span class="token punctuation">,</span> dateProp<span class="token operator">!</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;名字&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;四惠东&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">doEat</span><span class="token punctuation">(</span><span class="token string">&#39;我&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;苹果&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 前置拦截</span>
<span class="token comment">// who: 我,where: 苹果</span>
<span class="token comment">// 后置拦截</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-方法拦截器进一步深度理解和本章总结说明" tabindex="-1"><a class="header-anchor" href="#_14-方法拦截器进一步深度理解和本章总结说明" aria-hidden="true">#</a> 14：方法拦截器进一步深度理解和本章总结说明</h2>`,63),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index-03.html.vue"]]);export{r as default};
