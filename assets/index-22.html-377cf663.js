import{_ as t,M as c,p,q as l,R as n,t as e,N as a,a1 as o}from"./framework-e8cb8151.js";const i={},r=o('<h1 id="_22-为你准备了一份-webpack-工程化最佳实践总结" tabindex="-1"><a class="header-anchor" href="#_22-为你准备了一份-webpack-工程化最佳实践总结" aria-hidden="true">#</a> 22 为你准备了一份 Webpack 工程化最佳实践总结</h1><p>更新时间：2019-06-24 09:33:23</p><p><img src="https://img1.mukewang.com/5cd9642f0001145406400359.jpg" alt="img"></p><p>世界上最快乐的事，莫过于为理想而奋斗。</p><p>——苏格拉底</p><p>介绍了这么多 Webpack 的配置和优化项目，可能大家有点迷糊了，本小节将用小幅内容来总结下 Webpack 的最佳实践，让大家在实际项目中可以直接拿本篇文章的内容作为 CheckList 手册使用！</p><h2 id="使用-npm-scripts-来管理开发命令" tabindex="-1"><a class="header-anchor" href="#使用-npm-scripts-来管理开发命令" aria-hidden="true">#</a> 使用 NPM Scripts 来管理开发命令</h2>',7),d=o(`<li><p>使用 NPM Scripts 来配置开发命令，即</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scripts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字段，这样即使我们修改脚本甚至切换 Webpack 到其他的打包工具，对于团队其他成员来说，使用的命令还是不变的，建议的命令包括：</p><ol><li><code>npm start</code>：相当于<code>npm run start</code>，用于开发命令，快速启动本地开发服务；</li><li><code>npm run build</code>：用于生产环境打包；</li><li>其他命令，类似<code>npm run test/lint</code> 等，根据相关的需要添加即可</li></ol></li>`,1),u=n("code",null,"package.json",-1),k={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},h=o(`<p>下面来看个示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=development webpack --config webpack.config.dev.js --mode development&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack --config webpack.config.prod.js --mode producation&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack --config webpack.config.analyzer.js --mode producation&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack-区分多环境配置" tabindex="-1"><a class="header-anchor" href="#webpack-区分多环境配置" aria-hidden="true">#</a> Webpack 区分多环境配置</h2><p>区分生产环境和开发环境配置，并且封装通用配置，即将 Webpack 配置文件分为：</p><ol><li>通用配置<code>webpack.config.base.js</code>;</li><li>开发环境配置<code>webpack.config.dev.js</code>;</li><li>生产环境配置<code>webpack.config.prod.js</code>;</li></ol><h3 id="webpack-config-base-js" tabindex="-1"><a class="header-anchor" href="#webpack-config-base-js" aria-hidden="true">#</a> <code>webpack.config.base.js</code></h3>`,6),b=n("code",null,"webpack.config.base.js",-1),m=n("code",null,"cross-env",-1),v=n("code",null,"NODE_ENV",-1),g=n("code",null,"NODE_ENV=development",-1),_=n("code",null,"style-loader",-1),f=n("code",null,"production",-1),w={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},y=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.base.js</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> isProduction <span class="token operator">?</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader <span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
              <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token operator">!</span>isProduction<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token operator">!</span>isProduction<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack-config-dev-js" tabindex="-1"><a class="header-anchor" href="#webpack-config-dev-js" aria-hidden="true">#</a> <code>webpack.config.dev.js</code></h3><p>开发环境配置<code>webpack.config.dev.js</code> 主要用于开发环境配置，主要是 devServer、API mock 等相关配置，这部分配置注重的是效率，所以打包速度优化也是很重要的。</p><h3 id="webpack-config-prod-js" tabindex="-1"><a class="header-anchor" href="#webpack-config-prod-js" aria-hidden="true">#</a> <code>webpack.config.prod.js</code></h3><p><code>webpack.config.prod.js</code>用于生产环境配置，这部分配置注重的是线上最优打包配置，包括<code>splitChunks</code>、压缩资源、CDN 路径配置（在<code>output</code>配置）等相关配置，还可以在<code>terser-webpack-plugin</code>配置中强制去除一些忘记删除的调试信息：例如 <code>debugger</code>、<code>alert</code>。</p>`,5),x={href:"https://sentry.io/",target:"_blank",rel:"noopener noreferrer"},j=n("h3",{id:"webpack-config-analyzer-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-config-analyzer-js","aria-hidden":"true"},"#"),e(),n("code",null,"webpack.config.analyzer.js")],-1),S=n("code",null,"webpack.config.analyzer.js",-1),E=n("code",null,"webpack.config.prod.js",-1),C={href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"},q=o('<h3 id="使用-webpack-merge-管理配置文件关系" tabindex="-1"><a class="header-anchor" href="#使用-webpack-merge-管理配置文件关系" aria-hidden="true">#</a> 使用 webpack-merge 管理配置文件关系</h3><p>Webpack 配置文件拆分之后，各自之间都有依赖关系，具体关系如下：</p><ol><li><code>webpack.config.dev.js</code>是合并了<code>webpack.config.base.js</code>和自己的配置；</li><li><code>webpack.config.prod.js</code>合并了<code>webpack.config.base.js</code>和自己的配置；</li><li><code>webpack.config.analyzer.js</code>合并了 <code>webpack.config.prod.js</code>和自己的配置，而<code>webpack.config.prod.js</code>又是来自于<code>webpack.config.base.js</code>。</li></ol>',3),N={href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Object.assign",-1),z=o(`<p>拿<code>webpack.config.analyzer.js</code>来看下<code>webpack-merge</code>怎么使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> prodWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.prod.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 增加 webpack-bundle-analyzer 配置</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合理使用splitchunks" tabindex="-1"><a class="header-anchor" href="#合理使用splitchunks" aria-hidden="true">#</a> 合理使用<code>splitChunks</code></h2><p>在使用<code>splitChunks</code>主要是为了合理的划分资源大小，提高缓存命中率，从而降低资源的加载时间，在划分合理性上一定要注意把握力度，太细不能充分利用 HTTP Cache，太粗又会导致加载速度慢，这个度不好笼统的来定义，但是一般来说可以按照下面三个原则来拆分代码：</p><ol><li>变更频次；</li><li>页面 Router；</li><li>动静分离。</li></ol><h3 id="变更频次" tabindex="-1"><a class="header-anchor" href="#变更频次" aria-hidden="true">#</a> 变更频次</h3><p>代码按照变更频次来使用<code>splitChunks</code>进行拆分，即将这些不经常修改的通用框架和库放到一起作为<code>common</code>代码，然后把业务代码按照页面间公共部分和私有部分进行拆分</p><h3 id="页面-router" tabindex="-1"><a class="header-anchor" href="#页面-router" aria-hidden="true">#</a> 页面 Router</h3><p>不经常变动的框架和库代码拆分完之后，剩下的是业务代码，业务代码可以根据不同的页面之间公共代码拆分到一起，这样可以保证访问一个页面就可以将框架代码和公共代码缓存到浏览器中，再访问第二个页面就不会增加框架代码和公共代码页面请求了。</p><h3 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离" aria-hidden="true">#</a> 动静分离</h3><p>动静分离指的是页面内使用频次不高或者需要<strong>动态异步加载</strong>（使用<code>import()</code>或者<code>require.ensure()</code>）的模块代码可以单独拆分到各自的 chunks，这样保证了页面首屏展现速度，还记得之前介绍过的一个 Case 是页面的播放器代码不经常用吗，那就是根据这个原则来拆分代码的。</p><p>另外类似 Vue、React 这类单页应用，页面 Router 之间的代码也是可以异步加载的，整个页面第一个入口就将大框架和当前页面的代码加载进来了，等点击跳到二级页面的时候只需要动态加载对应 Router 的代码即可。</p><h2 id="多页应用-entry-和-html-管理" tabindex="-1"><a class="header-anchor" href="#多页应用-entry-和-html-管理" aria-hidden="true">#</a> 多页应用 Entry 和 HTML 管理</h2>`,13),P={href:"https://www.imooc.com/read/29/article/271",target:"_blank",rel:"noopener noreferrer"},M=o('<h2 id="指定-chunk-的哈希值" tabindex="-1"><a class="header-anchor" href="#指定-chunk-的哈希值" aria-hidden="true">#</a> 指定 chunk 的哈希值</h2><p>在生产环境打包，一定要配置文件<code>filename</code>的<code>hash</code>，推荐<code>hash</code>配置规则如下：</p><ol><li>JavaScript 文件使用：<code>[chunkhash]</code>；</li><li>CSS 文件使用：<code>[contenthash]</code>；</li><li>其他静态资源用：<code>[hash]</code>，例如图片、字体等，在<code>url-loader</code>中配置<code>[hash]</code></li></ol><h2 id="语法层面的最佳实践" tabindex="-1"><a class="header-anchor" href="#语法层面的最佳实践" aria-hidden="true">#</a> 语法层面的最佳实践</h2>',4),V=n("li",null,"使用 ES6 Modules 语法，以保证 Tree-Shaking 起作用；",-1),B=n("code",null,"@babel/preset-env",-1),A=n("code",null,"useBuiltIns='usage'",-1),L={href:"https://www.imooc.com/read/29/article/266",target:"_blank",rel:"noopener noreferrer"},D=n("li",null,[e("合理使用 Webpack 的魔法注释（magic comments），比如：动态加载的模块要用"),n("code",null,"webpackChunkName"),e("进行命名，还可以重要资源使用"),n("code",null,"webpackPrefetch"),e("提前预加载；")],-1),O=n("li",null,[e("Lodash 使用"),n("code",null,"lodash-es"),e("版本，并且按模块使用；")],-1),R={href:"https://date-fns.org/",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,"移动页面使用 Zepto 代替 jQuery；",-1),H={href:"https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"其他-webpack-配置的最佳实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他-webpack-配置的最佳实践","aria-hidden":"true"},"#"),e(" 其他 Webpack 配置的最佳实践")],-1),G={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},J=o(`<li><p>生产环境使用压缩功能，包括 JavaScript、CSS、图片、SVG 等；</p></li><li><p>合理配置查找路径，减少查找时间，比如设置 <code>alias</code>、添加项目路径、排查<code>node_modules</code>查找等；</p></li><li><p>在 rule 配置上，有</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>include
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>、</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>exclude
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三个可以控制范围的配置，最佳实践是:</p><ul><li>只在 <code>test</code> 和 文件名匹配 中使用正则表达式；</li><li>在 <code>include</code> 和 <code>exclude</code> 中使用绝对路径数组；</li><li>尽量避免 <code>exclude</code>，更倾向于使用 <code>include</code>。</li></ul></li><li><p>icon 类图片文件太多使用 CSS Sprite 来合并图片，防止设置<code>url-loader</code>和<code>svg-url-loader</code>的 limit 值不合理，导致 icon 文件都以 Base64 方式引入 CSS 文件中，导致 CSS 文件过大。</p></li>`,4),U=n("h2",{id:"其他方面最佳实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他方面最佳实践","aria-hidden":"true"},"#"),e(" 其他方面最佳实践")],-1),F={href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"pre-commit",-1),Z={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},$=n("li",null,"组件化开发，公共 UI 组件、公共函数库建设；这里说的比较抽象，需要具体项目来划分，例如我们可以将多个页面常用的 UI 组件抽象出来；也可以将通用的工具函数库建设起来，类似 Lodash 这类库；",-1),K=n("li",null,"选择一个顺手的 CSS 预处理语言，Sass、Less、Stylus，只需要团队使用顺手即可；",-1),X=n("li",null,"指定规则约定，包括代码规范、目录结构，文档规范等；",-1),Y=n("li",null,"前后端分离，选择合适的 Mock 方案；",-1),nn=n("li",null,"将最佳实践做成标准项目的脚手架，新项目使用脚手架工具来创建；",-1),en=n("li",null,"抽象解决方案，融合到 Webpack 配置中，甚至是基于 Webpack 做自己的最佳实践工具链！这个部分在实战篇会用具体案例来介绍一些实用的解决方案。",-1),sn=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),e(" 总结")],-1),an=n("p",null,"本小节主要是对之前的课程进行总结，是一篇系统性的最佳实践总结，通过本篇文章可以让你回顾之前所有的知识点，并且针对关键的知识点进行回顾，本篇文章也是一本操作手册，拿着这个手册来检查自己的项目是否还有可以改进的地方。本篇文章不再是从「配置工程师」角度来学习 Webpack 的配置，而是升华到工程化解决方案的角度，更是起到承上启下的作用，想要打造自己的工程化解决方案，需要掌握基础，然后深入内核原理，最后结合项目实践做到融会贯通，才能利用所学知识解决业务痛点。希望本文可以让大家学会多总结、多抽象业务问题的解决方案的好习惯。",-1),on=n("blockquote",null,[n("p",null,"本小节 Webpack 相关面试题："),n("p",null,"你有什么 Webpack 的最佳实践可以介绍吗？")],-1);function tn(cn,pn){const s=c("ExternalLinkIcon");return p(),l("div",null,[r,n("ol",null,[d,n("li",null,[n("p",null,[e("在"),u,e("中使用"),n("a",k,[e("cross-env"),a(s)]),e("来区分环境。")])])]),h,n("p",null,[e("通用配置"),b,e("用于通用的配置，例如 entry、loader 和 plugin 等，但是有些需要根据"),m,e("传入"),v,e("环境变量进行相关的配置，例如："),g,e("的时候使用"),_,e("，而"),f,e("的时候使用"),n("a",w,[e("mini-css-extract-plugin"),a(s)]),e("的 loader 将生产环境的 CSS 生成单独的 CSS 文件；")]),y,n("blockquote",null,[n("p",null,[e("Tips：生产环境打包不建议生成 sourcemap，如果生成了也不要上传到线上环境，因为如果 sourcemap 上线之后，等于别人就可以通过 Chrome 等工具直接查看线上代码的源码，这是十分危险的！但是如果你项目使用类似"),n("a",x,[e("Sentry"),a(s)]),e("的 JavaScript 报错收集分析平台，可以将 sourcemap 经过 Webpack 生成，上传到对应的平台之后记得删除上线包中的这些文件，防止上传到线上！")])]),j,n("p",null,[e("除了上面的三个配置文件之外，为了方便我们分析打包是否合理做了代码拆分，我们可以增加一个"),S,e("，这个配置实际是继承"),E,e("然后增加"),n("a",C,[e("webpack-bundle-analyzer"),a(s)]),e("插件配置。")]),q,n("p",null,[e("要维护这个配置关系，那么就需要使用"),n("a",N,[e("webpack-merge"),a(s)]),e("这个工具库，webpack-merge 主要是提供一个 Webpack 配置对象 Merge 函数，用来合并两个配置，类似于"),W,e("函数的功能。")]),z,n("p",null,[e("这个之前在 "),n("a",P,[e("《Webpack 中打包 HTML 和多页面配置》"),a(s)]),e("中提到过最佳实践，想继续了解的可以点击链接复习一下。")]),M,n("ol",null,[V,n("li",null,[e("合理使用 Ployfill，推荐使用"),B,e("的"),A,e("方案，这部分可以参考 Babel 部分的 Polyfill 配置介绍"),n("a",L,[e("Polyfill 配置介绍"),a(s)]),e("；")]),D,n("li",null,[e("框架或者类库使用合理的版本，举例说明： "),n("ol",null,[O,n("li",null,[e("Momentjs 使用 "),n("a",R,[e("date-fns"),a(s)]),e("代替，并且按模块使用；")]),T,n("li",null,[e("Vue、San、React 这类框架库根据实际情况选择合适构建版本，以 Vue 为例，其实构建版本包含浏览器版本、ESM 版本、UMD 版本、完整版等多个版本，详细可以"),n("a",H,[e("参考 Vue 构建版本部分的文档"),a(s)])])])])]),I,n("ol",null,[n("li",null,[n("p",null,[e("生产环境使用"),n("a",G,[e("mini-css-extract-plugin"),a(s)]),e("导出 CSS 文件；")])]),J]),U,n("ol",null,[n("li",null,[e("规范化 Git 工作流： "),n("ol",null,[n("li",null,[e("使用 Git Hook，类似 "),n("a",F,[e("Husky"),a(s)]),e("这类 Git Hook 库，可以帮助我们在每次提交之前（"),Q,e("）自动做 lint 检查；")]),n("li",null,[e("使用"),n("a",Z,[e("Commitizen"),a(s)]),e("来规范 Git 的提交 Commit Log；")])])]),$,K,X,Y,nn,en]),sn,an,on])}const rn=t(i,[["render",tn],["__file","index-22.html.vue"]]);export{rn as default};
