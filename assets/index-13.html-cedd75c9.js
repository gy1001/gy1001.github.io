import{_ as e,M as o,p as c,q as l,R as s,t as n,N as p,a1 as t}from"./framework-e8cb8151.js";const i="/assets/image-20230811110035055-5dabfd79.png",u="/assets/image-20230811110048825-02227358.png",r={},k=t('<h1 id="_13-适配器模式-电源适配器" tabindex="-1"><a class="header-anchor" href="#_13-适配器模式-电源适配器" aria-hidden="true">#</a> 13-<strong>适配器模式：电源适配器</strong></h1><p><img src="https://img2.mukewang.com/5d2448570001e29d06400359.jpg" alt="img"></p><blockquote><p>没有智慧的头脑，就像没有蜡烛的灯笼。 —— 托尔斯泰</p></blockquote><p><strong>适配器模式</strong>（Adapter Pattern）又称包装器模式，将一个类（对象）的接口（方法、属性）转化为用户需要的另一个接口，解决类（对象）之间接口不兼容的问题。</p><p>主要功能是进行<strong>转换匹配</strong>，目的是复用已有的功能，而不是来实现新的接口。也就是说，访问者需要的功能应该是已经实现好了的，不需要适配器模式来实现，适配器模式主要是负责把不兼容的接口转换成访问者期望的格式而已。</p>',5),d=s("strong",null,"注意：",-1),v={href:"http://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},m={href:"http://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},b={href:"http://es6.ruanyifeng.com/#docs/destructuring",target:"_blank",rel:"noopener noreferrer"},g={href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"},y=t('<h2 id="_1-你曾见过的适配器模式" tabindex="-1"><a class="header-anchor" href="#_1-你曾见过的适配器模式" aria-hidden="true">#</a> 1. 你曾见过的适配器模式</h2><p>现实生活中我们会遇到形形色色的适配器，最常见的就是转接头了，比如不同规格电源接口的转接头、iPhone 手机的 3.5 毫米耳机插口转接头、DP/miniDP/HDMI/DVI/VGA 等视频转接头、电脑、手机、ipad 的电源适配器，都是属于适配器的范畴。</p><p><img src="'+i+`" alt="image-20230811110035055"></p><p>还有一个比较典型的翻译官场景，比如老板张三去国外谈合作，带了个翻译官李四，那么李四就是作为讲不同语言的人之间交流的适配器 ?，老板张三的话的内容含义没有变化，翻译官将老板的话转换成国外客户希望的形式。</p><p>在类似场景中，这些例子有以下特点：</p><ol><li>旧有接口格式已经不满足现在的需要；</li><li>通过增加适配器来更好地使用旧有接口；</li></ol><h2 id="_2-适配器模式的实现" tabindex="-1"><a class="header-anchor" href="#_2-适配器模式的实现" aria-hidden="true">#</a> 2. 适配器模式的实现</h2><p>我们可以实现一下电源适配器的例子，一开始我们使用的中国插头标准：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> chinaPlug <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;中国插头&#39;</span><span class="token punctuation">,</span>
  <span class="token function">chinaInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始供电&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

chinaPlug<span class="token punctuation">.</span><span class="token function">chinaInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：开始供电</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们出国旅游了，到了日本，需要增加一个日本插头到中国插头的电源适配器，来将我们原来的电源线用起来：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> chinaPlug <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;中国插头&#39;</span><span class="token punctuation">,</span>
  <span class="token function">chinaInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始供电&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> japanPlug <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;日本插头&#39;</span><span class="token punctuation">,</span>
  <span class="token function">japanInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始供电&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 日本插头电源适配器 */</span>
<span class="token keyword">function</span> <span class="token function">japanPlugAdapter</span><span class="token punctuation">(</span><span class="token parameter">plug</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">chinaInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> plug<span class="token punctuation">.</span><span class="token function">japanInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">japanPlugAdapter</span><span class="token punctuation">(</span>japanPlug<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chinaInPlug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 输出：开始供电</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于适配器模式的例子太简单，如果希望看更多的实战相关应用，可以看下一个小节。</p><p>适配器模式的原理大概如下图：</p><p><img src="`+u+`" alt="image-20230811110048825"></p><p>访问者需要目标对象的某个功能，但是这个对象的接口不是自己期望的，那么通过适配器模式对现有对象的接口进行包装，来获得自己需要的接口格式。</p><h2 id="_3-适配器模式在实战中的应用" tabindex="-1"><a class="header-anchor" href="#_3-适配器模式在实战中的应用" aria-hidden="true">#</a> 3. 适配器模式在实战中的应用</h2><p>适配器模式在日常开发中还是比较频繁的，其实可能你已经使用了，但却不知道原来这就是适配器模式啊。 ?</p><p>我们可以推而广之，适配器可以将新的软件实体适配到老的接口，也可以将老的软件实体适配到新的接口，具体如何来进行适配，可以根据具体使用场景来灵活使用。</p><h3 id="_3-1-jquery-ajax-适配-axios" tabindex="-1"><a class="header-anchor" href="#_3-1-jquery-ajax-适配-axios" aria-hidden="true">#</a> 3.1 jQuery.ajax 适配 Axios</h3><p>有的使用 jQuery 的老项目使用 <code>$.ajax</code> 来发送请求，现在的新项目一般使用 Axios，那么现在有个老项目的代码中全是 <code>$.ajax</code>，如果你挨个修改，那么 bug 可能就跟地鼠一样到处冒出来让你焦头烂额，这时可以采用适配器模式来将老的使用形式适配到新的技术栈上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 适配器 */</span>
<span class="token keyword">function</span> <span class="token function">ajax2AxiosAdapter</span><span class="token punctuation">(</span><span class="token parameter">ajaxOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> ajaxOptions<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> ajaxOptions<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
    <span class="token literal-property property">responseType</span><span class="token operator">:</span> ajaxOptions<span class="token punctuation">.</span>dataType<span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> ajaxOptions<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajaxOptions<span class="token punctuation">.</span>success<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>ajaxOptions<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 经过适配器包装 */</span>
$<span class="token punctuation">.</span><span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">ajax2AxiosAdapter</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/demo-url&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;2345&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问成功！&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;访问失败～&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到老的代码表现形式依然不变，但是真正发送请求是通过新的发送方式来进行的。当然你也可以把 Axios 的请求适配到 <code>$.ajax</code> 上，就看你如何使用适配器了。</p><h3 id="_3-2-业务数据适配" tabindex="-1"><a class="header-anchor" href="#_3-2-业务数据适配" aria-hidden="true">#</a> 3.2 业务数据适配</h3><p>在实际项目中，我们经常会遇到树形数据结构和表形数据结构的转换，比如全国省市区结构、公司组织结构、军队编制结构等等。以公司组织结构为例，在历史代码中，后端给了公司组织结构的树形数据，在以后的业务迭代中，会增加一些要求非树形结构的场景。比如增加了将组织维护起来的功能，因此就需要在新增组织的时候选择上级组织，在某个下拉菜单中选择这个新增组织的上级菜单。或者增加了将人员归属到某一级组织的需求，需要在某个下拉菜单中选择任一级组织。</p><p>在这些业务场景中，都需要将树形结构平铺开，但是我们又不能直接将旧有的树形结构状态进行修改，因为在项目别的地方已经使用了老的树形结构状态，这时我们可以引入适配器来将老的数据结构进行适配：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 原来的树形结构 */</span>
<span class="token keyword">const</span> oldTreeData <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;总部&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;一楼&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;财务部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;二楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;生产部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;三楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;开发部&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;三楼&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;软件部&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;四楼&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;后端部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;五楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;前端部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;七楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;技术支持部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;六楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;硬件部&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;四楼&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;DSP部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;八楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ARM部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;二楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;调试部&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">place</span><span class="token operator">:</span> <span class="token string">&#39;三楼&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">/* 树形结构平铺 */</span>
<span class="token keyword">function</span> <span class="token function">treeDataAdapter</span><span class="token punctuation">(</span><span class="token parameter">treeData<span class="token punctuation">,</span> lastArrayData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">treeDataAdapter</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> lastArrayData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> place <span class="token punctuation">}</span> <span class="token operator">=</span> item
    lastArrayData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> place <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> lastArrayData
<span class="token punctuation">}</span>

<span class="token function">treeDataAdapter</span><span class="token punctuation">(</span>oldTreeData<span class="token punctuation">)</span>

<span class="token comment">// 返回平铺的组织结构</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加适配器后，就可以将原先状态的树形结构转化为所需的结构，而并不改动原先的数据，也不对原来使用旧数据结构的代码有所影响。</p><h3 id="_3-3-vue-计算属性" tabindex="-1"><a class="header-anchor" href="#_3-3-vue-计算属性" aria-hidden="true">#</a> 3.3 Vue 计算属性</h3><p>Vue 中的计算属性也是一个适配器模式的实例，以官网的例子为例，我们可以一起来理解一下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Original message: &quot;{{ message }}&quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Hello --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Computed reversed message: &quot;{{ reversedMessage }}&quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- olleH --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">reversedMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>旧有 data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式。</p><h2 id="_4-源码中的适配器模式" tabindex="-1"><a class="header-anchor" href="#_4-源码中的适配器模式" aria-hidden="true">#</a> 4. 源码中的适配器模式</h2>`,32),h=s("code",null,"adapter",-1),f={href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">dispatchXhrRequest</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> requestData <span class="token operator">=</span> config<span class="token punctuation">.</span>data
        <span class="token keyword">var</span> requestHeaders <span class="token operator">=</span> config<span class="token punctuation">.</span>headers

        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 初始化一个请求</span>
        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">buildURL</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span> config<span class="token punctuation">.</span>params<span class="token punctuation">,</span> config<span class="token punctuation">.</span>paramsSerializer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

        <span class="token comment">// 设置最大超时时间</span>
        request<span class="token punctuation">.</span>timeout <span class="token operator">=</span> config<span class="token punctuation">.</span>timeout

        <span class="token comment">// readyState 属性发生变化时的回调</span>
        request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

        <span class="token comment">// 浏览器请求退出时的回调</span>
        request<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleAbort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

        <span class="token comment">// 当请求报错时的回调</span>
        request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

        <span class="token comment">// 当请求超时调用的回调</span>
        request<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handleTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

        <span class="token comment">// 设置HTTP请求头的值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;setRequestHeader&#39;</span> <span class="token keyword">in</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 跨域的请求是否应该使用证书</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>withCredentials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 响应类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>responseType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span>responseType <span class="token operator">=</span> config<span class="token punctuation">.</span>responseType
        <span class="token punctuation">}</span>

        <span class="token comment">// 发送请求</span>
        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>requestData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这个模块主要是对请求头、请求配置和一些回调的设置，并没有对原生的 API 有改动，所以也可以在其他地方正常使用。这个适配器可以看作是对 <code>XMLHttpRequest</code> 的适配，是用户对 Axios 调用层到原生 <code>XMLHttpRequest</code> 这个 API 之间的适配层。</p>`,2),x={href:"https://github.com/axios/axios/blob/v0.19.0/lib/adapters/xhr.js",target:"_blank",rel:"noopener noreferrer"},j=t('<h2 id="_5-适配器模式的优缺点" tabindex="-1"><a class="header-anchor" href="#_5-适配器模式的优缺点" aria-hidden="true">#</a> 5. 适配器模式的优缺点</h2><p>适配器模式的优点：</p><ol><li>已有的功能如果只是接口不兼容，使用适配器适配已有功能，可以使原有逻辑得到<strong>更好的复用</strong>，有助于避免大规模改写现有代码；</li><li><strong>可扩展性良好</strong>，在实现适配器功能的时候，可以调用自己开发的功能，从而方便地扩展系统的功能；</li><li><strong>灵活性好</strong>，因为适配器并没有对原有对象的功能有所影响，如果不想使用适配器了，那么直接删掉即可，不会对使用原有对象的代码有影响；</li></ol><p>适配器模式的缺点：会让系统变得零乱，明明调用 A，却被适配到了 B，如果系统中这样的情况很多，那么对<strong>可阅读性不太友好</strong>。如果没必要使用适配器模式的话，可以考虑重构，如果使用的话，可以考虑尽量把文档完善。</p><h2 id="_6-适配器模式的适用场景" tabindex="-1"><a class="header-anchor" href="#_6-适配器模式的适用场景" aria-hidden="true">#</a> 6. 适配器模式的适用场景</h2><p>当你想用已有对象的功能，却想修改它的接口时，一般可以考虑一下是不是可以应用适配器模式。</p><ol><li>如果你想要使用一个已经存在的对象，但是它的接口不满足需求，那么可以使用适配器模式，把已有的实现转换成你需要的接口；</li><li>如果你想创建一个可以复用的对象，而且确定需要和一些不兼容的对象一起工作，这种情况可以使用适配器模式，然后需要什么就适配什么；</li></ol><h2 id="_7-其他相关模式" tabindex="-1"><a class="header-anchor" href="#_7-其他相关模式" aria-hidden="true">#</a> 7. 其他相关模式</h2><p>适配器模式和代理模式、装饰者模式看起来比较类似，都是属于包装模式，也就是用一个对象来包装另一个对象的模式，他们之间的异同在代理模式中已经详细介绍了，这里再简单对比一下。</p><h3 id="_7-1-适配器模式与代理模式" tabindex="-1"><a class="header-anchor" href="#_7-1-适配器模式与代理模式" aria-hidden="true">#</a> 7.1 适配器模式与代理模式</h3><ol><li><strong>适配器模式：</strong> 提供一个不一样的接口，由于原来的接口格式<strong>不能用了</strong>，提供新的接口以满足新场景下的需求；</li><li><strong>代理模式：</strong> 提供一模一样的接口，由于不能直接访问目标对象，找个代理来帮忙访问，使用者可以就像访问目标对象一样来访问代理对象；</li></ol><h3 id="_7-2-适配器模式、装饰者模式与代理模式" tabindex="-1"><a class="header-anchor" href="#_7-2-适配器模式、装饰者模式与代理模式" aria-hidden="true">#</a> 7.2 适配器模式、装饰者模式与代理模式</h3><ol><li><strong>适配器模式：</strong> 功能不变，只转换了原有接口访问格式；</li><li><strong>装饰者模式：</strong> 扩展功能，原有功能不变且可直接使用；</li><li><strong>代理模式：</strong> 原有功能不变，但一般是经过限制访问的；</li></ol>',13);function w(q,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,s("blockquote",null,[s("p",null,[d,n(" 本文用到 ES6 的语法 "),s("a",v,[n("let/const"),p(a)]),n(" 、"),s("a",m,[n("Class"),p(a)]),n("、"),s("a",b,[n("解构赋值"),p(a)]),n("、"),s("a",g,[n("函数参数的默认值"),p(a)]),n(" 等，如果还没接触过可以点击链接稍加学习 ~")])]),y,s("p",null,[n("Axios 是比较热门的网络请求库，在浏览器中使用的时候，Axios 的用来发送请求的 "),h,n(" 本质上是封装浏览器提供的 API "),s("a",f,[n("XMLHttpRequest"),p(a)]),n("，我们可以看看源码中是如何封装这个 API 的，为了方便观看，进行了一些省略：")]),_,s("p",null,[n("源码可以参见 Github 仓库： "),s("a",x,[n("axios/lib/adapters/xhr.js"),p(a)])]),j])}const D=e(r,[["render",w],["__file","index-13.html.vue"]]);export{D as default};
