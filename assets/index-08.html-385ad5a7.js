import{_ as n,p as s,q as a,a1 as p}from"./framework-e8cb8151.js";const t={},e=p(`<h1 id="_08-泛型晋级" tabindex="-1"><a class="header-anchor" href="#_08-泛型晋级" aria-hidden="true">#</a> 08-泛型晋级</h1><h2 id="_01-为什么要用函数重载" tabindex="-1"><a class="header-anchor" href="#_01-为什么要用函数重载" aria-hidden="true">#</a> 01：为什么要用函数重载？</h2><p>不使用函数重载时候，如果一个函数返回多个类型，使用时候，我们需要使用类型断言才能进行有效的准确提示，显得繁琐，并且不够灵活(假如增加新的类型返回，仍然需要类型断言新的类型)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> MessageTypes <span class="token punctuation">{</span>
  Image <span class="token operator">=</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>
  Audio <span class="token operator">=</span> <span class="token string">&#39;audio&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Message</span> <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">;</span> sendMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> messages<span class="token operator">:</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;你好啊&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;朝辞百度彩云间&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;笑傲江湖&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;西游记&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;水浒传&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">// 类型推断出来 function searchMsg(condition: MessageTypes | number): Message | Message[] | undefined</span>
<span class="token keyword">function</span> <span class="token function">searchMsg</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> MessageTypes <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> condition <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> condition<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> message<span class="token punctuation">.</span>type <span class="token operator">===</span> condition<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里单独使用.属性的时候不能进行提示，需要进行类型断言</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">searchMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Message<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">searchMsg</span><span class="token punctuation">(</span>MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">)</span> <span class="token keyword">as</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>item<span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-使用函数重载改造上节代码【体会好处】" tabindex="-1"><a class="header-anchor" href="#_02-使用函数重载改造上节代码【体会好处】" aria-hidden="true">#</a> 02：使用函数重载改造上节代码【体会好处】</h2><blockquote><p>函数重载：一组具有相同名字，不同参数列表和返回值无关并且具有一个实现签名和一个或者多个重载签名的函数</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> MessageTypes <span class="token punctuation">{</span>
  Image <span class="token operator">=</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>
  Audio <span class="token operator">=</span> <span class="token string">&#39;audio&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Message</span> <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">;</span> sendMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> messages<span class="token operator">:</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;你好啊&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;朝辞百度彩云间&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;笑傲江湖&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;西游记&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageTypes<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> sendMessage<span class="token operator">:</span> <span class="token string">&#39;水浒传&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">searchMsg</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> MessageTypes<span class="token punctuation">)</span><span class="token operator">:</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 重载签名</span>
<span class="token keyword">function</span> <span class="token function">searchMsg</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token comment">// 重载签名</span>
<span class="token comment">// 实现签名</span>
<span class="token keyword">function</span> <span class="token function">searchMsg</span><span class="token punctuation">(</span>
  condition<span class="token operator">:</span> MessageTypes <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token operator">|</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> condition <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> condition<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> messages<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> message<span class="token punctuation">.</span>type <span class="token operator">===</span> condition<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里可以直接进行.语法操作，有提示</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">searchMsg</span><span class="token punctuation">(</span>MessageTypes<span class="token punctuation">.</span>Audio<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>item<span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-盘点函数重载最重要的要点" tabindex="-1"><a class="header-anchor" href="#_03-盘点函数重载最重要的要点" aria-hidden="true">#</a> 03: 盘点函数重载最重要的要点</h2><h2 id="_04-在真实应用中掌握泛型函数" tabindex="-1"><a class="header-anchor" href="#_04-在真实应用中掌握泛型函数" aria-hidden="true">#</a> 04：在真实应用中掌握泛型函数</h2><blockquote><p>准备知识：快速排序法</p></blockquote><h3 id="快速排序法的思想" tabindex="-1"><a class="header-anchor" href="#快速排序法的思想" aria-hidden="true">#</a> 快速排序法的思想</h3><ol><li>先从数列中取出一个数作为基准数</li><li>分区过程，将比这个数大的数全放在它的右边，小于它的数全放在左边</li><li>再对左右区间重复第二步，直到各区间只有一个数</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> left<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> right<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> middle <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1,  1,  2,  3,  5,  7, 9, 11, 11, 19, 30, 30,40, 55]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-深刻掌握泛型函数重载准备——经典复杂排序器" tabindex="-1"><a class="header-anchor" href="#_05-深刻掌握泛型函数重载准备——经典复杂排序器" aria-hidden="true">#</a> 05：深刻掌握泛型函数重载准备——经典复杂排序器</h2><h3 id="泛型函数重载准备" tabindex="-1"><a class="header-anchor" href="#泛型函数重载准备" aria-hidden="true">#</a> 泛型函数重载准备</h3><ol><li>中文排序</li><li>字符串排序</li><li>中文+英文、数字数组排序</li><li>中文+英文、数字数组+数组内部字符串自排序</li><li>字符串自排序 + 中文 + 英文、数字数组+数组内部字符串自排序</li></ol><h3 id="素材" tabindex="-1"><a class="header-anchor" href="#素材" aria-hidden="true">#</a> 素材</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4e00-\\u9fa5]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 中文排序</span>
<span class="token keyword">const</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;武汉&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;石家庄&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;郑州&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;太原&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;济南&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沈阳&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;大连&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>preStr<span class="token punctuation">,</span> curStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> preStr<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>curStr<span class="token punctuation">,</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sortChinese</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;大连&#39;, &#39;济南&#39;,&#39;沈阳&#39;, &#39;石家庄&#39;,&#39;太原&#39;, &#39;武汉&#39;,&#39;郑州&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何将两个排序结合起来呢？需要判断是否是中文</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isChinese</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4e00-\\u9fa5]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
  <span class="token keyword">return</span> chineseArr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_06-深入理解为什么要用泛型函数重载" tabindex="-1"><a class="header-anchor" href="#_06-深入理解为什么要用泛型函数重载" aria-hidden="true">#</a> 06：深入理解为什么要用泛型函数重载</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 字符串排序</span>
<span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> strArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> strSortArr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span>
  <span class="token keyword">return</span> strSortArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合以上写的方法，综合代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">sort</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;大连&#39;, &#39;济南&#39;,&#39;沈阳&#39;, &#39;石家庄&#39;,&#39;太原&#39;, &#39;武汉&#39;,&#39;郑州&#39;]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">&#39;srcfgfdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// cdfffgrs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-视频作业——泛型函数中分化出来子功能" tabindex="-1"><a class="header-anchor" href="#_07-视频作业——泛型函数中分化出来子功能" aria-hidden="true">#</a> 07: 视频作业——泛型函数中分化出来子功能</h2><h2 id="_10-深入泛型工厂函数类型和拓展知识" tabindex="-1"><a class="header-anchor" href="#_10-深入泛型工厂函数类型和拓展知识" aria-hidden="true">#</a> 10: 深入泛型工厂函数类型和拓展知识</h2><h3 id="泛型工厂函数类型定义" tabindex="-1"><a class="header-anchor" href="#泛型工厂函数类型定义" aria-hidden="true">#</a> 泛型工厂函数类型定义</h3><blockquote><p>可以代表任意一个类构造函数的函数类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">CommercialBank</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> address<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;北京&#39;</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span>
  <span class="token keyword">static</span> count<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token function">loan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; 银行贷款&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注意这里的 new</span>
<span class="token class-name"><span class="token keyword">type</span></span> ConstructorType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> CommercialBank
<span class="token keyword">let</span> CommericalBankInstance<span class="token operator">:</span> ConstructorType <span class="token operator">=</span> CommercialBank

<span class="token keyword">const</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommericalBankInstance</span><span class="token punctuation">(</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;水帘洞&#39;</span><span class="token punctuation">)</span>
customer<span class="token punctuation">.</span><span class="token function">loan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 孙悟空 银行贷款</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-泛型工厂函数类型的真实应用" tabindex="-1"><a class="header-anchor" href="#_11-泛型工厂函数类型的真实应用" aria-hidden="true">#</a> 11: 泛型工厂函数类型的真实应用</h2><blockquote><p>如何使用泛型工厂函数类型，来为所有的类提供一个通用的构造器，目前在构造器中先不关心参数，只是在创建实例时候打印一条日志信息（通用的语句），其实它是装饰器的一个雏形（类似的一个思想）</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">CommercialBank</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> address<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;北京&#39;</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span>
  <span class="token keyword">static</span> count<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token function">loan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; 银行贷款&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意这里的 new</span>
<span class="token class-name"><span class="token keyword">type</span></span> ConstructorType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token keyword">interface</span> <span class="token class-name">ConstructroInter</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用接口、type声明类型，效果是相同的</span>
<span class="token comment">// function createFactoryConstructor(constructorType: new (...args: any) =&gt; any) {</span>
<span class="token comment">// function createFactoryConstructor(constructorType: ConstructorType) {</span>
<span class="token keyword">function</span> <span class="token function">createFactoryConstructor</span><span class="token punctuation">(</span>constructorType<span class="token operator">:</span> ConstructroInter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>constructorType<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39; 被创建了&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">constructorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">createFactoryConstructor</span><span class="token punctuation">(</span>CommercialBank<span class="token punctuation">)</span> <span class="token comment">// 执行时候，会打印：CommercialBank 被创建了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-交叉类型" tabindex="-1"><a class="header-anchor" href="#_12-交叉类型" aria-hidden="true">#</a> 12: 交叉类型</h2><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Obj1</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Obj2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> d<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Obj3</span> <span class="token operator">=</span> Obj1 <span class="token operator">&amp;</span> Obj2 <span class="token comment">// 两者的并集</span>
<span class="token keyword">const</span> o3<span class="token operator">:</span> Obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token string">&#39;金蝉子&#39;</span> <span class="token punctuation">}</span>

<span class="token comment">// 交叉类型表示取两个类型的并集，用在基本类型上是没有意义的，等同于声明了never</span>
<span class="token keyword">type</span> <span class="token class-name">Obj4</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span> <span class="token comment">// 推断出：type Obj4 = never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-通用交叉方法" tabindex="-1"><a class="header-anchor" href="#_13-通用交叉方法" aria-hidden="true">#</a> 13: 通用交叉方法</h2><h2 id="_14-代码实战演练" tabindex="-1"><a class="header-anchor" href="#_14-代码实战演练" aria-hidden="true">#</a> 14: 代码实战演练</h2><blockquote><p>如何用交叉类型 <strong>+</strong> 方法重载 <strong>+</strong> 泛型 <strong>rest</strong> 参数合参并 <strong>n</strong> 多个对象。</p></blockquote>`,39),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","index-08.html.vue"]]);export{r as default};
