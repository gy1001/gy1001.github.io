import{_ as o,M as p,p as c,q as i,R as n,t as a,N as e,a1 as t}from"./framework-e8cb8151.js";const l={},u=t(`<h1 id="vue-源码探究相关问题" tabindex="-1"><a class="header-anchor" href="#vue-源码探究相关问题" aria-hidden="true">#</a> Vue 源码探究相关问题</h1><h2 id="_1-为什么不推荐挂载-root-实例到-html-或者-body-上" tabindex="-1"><a class="header-anchor" href="#_1-为什么不推荐挂载-root-实例到-html-或者-body-上" aria-hidden="true">#</a> 1. 为什么不推荐挂载 root 实例到 html 或者 body 上</h2><blockquote><p>我们在 Vue 官方文档中，肯定看到过这样一段提示内容：el 提供的元素只能作为挂载点。不同于 Vue 1.x，所有的挂载元素会被 Vue 生成的 DOM 替换。因此不推荐挂载 root 实例到 html 或者 body 上。</p></blockquote><p>注意：在$mount 方法中，我们也可以看到这样一段代码，它提示我们不能直接挂载到 html 或 body 上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 为什么不能呢？因为 <strong>$mount 方法执行后，会直接替换挂载节点上面的内容，如果直接挂载 html 或者 body 上，很有可能会丢失掉一些东西，比如：meta，link 或者 script 等。</strong></p>`,6),r={href:"https://wangtunan.github.io/blog/vueAnalysis/component/mount.html#%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="_2-vue-的庐山真面目是一个-function-的类-为什么不用-es6-的-class-去实现呢" tabindex="-1"><a class="header-anchor" href="#_2-vue-的庐山真面目是一个-function-的类-为什么不用-es6-的-class-去实现呢" aria-hidden="true">#</a> 2. Vue 的庐山真面目是一个 Function 的类，为什么不用 ES6 的 Class 去实现呢？</h2><p>Vue 的定义代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./init&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> stateMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> renderMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./render&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> eventsMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./events&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lifecycleMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./lifecycle&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> warn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../util/index&#39;</span>

<span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>
<span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解答：我们往后看这里有很多 <code>xxxMixin</code> 的函数调用，并把 <code>Vue</code> 当参数传入，它们的功能都是给 <code>Vue</code> 的 <code>prototype</code> 上扩展一些方法（这里具体的细节会在之后的文章介绍，这里不展开），<code>Vue</code> 按功能把这些扩展分散到多个模块中去实现，而不是在一个模块里实现所有，这种方式是用 <code>Class</code> 难以实现的。这么做的好处是非常方便代码的维护和管理，这种编程技巧也非常值得我们去学习</p>`,4),k={href:"https://ustbhuangyi.github.io/vue-analysis/v2/prepare/entrance.html#vue-%E7%9A%84%E5%85%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[a("参考资料"),e(s)])]),d,n("p",null,[n("a",k,[a("参考资料"),e(s)])])])}const f=o(l,[["render",v],["__file","vue-question.html.vue"]]);export{f as default};
