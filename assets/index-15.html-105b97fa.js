import{_ as e,p as i,q as t,a1 as s}from"./framework-e8cb8151.js";const a="/assets/image-20230728224958892-3c0b1da2.png",d="/assets/image-20230728225045197-14176ca9.png",p="/assets/image-20230728225051072-293b1c7e.png",c="/assets/image-20230728225118773-50838289.png",o="/assets/image-20230728225135303-8e763d73.png",n="/assets/image-20230728225143148-b358b404.png",r="/assets/image-20230728225150016-b8794bc0.png",g="/assets/image-20230728225156488-3d5dc9d4.png",m="/assets/image-20230728225207059-9e78d64c.png",u="/assets/image-20230728225215697-7a0ddb6f.png",l="/assets/image-20230728225222518-71887c99.png",h="/assets/image-20230728225228481-6838c701.png",b="/assets/image-20230728225234607-c70b4514.png",_={},v=s('<h1 id="_15-配置多个远端仓库-把代码推送到不同的服务器" tabindex="-1"><a class="header-anchor" href="#_15-配置多个远端仓库-把代码推送到不同的服务器" aria-hidden="true">#</a> 15-配置多个远端仓库：把代码推送到不同的服务器</h1><p><img src="'+a+'" alt="image-20230728224958892"></p><blockquote><p>人生太短，要干的事太多，我要争分夺秒。 ——爱迪生</p></blockquote><p>有时候，我们需要将一个改动推送到多个远程仓库去，比如说你做了一个开源项目，既想发布到 GitHub 又想发布到国内的码云上，如果建立两个文件夹分别去推送，就非常麻烦，其实 Git 已经有相关的功能，在这一节中我们来学习如何使用。</p><h2 id="_15-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_15-1-环境准备" aria-hidden="true">#</a> 15.1 环境准备</h2><p>首先我去 GitHub 上创建一个远程仓库，创建地址为 <code>https://github.com/new</code> ，如下图所示：</p><p><img src="'+d+'" alt="image-20230728225045197"></p><p>在表单下方有一个提交表单按钮，点击后会自动跳转到仓库页面，如下图所示：</p><p><img src="'+p+`" alt="image-20230728225051072"></p><p>在上图中可以看到有一个仓库地址，我们把仓库地址复制一下，然后打开终端窗口，然后在终端窗口中查看当前的地址，参考命令如下图所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，返回信息如下图所示：</p><p><img src="`+c+`" alt="image-20230728225118773"></p><p>在上图中可以看到远程仓库地址信息，我们在这些信息中可以看到两个 origin，这两个 origin 是代表远程仓库的一个名字，默认情况下就是 origin；</p><p>在地址后面有一个括号里面有 <code>push</code> 和 <code>fetch</code> 两种，当我们执行 <code>git push</code> 时候他会调用对应 <code>push</code> 地址，同样当我们执行命令 <code>git featch</code> 的时候则会调用 <code>fetch</code> 地址；当拉去代码之后默认情况下会产生一个远程仓库 origin，并且对应的 push 地址也只有一个；</p><h2 id="_15-2-添加多个仓库" tabindex="-1"><a class="header-anchor" href="#_15-2-添加多个仓库" aria-hidden="true">#</a> 15.2 添加多个仓库</h2><p>在前面的内容中，我们学习了使用命令 <code>git push</code> 把代码推送到远程仓库中去，其实这条命令是一条简写的命令，因为我们没有指定仓库地址完整的命令是 <code>git push origin</code>，在执行简写命令时 Git 会找一个默认的仓库；如果我们想把代码往多个代码托管平台推送只需要添加一个远程地址即可，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote add github https://github.com/78778443/gittest.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令参数 <code>git remote add</code> 是添加远程仓库地址固定写法，<code>github</code> 是我给远程仓库自定义的一个名字，<code>https://github.com/78778443/gittest.git</code> 则是的远程仓库地址，命令执行完成之后，我们再使用 <code>git remote -v</code> 查看远程地址列表，返回信息如下图所示：</p><p><img src="`+o+`" alt="image-20230728225135303"></p><p>在图中可以看到已经新增了一个 <code>github</code> 的仓库地址，接下来，我们使用完整的推送命令把代码推送到 GitHub 的代码仓库当中去，参考推送命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push github
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，返回的信息如下图所示：</p><p><img src="`+n+'" alt="image-20230728225143148"></p><p>在图中可以看到，GitHub 需要让我进行认证，输入用户名和密码之后，成功把本地代码推送到了远程仓库中；我们回到 GitHub 网页中，可以看到已经上传上来，如下图所示：</p><p><img src="'+r+'" alt="image-20230728225150016"></p><p>在上图中可以看到 GitHub 页面当中已经可以看到我们刚才推送上来的代码。</p><p>接下来我们再尝试用简写的推送命令推送代码，看看会把修改推送到什么哪一个仓库中去，执行的命令和返回结果如下图所示：</p><p><img src="'+g+`" alt="image-20230728225156488"></p><p>在图中可以看到，当我使用简写的推送命令进行推送时候，并不会往 GitHub 这个仓库进行推送，只会往默认的 origin 仓库中推送。</p><p>在这里说一个小技巧，如果我们想将通过简写的命令让他推送到 GitHub 而不是 origin，可以在推送的命令中加上 <code>-u</code> 参数来进行修改默指定的仓库，参考命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u github 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句命令执行之后，会首先将代码推送到 GitHub 仓库中，并且以后使用 <code>git push</code> 推送时也会往 GitHub 中推送，执行结果如下图所示：</p><p><img src="`+m+'" alt="image-20230728225207059"></p><p>在返回的信息中可以看到已经把当前的内容推送到 Git 仓库中，并且成功修改了推送默认的仓库。</p><p>接下来我们来验证一下刚才的操作正确性，我们随意修改一个文件里面的内容，然后提交到本地仓库，最后使用简写的推送命令 <code>git push</code> 进行推送，执行的命令和返回结果如下图所示：</p><p><img src="'+u+'" alt="image-20230728225215697"></p><p>在图中可以看到当执行了 <code>git push</code> 之后，已经变成了 GitHub 的地址，说明修改默认的推送地址成功。</p><h3 id="_15-3-一个仓库多个地址" tabindex="-1"><a class="header-anchor" href="#_15-3-一个仓库多个地址" aria-hidden="true">#</a> 15.3 一个仓库多个地址</h3><p>有时候你可能还有这种需求，就是想推送的时候执行一条命令，就把代码往两个地址同时推送，这种操作 Git 也是支持的；和上一小节往 Git 中配置两个远程仓库的方式略有不同，我们可以在一个远程仓库中配置多个 push 地址，下面我们来实践一下。</p><p>首先我们把上面一小节中添加的 GitHub 地址给删除，让仓库恢复成之前的效果，删除 GitHub 远程仓库执行的命令和删除验证的结果如下图所示：</p><p><img src="'+l+`" alt="image-20230728225222518"></p><p>在上图中可以看到已经删除成功， 使用 <code>git remote -v</code> 展示的只保留了 origin 的地址。</p><p>接着我们往 origin 仓库中添加多个地址，参考的命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote set-url --add origin https://github.com/78778443/gittest.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行之后，我们再次使用 <code>git remote -v</code> 来查看远程仓库地址信息，返回结果如下图所示：</p><p><img src="`+h+'" alt="image-20230728225228481"></p><p>在返回的信息中，可以看到在 origin 远程仓库中增加了一个 GitHub 的 push 地址，这个时候我们再去修改内容，然后推送查看效果，如下图所示：</p><p><img src="'+b+'" alt="image-20230728225234607"></p><p>在上图中可以看到，只需要执行 <code>git push</code> 命令，Git 就会一次性把本地仓库的代码推送到多个远程地址去。</p><h2 id="_15-4-小结" tabindex="-1"><a class="header-anchor" href="#_15-4-小结" aria-hidden="true">#</a> 15.4 小结</h2><p>在这一节中我们主要学习了 Git 远程仓库的管理，解决如何把一份代码快速推送到多个仓库中，主要有以下两种方式：</p><ol><li>新增多个远程仓库，不同的仓库配置不同的仓库地址</li><li>新增多个远程仓库地址，把多个远程仓库地址放到一个仓库中</li></ol>',53),x=[v];function G(f,H){return i(),t("div",null,x)}const q=e(_,[["render",G],["__file","index-15.html.vue"]]);export{q as default};
